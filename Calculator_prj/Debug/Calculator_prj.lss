
Calculator_prj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00800060  000034d2  00003566  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000124  0080019e  0080019e  000036a4  2**0
                  ALLOC
  3 .stab         00003480  00000000  00000000  000036a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000022de  00000000  00000000  00006b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00008e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020e  00000000  00000000  00008fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268b  00000000  00000000  000091d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014d1  00000000  00000000  0000b85b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012ab  00000000  00000000  0000cd2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000dfd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fb  00000000  00000000  0000e1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a0a  00000000  00000000  0000e4b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eebd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ed       	ldi	r30, 0xD2	; 210
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3c       	cpi	r26, 0xC2	; 194
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <main>
      8a:	0c 94 67 1a 	jmp	0x34ce	; 0x34ce <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 30 1a 	jmp	0x3460	; 0x3460 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e6       	ldi	r26, 0x6D	; 109
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3c 1a 	jmp	0x3478	; 0x3478 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3c 1a 	jmp	0x3478	; 0x3478 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 30 1a 	jmp	0x3460	; 0x3460 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e6       	ldi	r24, 0x6D	; 109
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e6       	ldi	r22, 0x6D	; 109
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 54 1a 	jmp	0x34a8	; 0x34a8 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3c 1a 	jmp	0x3478	; 0x3478 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3c 1a 	jmp	0x3478	; 0x3478 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3c 1a 	jmp	0x3478	; 0x3478 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3c 1a 	jmp	0x3478	; 0x3478 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 37 05 	call	0xa6e	; 0xa6e <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__epilogue_restores__+0x20>

00000a6e <__clzsi2>:
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	7b 01       	movw	r14, r22
     a78:	8c 01       	movw	r16, r24
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	e8 16       	cp	r14, r24
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	f8 06       	cpc	r15, r24
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	08 07       	cpc	r16, r24
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	18 07       	cpc	r17, r24
     a8a:	88 f4       	brcc	.+34     	; 0xaae <__clzsi2+0x40>
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	e8 16       	cp	r14, r24
     a90:	f1 04       	cpc	r15, r1
     a92:	01 05       	cpc	r16, r1
     a94:	11 05       	cpc	r17, r1
     a96:	31 f0       	breq	.+12     	; 0xaa4 <__clzsi2+0x36>
     a98:	28 f0       	brcs	.+10     	; 0xaa4 <__clzsi2+0x36>
     a9a:	88 e0       	ldi	r24, 0x08	; 8
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	17 c0       	rjmp	.+46     	; 0xad2 <__clzsi2+0x64>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	a0 e0       	ldi	r26, 0x00	; 0
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	12 c0       	rjmp	.+36     	; 0xad2 <__clzsi2+0x64>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	e8 16       	cp	r14, r24
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	f8 06       	cpc	r15, r24
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	08 07       	cpc	r16, r24
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	18 07       	cpc	r17, r24
     abe:	28 f0       	brcs	.+10     	; 0xaca <__clzsi2+0x5c>
     ac0:	88 e1       	ldi	r24, 0x18	; 24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__clzsi2+0x64>
     aca:	80 e1       	ldi	r24, 0x10	; 16
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	20 e2       	ldi	r18, 0x20	; 32
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	28 1b       	sub	r18, r24
     adc:	39 0b       	sbc	r19, r25
     ade:	4a 0b       	sbc	r20, r26
     ae0:	5b 0b       	sbc	r21, r27
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__clzsi2+0x7e>
     ae4:	16 95       	lsr	r17
     ae6:	07 95       	ror	r16
     ae8:	f7 94       	ror	r15
     aea:	e7 94       	ror	r14
     aec:	8a 95       	dec	r24
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__clzsi2+0x76>
     af0:	f7 01       	movw	r30, r14
     af2:	eb 58       	subi	r30, 0x8B	; 139
     af4:	ff 4f       	sbci	r31, 0xFF	; 255
     af6:	80 81       	ld	r24, Z
     af8:	28 1b       	sub	r18, r24
     afa:	31 09       	sbc	r19, r1
     afc:	41 09       	sbc	r20, r1
     afe:	51 09       	sbc	r21, r1
     b00:	c9 01       	movw	r24, r18
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	08 95       	ret

00000b0c <__pack_f>:
     b0c:	df 92       	push	r13
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	fc 01       	movw	r30, r24
     b18:	e4 80       	ldd	r14, Z+4	; 0x04
     b1a:	f5 80       	ldd	r15, Z+5	; 0x05
     b1c:	06 81       	ldd	r16, Z+6	; 0x06
     b1e:	17 81       	ldd	r17, Z+7	; 0x07
     b20:	d1 80       	ldd	r13, Z+1	; 0x01
     b22:	80 81       	ld	r24, Z
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	48 f4       	brcc	.+18     	; 0xb3a <__pack_f+0x2e>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 e1       	ldi	r26, 0x10	; 16
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	e8 2a       	or	r14, r24
     b32:	f9 2a       	or	r15, r25
     b34:	0a 2b       	or	r16, r26
     b36:	1b 2b       	or	r17, r27
     b38:	a5 c0       	rjmp	.+330    	; 0xc84 <__pack_f+0x178>
     b3a:	84 30       	cpi	r24, 0x04	; 4
     b3c:	09 f4       	brne	.+2      	; 0xb40 <__pack_f+0x34>
     b3e:	9f c0       	rjmp	.+318    	; 0xc7e <__pack_f+0x172>
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	21 f4       	brne	.+8      	; 0xb4c <__pack_f+0x40>
     b44:	ee 24       	eor	r14, r14
     b46:	ff 24       	eor	r15, r15
     b48:	87 01       	movw	r16, r14
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <__pack_f+0x4a>
     b4c:	e1 14       	cp	r14, r1
     b4e:	f1 04       	cpc	r15, r1
     b50:	01 05       	cpc	r16, r1
     b52:	11 05       	cpc	r17, r1
     b54:	19 f4       	brne	.+6      	; 0xb5c <__pack_f+0x50>
     b56:	e0 e0       	ldi	r30, 0x00	; 0
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	96 c0       	rjmp	.+300    	; 0xc88 <__pack_f+0x17c>
     b5c:	62 81       	ldd	r22, Z+2	; 0x02
     b5e:	73 81       	ldd	r23, Z+3	; 0x03
     b60:	9f ef       	ldi	r25, 0xFF	; 255
     b62:	62 38       	cpi	r22, 0x82	; 130
     b64:	79 07       	cpc	r23, r25
     b66:	0c f0       	brlt	.+2      	; 0xb6a <__pack_f+0x5e>
     b68:	5b c0       	rjmp	.+182    	; 0xc20 <__pack_f+0x114>
     b6a:	22 e8       	ldi	r18, 0x82	; 130
     b6c:	3f ef       	ldi	r19, 0xFF	; 255
     b6e:	26 1b       	sub	r18, r22
     b70:	37 0b       	sbc	r19, r23
     b72:	2a 31       	cpi	r18, 0x1A	; 26
     b74:	31 05       	cpc	r19, r1
     b76:	2c f0       	brlt	.+10     	; 0xb82 <__pack_f+0x76>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	2a c0       	rjmp	.+84     	; 0xbd6 <__pack_f+0xca>
     b82:	b8 01       	movw	r22, r16
     b84:	a7 01       	movw	r20, r14
     b86:	02 2e       	mov	r0, r18
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x86>
     b8a:	76 95       	lsr	r23
     b8c:	67 95       	ror	r22
     b8e:	57 95       	ror	r21
     b90:	47 95       	ror	r20
     b92:	0a 94       	dec	r0
     b94:	d2 f7       	brpl	.-12     	; 0xb8a <__pack_f+0x7e>
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	04 c0       	rjmp	.+8      	; 0xba8 <__pack_f+0x9c>
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	aa 1f       	adc	r26, r26
     ba6:	bb 1f       	adc	r27, r27
     ba8:	2a 95       	dec	r18
     baa:	d2 f7       	brpl	.-12     	; 0xba0 <__pack_f+0x94>
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	a1 09       	sbc	r26, r1
     bb0:	b1 09       	sbc	r27, r1
     bb2:	8e 21       	and	r24, r14
     bb4:	9f 21       	and	r25, r15
     bb6:	a0 23       	and	r26, r16
     bb8:	b1 23       	and	r27, r17
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	21 f0       	breq	.+8      	; 0xbca <__pack_f+0xbe>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	9a 01       	movw	r18, r20
     bcc:	ab 01       	movw	r20, r22
     bce:	28 2b       	or	r18, r24
     bd0:	39 2b       	or	r19, r25
     bd2:	4a 2b       	or	r20, r26
     bd4:	5b 2b       	or	r21, r27
     bd6:	da 01       	movw	r26, r20
     bd8:	c9 01       	movw	r24, r18
     bda:	8f 77       	andi	r24, 0x7F	; 127
     bdc:	90 70       	andi	r25, 0x00	; 0
     bde:	a0 70       	andi	r26, 0x00	; 0
     be0:	b0 70       	andi	r27, 0x00	; 0
     be2:	80 34       	cpi	r24, 0x40	; 64
     be4:	91 05       	cpc	r25, r1
     be6:	a1 05       	cpc	r26, r1
     be8:	b1 05       	cpc	r27, r1
     bea:	39 f4       	brne	.+14     	; 0xbfa <__pack_f+0xee>
     bec:	27 ff       	sbrs	r18, 7
     bee:	09 c0       	rjmp	.+18     	; 0xc02 <__pack_f+0xf6>
     bf0:	20 5c       	subi	r18, 0xC0	; 192
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	4f 4f       	sbci	r20, 0xFF	; 255
     bf6:	5f 4f       	sbci	r21, 0xFF	; 255
     bf8:	04 c0       	rjmp	.+8      	; 0xc02 <__pack_f+0xf6>
     bfa:	21 5c       	subi	r18, 0xC1	; 193
     bfc:	3f 4f       	sbci	r19, 0xFF	; 255
     bfe:	4f 4f       	sbci	r20, 0xFF	; 255
     c00:	5f 4f       	sbci	r21, 0xFF	; 255
     c02:	e0 e0       	ldi	r30, 0x00	; 0
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	20 30       	cpi	r18, 0x00	; 0
     c08:	a0 e0       	ldi	r26, 0x00	; 0
     c0a:	3a 07       	cpc	r19, r26
     c0c:	a0 e0       	ldi	r26, 0x00	; 0
     c0e:	4a 07       	cpc	r20, r26
     c10:	a0 e4       	ldi	r26, 0x40	; 64
     c12:	5a 07       	cpc	r21, r26
     c14:	10 f0       	brcs	.+4      	; 0xc1a <__pack_f+0x10e>
     c16:	e1 e0       	ldi	r30, 0x01	; 1
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	79 01       	movw	r14, r18
     c1c:	8a 01       	movw	r16, r20
     c1e:	27 c0       	rjmp	.+78     	; 0xc6e <__pack_f+0x162>
     c20:	60 38       	cpi	r22, 0x80	; 128
     c22:	71 05       	cpc	r23, r1
     c24:	64 f5       	brge	.+88     	; 0xc7e <__pack_f+0x172>
     c26:	fb 01       	movw	r30, r22
     c28:	e1 58       	subi	r30, 0x81	; 129
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	d8 01       	movw	r26, r16
     c2e:	c7 01       	movw	r24, r14
     c30:	8f 77       	andi	r24, 0x7F	; 127
     c32:	90 70       	andi	r25, 0x00	; 0
     c34:	a0 70       	andi	r26, 0x00	; 0
     c36:	b0 70       	andi	r27, 0x00	; 0
     c38:	80 34       	cpi	r24, 0x40	; 64
     c3a:	91 05       	cpc	r25, r1
     c3c:	a1 05       	cpc	r26, r1
     c3e:	b1 05       	cpc	r27, r1
     c40:	39 f4       	brne	.+14     	; 0xc50 <__pack_f+0x144>
     c42:	e7 fe       	sbrs	r14, 7
     c44:	0d c0       	rjmp	.+26     	; 0xc60 <__pack_f+0x154>
     c46:	80 e4       	ldi	r24, 0x40	; 64
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__pack_f+0x14c>
     c50:	8f e3       	ldi	r24, 0x3F	; 63
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e8 0e       	add	r14, r24
     c5a:	f9 1e       	adc	r15, r25
     c5c:	0a 1f       	adc	r16, r26
     c5e:	1b 1f       	adc	r17, r27
     c60:	17 ff       	sbrs	r17, 7
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <__pack_f+0x162>
     c64:	16 95       	lsr	r17
     c66:	07 95       	ror	r16
     c68:	f7 94       	ror	r15
     c6a:	e7 94       	ror	r14
     c6c:	31 96       	adiw	r30, 0x01	; 1
     c6e:	87 e0       	ldi	r24, 0x07	; 7
     c70:	16 95       	lsr	r17
     c72:	07 95       	ror	r16
     c74:	f7 94       	ror	r15
     c76:	e7 94       	ror	r14
     c78:	8a 95       	dec	r24
     c7a:	d1 f7       	brne	.-12     	; 0xc70 <__pack_f+0x164>
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__pack_f+0x17c>
     c7e:	ee 24       	eor	r14, r14
     c80:	ff 24       	eor	r15, r15
     c82:	87 01       	movw	r16, r14
     c84:	ef ef       	ldi	r30, 0xFF	; 255
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	6e 2f       	mov	r22, r30
     c8a:	67 95       	ror	r22
     c8c:	66 27       	eor	r22, r22
     c8e:	67 95       	ror	r22
     c90:	90 2f       	mov	r25, r16
     c92:	9f 77       	andi	r25, 0x7F	; 127
     c94:	d7 94       	ror	r13
     c96:	dd 24       	eor	r13, r13
     c98:	d7 94       	ror	r13
     c9a:	8e 2f       	mov	r24, r30
     c9c:	86 95       	lsr	r24
     c9e:	49 2f       	mov	r20, r25
     ca0:	46 2b       	or	r20, r22
     ca2:	58 2f       	mov	r21, r24
     ca4:	5d 29       	or	r21, r13
     ca6:	b7 01       	movw	r22, r14
     ca8:	ca 01       	movw	r24, r20
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	08 95       	ret

00000cb6 <__unpack_f>:
     cb6:	fc 01       	movw	r30, r24
     cb8:	db 01       	movw	r26, r22
     cba:	40 81       	ld	r20, Z
     cbc:	51 81       	ldd	r21, Z+1	; 0x01
     cbe:	22 81       	ldd	r18, Z+2	; 0x02
     cc0:	62 2f       	mov	r22, r18
     cc2:	6f 77       	andi	r22, 0x7F	; 127
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	22 1f       	adc	r18, r18
     cc8:	22 27       	eor	r18, r18
     cca:	22 1f       	adc	r18, r18
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	89 2f       	mov	r24, r25
     cd0:	88 0f       	add	r24, r24
     cd2:	82 2b       	or	r24, r18
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	99 1f       	adc	r25, r25
     cda:	99 27       	eor	r25, r25
     cdc:	99 1f       	adc	r25, r25
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	9c 93       	st	X, r25
     ce2:	11 97       	sbiw	r26, 0x01	; 1
     ce4:	21 15       	cp	r18, r1
     ce6:	31 05       	cpc	r19, r1
     ce8:	a9 f5       	brne	.+106    	; 0xd54 <__unpack_f+0x9e>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	11 f4       	brne	.+4      	; 0xcf8 <__unpack_f+0x42>
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	37 c0       	rjmp	.+110    	; 0xd66 <__unpack_f+0xb0>
     cf8:	82 e8       	ldi	r24, 0x82	; 130
     cfa:	9f ef       	ldi	r25, 0xFF	; 255
     cfc:	13 96       	adiw	r26, 0x03	; 3
     cfe:	9c 93       	st	X, r25
     d00:	8e 93       	st	-X, r24
     d02:	12 97       	sbiw	r26, 0x02	; 2
     d04:	9a 01       	movw	r18, r20
     d06:	ab 01       	movw	r20, r22
     d08:	67 e0       	ldi	r22, 0x07	; 7
     d0a:	22 0f       	add	r18, r18
     d0c:	33 1f       	adc	r19, r19
     d0e:	44 1f       	adc	r20, r20
     d10:	55 1f       	adc	r21, r21
     d12:	6a 95       	dec	r22
     d14:	d1 f7       	brne	.-12     	; 0xd0a <__unpack_f+0x54>
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	8c 93       	st	X, r24
     d1a:	0d c0       	rjmp	.+26     	; 0xd36 <__unpack_f+0x80>
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	44 1f       	adc	r20, r20
     d22:	55 1f       	adc	r21, r21
     d24:	12 96       	adiw	r26, 0x02	; 2
     d26:	8d 91       	ld	r24, X+
     d28:	9c 91       	ld	r25, X
     d2a:	13 97       	sbiw	r26, 0x03	; 3
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	12 97       	sbiw	r26, 0x02	; 2
     d36:	20 30       	cpi	r18, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	38 07       	cpc	r19, r24
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	48 07       	cpc	r20, r24
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	58 07       	cpc	r21, r24
     d44:	58 f3       	brcs	.-42     	; 0xd1c <__unpack_f+0x66>
     d46:	14 96       	adiw	r26, 0x04	; 4
     d48:	2d 93       	st	X+, r18
     d4a:	3d 93       	st	X+, r19
     d4c:	4d 93       	st	X+, r20
     d4e:	5c 93       	st	X, r21
     d50:	17 97       	sbiw	r26, 0x07	; 7
     d52:	08 95       	ret
     d54:	2f 3f       	cpi	r18, 0xFF	; 255
     d56:	31 05       	cpc	r19, r1
     d58:	79 f4       	brne	.+30     	; 0xd78 <__unpack_f+0xc2>
     d5a:	41 15       	cp	r20, r1
     d5c:	51 05       	cpc	r21, r1
     d5e:	61 05       	cpc	r22, r1
     d60:	71 05       	cpc	r23, r1
     d62:	19 f4       	brne	.+6      	; 0xd6a <__unpack_f+0xb4>
     d64:	84 e0       	ldi	r24, 0x04	; 4
     d66:	8c 93       	st	X, r24
     d68:	08 95       	ret
     d6a:	64 ff       	sbrs	r22, 4
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <__unpack_f+0xbe>
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	8c 93       	st	X, r24
     d72:	12 c0       	rjmp	.+36     	; 0xd98 <__unpack_f+0xe2>
     d74:	1c 92       	st	X, r1
     d76:	10 c0       	rjmp	.+32     	; 0xd98 <__unpack_f+0xe2>
     d78:	2f 57       	subi	r18, 0x7F	; 127
     d7a:	30 40       	sbci	r19, 0x00	; 0
     d7c:	13 96       	adiw	r26, 0x03	; 3
     d7e:	3c 93       	st	X, r19
     d80:	2e 93       	st	-X, r18
     d82:	12 97       	sbiw	r26, 0x02	; 2
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	8c 93       	st	X, r24
     d88:	87 e0       	ldi	r24, 0x07	; 7
     d8a:	44 0f       	add	r20, r20
     d8c:	55 1f       	adc	r21, r21
     d8e:	66 1f       	adc	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	8a 95       	dec	r24
     d94:	d1 f7       	brne	.-12     	; 0xd8a <__unpack_f+0xd4>
     d96:	70 64       	ori	r23, 0x40	; 64
     d98:	14 96       	adiw	r26, 0x04	; 4
     d9a:	4d 93       	st	X+, r20
     d9c:	5d 93       	st	X+, r21
     d9e:	6d 93       	st	X+, r22
     da0:	7c 93       	st	X, r23
     da2:	17 97       	sbiw	r26, 0x07	; 7
     da4:	08 95       	ret

00000da6 <__fpcmp_parts_f>:
     da6:	1f 93       	push	r17
     da8:	dc 01       	movw	r26, r24
     daa:	fb 01       	movw	r30, r22
     dac:	9c 91       	ld	r25, X
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	08 f4       	brcc	.+2      	; 0xdb4 <__fpcmp_parts_f+0xe>
     db2:	47 c0       	rjmp	.+142    	; 0xe42 <__fpcmp_parts_f+0x9c>
     db4:	80 81       	ld	r24, Z
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	08 f4       	brcc	.+2      	; 0xdbc <__fpcmp_parts_f+0x16>
     dba:	43 c0       	rjmp	.+134    	; 0xe42 <__fpcmp_parts_f+0x9c>
     dbc:	94 30       	cpi	r25, 0x04	; 4
     dbe:	51 f4       	brne	.+20     	; 0xdd4 <__fpcmp_parts_f+0x2e>
     dc0:	11 96       	adiw	r26, 0x01	; 1
     dc2:	1c 91       	ld	r17, X
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	99 f5       	brne	.+102    	; 0xe2e <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	68 2f       	mov	r22, r24
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	61 1b       	sub	r22, r17
     dd0:	71 09       	sbc	r23, r1
     dd2:	3f c0       	rjmp	.+126    	; 0xe52 <__fpcmp_parts_f+0xac>
     dd4:	84 30       	cpi	r24, 0x04	; 4
     dd6:	21 f0       	breq	.+8      	; 0xde0 <__fpcmp_parts_f+0x3a>
     dd8:	92 30       	cpi	r25, 0x02	; 2
     dda:	31 f4       	brne	.+12     	; 0xde8 <__fpcmp_parts_f+0x42>
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	b9 f1       	breq	.+110    	; 0xe4e <__fpcmp_parts_f+0xa8>
     de0:	81 81       	ldd	r24, Z+1	; 0x01
     de2:	88 23       	and	r24, r24
     de4:	89 f1       	breq	.+98     	; 0xe48 <__fpcmp_parts_f+0xa2>
     de6:	2d c0       	rjmp	.+90     	; 0xe42 <__fpcmp_parts_f+0x9c>
     de8:	11 96       	adiw	r26, 0x01	; 1
     dea:	1c 91       	ld	r17, X
     dec:	11 97       	sbiw	r26, 0x01	; 1
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	f1 f0       	breq	.+60     	; 0xe2e <__fpcmp_parts_f+0x88>
     df2:	81 81       	ldd	r24, Z+1	; 0x01
     df4:	18 17       	cp	r17, r24
     df6:	d9 f4       	brne	.+54     	; 0xe2e <__fpcmp_parts_f+0x88>
     df8:	12 96       	adiw	r26, 0x02	; 2
     dfa:	2d 91       	ld	r18, X+
     dfc:	3c 91       	ld	r19, X
     dfe:	13 97       	sbiw	r26, 0x03	; 3
     e00:	82 81       	ldd	r24, Z+2	; 0x02
     e02:	93 81       	ldd	r25, Z+3	; 0x03
     e04:	82 17       	cp	r24, r18
     e06:	93 07       	cpc	r25, r19
     e08:	94 f0       	brlt	.+36     	; 0xe2e <__fpcmp_parts_f+0x88>
     e0a:	28 17       	cp	r18, r24
     e0c:	39 07       	cpc	r19, r25
     e0e:	bc f0       	brlt	.+46     	; 0xe3e <__fpcmp_parts_f+0x98>
     e10:	14 96       	adiw	r26, 0x04	; 4
     e12:	8d 91       	ld	r24, X+
     e14:	9d 91       	ld	r25, X+
     e16:	0d 90       	ld	r0, X+
     e18:	bc 91       	ld	r27, X
     e1a:	a0 2d       	mov	r26, r0
     e1c:	24 81       	ldd	r18, Z+4	; 0x04
     e1e:	35 81       	ldd	r19, Z+5	; 0x05
     e20:	46 81       	ldd	r20, Z+6	; 0x06
     e22:	57 81       	ldd	r21, Z+7	; 0x07
     e24:	28 17       	cp	r18, r24
     e26:	39 07       	cpc	r19, r25
     e28:	4a 07       	cpc	r20, r26
     e2a:	5b 07       	cpc	r21, r27
     e2c:	18 f4       	brcc	.+6      	; 0xe34 <__fpcmp_parts_f+0x8e>
     e2e:	11 23       	and	r17, r17
     e30:	41 f0       	breq	.+16     	; 0xe42 <__fpcmp_parts_f+0x9c>
     e32:	0a c0       	rjmp	.+20     	; 0xe48 <__fpcmp_parts_f+0xa2>
     e34:	82 17       	cp	r24, r18
     e36:	93 07       	cpc	r25, r19
     e38:	a4 07       	cpc	r26, r20
     e3a:	b5 07       	cpc	r27, r21
     e3c:	40 f4       	brcc	.+16     	; 0xe4e <__fpcmp_parts_f+0xa8>
     e3e:	11 23       	and	r17, r17
     e40:	19 f0       	breq	.+6      	; 0xe48 <__fpcmp_parts_f+0xa2>
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <__fpcmp_parts_f+0xac>
     e48:	6f ef       	ldi	r22, 0xFF	; 255
     e4a:	7f ef       	ldi	r23, 0xFF	; 255
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <__fpcmp_parts_f+0xac>
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	cb 01       	movw	r24, r22
     e54:	1f 91       	pop	r17
     e56:	08 95       	ret

00000e58 <DIO_ErrStateSetPinDirection>:
/* Date   : 24 MAR 2023                            */
/***************************************************/
#include "DIO_Interface.h"

ErrState  DIO_ErrStateSetPinDirection(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber,DIO_DirectionState Copy_DirectionState)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	28 97       	sbiw	r28, 0x08	; 8
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	6a 83       	std	Y+2, r22	; 0x02
     e70:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_PinNumber<=Pin7 && Copy_PinNumber>=Pin0)
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	88 30       	cpi	r24, 0x08	; 8
     e76:	08 f0       	brcs	.+2      	; 0xe7a <DIO_ErrStateSetPinDirection+0x22>
     e78:	f6 c0       	rjmp	.+492    	; 0x1066 <DIO_ErrStateSetPinDirection+0x20e>
	{
		/*Input-> write Zero DDR (CLR) */
		if (Copy_DirectionState == DIO_Input )
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	88 23       	and	r24, r24
     e7e:	09 f0       	breq	.+2      	; 0xe82 <DIO_ErrStateSetPinDirection+0x2a>
     e80:	77 c0       	rjmp	.+238    	; 0xf70 <DIO_ErrStateSetPinDirection+0x118>
		{
			switch(Copy_GroupNumber){
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	38 87       	std	Y+8, r19	; 0x08
     e8a:	2f 83       	std	Y+7, r18	; 0x07
     e8c:	8f 81       	ldd	r24, Y+7	; 0x07
     e8e:	98 85       	ldd	r25, Y+8	; 0x08
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	91 05       	cpc	r25, r1
     e94:	59 f1       	breq	.+86     	; 0xeec <DIO_ErrStateSetPinDirection+0x94>
     e96:	2f 81       	ldd	r18, Y+7	; 0x07
     e98:	38 85       	ldd	r19, Y+8	; 0x08
     e9a:	22 30       	cpi	r18, 0x02	; 2
     e9c:	31 05       	cpc	r19, r1
     e9e:	2c f4       	brge	.+10     	; 0xeaa <DIO_ErrStateSetPinDirection+0x52>
     ea0:	8f 81       	ldd	r24, Y+7	; 0x07
     ea2:	98 85       	ldd	r25, Y+8	; 0x08
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	69 f0       	breq	.+26     	; 0xec2 <DIO_ErrStateSetPinDirection+0x6a>
     ea8:	60 c0       	rjmp	.+192    	; 0xf6a <DIO_ErrStateSetPinDirection+0x112>
     eaa:	2f 81       	ldd	r18, Y+7	; 0x07
     eac:	38 85       	ldd	r19, Y+8	; 0x08
     eae:	22 30       	cpi	r18, 0x02	; 2
     eb0:	31 05       	cpc	r19, r1
     eb2:	89 f1       	breq	.+98     	; 0xf16 <DIO_ErrStateSetPinDirection+0xbe>
     eb4:	8f 81       	ldd	r24, Y+7	; 0x07
     eb6:	98 85       	ldd	r25, Y+8	; 0x08
     eb8:	83 30       	cpi	r24, 0x03	; 3
     eba:	91 05       	cpc	r25, r1
     ebc:	09 f4       	brne	.+2      	; 0xec0 <DIO_ErrStateSetPinDirection+0x68>
     ebe:	40 c0       	rjmp	.+128    	; 0xf40 <DIO_ErrStateSetPinDirection+0xe8>
     ec0:	54 c0       	rjmp	.+168    	; 0xf6a <DIO_ErrStateSetPinDirection+0x112>
			/*Group A*/
			case DIO_GroupA : CLR_BIT(DDRA_ITI , Copy_PinNumber ) ;
     ec2:	aa e3       	ldi	r26, 0x3A	; 58
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	ea e3       	ldi	r30, 0x3A	; 58
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_ErrStateSetPinDirection+0x88>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <DIO_ErrStateSetPinDirection+0x84>
     ee4:	80 95       	com	r24
     ee6:	84 23       	and	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	bb c0       	rjmp	.+374    	; 0x1062 <DIO_ErrStateSetPinDirection+0x20a>
			break ;
			/*Group B*/
			case DIO_GroupB : CLR_BIT(DDRB_ITI , Copy_PinNumber ) ;
     eec:	a7 e3       	ldi	r26, 0x37	; 55
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e7 e3       	ldi	r30, 0x37	; 55
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <DIO_ErrStateSetPinDirection+0xb2>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <DIO_ErrStateSetPinDirection+0xae>
     f0e:	80 95       	com	r24
     f10:	84 23       	and	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	a6 c0       	rjmp	.+332    	; 0x1062 <DIO_ErrStateSetPinDirection+0x20a>
			break ;
			/*Group C*/
			case DIO_GroupC : CLR_BIT(DDRC_ITI , Copy_PinNumber ) ;
     f16:	a4 e3       	ldi	r26, 0x34	; 52
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e4 e3       	ldi	r30, 0x34	; 52
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_ErrStateSetPinDirection+0xdc>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_ErrStateSetPinDirection+0xd8>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	91 c0       	rjmp	.+290    	; 0x1062 <DIO_ErrStateSetPinDirection+0x20a>
			break ;
			/*Group D*/
			case DIO_GroupD : CLR_BIT(DDRD_ITI , Copy_PinNumber ) ;
     f40:	a1 e3       	ldi	r26, 0x31	; 49
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e1 e3       	ldi	r30, 0x31	; 49
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_ErrStateSetPinDirection+0x106>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_ErrStateSetPinDirection+0x102>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	7c c0       	rjmp	.+248    	; 0x1062 <DIO_ErrStateSetPinDirection+0x20a>
			break ;
			/*Wrong*/
			default:
				return GroupError ;
     f6a:	91 e0       	ldi	r25, 0x01	; 1
     f6c:	9e 83       	std	Y+6, r25	; 0x06
     f6e:	7d c0       	rjmp	.+250    	; 0x106a <DIO_ErrStateSetPinDirection+0x212>


		}

		/*Output -> write DDR = one */
		else if (Copy_DirectionState == DIO_Output )
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	09 f0       	breq	.+2      	; 0xf78 <DIO_ErrStateSetPinDirection+0x120>
     f76:	72 c0       	rjmp	.+228    	; 0x105c <DIO_ErrStateSetPinDirection+0x204>
		{
			switch(Copy_GroupNumber){
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	3d 83       	std	Y+5, r19	; 0x05
     f80:	2c 83       	std	Y+4, r18	; 0x04
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	9d 81       	ldd	r25, Y+5	; 0x05
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	91 05       	cpc	r25, r1
     f8a:	49 f1       	breq	.+82     	; 0xfde <DIO_ErrStateSetPinDirection+0x186>
     f8c:	2c 81       	ldd	r18, Y+4	; 0x04
     f8e:	3d 81       	ldd	r19, Y+5	; 0x05
     f90:	22 30       	cpi	r18, 0x02	; 2
     f92:	31 05       	cpc	r19, r1
     f94:	2c f4       	brge	.+10     	; 0xfa0 <DIO_ErrStateSetPinDirection+0x148>
     f96:	8c 81       	ldd	r24, Y+4	; 0x04
     f98:	9d 81       	ldd	r25, Y+5	; 0x05
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	61 f0       	breq	.+24     	; 0xfb6 <DIO_ErrStateSetPinDirection+0x15e>
     f9e:	5b c0       	rjmp	.+182    	; 0x1056 <DIO_ErrStateSetPinDirection+0x1fe>
     fa0:	2c 81       	ldd	r18, Y+4	; 0x04
     fa2:	3d 81       	ldd	r19, Y+5	; 0x05
     fa4:	22 30       	cpi	r18, 0x02	; 2
     fa6:	31 05       	cpc	r19, r1
     fa8:	71 f1       	breq	.+92     	; 0x1006 <DIO_ErrStateSetPinDirection+0x1ae>
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	9d 81       	ldd	r25, Y+5	; 0x05
     fae:	83 30       	cpi	r24, 0x03	; 3
     fb0:	91 05       	cpc	r25, r1
     fb2:	e9 f1       	breq	.+122    	; 0x102e <DIO_ErrStateSetPinDirection+0x1d6>
     fb4:	50 c0       	rjmp	.+160    	; 0x1056 <DIO_ErrStateSetPinDirection+0x1fe>
			/*Group A*/
			case DIO_GroupA : SET_BIT(DDRA_ITI,Copy_PinNumber);break;
     fb6:	aa e3       	ldi	r26, 0x3A	; 58
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	ea e3       	ldi	r30, 0x3A	; 58
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <DIO_ErrStateSetPinDirection+0x17c>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <DIO_ErrStateSetPinDirection+0x178>
     fd8:	84 2b       	or	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	42 c0       	rjmp	.+132    	; 0x1062 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group B*/
			case DIO_GroupB : SET_BIT(DDRB_ITI,Copy_PinNumber);break;
     fde:	a7 e3       	ldi	r26, 0x37	; 55
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e7 e3       	ldi	r30, 0x37	; 55
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_ErrStateSetPinDirection+0x1a4>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_ErrStateSetPinDirection+0x1a0>
    1000:	84 2b       	or	r24, r20
    1002:	8c 93       	st	X, r24
    1004:	2e c0       	rjmp	.+92     	; 0x1062 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group C*/
			case DIO_GroupC : SET_BIT(DDRC_ITI,Copy_PinNumber);break;
    1006:	a4 e3       	ldi	r26, 0x34	; 52
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e4 e3       	ldi	r30, 0x34	; 52
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 2e       	mov	r0, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DIO_ErrStateSetPinDirection+0x1cc>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <DIO_ErrStateSetPinDirection+0x1c8>
    1028:	84 2b       	or	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	1a c0       	rjmp	.+52     	; 0x1062 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group D*/
			case DIO_GroupD : SET_BIT(DDRD_ITI,Copy_PinNumber);break;
    102e:	a1 e3       	ldi	r26, 0x31	; 49
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e1 e3       	ldi	r30, 0x31	; 49
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_ErrStateSetPinDirection+0x1f4>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_ErrStateSetPinDirection+0x1f0>
    1050:	84 2b       	or	r24, r20
    1052:	8c 93       	st	X, r24
    1054:	06 c0       	rjmp	.+12     	; 0x1062 <DIO_ErrStateSetPinDirection+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	9e 83       	std	Y+6, r25	; 0x06
    105a:	07 c0       	rjmp	.+14     	; 0x106a <DIO_ErrStateSetPinDirection+0x212>
			}
		}

		else
		{
			return DirectionError ;
    105c:	23 e0       	ldi	r18, 0x03	; 3
    105e:	2e 83       	std	Y+6, r18	; 0x06
    1060:	04 c0       	rjmp	.+8      	; 0x106a <DIO_ErrStateSetPinDirection+0x212>
		}

		return NoError ;
    1062:	1e 82       	std	Y+6, r1	; 0x06
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_ErrStateSetPinDirection+0x212>
	}
	else
	{
		return PinNumberError ;
    1066:	32 e0       	ldi	r19, 0x02	; 2
    1068:	3e 83       	std	Y+6, r19	; 0x06
    106a:	8e 81       	ldd	r24, Y+6	; 0x06
	}
}
    106c:	28 96       	adiw	r28, 0x08	; 8
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <DIO_ErrStateSetPinValue>:

ErrState  DIO_ErrStateSetPinValue(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber,DIO_ValueState Copy_ValueState)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	28 97       	sbiw	r28, 0x08	; 8
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	89 83       	std	Y+1, r24	; 0x01
    1094:	6a 83       	std	Y+2, r22	; 0x02
    1096:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_PinNumber<=Pin7 && Copy_PinNumber>=Pin0)
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	88 30       	cpi	r24, 0x08	; 8
    109c:	08 f0       	brcs	.+2      	; 0x10a0 <DIO_ErrStateSetPinValue+0x22>
    109e:	f6 c0       	rjmp	.+492    	; 0x128c <DIO_ErrStateSetPinValue+0x20e>
	{
		/*Low-> write Zero Port (CLR) */
		if (Copy_ValueState == DIO_Low )
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	88 23       	and	r24, r24
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <DIO_ErrStateSetPinValue+0x2a>
    10a6:	77 c0       	rjmp	.+238    	; 0x1196 <DIO_ErrStateSetPinValue+0x118>
		{
			switch(Copy_GroupNumber){
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	38 87       	std	Y+8, r19	; 0x08
    10b0:	2f 83       	std	Y+7, r18	; 0x07
    10b2:	8f 81       	ldd	r24, Y+7	; 0x07
    10b4:	98 85       	ldd	r25, Y+8	; 0x08
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	91 05       	cpc	r25, r1
    10ba:	59 f1       	breq	.+86     	; 0x1112 <DIO_ErrStateSetPinValue+0x94>
    10bc:	2f 81       	ldd	r18, Y+7	; 0x07
    10be:	38 85       	ldd	r19, Y+8	; 0x08
    10c0:	22 30       	cpi	r18, 0x02	; 2
    10c2:	31 05       	cpc	r19, r1
    10c4:	2c f4       	brge	.+10     	; 0x10d0 <DIO_ErrStateSetPinValue+0x52>
    10c6:	8f 81       	ldd	r24, Y+7	; 0x07
    10c8:	98 85       	ldd	r25, Y+8	; 0x08
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	69 f0       	breq	.+26     	; 0x10e8 <DIO_ErrStateSetPinValue+0x6a>
    10ce:	60 c0       	rjmp	.+192    	; 0x1190 <DIO_ErrStateSetPinValue+0x112>
    10d0:	2f 81       	ldd	r18, Y+7	; 0x07
    10d2:	38 85       	ldd	r19, Y+8	; 0x08
    10d4:	22 30       	cpi	r18, 0x02	; 2
    10d6:	31 05       	cpc	r19, r1
    10d8:	89 f1       	breq	.+98     	; 0x113c <DIO_ErrStateSetPinValue+0xbe>
    10da:	8f 81       	ldd	r24, Y+7	; 0x07
    10dc:	98 85       	ldd	r25, Y+8	; 0x08
    10de:	83 30       	cpi	r24, 0x03	; 3
    10e0:	91 05       	cpc	r25, r1
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <DIO_ErrStateSetPinValue+0x68>
    10e4:	40 c0       	rjmp	.+128    	; 0x1166 <DIO_ErrStateSetPinValue+0xe8>
    10e6:	54 c0       	rjmp	.+168    	; 0x1190 <DIO_ErrStateSetPinValue+0x112>
			/*Group A*/
			case DIO_GroupA : CLR_BIT(PORTA_ITI , Copy_PinNumber ) ;break ;
    10e8:	ab e3       	ldi	r26, 0x3B	; 59
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	eb e3       	ldi	r30, 0x3B	; 59
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_ErrStateSetPinValue+0x88>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <DIO_ErrStateSetPinValue+0x84>
    110a:	80 95       	com	r24
    110c:	84 23       	and	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	bb c0       	rjmp	.+374    	; 0x1288 <DIO_ErrStateSetPinValue+0x20a>
			/*Group B*/
			case DIO_GroupB : CLR_BIT(PORTB_ITI , Copy_PinNumber ) ;break ;
    1112:	a8 e3       	ldi	r26, 0x38	; 56
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e8 e3       	ldi	r30, 0x38	; 56
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_ErrStateSetPinValue+0xb2>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_ErrStateSetPinValue+0xae>
    1134:	80 95       	com	r24
    1136:	84 23       	and	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	a6 c0       	rjmp	.+332    	; 0x1288 <DIO_ErrStateSetPinValue+0x20a>
			/*Group C*/
			case DIO_GroupC : CLR_BIT(PORTC_ITI , Copy_PinNumber ) ;break ;
    113c:	a5 e3       	ldi	r26, 0x35	; 53
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e5 e3       	ldi	r30, 0x35	; 53
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_ErrStateSetPinValue+0xdc>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_ErrStateSetPinValue+0xd8>
    115e:	80 95       	com	r24
    1160:	84 23       	and	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	91 c0       	rjmp	.+290    	; 0x1288 <DIO_ErrStateSetPinValue+0x20a>
			/*Group D*/
			case DIO_GroupD : CLR_BIT(PORTD_ITI , Copy_PinNumber ) ;break ;
    1166:	a2 e3       	ldi	r26, 0x32	; 50
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e2 e3       	ldi	r30, 0x32	; 50
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 2e       	mov	r0, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <DIO_ErrStateSetPinValue+0x106>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <DIO_ErrStateSetPinValue+0x102>
    1188:	80 95       	com	r24
    118a:	84 23       	and	r24, r20
    118c:	8c 93       	st	X, r24
    118e:	7c c0       	rjmp	.+248    	; 0x1288 <DIO_ErrStateSetPinValue+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	9e 83       	std	Y+6, r25	; 0x06
    1194:	7d c0       	rjmp	.+250    	; 0x1290 <DIO_ErrStateSetPinValue+0x212>
			}
		}

		/*High -> write port = one */
		else if (Copy_ValueState == DIO_High )
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	09 f0       	breq	.+2      	; 0x119e <DIO_ErrStateSetPinValue+0x120>
    119c:	72 c0       	rjmp	.+228    	; 0x1282 <DIO_ErrStateSetPinValue+0x204>
		{
			switch(Copy_GroupNumber){
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	3d 83       	std	Y+5, r19	; 0x05
    11a6:	2c 83       	std	Y+4, r18	; 0x04
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	9d 81       	ldd	r25, Y+5	; 0x05
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	91 05       	cpc	r25, r1
    11b0:	49 f1       	breq	.+82     	; 0x1204 <DIO_ErrStateSetPinValue+0x186>
    11b2:	2c 81       	ldd	r18, Y+4	; 0x04
    11b4:	3d 81       	ldd	r19, Y+5	; 0x05
    11b6:	22 30       	cpi	r18, 0x02	; 2
    11b8:	31 05       	cpc	r19, r1
    11ba:	2c f4       	brge	.+10     	; 0x11c6 <DIO_ErrStateSetPinValue+0x148>
    11bc:	8c 81       	ldd	r24, Y+4	; 0x04
    11be:	9d 81       	ldd	r25, Y+5	; 0x05
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	61 f0       	breq	.+24     	; 0x11dc <DIO_ErrStateSetPinValue+0x15e>
    11c4:	5b c0       	rjmp	.+182    	; 0x127c <DIO_ErrStateSetPinValue+0x1fe>
    11c6:	2c 81       	ldd	r18, Y+4	; 0x04
    11c8:	3d 81       	ldd	r19, Y+5	; 0x05
    11ca:	22 30       	cpi	r18, 0x02	; 2
    11cc:	31 05       	cpc	r19, r1
    11ce:	71 f1       	breq	.+92     	; 0x122c <DIO_ErrStateSetPinValue+0x1ae>
    11d0:	8c 81       	ldd	r24, Y+4	; 0x04
    11d2:	9d 81       	ldd	r25, Y+5	; 0x05
    11d4:	83 30       	cpi	r24, 0x03	; 3
    11d6:	91 05       	cpc	r25, r1
    11d8:	e9 f1       	breq	.+122    	; 0x1254 <DIO_ErrStateSetPinValue+0x1d6>
    11da:	50 c0       	rjmp	.+160    	; 0x127c <DIO_ErrStateSetPinValue+0x1fe>
			/*Group A*/
			case DIO_GroupA : SET_BIT(PORTA_ITI,Copy_PinNumber);break;
    11dc:	ab e3       	ldi	r26, 0x3B	; 59
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	eb e3       	ldi	r30, 0x3B	; 59
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_ErrStateSetPinValue+0x17c>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_ErrStateSetPinValue+0x178>
    11fe:	84 2b       	or	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	42 c0       	rjmp	.+132    	; 0x1288 <DIO_ErrStateSetPinValue+0x20a>
			/*Group B*/
			case DIO_GroupB : SET_BIT(PORTB_ITI,Copy_PinNumber);break;
    1204:	a8 e3       	ldi	r26, 0x38	; 56
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e8 e3       	ldi	r30, 0x38	; 56
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_ErrStateSetPinValue+0x1a4>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_ErrStateSetPinValue+0x1a0>
    1226:	84 2b       	or	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	2e c0       	rjmp	.+92     	; 0x1288 <DIO_ErrStateSetPinValue+0x20a>
			/*Group C*/
			case DIO_GroupC : SET_BIT(PORTC_ITI,Copy_PinNumber);break;
    122c:	a5 e3       	ldi	r26, 0x35	; 53
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e5 e3       	ldi	r30, 0x35	; 53
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 2e       	mov	r0, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_ErrStateSetPinValue+0x1cc>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_ErrStateSetPinValue+0x1c8>
    124e:	84 2b       	or	r24, r20
    1250:	8c 93       	st	X, r24
    1252:	1a c0       	rjmp	.+52     	; 0x1288 <DIO_ErrStateSetPinValue+0x20a>
			/*Group D*/
			case DIO_GroupD : SET_BIT(PORTD_ITI,Copy_PinNumber);break;
    1254:	a2 e3       	ldi	r26, 0x32	; 50
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e2 e3       	ldi	r30, 0x32	; 50
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 2e       	mov	r0, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_ErrStateSetPinValue+0x1f4>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_ErrStateSetPinValue+0x1f0>
    1276:	84 2b       	or	r24, r20
    1278:	8c 93       	st	X, r24
    127a:	06 c0       	rjmp	.+12     	; 0x1288 <DIO_ErrStateSetPinValue+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
    127c:	91 e0       	ldi	r25, 0x01	; 1
    127e:	9e 83       	std	Y+6, r25	; 0x06
    1280:	07 c0       	rjmp	.+14     	; 0x1290 <DIO_ErrStateSetPinValue+0x212>
			}
		}

		else
		{
			return DirectionError ;
    1282:	23 e0       	ldi	r18, 0x03	; 3
    1284:	2e 83       	std	Y+6, r18	; 0x06
    1286:	04 c0       	rjmp	.+8      	; 0x1290 <DIO_ErrStateSetPinValue+0x212>
		}

		return NoError ;
    1288:	1e 82       	std	Y+6, r1	; 0x06
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_ErrStateSetPinValue+0x212>
	}
	else
	{
		return PinNumberError ;
    128c:	32 e0       	ldi	r19, 0x02	; 2
    128e:	3e 83       	std	Y+6, r19	; 0x06
    1290:	8e 81       	ldd	r24, Y+6	; 0x06
	}

}
    1292:	28 96       	adiw	r28, 0x08	; 8
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <DIO_ErrStateReadPinValue>:

ErrState  DIO_ErrStateReadPinValue(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber ,u8 *Result)
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	27 97       	sbiw	r28, 0x07	; 7
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	6a 83       	std	Y+2, r22	; 0x02
    12bc:	5c 83       	std	Y+4, r21	; 0x04
    12be:	4b 83       	std	Y+3, r20	; 0x03
	/*check on pin range from 0 to 7 */
	if (Copy_PinNumber>= Pin0 && Copy_PinNumber <=Pin7)
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	88 30       	cpi	r24, 0x08	; 8
    12c4:	08 f0       	brcs	.+2      	; 0x12c8 <DIO_ErrStateReadPinValue+0x24>
    12c6:	76 c0       	rjmp	.+236    	; 0x13b4 <DIO_ErrStateReadPinValue+0x110>
	{
		switch(Copy_GroupNumber)
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	3f 83       	std	Y+7, r19	; 0x07
    12d0:	2e 83       	std	Y+6, r18	; 0x06
    12d2:	4e 81       	ldd	r20, Y+6	; 0x06
    12d4:	5f 81       	ldd	r21, Y+7	; 0x07
    12d6:	41 30       	cpi	r20, 0x01	; 1
    12d8:	51 05       	cpc	r21, r1
    12da:	59 f1       	breq	.+86     	; 0x1332 <DIO_ErrStateReadPinValue+0x8e>
    12dc:	8e 81       	ldd	r24, Y+6	; 0x06
    12de:	9f 81       	ldd	r25, Y+7	; 0x07
    12e0:	82 30       	cpi	r24, 0x02	; 2
    12e2:	91 05       	cpc	r25, r1
    12e4:	34 f4       	brge	.+12     	; 0x12f2 <DIO_ErrStateReadPinValue+0x4e>
    12e6:	2e 81       	ldd	r18, Y+6	; 0x06
    12e8:	3f 81       	ldd	r19, Y+7	; 0x07
    12ea:	21 15       	cp	r18, r1
    12ec:	31 05       	cpc	r19, r1
    12ee:	69 f0       	breq	.+26     	; 0x130a <DIO_ErrStateReadPinValue+0x66>
    12f0:	5c c0       	rjmp	.+184    	; 0x13aa <DIO_ErrStateReadPinValue+0x106>
    12f2:	4e 81       	ldd	r20, Y+6	; 0x06
    12f4:	5f 81       	ldd	r21, Y+7	; 0x07
    12f6:	42 30       	cpi	r20, 0x02	; 2
    12f8:	51 05       	cpc	r21, r1
    12fa:	79 f1       	breq	.+94     	; 0x135a <DIO_ErrStateReadPinValue+0xb6>
    12fc:	8e 81       	ldd	r24, Y+6	; 0x06
    12fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1300:	83 30       	cpi	r24, 0x03	; 3
    1302:	91 05       	cpc	r25, r1
    1304:	09 f4       	brne	.+2      	; 0x1308 <DIO_ErrStateReadPinValue+0x64>
    1306:	3d c0       	rjmp	.+122    	; 0x1382 <DIO_ErrStateReadPinValue+0xde>
    1308:	50 c0       	rjmp	.+160    	; 0x13aa <DIO_ErrStateReadPinValue+0x106>
		{
		case DIO_GroupA: *Result=GET_BIT(PINA_ITI,Copy_PinNumber); break ;
    130a:	e9 e3       	ldi	r30, 0x39	; 57
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	88 2f       	mov	r24, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	a9 01       	movw	r20, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_ErrStateReadPinValue+0x7e>
    131e:	55 95       	asr	r21
    1320:	47 95       	ror	r20
    1322:	8a 95       	dec	r24
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_ErrStateReadPinValue+0x7a>
    1326:	ca 01       	movw	r24, r20
    1328:	81 70       	andi	r24, 0x01	; 1
    132a:	eb 81       	ldd	r30, Y+3	; 0x03
    132c:	fc 81       	ldd	r31, Y+4	; 0x04
    132e:	80 83       	st	Z, r24
    1330:	3f c0       	rjmp	.+126    	; 0x13b0 <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupB: *Result=GET_BIT(PINB_ITI,Copy_PinNumber); break ;
    1332:	e6 e3       	ldi	r30, 0x36	; 54
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	88 2f       	mov	r24, r24
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	a9 01       	movw	r20, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DIO_ErrStateReadPinValue+0xa6>
    1346:	55 95       	asr	r21
    1348:	47 95       	ror	r20
    134a:	8a 95       	dec	r24
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <DIO_ErrStateReadPinValue+0xa2>
    134e:	ca 01       	movw	r24, r20
    1350:	81 70       	andi	r24, 0x01	; 1
    1352:	eb 81       	ldd	r30, Y+3	; 0x03
    1354:	fc 81       	ldd	r31, Y+4	; 0x04
    1356:	80 83       	st	Z, r24
    1358:	2b c0       	rjmp	.+86     	; 0x13b0 <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupC: *Result=GET_BIT(PINC_ITI,Copy_PinNumber); break ;
    135a:	e3 e3       	ldi	r30, 0x33	; 51
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	88 2f       	mov	r24, r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	a9 01       	movw	r20, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_ErrStateReadPinValue+0xce>
    136e:	55 95       	asr	r21
    1370:	47 95       	ror	r20
    1372:	8a 95       	dec	r24
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_ErrStateReadPinValue+0xca>
    1376:	ca 01       	movw	r24, r20
    1378:	81 70       	andi	r24, 0x01	; 1
    137a:	eb 81       	ldd	r30, Y+3	; 0x03
    137c:	fc 81       	ldd	r31, Y+4	; 0x04
    137e:	80 83       	st	Z, r24
    1380:	17 c0       	rjmp	.+46     	; 0x13b0 <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupD: *Result=GET_BIT(PIND_ITI,Copy_PinNumber); break ;
    1382:	e0 e3       	ldi	r30, 0x30	; 48
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	88 2f       	mov	r24, r24
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	a9 01       	movw	r20, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO_ErrStateReadPinValue+0xf6>
    1396:	55 95       	asr	r21
    1398:	47 95       	ror	r20
    139a:	8a 95       	dec	r24
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <DIO_ErrStateReadPinValue+0xf2>
    139e:	ca 01       	movw	r24, r20
    13a0:	81 70       	andi	r24, 0x01	; 1
    13a2:	eb 81       	ldd	r30, Y+3	; 0x03
    13a4:	fc 81       	ldd	r31, Y+4	; 0x04
    13a6:	80 83       	st	Z, r24
    13a8:	03 c0       	rjmp	.+6      	; 0x13b0 <DIO_ErrStateReadPinValue+0x10c>
		default:
			return GroupError ;
    13aa:	51 e0       	ldi	r21, 0x01	; 1
    13ac:	5d 83       	std	Y+5, r21	; 0x05
    13ae:	04 c0       	rjmp	.+8      	; 0x13b8 <DIO_ErrStateReadPinValue+0x114>
		}
		return NoError ;
    13b0:	1d 82       	std	Y+5, r1	; 0x05
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_ErrStateReadPinValue+0x114>
	}
	else
	{
		return PinNumberError ;
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	8d 83       	std	Y+5, r24	; 0x05
    13b8:	8d 81       	ldd	r24, Y+5	; 0x05
	}

}
    13ba:	27 96       	adiw	r28, 0x07	; 7
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <DIO_ErrStateSetGroupDirection>:



//
ErrState  DIO_ErrStateSetGroupDirection(DIO_GroupNumber Copy_GroupNumber ,u8 Copy_DirectionState)
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <DIO_ErrStateSetGroupDirection+0x6>
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <DIO_ErrStateSetGroupDirection+0x8>
    13d4:	0f 92       	push	r0
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_DirectionState <= 0xff && Copy_DirectionState>=0x00)
	{
		switch(Copy_GroupNumber)
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	3d 83       	std	Y+5, r19	; 0x05
    13e6:	2c 83       	std	Y+4, r18	; 0x04
    13e8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ea:	9d 81       	ldd	r25, Y+5	; 0x05
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	91 05       	cpc	r25, r1
    13f0:	d1 f0       	breq	.+52     	; 0x1426 <DIO_ErrStateSetGroupDirection+0x5a>
    13f2:	2c 81       	ldd	r18, Y+4	; 0x04
    13f4:	3d 81       	ldd	r19, Y+5	; 0x05
    13f6:	22 30       	cpi	r18, 0x02	; 2
    13f8:	31 05       	cpc	r19, r1
    13fa:	2c f4       	brge	.+10     	; 0x1406 <DIO_ErrStateSetGroupDirection+0x3a>
    13fc:	8c 81       	ldd	r24, Y+4	; 0x04
    13fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	61 f0       	breq	.+24     	; 0x141c <DIO_ErrStateSetGroupDirection+0x50>
    1404:	1f c0       	rjmp	.+62     	; 0x1444 <DIO_ErrStateSetGroupDirection+0x78>
    1406:	2c 81       	ldd	r18, Y+4	; 0x04
    1408:	3d 81       	ldd	r19, Y+5	; 0x05
    140a:	22 30       	cpi	r18, 0x02	; 2
    140c:	31 05       	cpc	r19, r1
    140e:	81 f0       	breq	.+32     	; 0x1430 <DIO_ErrStateSetGroupDirection+0x64>
    1410:	8c 81       	ldd	r24, Y+4	; 0x04
    1412:	9d 81       	ldd	r25, Y+5	; 0x05
    1414:	83 30       	cpi	r24, 0x03	; 3
    1416:	91 05       	cpc	r25, r1
    1418:	81 f0       	breq	.+32     	; 0x143a <DIO_ErrStateSetGroupDirection+0x6e>
    141a:	14 c0       	rjmp	.+40     	; 0x1444 <DIO_ErrStateSetGroupDirection+0x78>
		{
		case DIO_GroupA: DDRA_ITI =  Copy_DirectionState ;break ;
    141c:	ea e3       	ldi	r30, 0x3A	; 58
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	80 83       	st	Z, r24
    1424:	12 c0       	rjmp	.+36     	; 0x144a <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupB: DDRB_ITI =  Copy_DirectionState ;break ;
    1426:	e7 e3       	ldi	r30, 0x37	; 55
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	80 83       	st	Z, r24
    142e:	0d c0       	rjmp	.+26     	; 0x144a <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupC: DDRC_ITI =  Copy_DirectionState ;break ;
    1430:	e4 e3       	ldi	r30, 0x34	; 52
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	80 83       	st	Z, r24
    1438:	08 c0       	rjmp	.+16     	; 0x144a <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupD: DDRD_ITI =  Copy_DirectionState ;break ;
    143a:	e1 e3       	ldi	r30, 0x31	; 49
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	80 83       	st	Z, r24
    1442:	03 c0       	rjmp	.+6      	; 0x144a <DIO_ErrStateSetGroupDirection+0x7e>
		default :
			return GroupError ;
    1444:	91 e0       	ldi	r25, 0x01	; 1
    1446:	9b 83       	std	Y+3, r25	; 0x03
    1448:	01 c0       	rjmp	.+2      	; 0x144c <DIO_ErrStateSetGroupDirection+0x80>
		}
		return NoError ;
    144a:	1b 82       	std	Y+3, r1	; 0x03
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	else
	{
		return DirectionRangError;
	}
}
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <DIO_ErrStateSetGroupValue>:
ErrState  DIO_ErrStateSetGroupValue(DIO_GroupNumber Copy_GroupNumber ,u8 Copy_ValueState)
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	00 d0       	rcall	.+0      	; 0x1464 <DIO_ErrStateSetGroupValue+0x6>
    1464:	00 d0       	rcall	.+0      	; 0x1466 <DIO_ErrStateSetGroupValue+0x8>
    1466:	0f 92       	push	r0
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_ValueState <= 0xff && Copy_ValueState>=0x00)
	{
		switch(Copy_GroupNumber)
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	3d 83       	std	Y+5, r19	; 0x05
    1478:	2c 83       	std	Y+4, r18	; 0x04
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	9d 81       	ldd	r25, Y+5	; 0x05
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	91 05       	cpc	r25, r1
    1482:	d1 f0       	breq	.+52     	; 0x14b8 <DIO_ErrStateSetGroupValue+0x5a>
    1484:	2c 81       	ldd	r18, Y+4	; 0x04
    1486:	3d 81       	ldd	r19, Y+5	; 0x05
    1488:	22 30       	cpi	r18, 0x02	; 2
    148a:	31 05       	cpc	r19, r1
    148c:	2c f4       	brge	.+10     	; 0x1498 <DIO_ErrStateSetGroupValue+0x3a>
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	9d 81       	ldd	r25, Y+5	; 0x05
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	61 f0       	breq	.+24     	; 0x14ae <DIO_ErrStateSetGroupValue+0x50>
    1496:	1f c0       	rjmp	.+62     	; 0x14d6 <DIO_ErrStateSetGroupValue+0x78>
    1498:	2c 81       	ldd	r18, Y+4	; 0x04
    149a:	3d 81       	ldd	r19, Y+5	; 0x05
    149c:	22 30       	cpi	r18, 0x02	; 2
    149e:	31 05       	cpc	r19, r1
    14a0:	81 f0       	breq	.+32     	; 0x14c2 <DIO_ErrStateSetGroupValue+0x64>
    14a2:	8c 81       	ldd	r24, Y+4	; 0x04
    14a4:	9d 81       	ldd	r25, Y+5	; 0x05
    14a6:	83 30       	cpi	r24, 0x03	; 3
    14a8:	91 05       	cpc	r25, r1
    14aa:	81 f0       	breq	.+32     	; 0x14cc <DIO_ErrStateSetGroupValue+0x6e>
    14ac:	14 c0       	rjmp	.+40     	; 0x14d6 <DIO_ErrStateSetGroupValue+0x78>
		{
		case DIO_GroupA: PORTA_ITI =  Copy_ValueState ;break ;
    14ae:	eb e3       	ldi	r30, 0x3B	; 59
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	80 83       	st	Z, r24
    14b6:	12 c0       	rjmp	.+36     	; 0x14dc <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupB: PORTB_ITI =  Copy_ValueState ;break ;
    14b8:	e8 e3       	ldi	r30, 0x38	; 56
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	80 83       	st	Z, r24
    14c0:	0d c0       	rjmp	.+26     	; 0x14dc <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupC: PORTC_ITI =  Copy_ValueState ;break ;
    14c2:	e5 e3       	ldi	r30, 0x35	; 53
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	80 83       	st	Z, r24
    14ca:	08 c0       	rjmp	.+16     	; 0x14dc <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupD: PORTD_ITI =  Copy_ValueState ;break ;
    14cc:	e2 e3       	ldi	r30, 0x32	; 50
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	80 83       	st	Z, r24
    14d4:	03 c0       	rjmp	.+6      	; 0x14dc <DIO_ErrStateSetGroupValue+0x7e>
		default :
			return GroupError ;
    14d6:	91 e0       	ldi	r25, 0x01	; 1
    14d8:	9b 83       	std	Y+3, r25	; 0x03
    14da:	01 c0       	rjmp	.+2      	; 0x14de <DIO_ErrStateSetGroupValue+0x80>
		}
		return NoError ;
    14dc:	1b 82       	std	Y+3, r1	; 0x03
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
	else
	{
		return ValueRangError;
	}

}
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <DIO_ErrStateReadGroupValue>:
ErrState  DIO_ErrStateReadGroupValue(DIO_GroupNumber Copy_GroupNumber ,u8 *Result)
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <DIO_ErrStateReadGroupValue+0x6>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <DIO_ErrStateReadGroupValue+0x8>
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <DIO_ErrStateReadGroupValue+0xa>
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	7b 83       	std	Y+3, r23	; 0x03
    1502:	6a 83       	std	Y+2, r22	; 0x02
	if(Result!=Null)
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	9b 81       	ldd	r25, Y+3	; 0x03
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	09 f4       	brne	.+2      	; 0x150e <DIO_ErrStateReadGroupValue+0x1e>
    150c:	40 c0       	rjmp	.+128    	; 0x158e <DIO_ErrStateReadGroupValue+0x9e>
	{
		switch(Copy_GroupNumber)
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	3e 83       	std	Y+6, r19	; 0x06
    1516:	2d 83       	std	Y+5, r18	; 0x05
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	9e 81       	ldd	r25, Y+6	; 0x06
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	91 05       	cpc	r25, r1
    1520:	e1 f0       	breq	.+56     	; 0x155a <DIO_ErrStateReadGroupValue+0x6a>
    1522:	2d 81       	ldd	r18, Y+5	; 0x05
    1524:	3e 81       	ldd	r19, Y+6	; 0x06
    1526:	22 30       	cpi	r18, 0x02	; 2
    1528:	31 05       	cpc	r19, r1
    152a:	2c f4       	brge	.+10     	; 0x1536 <DIO_ErrStateReadGroupValue+0x46>
    152c:	8d 81       	ldd	r24, Y+5	; 0x05
    152e:	9e 81       	ldd	r25, Y+6	; 0x06
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	61 f0       	breq	.+24     	; 0x154c <DIO_ErrStateReadGroupValue+0x5c>
    1534:	27 c0       	rjmp	.+78     	; 0x1584 <DIO_ErrStateReadGroupValue+0x94>
    1536:	2d 81       	ldd	r18, Y+5	; 0x05
    1538:	3e 81       	ldd	r19, Y+6	; 0x06
    153a:	22 30       	cpi	r18, 0x02	; 2
    153c:	31 05       	cpc	r19, r1
    153e:	a1 f0       	breq	.+40     	; 0x1568 <DIO_ErrStateReadGroupValue+0x78>
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	9e 81       	ldd	r25, Y+6	; 0x06
    1544:	83 30       	cpi	r24, 0x03	; 3
    1546:	91 05       	cpc	r25, r1
    1548:	b1 f0       	breq	.+44     	; 0x1576 <DIO_ErrStateReadGroupValue+0x86>
    154a:	1c c0       	rjmp	.+56     	; 0x1584 <DIO_ErrStateReadGroupValue+0x94>
		{
		case DIO_GroupA: *Result = PINA_ITI ; break ;
    154c:	e9 e3       	ldi	r30, 0x39	; 57
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	ea 81       	ldd	r30, Y+2	; 0x02
    1554:	fb 81       	ldd	r31, Y+3	; 0x03
    1556:	80 83       	st	Z, r24
    1558:	18 c0       	rjmp	.+48     	; 0x158a <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupB: *Result = PINB_ITI ; break ;
    155a:	e6 e3       	ldi	r30, 0x36	; 54
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	ea 81       	ldd	r30, Y+2	; 0x02
    1562:	fb 81       	ldd	r31, Y+3	; 0x03
    1564:	80 83       	st	Z, r24
    1566:	11 c0       	rjmp	.+34     	; 0x158a <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupC: *Result = PINC_ITI ; break ;
    1568:	e3 e3       	ldi	r30, 0x33	; 51
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	ea 81       	ldd	r30, Y+2	; 0x02
    1570:	fb 81       	ldd	r31, Y+3	; 0x03
    1572:	80 83       	st	Z, r24
    1574:	0a c0       	rjmp	.+20     	; 0x158a <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupD: *Result = PIND_ITI ; break ;
    1576:	e0 e3       	ldi	r30, 0x30	; 48
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	ea 81       	ldd	r30, Y+2	; 0x02
    157e:	fb 81       	ldd	r31, Y+3	; 0x03
    1580:	80 83       	st	Z, r24
    1582:	03 c0       	rjmp	.+6      	; 0x158a <DIO_ErrStateReadGroupValue+0x9a>
		default :
			return GroupError ;
    1584:	91 e0       	ldi	r25, 0x01	; 1
    1586:	9c 83       	std	Y+4, r25	; 0x04
    1588:	04 c0       	rjmp	.+8      	; 0x1592 <DIO_ErrStateReadGroupValue+0xa2>
		}
		return NoError ;
    158a:	1c 82       	std	Y+4, r1	; 0x04
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <DIO_ErrStateReadGroupValue+0xa2>
	}
	else
	{
		return AddressError;
    158e:	25 e0       	ldi	r18, 0x05	; 5
    1590:	2c 83       	std	Y+4, r18	; 0x04
    1592:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    1594:	26 96       	adiw	r28, 0x06	; 6
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <SW_SwitchErrStateInit>:

#include "Switch_Interface.h"


SwitchErrState  SW_SwitchErrStateInit(Switch_Info * Switch)
{
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <SW_SwitchErrStateInit+0x6>
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <SW_SwitchErrStateInit+0x8>
    15ae:	0f 92       	push	r0
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	9a 83       	std	Y+2, r25	; 0x02
    15b6:	89 83       	std	Y+1, r24	; 0x01

	DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_Input);
    15b8:	e9 81       	ldd	r30, Y+1	; 0x01
    15ba:	fa 81       	ldd	r31, Y+2	; 0x02
    15bc:	80 81       	ld	r24, Z
    15be:	e9 81       	ldd	r30, Y+1	; 0x01
    15c0:	fa 81       	ldd	r31, Y+2	; 0x02
    15c2:	91 81       	ldd	r25, Z+1	; 0x01
    15c4:	69 2f       	mov	r22, r25
    15c6:	40 e0       	ldi	r20, 0x00	; 0
    15c8:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_ErrStateSetPinDirection>
	if(Switch->ConnectionType == InternalPullUp)
    15cc:	e9 81       	ldd	r30, Y+1	; 0x01
    15ce:	fa 81       	ldd	r31, Y+2	; 0x02
    15d0:	82 81       	ldd	r24, Z+2	; 0x02
    15d2:	88 23       	and	r24, r24
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <SW_SwitchErrStateInit+0x32>
    15d6:	7d c0       	rjmp	.+250    	; 0x16d2 <SW_SwitchErrStateInit+0x12c>
	{
		switch(Switch->SW_Group)
    15d8:	e9 81       	ldd	r30, Y+1	; 0x01
    15da:	fa 81       	ldd	r31, Y+2	; 0x02
    15dc:	80 81       	ld	r24, Z
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	3d 83       	std	Y+5, r19	; 0x05
    15e4:	2c 83       	std	Y+4, r18	; 0x04
    15e6:	8c 81       	ldd	r24, Y+4	; 0x04
    15e8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	91 05       	cpc	r25, r1
    15ee:	61 f1       	breq	.+88     	; 0x1648 <SW_SwitchErrStateInit+0xa2>
    15f0:	2c 81       	ldd	r18, Y+4	; 0x04
    15f2:	3d 81       	ldd	r19, Y+5	; 0x05
    15f4:	22 30       	cpi	r18, 0x02	; 2
    15f6:	31 05       	cpc	r19, r1
    15f8:	2c f4       	brge	.+10     	; 0x1604 <SW_SwitchErrStateInit+0x5e>
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	9d 81       	ldd	r25, Y+5	; 0x05
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	69 f0       	breq	.+26     	; 0x161c <SW_SwitchErrStateInit+0x76>
    1602:	64 c0       	rjmp	.+200    	; 0x16cc <SW_SwitchErrStateInit+0x126>
    1604:	2c 81       	ldd	r18, Y+4	; 0x04
    1606:	3d 81       	ldd	r19, Y+5	; 0x05
    1608:	22 30       	cpi	r18, 0x02	; 2
    160a:	31 05       	cpc	r19, r1
    160c:	99 f1       	breq	.+102    	; 0x1674 <SW_SwitchErrStateInit+0xce>
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	9d 81       	ldd	r25, Y+5	; 0x05
    1612:	83 30       	cpi	r24, 0x03	; 3
    1614:	91 05       	cpc	r25, r1
    1616:	09 f4       	brne	.+2      	; 0x161a <SW_SwitchErrStateInit+0x74>
    1618:	43 c0       	rjmp	.+134    	; 0x16a0 <SW_SwitchErrStateInit+0xfa>
    161a:	58 c0       	rjmp	.+176    	; 0x16cc <SW_SwitchErrStateInit+0x126>
		{
			/*Group A*/
			case DIO_GroupA : SET_BIT(PORTA_ITI , Switch->SW_Pin ) ;
    161c:	ab e3       	ldi	r26, 0x3B	; 59
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	eb e3       	ldi	r30, 0x3B	; 59
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	48 2f       	mov	r20, r24
    1628:	e9 81       	ldd	r30, Y+1	; 0x01
    162a:	fa 81       	ldd	r31, Y+2	; 0x02
    162c:	81 81       	ldd	r24, Z+1	; 0x01
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 2e       	mov	r0, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <SW_SwitchErrStateInit+0x98>
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	0a 94       	dec	r0
    1640:	e2 f7       	brpl	.-8      	; 0x163a <SW_SwitchErrStateInit+0x94>
    1642:	84 2b       	or	r24, r20
    1644:	8c 93       	st	X, r24
    1646:	45 c0       	rjmp	.+138    	; 0x16d2 <SW_SwitchErrStateInit+0x12c>
			break ;
			/*Group B*/
			case DIO_GroupB : SET_BIT(PORTB_ITI , Switch->SW_Pin ) ;
    1648:	a8 e3       	ldi	r26, 0x38	; 56
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e8 e3       	ldi	r30, 0x38	; 56
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	48 2f       	mov	r20, r24
    1654:	e9 81       	ldd	r30, Y+1	; 0x01
    1656:	fa 81       	ldd	r31, Y+2	; 0x02
    1658:	81 81       	ldd	r24, Z+1	; 0x01
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <SW_SwitchErrStateInit+0xc4>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <SW_SwitchErrStateInit+0xc0>
    166e:	84 2b       	or	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	2f c0       	rjmp	.+94     	; 0x16d2 <SW_SwitchErrStateInit+0x12c>
			break ;
			/*Group C*/
			case DIO_GroupC : SET_BIT(PORTC_ITI , Switch->SW_Pin ) ;
    1674:	a5 e3       	ldi	r26, 0x35	; 53
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e5 e3       	ldi	r30, 0x35	; 53
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	48 2f       	mov	r20, r24
    1680:	e9 81       	ldd	r30, Y+1	; 0x01
    1682:	fa 81       	ldd	r31, Y+2	; 0x02
    1684:	81 81       	ldd	r24, Z+1	; 0x01
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 2e       	mov	r0, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <SW_SwitchErrStateInit+0xf0>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <SW_SwitchErrStateInit+0xec>
    169a:	84 2b       	or	r24, r20
    169c:	8c 93       	st	X, r24
    169e:	19 c0       	rjmp	.+50     	; 0x16d2 <SW_SwitchErrStateInit+0x12c>
			break ;
			/*Group D*/
			case DIO_GroupD : SET_BIT(PORTD_ITI , Switch->SW_Pin ) ;
    16a0:	a2 e3       	ldi	r26, 0x32	; 50
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e2 e3       	ldi	r30, 0x32	; 50
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	e9 81       	ldd	r30, Y+1	; 0x01
    16ae:	fa 81       	ldd	r31, Y+2	; 0x02
    16b0:	81 81       	ldd	r24, Z+1	; 0x01
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <SW_SwitchErrStateInit+0x11c>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <SW_SwitchErrStateInit+0x118>
    16c6:	84 2b       	or	r24, r20
    16c8:	8c 93       	st	X, r24
    16ca:	03 c0       	rjmp	.+6      	; 0x16d2 <SW_SwitchErrStateInit+0x12c>
			break ;
			/*Wrong*/
			default:
				return SwitchGroupNumError ;
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	9b 83       	std	Y+3, r25	; 0x03
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <SW_SwitchErrStateInit+0x12e>
		}
	}
	return SwitchNoError;
    16d2:	1b 82       	std	Y+3, r1	; 0x03
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <SW_SwitchErrStateGetState>:
SwitchErrState  SW_SwitchErrStateGetState(Switch_Info * Switch ,SwitchState * Result)
{
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <SW_SwitchErrStateGetState+0x6>
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <SW_SwitchErrStateGetState+0x8>
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	9a 83       	std	Y+2, r25	; 0x02
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	7c 83       	std	Y+4, r23	; 0x04
    16f8:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,Result);
    16fa:	e9 81       	ldd	r30, Y+1	; 0x01
    16fc:	fa 81       	ldd	r31, Y+2	; 0x02
    16fe:	80 81       	ld	r24, Z
    1700:	e9 81       	ldd	r30, Y+1	; 0x01
    1702:	fa 81       	ldd	r31, Y+2	; 0x02
    1704:	91 81       	ldd	r25, Z+1	; 0x01
    1706:	2b 81       	ldd	r18, Y+3	; 0x03
    1708:	3c 81       	ldd	r19, Y+4	; 0x04
    170a:	69 2f       	mov	r22, r25
    170c:	a9 01       	movw	r20, r18
    170e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateReadPinValue>
	return SwitchNoError;
    1712:	80 e0       	ldi	r24, 0x00	; 0
}
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <SevSeg_SevErrInit>:
		SevSegCA_8 ,
		SevSegCA_9
};

SevErrState	   SevSeg_SevErrInit(SevSeg_info* SevenSegment1)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	00 d0       	rcall	.+0      	; 0x1728 <SevSeg_SevErrInit+0x6>
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	9a 83       	std	Y+2, r25	; 0x02
    172e:	89 83       	std	Y+1, r24	; 0x01
	DIO_ErrStateSetGroupDirection ((SevenSegment1->SevSeg_Group),0xff);
    1730:	e9 81       	ldd	r30, Y+1	; 0x01
    1732:	fa 81       	ldd	r31, Y+2	; 0x02
    1734:	81 81       	ldd	r24, Z+1	; 0x01
    1736:	6f ef       	ldi	r22, 0xFF	; 255
    1738:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_ErrStateSetGroupDirection>
	return SevSegNoError;
    173c:	80 e0       	ldi	r24, 0x00	; 0
}
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <SevSeg_SevErrStateSetNumber>:

SevErrState    SevSeg_SevErrStateSetNumber(u8 Copy_Number , SevSeg_info* SevenSegment1)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	61 97       	sbiw	r28, 0x11	; 17
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	8f 87       	std	Y+15, r24	; 0x0f
    175e:	79 8b       	std	Y+17, r23	; 0x11
    1760:	68 8b       	std	Y+16, r22	; 0x10
	DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[Copy_Number]);
    1762:	e8 89       	ldd	r30, Y+16	; 0x10
    1764:	f9 89       	ldd	r31, Y+17	; 0x11
    1766:	21 81       	ldd	r18, Z+1	; 0x01
    1768:	8f 85       	ldd	r24, Y+15	; 0x0f
    176a:	88 2f       	mov	r24, r24
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	fc 01       	movw	r30, r24
    1770:	eb 58       	subi	r30, 0x8B	; 139
    1772:	fe 4f       	sbci	r31, 0xFE	; 254
    1774:	90 81       	ld	r25, Z
    1776:	82 2f       	mov	r24, r18
    1778:	69 2f       	mov	r22, r25
    177a:	0e 94 2f 0a 	call	0x145e	; 0x145e <DIO_ErrStateSetGroupValue>
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	aa e7       	ldi	r26, 0x7A	; 122
    1784:	b4 e4       	ldi	r27, 0x44	; 68
    1786:	8b 87       	std	Y+11, r24	; 0x0b
    1788:	9c 87       	std	Y+12, r25	; 0x0c
    178a:	ad 87       	std	Y+13, r26	; 0x0d
    178c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1790:	7c 85       	ldd	r23, Y+12	; 0x0c
    1792:	8d 85       	ldd	r24, Y+13	; 0x0d
    1794:	9e 85       	ldd	r25, Y+14	; 0x0e
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	4a ef       	ldi	r20, 0xFA	; 250
    179c:	54 e4       	ldi	r21, 0x44	; 68
    179e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	8f 83       	std	Y+7, r24	; 0x07
    17a8:	98 87       	std	Y+8, r25	; 0x08
    17aa:	a9 87       	std	Y+9, r26	; 0x09
    17ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17ae:	6f 81       	ldd	r22, Y+7	; 0x07
    17b0:	78 85       	ldd	r23, Y+8	; 0x08
    17b2:	89 85       	ldd	r24, Y+9	; 0x09
    17b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e8       	ldi	r20, 0x80	; 128
    17bc:	5f e3       	ldi	r21, 0x3F	; 63
    17be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    17c2:	88 23       	and	r24, r24
    17c4:	2c f4       	brge	.+10     	; 0x17d0 <SevSeg_SevErrStateSetNumber+0x88>
		__ticks = 1;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	9e 83       	std	Y+6, r25	; 0x06
    17cc:	8d 83       	std	Y+5, r24	; 0x05
    17ce:	3f c0       	rjmp	.+126    	; 0x184e <SevSeg_SevErrStateSetNumber+0x106>
	else if (__tmp > 65535)
    17d0:	6f 81       	ldd	r22, Y+7	; 0x07
    17d2:	78 85       	ldd	r23, Y+8	; 0x08
    17d4:	89 85       	ldd	r24, Y+9	; 0x09
    17d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	3f ef       	ldi	r19, 0xFF	; 255
    17dc:	4f e7       	ldi	r20, 0x7F	; 127
    17de:	57 e4       	ldi	r21, 0x47	; 71
    17e0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    17e4:	18 16       	cp	r1, r24
    17e6:	4c f5       	brge	.+82     	; 0x183a <SevSeg_SevErrStateSetNumber+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e2       	ldi	r20, 0x20	; 32
    17f6:	51 e4       	ldi	r21, 0x41	; 65
    17f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	bc 01       	movw	r22, r24
    1802:	cd 01       	movw	r24, r26
    1804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	9e 83       	std	Y+6, r25	; 0x06
    180e:	8d 83       	std	Y+5, r24	; 0x05
    1810:	0f c0       	rjmp	.+30     	; 0x1830 <SevSeg_SevErrStateSetNumber+0xe8>
    1812:	88 ec       	ldi	r24, 0xC8	; 200
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	9c 83       	std	Y+4, r25	; 0x04
    1818:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	9c 81       	ldd	r25, Y+4	; 0x04
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <SevSeg_SevErrStateSetNumber+0xd6>
    1822:	9c 83       	std	Y+4, r25	; 0x04
    1824:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1826:	8d 81       	ldd	r24, Y+5	; 0x05
    1828:	9e 81       	ldd	r25, Y+6	; 0x06
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	9e 83       	std	Y+6, r25	; 0x06
    182e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1830:	8d 81       	ldd	r24, Y+5	; 0x05
    1832:	9e 81       	ldd	r25, Y+6	; 0x06
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	69 f7       	brne	.-38     	; 0x1812 <SevSeg_SevErrStateSetNumber+0xca>
    1838:	14 c0       	rjmp	.+40     	; 0x1862 <SevSeg_SevErrStateSetNumber+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183a:	6f 81       	ldd	r22, Y+7	; 0x07
    183c:	78 85       	ldd	r23, Y+8	; 0x08
    183e:	89 85       	ldd	r24, Y+9	; 0x09
    1840:	9a 85       	ldd	r25, Y+10	; 0x0a
    1842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	9e 83       	std	Y+6, r25	; 0x06
    184c:	8d 83       	std	Y+5, r24	; 0x05
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	9e 81       	ldd	r25, Y+6	; 0x06
    1852:	9a 83       	std	Y+2, r25	; 0x02
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	9a 81       	ldd	r25, Y+2	; 0x02
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <SevSeg_SevErrStateSetNumber+0x112>
    185e:	9a 83       	std	Y+2, r25	; 0x02
    1860:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	return SevSegNoError;
    1862:	80 e0       	ldi	r24, 0x00	; 0
}
    1864:	61 96       	adiw	r28, 0x11	; 17
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <SevSeg_SevErrStateDisplayRange>:

SevErrState    SevSeg_SevErrStateDisplayRange(SevSeg_info* SevenSegment1 , u8 Copy_start , u8 Copy_End )
{
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	a3 97       	sbiw	r28, 0x23	; 35
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
    188a:	98 a3       	std	Y+32, r25	; 0x20
    188c:	8f 8f       	std	Y+31, r24	; 0x1f
    188e:	69 a3       	std	Y+33, r22	; 0x21
    1890:	4a a3       	std	Y+34, r20	; 0x22
	if (Copy_start<Copy_End)
    1892:	99 a1       	ldd	r25, Y+33	; 0x21
    1894:	8a a1       	ldd	r24, Y+34	; 0x22
    1896:	98 17       	cp	r25, r24
    1898:	08 f0       	brcs	.+2      	; 0x189c <SevSeg_SevErrStateDisplayRange+0x26>
    189a:	94 c0       	rjmp	.+296    	; 0x19c4 <SevSeg_SevErrStateDisplayRange+0x14e>
	{
		for(s8 i = Copy_start; i<=Copy_End;i++)
    189c:	89 a1       	ldd	r24, Y+33	; 0x21
    189e:	8e 8f       	std	Y+30, r24	; 0x1e
    18a0:	84 c0       	rjmp	.+264    	; 0x19aa <SevSeg_SevErrStateDisplayRange+0x134>
		{
			DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[i]);
    18a2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    18a4:	f8 a1       	ldd	r31, Y+32	; 0x20
    18a6:	21 81       	ldd	r18, Z+1	; 0x01
    18a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18aa:	99 27       	eor	r25, r25
    18ac:	87 fd       	sbrc	r24, 7
    18ae:	90 95       	com	r25
    18b0:	fc 01       	movw	r30, r24
    18b2:	eb 58       	subi	r30, 0x8B	; 139
    18b4:	fe 4f       	sbci	r31, 0xFE	; 254
    18b6:	90 81       	ld	r25, Z
    18b8:	82 2f       	mov	r24, r18
    18ba:	69 2f       	mov	r22, r25
    18bc:	0e 94 2f 0a 	call	0x145e	; 0x145e <DIO_ErrStateSetGroupValue>
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	aa e7       	ldi	r26, 0x7A	; 122
    18c6:	b4 e4       	ldi	r27, 0x44	; 68
    18c8:	89 8f       	std	Y+25, r24	; 0x19
    18ca:	9a 8f       	std	Y+26, r25	; 0x1a
    18cc:	ab 8f       	std	Y+27, r26	; 0x1b
    18ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d0:	69 8d       	ldd	r22, Y+25	; 0x19
    18d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	4a ef       	ldi	r20, 0xFA	; 250
    18de:	54 e4       	ldi	r21, 0x44	; 68
    18e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	8d 8b       	std	Y+21, r24	; 0x15
    18ea:	9e 8b       	std	Y+22, r25	; 0x16
    18ec:	af 8b       	std	Y+23, r26	; 0x17
    18ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18f0:	6d 89       	ldd	r22, Y+21	; 0x15
    18f2:	7e 89       	ldd	r23, Y+22	; 0x16
    18f4:	8f 89       	ldd	r24, Y+23	; 0x17
    18f6:	98 8d       	ldd	r25, Y+24	; 0x18
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e8       	ldi	r20, 0x80	; 128
    18fe:	5f e3       	ldi	r21, 0x3F	; 63
    1900:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1904:	88 23       	and	r24, r24
    1906:	2c f4       	brge	.+10     	; 0x1912 <SevSeg_SevErrStateDisplayRange+0x9c>
		__ticks = 1;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	9c 8b       	std	Y+20, r25	; 0x14
    190e:	8b 8b       	std	Y+19, r24	; 0x13
    1910:	3f c0       	rjmp	.+126    	; 0x1990 <SevSeg_SevErrStateDisplayRange+0x11a>
	else if (__tmp > 65535)
    1912:	6d 89       	ldd	r22, Y+21	; 0x15
    1914:	7e 89       	ldd	r23, Y+22	; 0x16
    1916:	8f 89       	ldd	r24, Y+23	; 0x17
    1918:	98 8d       	ldd	r25, Y+24	; 0x18
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	3f ef       	ldi	r19, 0xFF	; 255
    191e:	4f e7       	ldi	r20, 0x7F	; 127
    1920:	57 e4       	ldi	r21, 0x47	; 71
    1922:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1926:	18 16       	cp	r1, r24
    1928:	4c f5       	brge	.+82     	; 0x197c <SevSeg_SevErrStateDisplayRange+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192a:	69 8d       	ldd	r22, Y+25	; 0x19
    192c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    192e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1930:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e2       	ldi	r20, 0x20	; 32
    1938:	51 e4       	ldi	r21, 0x41	; 65
    193a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	bc 01       	movw	r22, r24
    1944:	cd 01       	movw	r24, r26
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	9c 8b       	std	Y+20, r25	; 0x14
    1950:	8b 8b       	std	Y+19, r24	; 0x13
    1952:	0f c0       	rjmp	.+30     	; 0x1972 <SevSeg_SevErrStateDisplayRange+0xfc>
    1954:	88 ec       	ldi	r24, 0xC8	; 200
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9a 8b       	std	Y+18, r25	; 0x12
    195a:	89 8b       	std	Y+17, r24	; 0x11
    195c:	89 89       	ldd	r24, Y+17	; 0x11
    195e:	9a 89       	ldd	r25, Y+18	; 0x12
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	f1 f7       	brne	.-4      	; 0x1960 <SevSeg_SevErrStateDisplayRange+0xea>
    1964:	9a 8b       	std	Y+18, r25	; 0x12
    1966:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1968:	8b 89       	ldd	r24, Y+19	; 0x13
    196a:	9c 89       	ldd	r25, Y+20	; 0x14
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	9c 8b       	std	Y+20, r25	; 0x14
    1970:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1972:	8b 89       	ldd	r24, Y+19	; 0x13
    1974:	9c 89       	ldd	r25, Y+20	; 0x14
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	69 f7       	brne	.-38     	; 0x1954 <SevSeg_SevErrStateDisplayRange+0xde>
    197a:	14 c0       	rjmp	.+40     	; 0x19a4 <SevSeg_SevErrStateDisplayRange+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197c:	6d 89       	ldd	r22, Y+21	; 0x15
    197e:	7e 89       	ldd	r23, Y+22	; 0x16
    1980:	8f 89       	ldd	r24, Y+23	; 0x17
    1982:	98 8d       	ldd	r25, Y+24	; 0x18
    1984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	9c 8b       	std	Y+20, r25	; 0x14
    198e:	8b 8b       	std	Y+19, r24	; 0x13
    1990:	8b 89       	ldd	r24, Y+19	; 0x13
    1992:	9c 89       	ldd	r25, Y+20	; 0x14
    1994:	98 8b       	std	Y+16, r25	; 0x10
    1996:	8f 87       	std	Y+15, r24	; 0x0f
    1998:	8f 85       	ldd	r24, Y+15	; 0x0f
    199a:	98 89       	ldd	r25, Y+16	; 0x10
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <SevSeg_SevErrStateDisplayRange+0x126>
    19a0:	98 8b       	std	Y+16, r25	; 0x10
    19a2:	8f 87       	std	Y+15, r24	; 0x0f

SevErrState    SevSeg_SevErrStateDisplayRange(SevSeg_info* SevenSegment1 , u8 Copy_start , u8 Copy_End )
{
	if (Copy_start<Copy_End)
	{
		for(s8 i = Copy_start; i<=Copy_End;i++)
    19a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19a6:	8f 5f       	subi	r24, 0xFF	; 255
    19a8:	8e 8f       	std	Y+30, r24	; 0x1e
    19aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19ac:	28 2f       	mov	r18, r24
    19ae:	33 27       	eor	r19, r19
    19b0:	27 fd       	sbrc	r18, 7
    19b2:	30 95       	com	r19
    19b4:	8a a1       	ldd	r24, Y+34	; 0x22
    19b6:	88 2f       	mov	r24, r24
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	82 17       	cp	r24, r18
    19bc:	93 07       	cpc	r25, r19
    19be:	0c f0       	brlt	.+2      	; 0x19c2 <SevSeg_SevErrStateDisplayRange+0x14c>
    19c0:	70 cf       	rjmp	.-288    	; 0x18a2 <SevSeg_SevErrStateDisplayRange+0x2c>
    19c2:	9c c0       	rjmp	.+312    	; 0x1afc <SevSeg_SevErrStateDisplayRange+0x286>
		{
			DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[i]);
			_delay_ms(1000);
		}
	}
	else if(Copy_start>Copy_End)
    19c4:	99 a1       	ldd	r25, Y+33	; 0x21
    19c6:	8a a1       	ldd	r24, Y+34	; 0x22
    19c8:	89 17       	cp	r24, r25
    19ca:	08 f0       	brcs	.+2      	; 0x19ce <SevSeg_SevErrStateDisplayRange+0x158>
    19cc:	94 c0       	rjmp	.+296    	; 0x1af6 <SevSeg_SevErrStateDisplayRange+0x280>
	{
		for(s8 i = Copy_start; i>=Copy_End;i--)
    19ce:	89 a1       	ldd	r24, Y+33	; 0x21
    19d0:	8d 8f       	std	Y+29, r24	; 0x1d
    19d2:	84 c0       	rjmp	.+264    	; 0x1adc <SevSeg_SevErrStateDisplayRange+0x266>
		{
			DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[i]);
    19d4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    19d6:	f8 a1       	ldd	r31, Y+32	; 0x20
    19d8:	21 81       	ldd	r18, Z+1	; 0x01
    19da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19dc:	99 27       	eor	r25, r25
    19de:	87 fd       	sbrc	r24, 7
    19e0:	90 95       	com	r25
    19e2:	fc 01       	movw	r30, r24
    19e4:	eb 58       	subi	r30, 0x8B	; 139
    19e6:	fe 4f       	sbci	r31, 0xFE	; 254
    19e8:	90 81       	ld	r25, Z
    19ea:	82 2f       	mov	r24, r18
    19ec:	69 2f       	mov	r22, r25
    19ee:	0e 94 2f 0a 	call	0x145e	; 0x145e <DIO_ErrStateSetGroupValue>
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	aa e7       	ldi	r26, 0x7A	; 122
    19f8:	b4 e4       	ldi	r27, 0x44	; 68
    19fa:	8b 87       	std	Y+11, r24	; 0x0b
    19fc:	9c 87       	std	Y+12, r25	; 0x0c
    19fe:	ad 87       	std	Y+13, r26	; 0x0d
    1a00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	4a ef       	ldi	r20, 0xFA	; 250
    1a10:	54 e4       	ldi	r21, 0x44	; 68
    1a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	8f 83       	std	Y+7, r24	; 0x07
    1a1c:	98 87       	std	Y+8, r25	; 0x08
    1a1e:	a9 87       	std	Y+9, r26	; 0x09
    1a20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a22:	6f 81       	ldd	r22, Y+7	; 0x07
    1a24:	78 85       	ldd	r23, Y+8	; 0x08
    1a26:	89 85       	ldd	r24, Y+9	; 0x09
    1a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e8       	ldi	r20, 0x80	; 128
    1a30:	5f e3       	ldi	r21, 0x3F	; 63
    1a32:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1a36:	88 23       	and	r24, r24
    1a38:	2c f4       	brge	.+10     	; 0x1a44 <SevSeg_SevErrStateDisplayRange+0x1ce>
		__ticks = 1;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	9e 83       	std	Y+6, r25	; 0x06
    1a40:	8d 83       	std	Y+5, r24	; 0x05
    1a42:	3f c0       	rjmp	.+126    	; 0x1ac2 <SevSeg_SevErrStateDisplayRange+0x24c>
	else if (__tmp > 65535)
    1a44:	6f 81       	ldd	r22, Y+7	; 0x07
    1a46:	78 85       	ldd	r23, Y+8	; 0x08
    1a48:	89 85       	ldd	r24, Y+9	; 0x09
    1a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	3f ef       	ldi	r19, 0xFF	; 255
    1a50:	4f e7       	ldi	r20, 0x7F	; 127
    1a52:	57 e4       	ldi	r21, 0x47	; 71
    1a54:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1a58:	18 16       	cp	r1, r24
    1a5a:	4c f5       	brge	.+82     	; 0x1aae <SevSeg_SevErrStateDisplayRange+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e2       	ldi	r20, 0x20	; 32
    1a6a:	51 e4       	ldi	r21, 0x41	; 65
    1a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	bc 01       	movw	r22, r24
    1a76:	cd 01       	movw	r24, r26
    1a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	8d 83       	std	Y+5, r24	; 0x05
    1a84:	0f c0       	rjmp	.+30     	; 0x1aa4 <SevSeg_SevErrStateDisplayRange+0x22e>
    1a86:	88 ec       	ldi	r24, 0xC8	; 200
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	9c 83       	std	Y+4, r25	; 0x04
    1a8c:	8b 83       	std	Y+3, r24	; 0x03
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	9c 81       	ldd	r25, Y+4	; 0x04
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <SevSeg_SevErrStateDisplayRange+0x21c>
    1a96:	9c 83       	std	Y+4, r25	; 0x04
    1a98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	9e 83       	std	Y+6, r25	; 0x06
    1aa2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	69 f7       	brne	.-38     	; 0x1a86 <SevSeg_SevErrStateDisplayRange+0x210>
    1aac:	14 c0       	rjmp	.+40     	; 0x1ad6 <SevSeg_SevErrStateDisplayRange+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aae:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab0:	78 85       	ldd	r23, Y+8	; 0x08
    1ab2:	89 85       	ldd	r24, Y+9	; 0x09
    1ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	9e 83       	std	Y+6, r25	; 0x06
    1ac0:	8d 83       	std	Y+5, r24	; 0x05
    1ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac6:	9a 83       	std	Y+2, r25	; 0x02
    1ac8:	89 83       	std	Y+1, r24	; 0x01
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <SevSeg_SevErrStateDisplayRange+0x258>
    1ad2:	9a 83       	std	Y+2, r25	; 0x02
    1ad4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
		}
	}
	else if(Copy_start>Copy_End)
	{
		for(s8 i = Copy_start; i>=Copy_End;i--)
    1ad6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ad8:	81 50       	subi	r24, 0x01	; 1
    1ada:	8d 8f       	std	Y+29, r24	; 0x1d
    1adc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ade:	28 2f       	mov	r18, r24
    1ae0:	33 27       	eor	r19, r19
    1ae2:	27 fd       	sbrc	r18, 7
    1ae4:	30 95       	com	r19
    1ae6:	8a a1       	ldd	r24, Y+34	; 0x22
    1ae8:	88 2f       	mov	r24, r24
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	28 17       	cp	r18, r24
    1aee:	39 07       	cpc	r19, r25
    1af0:	0c f0       	brlt	.+2      	; 0x1af4 <SevSeg_SevErrStateDisplayRange+0x27e>
    1af2:	70 cf       	rjmp	.-288    	; 0x19d4 <SevSeg_SevErrStateDisplayRange+0x15e>
    1af4:	03 c0       	rjmp	.+6      	; 0x1afc <SevSeg_SevErrStateDisplayRange+0x286>
			_delay_ms(1000);
		}
	}
	else
	{
		return DispRangeError;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	8b a3       	std	Y+35, r24	; 0x23
    1afa:	01 c0       	rjmp	.+2      	; 0x1afe <SevSeg_SevErrStateDisplayRange+0x288>
	}
	return SevSegNoError;
    1afc:	1b a2       	std	Y+35, r1	; 0x23
    1afe:	8b a1       	ldd	r24, Y+35	; 0x23
	
}
    1b00:	a3 96       	adiw	r28, 0x23	; 35
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <Led_LedErrStateTurnOn>:
#include "../../Common/definition.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "Led_Interface.h"

LedErrState	Led_LedErrStateTurnOn(Led_info *Led) 
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <Led_LedErrStateTurnOn+0x6>
    1b18:	0f 92       	push	r0
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	9a 83       	std	Y+2, r25	; 0x02
    1b20:	89 83       	std	Y+1, r24	; 0x01
	
	if (Led->ConnectionType == Source_Connection)
    1b22:	e9 81       	ldd	r30, Y+1	; 0x01
    1b24:	fa 81       	ldd	r31, Y+2	; 0x02
    1b26:	82 81       	ldd	r24, Z+2	; 0x02
    1b28:	88 23       	and	r24, r24
    1b2a:	59 f4       	brne	.+22     	; 0x1b42 <Led_LedErrStateTurnOn+0x30>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_High);
    1b2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b30:	80 81       	ld	r24, Z
    1b32:	e9 81       	ldd	r30, Y+1	; 0x01
    1b34:	fa 81       	ldd	r31, Y+2	; 0x02
    1b36:	91 81       	ldd	r25, Z+1	; 0x01
    1b38:	69 2f       	mov	r22, r25
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_ErrStateSetPinValue>
    1b40:	13 c0       	rjmp	.+38     	; 0x1b68 <Led_LedErrStateTurnOn+0x56>
	}
	else if (Led->ConnectionType == Sink_Connection)
    1b42:	e9 81       	ldd	r30, Y+1	; 0x01
    1b44:	fa 81       	ldd	r31, Y+2	; 0x02
    1b46:	82 81       	ldd	r24, Z+2	; 0x02
    1b48:	81 30       	cpi	r24, 0x01	; 1
    1b4a:	59 f4       	brne	.+22     	; 0x1b62 <Led_LedErrStateTurnOn+0x50>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_Low);
    1b4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b50:	80 81       	ld	r24, Z
    1b52:	e9 81       	ldd	r30, Y+1	; 0x01
    1b54:	fa 81       	ldd	r31, Y+2	; 0x02
    1b56:	91 81       	ldd	r25, Z+1	; 0x01
    1b58:	69 2f       	mov	r22, r25
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_ErrStateSetPinValue>
    1b60:	03 c0       	rjmp	.+6      	; 0x1b68 <Led_LedErrStateTurnOn+0x56>
	}
	else 
	{
		return ConnectionTypeError;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	8b 83       	std	Y+3, r24	; 0x03
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <Led_LedErrStateTurnOn+0x58>
	}
	return LedNoError;
    1b68:	1b 82       	std	Y+3, r1	; 0x03
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
	
	
} 
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <Led_LedErrStateTurnOff>:
  


LedErrState	Led_LedErrStateTurnOff(Led_info *Led) 
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <Led_LedErrStateTurnOff+0x6>
    1b7e:	0f 92       	push	r0
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	9a 83       	std	Y+2, r25	; 0x02
    1b86:	89 83       	std	Y+1, r24	; 0x01
	if (Led->ConnectionType == Source_Connection)
    1b88:	e9 81       	ldd	r30, Y+1	; 0x01
    1b8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8c:	82 81       	ldd	r24, Z+2	; 0x02
    1b8e:	88 23       	and	r24, r24
    1b90:	59 f4       	brne	.+22     	; 0x1ba8 <Led_LedErrStateTurnOff+0x30>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_Low);
    1b92:	e9 81       	ldd	r30, Y+1	; 0x01
    1b94:	fa 81       	ldd	r31, Y+2	; 0x02
    1b96:	80 81       	ld	r24, Z
    1b98:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9c:	91 81       	ldd	r25, Z+1	; 0x01
    1b9e:	69 2f       	mov	r22, r25
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_ErrStateSetPinValue>
    1ba6:	13 c0       	rjmp	.+38     	; 0x1bce <Led_LedErrStateTurnOff+0x56>
	}
	else if (Led->ConnectionType == Sink_Connection)
    1ba8:	e9 81       	ldd	r30, Y+1	; 0x01
    1baa:	fa 81       	ldd	r31, Y+2	; 0x02
    1bac:	82 81       	ldd	r24, Z+2	; 0x02
    1bae:	81 30       	cpi	r24, 0x01	; 1
    1bb0:	59 f4       	brne	.+22     	; 0x1bc8 <Led_LedErrStateTurnOff+0x50>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_High);
    1bb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb6:	80 81       	ld	r24, Z
    1bb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bba:	fa 81       	ldd	r31, Y+2	; 0x02
    1bbc:	91 81       	ldd	r25, Z+1	; 0x01
    1bbe:	69 2f       	mov	r22, r25
    1bc0:	41 e0       	ldi	r20, 0x01	; 1
    1bc2:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_ErrStateSetPinValue>
    1bc6:	03 c0       	rjmp	.+6      	; 0x1bce <Led_LedErrStateTurnOff+0x56>
	}
	else 
	{
		return ConnectionTypeError;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	8b 83       	std	Y+3, r24	; 0x03
    1bcc:	01 c0       	rjmp	.+2      	; 0x1bd0 <Led_LedErrStateTurnOff+0x58>
	}
	return NoError;
    1bce:	1b 82       	std	Y+3, r1	; 0x03
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
	
}
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <LCD_VoidInit>:




void LCD_VoidInit(Lcd_info* lcd)
{
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	ea 97       	sbiw	r28, 0x3a	; 58
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	9a af       	std	Y+58, r25	; 0x3a
    1bf4:	89 af       	std	Y+57, r24	; 0x39
	
	
	/*Set Direction*/
	DIO_ErrStateSetPinDirection(lcd->Rs_Group,lcd->Rs_Pin,DIO_Output);
    1bf6:	e9 ad       	ldd	r30, Y+57	; 0x39
    1bf8:	fa ad       	ldd	r31, Y+58	; 0x3a
    1bfa:	80 81       	ld	r24, Z
    1bfc:	e9 ad       	ldd	r30, Y+57	; 0x39
    1bfe:	fa ad       	ldd	r31, Y+58	; 0x3a
    1c00:	91 81       	ldd	r25, Z+1	; 0x01
    1c02:	69 2f       	mov	r22, r25
    1c04:	41 e0       	ldi	r20, 0x01	; 1
    1c06:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->Rw_Group,lcd->Rw_Pin,DIO_Output);
    1c0a:	e9 ad       	ldd	r30, Y+57	; 0x39
    1c0c:	fa ad       	ldd	r31, Y+58	; 0x3a
    1c0e:	82 81       	ldd	r24, Z+2	; 0x02
    1c10:	e9 ad       	ldd	r30, Y+57	; 0x39
    1c12:	fa ad       	ldd	r31, Y+58	; 0x3a
    1c14:	93 81       	ldd	r25, Z+3	; 0x03
    1c16:	69 2f       	mov	r22, r25
    1c18:	41 e0       	ldi	r20, 0x01	; 1
    1c1a:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->E_Group,lcd->E_Pin,DIO_Output);
    1c1e:	e9 ad       	ldd	r30, Y+57	; 0x39
    1c20:	fa ad       	ldd	r31, Y+58	; 0x3a
    1c22:	84 81       	ldd	r24, Z+4	; 0x04
    1c24:	e9 ad       	ldd	r30, Y+57	; 0x39
    1c26:	fa ad       	ldd	r31, Y+58	; 0x3a
    1c28:	95 81       	ldd	r25, Z+5	; 0x05
    1c2a:	69 2f       	mov	r22, r25
    1c2c:	41 e0       	ldi	r20, 0x01	; 1
    1c2e:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetGroupDirection(lcd->Data_Group,0xff);
    1c32:	e9 ad       	ldd	r30, Y+57	; 0x39
    1c34:	fa ad       	ldd	r31, Y+58	; 0x3a
    1c36:	86 81       	ldd	r24, Z+6	; 0x06
    1c38:	6f ef       	ldi	r22, 0xFF	; 255
    1c3a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_ErrStateSetGroupDirection>
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	a0 e2       	ldi	r26, 0x20	; 32
    1c44:	b2 e4       	ldi	r27, 0x42	; 66
    1c46:	8d ab       	std	Y+53, r24	; 0x35
    1c48:	9e ab       	std	Y+54, r25	; 0x36
    1c4a:	af ab       	std	Y+55, r26	; 0x37
    1c4c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4e:	6d a9       	ldd	r22, Y+53	; 0x35
    1c50:	7e a9       	ldd	r23, Y+54	; 0x36
    1c52:	8f a9       	ldd	r24, Y+55	; 0x37
    1c54:	98 ad       	ldd	r25, Y+56	; 0x38
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	4a ef       	ldi	r20, 0xFA	; 250
    1c5c:	54 e4       	ldi	r21, 0x44	; 68
    1c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	89 ab       	std	Y+49, r24	; 0x31
    1c68:	9a ab       	std	Y+50, r25	; 0x32
    1c6a:	ab ab       	std	Y+51, r26	; 0x33
    1c6c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c70:	7a a9       	ldd	r23, Y+50	; 0x32
    1c72:	8b a9       	ldd	r24, Y+51	; 0x33
    1c74:	9c a9       	ldd	r25, Y+52	; 0x34
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e8       	ldi	r20, 0x80	; 128
    1c7c:	5f e3       	ldi	r21, 0x3F	; 63
    1c7e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1c82:	88 23       	and	r24, r24
    1c84:	2c f4       	brge	.+10     	; 0x1c90 <LCD_VoidInit+0xb2>
		__ticks = 1;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	98 ab       	std	Y+48, r25	; 0x30
    1c8c:	8f a7       	std	Y+47, r24	; 0x2f
    1c8e:	3f c0       	rjmp	.+126    	; 0x1d0e <LCD_VoidInit+0x130>
	else if (__tmp > 65535)
    1c90:	69 a9       	ldd	r22, Y+49	; 0x31
    1c92:	7a a9       	ldd	r23, Y+50	; 0x32
    1c94:	8b a9       	ldd	r24, Y+51	; 0x33
    1c96:	9c a9       	ldd	r25, Y+52	; 0x34
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	3f ef       	ldi	r19, 0xFF	; 255
    1c9c:	4f e7       	ldi	r20, 0x7F	; 127
    1c9e:	57 e4       	ldi	r21, 0x47	; 71
    1ca0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1ca4:	18 16       	cp	r1, r24
    1ca6:	4c f5       	brge	.+82     	; 0x1cfa <LCD_VoidInit+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca8:	6d a9       	ldd	r22, Y+53	; 0x35
    1caa:	7e a9       	ldd	r23, Y+54	; 0x36
    1cac:	8f a9       	ldd	r24, Y+55	; 0x37
    1cae:	98 ad       	ldd	r25, Y+56	; 0x38
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e2       	ldi	r20, 0x20	; 32
    1cb6:	51 e4       	ldi	r21, 0x41	; 65
    1cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	98 ab       	std	Y+48, r25	; 0x30
    1cce:	8f a7       	std	Y+47, r24	; 0x2f
    1cd0:	0f c0       	rjmp	.+30     	; 0x1cf0 <LCD_VoidInit+0x112>
    1cd2:	88 ec       	ldi	r24, 0xC8	; 200
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	9e a7       	std	Y+46, r25	; 0x2e
    1cd8:	8d a7       	std	Y+45, r24	; 0x2d
    1cda:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cdc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <LCD_VoidInit+0x100>
    1ce2:	9e a7       	std	Y+46, r25	; 0x2e
    1ce4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ce8:	98 a9       	ldd	r25, Y+48	; 0x30
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	98 ab       	std	Y+48, r25	; 0x30
    1cee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf2:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	69 f7       	brne	.-38     	; 0x1cd2 <LCD_VoidInit+0xf4>
    1cf8:	14 c0       	rjmp	.+40     	; 0x1d22 <LCD_VoidInit+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfa:	69 a9       	ldd	r22, Y+49	; 0x31
    1cfc:	7a a9       	ldd	r23, Y+50	; 0x32
    1cfe:	8b a9       	ldd	r24, Y+51	; 0x33
    1d00:	9c a9       	ldd	r25, Y+52	; 0x34
    1d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	98 ab       	std	Y+48, r25	; 0x30
    1d0c:	8f a7       	std	Y+47, r24	; 0x2f
    1d0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d10:	98 a9       	ldd	r25, Y+48	; 0x30
    1d12:	9c a7       	std	Y+44, r25	; 0x2c
    1d14:	8b a7       	std	Y+43, r24	; 0x2b
    1d16:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d18:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <LCD_VoidInit+0x13c>
    1d1e:	9c a7       	std	Y+44, r25	; 0x2c
    1d20:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);


	// Function set
	LCD_VoidSendCommand(LCD_Set8Bit2Line5x8,lcd);
    1d22:	29 ad       	ldd	r18, Y+57	; 0x39
    1d24:	3a ad       	ldd	r19, Y+58	; 0x3a
    1d26:	88 e3       	ldi	r24, 0x38	; 56
    1d28:	b9 01       	movw	r22, r18
    1d2a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <LCD_VoidSendCommand>
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	a0 e8       	ldi	r26, 0x80	; 128
    1d34:	bf e3       	ldi	r27, 0x3F	; 63
    1d36:	8f a3       	std	Y+39, r24	; 0x27
    1d38:	98 a7       	std	Y+40, r25	; 0x28
    1d3a:	a9 a7       	std	Y+41, r26	; 0x29
    1d3c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3e:	6f a1       	ldd	r22, Y+39	; 0x27
    1d40:	78 a5       	ldd	r23, Y+40	; 0x28
    1d42:	89 a5       	ldd	r24, Y+41	; 0x29
    1d44:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	4a ef       	ldi	r20, 0xFA	; 250
    1d4c:	54 e4       	ldi	r21, 0x44	; 68
    1d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	8b a3       	std	Y+35, r24	; 0x23
    1d58:	9c a3       	std	Y+36, r25	; 0x24
    1d5a:	ad a3       	std	Y+37, r26	; 0x25
    1d5c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d60:	7c a1       	ldd	r23, Y+36	; 0x24
    1d62:	8d a1       	ldd	r24, Y+37	; 0x25
    1d64:	9e a1       	ldd	r25, Y+38	; 0x26
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e8       	ldi	r20, 0x80	; 128
    1d6c:	5f e3       	ldi	r21, 0x3F	; 63
    1d6e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1d72:	88 23       	and	r24, r24
    1d74:	2c f4       	brge	.+10     	; 0x1d80 <LCD_VoidInit+0x1a2>
		__ticks = 1;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	9a a3       	std	Y+34, r25	; 0x22
    1d7c:	89 a3       	std	Y+33, r24	; 0x21
    1d7e:	3f c0       	rjmp	.+126    	; 0x1dfe <LCD_VoidInit+0x220>
	else if (__tmp > 65535)
    1d80:	6b a1       	ldd	r22, Y+35	; 0x23
    1d82:	7c a1       	ldd	r23, Y+36	; 0x24
    1d84:	8d a1       	ldd	r24, Y+37	; 0x25
    1d86:	9e a1       	ldd	r25, Y+38	; 0x26
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	3f ef       	ldi	r19, 0xFF	; 255
    1d8c:	4f e7       	ldi	r20, 0x7F	; 127
    1d8e:	57 e4       	ldi	r21, 0x47	; 71
    1d90:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1d94:	18 16       	cp	r1, r24
    1d96:	4c f5       	brge	.+82     	; 0x1dea <LCD_VoidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d98:	6f a1       	ldd	r22, Y+39	; 0x27
    1d9a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d9c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e2       	ldi	r20, 0x20	; 32
    1da6:	51 e4       	ldi	r21, 0x41	; 65
    1da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	bc 01       	movw	r22, r24
    1db2:	cd 01       	movw	r24, r26
    1db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	9a a3       	std	Y+34, r25	; 0x22
    1dbe:	89 a3       	std	Y+33, r24	; 0x21
    1dc0:	0f c0       	rjmp	.+30     	; 0x1de0 <LCD_VoidInit+0x202>
    1dc2:	88 ec       	ldi	r24, 0xC8	; 200
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	98 a3       	std	Y+32, r25	; 0x20
    1dc8:	8f 8f       	std	Y+31, r24	; 0x1f
    1dca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dcc:	98 a1       	ldd	r25, Y+32	; 0x20
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <LCD_VoidInit+0x1f0>
    1dd2:	98 a3       	std	Y+32, r25	; 0x20
    1dd4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd6:	89 a1       	ldd	r24, Y+33	; 0x21
    1dd8:	9a a1       	ldd	r25, Y+34	; 0x22
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	9a a3       	std	Y+34, r25	; 0x22
    1dde:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de0:	89 a1       	ldd	r24, Y+33	; 0x21
    1de2:	9a a1       	ldd	r25, Y+34	; 0x22
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	69 f7       	brne	.-38     	; 0x1dc2 <LCD_VoidInit+0x1e4>
    1de8:	14 c0       	rjmp	.+40     	; 0x1e12 <LCD_VoidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dea:	6b a1       	ldd	r22, Y+35	; 0x23
    1dec:	7c a1       	ldd	r23, Y+36	; 0x24
    1dee:	8d a1       	ldd	r24, Y+37	; 0x25
    1df0:	9e a1       	ldd	r25, Y+38	; 0x26
    1df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	9a a3       	std	Y+34, r25	; 0x22
    1dfc:	89 a3       	std	Y+33, r24	; 0x21
    1dfe:	89 a1       	ldd	r24, Y+33	; 0x21
    1e00:	9a a1       	ldd	r25, Y+34	; 0x22
    1e02:	9e 8f       	std	Y+30, r25	; 0x1e
    1e04:	8d 8f       	std	Y+29, r24	; 0x1d
    1e06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <LCD_VoidInit+0x22c>
    1e0e:	9e 8f       	std	Y+30, r25	; 0x1e
    1e10:	8d 8f       	std	Y+29, r24	; 0x1d
	//_delay_us(40);
	_delay_ms(1);
	// Display ON/OFF control
	LCD_VoidSendCommand(LCD_CursorON,lcd);
    1e12:	29 ad       	ldd	r18, Y+57	; 0x39
    1e14:	3a ad       	ldd	r19, Y+58	; 0x3a
    1e16:	8e e0       	ldi	r24, 0x0E	; 14
    1e18:	b9 01       	movw	r22, r18
    1e1a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <LCD_VoidSendCommand>
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	a0 e8       	ldi	r26, 0x80	; 128
    1e24:	bf e3       	ldi	r27, 0x3F	; 63
    1e26:	89 8f       	std	Y+25, r24	; 0x19
    1e28:	9a 8f       	std	Y+26, r25	; 0x1a
    1e2a:	ab 8f       	std	Y+27, r26	; 0x1b
    1e2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e2e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	4a ef       	ldi	r20, 0xFA	; 250
    1e3c:	54 e4       	ldi	r21, 0x44	; 68
    1e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	8d 8b       	std	Y+21, r24	; 0x15
    1e48:	9e 8b       	std	Y+22, r25	; 0x16
    1e4a:	af 8b       	std	Y+23, r26	; 0x17
    1e4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e50:	7e 89       	ldd	r23, Y+22	; 0x16
    1e52:	8f 89       	ldd	r24, Y+23	; 0x17
    1e54:	98 8d       	ldd	r25, Y+24	; 0x18
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	40 e8       	ldi	r20, 0x80	; 128
    1e5c:	5f e3       	ldi	r21, 0x3F	; 63
    1e5e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1e62:	88 23       	and	r24, r24
    1e64:	2c f4       	brge	.+10     	; 0x1e70 <LCD_VoidInit+0x292>
		__ticks = 1;
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	9c 8b       	std	Y+20, r25	; 0x14
    1e6c:	8b 8b       	std	Y+19, r24	; 0x13
    1e6e:	3f c0       	rjmp	.+126    	; 0x1eee <LCD_VoidInit+0x310>
	else if (__tmp > 65535)
    1e70:	6d 89       	ldd	r22, Y+21	; 0x15
    1e72:	7e 89       	ldd	r23, Y+22	; 0x16
    1e74:	8f 89       	ldd	r24, Y+23	; 0x17
    1e76:	98 8d       	ldd	r25, Y+24	; 0x18
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	3f ef       	ldi	r19, 0xFF	; 255
    1e7c:	4f e7       	ldi	r20, 0x7F	; 127
    1e7e:	57 e4       	ldi	r21, 0x47	; 71
    1e80:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1e84:	18 16       	cp	r1, r24
    1e86:	4c f5       	brge	.+82     	; 0x1eda <LCD_VoidInit+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e88:	69 8d       	ldd	r22, Y+25	; 0x19
    1e8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	40 e2       	ldi	r20, 0x20	; 32
    1e96:	51 e4       	ldi	r21, 0x41	; 65
    1e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	bc 01       	movw	r22, r24
    1ea2:	cd 01       	movw	r24, r26
    1ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	9c 8b       	std	Y+20, r25	; 0x14
    1eae:	8b 8b       	std	Y+19, r24	; 0x13
    1eb0:	0f c0       	rjmp	.+30     	; 0x1ed0 <LCD_VoidInit+0x2f2>
    1eb2:	88 ec       	ldi	r24, 0xC8	; 200
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	9a 8b       	std	Y+18, r25	; 0x12
    1eb8:	89 8b       	std	Y+17, r24	; 0x11
    1eba:	89 89       	ldd	r24, Y+17	; 0x11
    1ebc:	9a 89       	ldd	r25, Y+18	; 0x12
    1ebe:	01 97       	sbiw	r24, 0x01	; 1
    1ec0:	f1 f7       	brne	.-4      	; 0x1ebe <LCD_VoidInit+0x2e0>
    1ec2:	9a 8b       	std	Y+18, r25	; 0x12
    1ec4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	9c 8b       	std	Y+20, r25	; 0x14
    1ece:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	69 f7       	brne	.-38     	; 0x1eb2 <LCD_VoidInit+0x2d4>
    1ed8:	14 c0       	rjmp	.+40     	; 0x1f02 <LCD_VoidInit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eda:	6d 89       	ldd	r22, Y+21	; 0x15
    1edc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ede:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	9c 8b       	std	Y+20, r25	; 0x14
    1eec:	8b 8b       	std	Y+19, r24	; 0x13
    1eee:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef2:	98 8b       	std	Y+16, r25	; 0x10
    1ef4:	8f 87       	std	Y+15, r24	; 0x0f
    1ef6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef8:	98 89       	ldd	r25, Y+16	; 0x10
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	f1 f7       	brne	.-4      	; 0x1efa <LCD_VoidInit+0x31c>
    1efe:	98 8b       	std	Y+16, r25	; 0x10
    1f00:	8f 87       	std	Y+15, r24	; 0x0f
	//_delay_us(40);
	_delay_ms(1);
	// Display Clear
	LCD_VoidSendCommand(LCD_ClearDisplay,lcd);
    1f02:	29 ad       	ldd	r18, Y+57	; 0x39
    1f04:	3a ad       	ldd	r19, Y+58	; 0x3a
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	b9 01       	movw	r22, r18
    1f0a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <LCD_VoidSendCommand>
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	a0 e0       	ldi	r26, 0x00	; 0
    1f14:	b0 e4       	ldi	r27, 0x40	; 64
    1f16:	8b 87       	std	Y+11, r24	; 0x0b
    1f18:	9c 87       	std	Y+12, r25	; 0x0c
    1f1a:	ad 87       	std	Y+13, r26	; 0x0d
    1f1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	4a ef       	ldi	r20, 0xFA	; 250
    1f2c:	54 e4       	ldi	r21, 0x44	; 68
    1f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	8f 83       	std	Y+7, r24	; 0x07
    1f38:	98 87       	std	Y+8, r25	; 0x08
    1f3a:	a9 87       	std	Y+9, r26	; 0x09
    1f3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f40:	78 85       	ldd	r23, Y+8	; 0x08
    1f42:	89 85       	ldd	r24, Y+9	; 0x09
    1f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e8       	ldi	r20, 0x80	; 128
    1f4c:	5f e3       	ldi	r21, 0x3F	; 63
    1f4e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1f52:	88 23       	and	r24, r24
    1f54:	2c f4       	brge	.+10     	; 0x1f60 <LCD_VoidInit+0x382>
		__ticks = 1;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9e 83       	std	Y+6, r25	; 0x06
    1f5c:	8d 83       	std	Y+5, r24	; 0x05
    1f5e:	3f c0       	rjmp	.+126    	; 0x1fde <LCD_VoidInit+0x400>
	else if (__tmp > 65535)
    1f60:	6f 81       	ldd	r22, Y+7	; 0x07
    1f62:	78 85       	ldd	r23, Y+8	; 0x08
    1f64:	89 85       	ldd	r24, Y+9	; 0x09
    1f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	3f ef       	ldi	r19, 0xFF	; 255
    1f6c:	4f e7       	ldi	r20, 0x7F	; 127
    1f6e:	57 e4       	ldi	r21, 0x47	; 71
    1f70:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1f74:	18 16       	cp	r1, r24
    1f76:	4c f5       	brge	.+82     	; 0x1fca <LCD_VoidInit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e2       	ldi	r20, 0x20	; 32
    1f86:	51 e4       	ldi	r21, 0x41	; 65
    1f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	bc 01       	movw	r22, r24
    1f92:	cd 01       	movw	r24, r26
    1f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	9e 83       	std	Y+6, r25	; 0x06
    1f9e:	8d 83       	std	Y+5, r24	; 0x05
    1fa0:	0f c0       	rjmp	.+30     	; 0x1fc0 <LCD_VoidInit+0x3e2>
    1fa2:	88 ec       	ldi	r24, 0xC8	; 200
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	9c 83       	std	Y+4, r25	; 0x04
    1fa8:	8b 83       	std	Y+3, r24	; 0x03
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <LCD_VoidInit+0x3d0>
    1fb2:	9c 83       	std	Y+4, r25	; 0x04
    1fb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	9e 83       	std	Y+6, r25	; 0x06
    1fbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	69 f7       	brne	.-38     	; 0x1fa2 <LCD_VoidInit+0x3c4>
    1fc8:	14 c0       	rjmp	.+40     	; 0x1ff2 <LCD_VoidInit+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fca:	6f 81       	ldd	r22, Y+7	; 0x07
    1fcc:	78 85       	ldd	r23, Y+8	; 0x08
    1fce:	89 85       	ldd	r24, Y+9	; 0x09
    1fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe2:	9a 83       	std	Y+2, r25	; 0x02
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <LCD_VoidInit+0x40c>
    1fee:	9a 83       	std	Y+2, r25	; 0x02
    1ff0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);


}	
    1ff2:	ea 96       	adiw	r28, 0x3a	; 58
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <LCD_VoidGoToXY>:


void LCD_VoidGoToXY(u8 Local_XPosition,u8 Local_YPosition, Lcd_info* lcd)
{
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	00 d0       	rcall	.+0      	; 0x200a <LCD_VoidGoToXY+0x6>
    200a:	00 d0       	rcall	.+0      	; 0x200c <LCD_VoidGoToXY+0x8>
    200c:	0f 92       	push	r0
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	8a 83       	std	Y+2, r24	; 0x02
    2014:	6b 83       	std	Y+3, r22	; 0x03
    2016:	5d 83       	std	Y+5, r21	; 0x05
    2018:	4c 83       	std	Y+4, r20	; 0x04
	// x_pos from 0 to 1
	// y_pos from 0 to 15
	u8 Adress = 0 ;
    201a:	19 82       	std	Y+1, r1	; 0x01
	if (0 == Local_XPosition)
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	88 23       	and	r24, r24
    2020:	19 f4       	brne	.+6      	; 0x2028 <LCD_VoidGoToXY+0x24>
	{
		Adress = LCD_FirstLine + LCD_SetAddressDDRAM;
    2022:	80 e8       	ldi	r24, 0x80	; 128
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	05 c0       	rjmp	.+10     	; 0x2032 <LCD_VoidGoToXY+0x2e>
	}
	else if (1 == Local_XPosition)
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	81 30       	cpi	r24, 0x01	; 1
    202c:	11 f4       	brne	.+4      	; 0x2032 <LCD_VoidGoToXY+0x2e>
	{
		Adress = LCD_SecoundLine + LCD_SetAddressDDRAM;
    202e:	80 ec       	ldi	r24, 0xC0	; 192
    2030:	89 83       	std	Y+1, r24	; 0x01
	}
	if (Local_YPosition < 16)
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	80 31       	cpi	r24, 0x10	; 16
    2036:	20 f4       	brcc	.+8      	; 0x2040 <LCD_VoidGoToXY+0x3c>
	{
		Adress += Local_YPosition ;
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	9b 81       	ldd	r25, Y+3	; 0x03
    203c:	89 0f       	add	r24, r25
    203e:	89 83       	std	Y+1, r24	; 0x01
	}
	else{/*error*/}

	LCD_VoidSendCommand(Adress,lcd) ;
    2040:	2c 81       	ldd	r18, Y+4	; 0x04
    2042:	3d 81       	ldd	r19, Y+5	; 0x05
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	b9 01       	movw	r22, r18
    2048:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <LCD_VoidSendCommand>

}
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <LCD_VoidSendString>:


void LCD_VoidSendString(u8 *Address_String, Lcd_info* lcd)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	00 d0       	rcall	.+0      	; 0x2062 <LCD_VoidSendString+0x6>
    2062:	00 d0       	rcall	.+0      	; 0x2064 <LCD_VoidSendString+0x8>
    2064:	0f 92       	push	r0
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	9b 83       	std	Y+3, r25	; 0x03
    206c:	8a 83       	std	Y+2, r24	; 0x02
    206e:	7d 83       	std	Y+5, r23	; 0x05
    2070:	6c 83       	std	Y+4, r22	; 0x04
	u8 stringCounter=0;
    2072:	19 82       	std	Y+1, r1	; 0x01
    2074:	11 c0       	rjmp	.+34     	; 0x2098 <LCD_VoidSendString+0x3c>
	for(;Address_String[stringCounter] != '\0'; stringCounter++ )
	{
		LCD_VoidSendChar(Address_String[stringCounter],lcd);
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	9b 81       	ldd	r25, Y+3	; 0x03
    2080:	fc 01       	movw	r30, r24
    2082:	e2 0f       	add	r30, r18
    2084:	f3 1f       	adc	r31, r19
    2086:	80 81       	ld	r24, Z
    2088:	2c 81       	ldd	r18, Y+4	; 0x04
    208a:	3d 81       	ldd	r19, Y+5	; 0x05
    208c:	b9 01       	movw	r22, r18
    208e:	0e 94 04 13 	call	0x2608	; 0x2608 <LCD_VoidSendChar>


void LCD_VoidSendString(u8 *Address_String, Lcd_info* lcd)
{
	u8 stringCounter=0;
	for(;Address_String[stringCounter] != '\0'; stringCounter++ )
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	8f 5f       	subi	r24, 0xFF	; 255
    2096:	89 83       	std	Y+1, r24	; 0x01
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	28 2f       	mov	r18, r24
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	9b 81       	ldd	r25, Y+3	; 0x03
    20a2:	fc 01       	movw	r30, r24
    20a4:	e2 0f       	add	r30, r18
    20a6:	f3 1f       	adc	r31, r19
    20a8:	80 81       	ld	r24, Z
    20aa:	88 23       	and	r24, r24
    20ac:	21 f7       	brne	.-56     	; 0x2076 <LCD_VoidSendString+0x1a>
	{
		LCD_VoidSendChar(Address_String[stringCounter],lcd);
	}
}
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <LCD_VoidSendNum>:


void LCD_VoidSendNum(s16 Copy_Num, Lcd_info* lcd)
 {
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	69 97       	sbiw	r28, 0x19	; 25
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	de bf       	out	0x3e, r29	; 62
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	cd bf       	out	0x3d, r28	; 61
    20d2:	9f 8b       	std	Y+23, r25	; 0x17
    20d4:	8e 8b       	std	Y+22, r24	; 0x16
    20d6:	79 8f       	std	Y+25, r23	; 0x19
    20d8:	68 8f       	std	Y+24, r22	; 0x18
    u8 i,j,c,ArrCount,s[15];
	s16 sign;
	i = 0;
    20da:	1e 82       	std	Y+6, r1	; 0x06
	ArrCount = 0;
    20dc:	1b 82       	std	Y+3, r1	; 0x03
	sign = Copy_Num;
    20de:	8e 89       	ldd	r24, Y+22	; 0x16
    20e0:	9f 89       	ldd	r25, Y+23	; 0x17
    20e2:	9a 83       	std	Y+2, r25	; 0x02
    20e4:	89 83       	std	Y+1, r24	; 0x01
	if (sign < 0)  /* record sign */
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ea:	99 23       	and	r25, r25
    20ec:	3c f4       	brge	.+14     	; 0x20fc <LCD_VoidSendNum+0x3e>
	{
	 Copy_Num = -Copy_Num;          /* make the NUM positive */
    20ee:	8e 89       	ldd	r24, Y+22	; 0x16
    20f0:	9f 89       	ldd	r25, Y+23	; 0x17
    20f2:	90 95       	com	r25
    20f4:	81 95       	neg	r24
    20f6:	9f 4f       	sbci	r25, 0xFF	; 255
    20f8:	9f 8b       	std	Y+23, r25	; 0x17
    20fa:	8e 8b       	std	Y+22, r24	; 0x16
	}

	do {                       /* Convert NUM to ASCII in reverse order */

	 s[i] = (Copy_Num % 10) + '0';
    20fc:	8e 81       	ldd	r24, Y+6	; 0x06
    20fe:	e8 2f       	mov	r30, r24
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	8e 89       	ldd	r24, Y+22	; 0x16
    2104:	9f 89       	ldd	r25, Y+23	; 0x17
    2106:	2a e0       	ldi	r18, 0x0A	; 10
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	b9 01       	movw	r22, r18
    210c:	0e 94 09 1a 	call	0x3412	; 0x3412 <__divmodhi4>
    2110:	28 2f       	mov	r18, r24
    2112:	20 5d       	subi	r18, 0xD0	; 208
    2114:	ce 01       	movw	r24, r28
    2116:	07 96       	adiw	r24, 0x07	; 7
    2118:	e8 0f       	add	r30, r24
    211a:	f9 1f       	adc	r31, r25
    211c:	20 83       	st	Z, r18
	 i++;
    211e:	8e 81       	ldd	r24, Y+6	; 0x06
    2120:	8f 5f       	subi	r24, 0xFF	; 255
    2122:	8e 83       	std	Y+6, r24	; 0x06

	 } while ((Copy_Num /= 10) > 0);
    2124:	8e 89       	ldd	r24, Y+22	; 0x16
    2126:	9f 89       	ldd	r25, Y+23	; 0x17
    2128:	2a e0       	ldi	r18, 0x0A	; 10
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	b9 01       	movw	r22, r18
    212e:	0e 94 09 1a 	call	0x3412	; 0x3412 <__divmodhi4>
    2132:	cb 01       	movw	r24, r22
    2134:	9f 8b       	std	Y+23, r25	; 0x17
    2136:	8e 8b       	std	Y+22, r24	; 0x16
    2138:	8e 89       	ldd	r24, Y+22	; 0x16
    213a:	9f 89       	ldd	r25, Y+23	; 0x17
    213c:	18 16       	cp	r1, r24
    213e:	19 06       	cpc	r1, r25
    2140:	ec f2       	brlt	.-70     	; 0x20fc <LCD_VoidSendNum+0x3e>

	if (sign < 0)      /* putting sign */
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	9a 81       	ldd	r25, Y+2	; 0x02
    2146:	99 23       	and	r25, r25
    2148:	6c f4       	brge	.+26     	; 0x2164 <LCD_VoidSendNum+0xa6>
	{
		s[i++] = '-';
    214a:	8e 81       	ldd	r24, Y+6	; 0x06
    214c:	28 2f       	mov	r18, r24
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	ce 01       	movw	r24, r28
    2152:	07 96       	adiw	r24, 0x07	; 7
    2154:	fc 01       	movw	r30, r24
    2156:	e2 0f       	add	r30, r18
    2158:	f3 1f       	adc	r31, r19
    215a:	8d e2       	ldi	r24, 0x2D	; 45
    215c:	80 83       	st	Z, r24
    215e:	8e 81       	ldd	r24, Y+6	; 0x06
    2160:	8f 5f       	subi	r24, 0xFF	; 255
    2162:	8e 83       	std	Y+6, r24	; 0x06
	}

	ArrCount=i;
    2164:	8e 81       	ldd	r24, Y+6	; 0x06
    2166:	8b 83       	std	Y+3, r24	; 0x03
	j=ArrCount-1;
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	81 50       	subi	r24, 0x01	; 1
    216c:	8d 83       	std	Y+5, r24	; 0x05
	for (i = 0; i<j; i++, j--) /* reversing the array to make the NUM in order */
    216e:	1e 82       	std	Y+6, r1	; 0x06
    2170:	2c c0       	rjmp	.+88     	; 0x21ca <LCD_VoidSendNum+0x10c>
	{
	  c = s[i];
    2172:	8e 81       	ldd	r24, Y+6	; 0x06
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	ce 01       	movw	r24, r28
    217a:	07 96       	adiw	r24, 0x07	; 7
    217c:	fc 01       	movw	r30, r24
    217e:	e2 0f       	add	r30, r18
    2180:	f3 1f       	adc	r31, r19
    2182:	80 81       	ld	r24, Z
    2184:	8c 83       	std	Y+4, r24	; 0x04
	  s[i] = s[j];
    2186:	8e 81       	ldd	r24, Y+6	; 0x06
    2188:	48 2f       	mov	r20, r24
    218a:	50 e0       	ldi	r21, 0x00	; 0
    218c:	8d 81       	ldd	r24, Y+5	; 0x05
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	ce 01       	movw	r24, r28
    2194:	07 96       	adiw	r24, 0x07	; 7
    2196:	fc 01       	movw	r30, r24
    2198:	e2 0f       	add	r30, r18
    219a:	f3 1f       	adc	r31, r19
    219c:	20 81       	ld	r18, Z
    219e:	ce 01       	movw	r24, r28
    21a0:	07 96       	adiw	r24, 0x07	; 7
    21a2:	fc 01       	movw	r30, r24
    21a4:	e4 0f       	add	r30, r20
    21a6:	f5 1f       	adc	r31, r21
    21a8:	20 83       	st	Z, r18
	  s[j] = c;
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
    21ac:	28 2f       	mov	r18, r24
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	ce 01       	movw	r24, r28
    21b2:	07 96       	adiw	r24, 0x07	; 7
    21b4:	fc 01       	movw	r30, r24
    21b6:	e2 0f       	add	r30, r18
    21b8:	f3 1f       	adc	r31, r19
    21ba:	8c 81       	ldd	r24, Y+4	; 0x04
    21bc:	80 83       	st	Z, r24
		s[i++] = '-';
	}

	ArrCount=i;
	j=ArrCount-1;
	for (i = 0; i<j; i++, j--) /* reversing the array to make the NUM in order */
    21be:	8e 81       	ldd	r24, Y+6	; 0x06
    21c0:	8f 5f       	subi	r24, 0xFF	; 255
    21c2:	8e 83       	std	Y+6, r24	; 0x06
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
    21c6:	81 50       	subi	r24, 0x01	; 1
    21c8:	8d 83       	std	Y+5, r24	; 0x05
    21ca:	9e 81       	ldd	r25, Y+6	; 0x06
    21cc:	8d 81       	ldd	r24, Y+5	; 0x05
    21ce:	98 17       	cp	r25, r24
    21d0:	80 f2       	brcs	.-96     	; 0x2172 <LCD_VoidSendNum+0xb4>
	  c = s[i];
	  s[i] = s[j];
	  s[j] = c;
	}

	for (i = 0; i<ArrCount; i++) /* PRINTNIG the NUM */
    21d2:	1e 82       	std	Y+6, r1	; 0x06
    21d4:	11 c0       	rjmp	.+34     	; 0x21f8 <LCD_VoidSendNum+0x13a>
	{
		LCD_VoidSendChar (s[i],lcd);
    21d6:	8e 81       	ldd	r24, Y+6	; 0x06
    21d8:	28 2f       	mov	r18, r24
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	ce 01       	movw	r24, r28
    21de:	07 96       	adiw	r24, 0x07	; 7
    21e0:	fc 01       	movw	r30, r24
    21e2:	e2 0f       	add	r30, r18
    21e4:	f3 1f       	adc	r31, r19
    21e6:	80 81       	ld	r24, Z
    21e8:	28 8d       	ldd	r18, Y+24	; 0x18
    21ea:	39 8d       	ldd	r19, Y+25	; 0x19
    21ec:	b9 01       	movw	r22, r18
    21ee:	0e 94 04 13 	call	0x2608	; 0x2608 <LCD_VoidSendChar>
	  c = s[i];
	  s[i] = s[j];
	  s[j] = c;
	}

	for (i = 0; i<ArrCount; i++) /* PRINTNIG the NUM */
    21f2:	8e 81       	ldd	r24, Y+6	; 0x06
    21f4:	8f 5f       	subi	r24, 0xFF	; 255
    21f6:	8e 83       	std	Y+6, r24	; 0x06
    21f8:	9e 81       	ldd	r25, Y+6	; 0x06
    21fa:	8b 81       	ldd	r24, Y+3	; 0x03
    21fc:	98 17       	cp	r25, r24
    21fe:	58 f3       	brcs	.-42     	; 0x21d6 <LCD_VoidSendNum+0x118>
	{
		LCD_VoidSendChar (s[i],lcd);
	}


 }
    2200:	69 96       	adiw	r28, 0x19	; 25
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	f8 94       	cli
    2206:	de bf       	out	0x3e, r29	; 62
    2208:	0f be       	out	0x3f, r0	; 63
    220a:	cd bf       	out	0x3d, r28	; 61
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <LCD_VoidSendFloat>:

void LCD_VoidSendFloat(f32 Copy_fNum, Lcd_info* lcd)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	2c 97       	sbiw	r28, 0x0c	; 12
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	6f 83       	std	Y+7, r22	; 0x07
    2228:	78 87       	std	Y+8, r23	; 0x08
    222a:	89 87       	std	Y+9, r24	; 0x09
    222c:	9a 87       	std	Y+10, r25	; 0x0a
    222e:	5c 87       	std	Y+12, r21	; 0x0c
    2230:	4b 87       	std	Y+11, r20	; 0x0b
	// Extract integer part
	s16 INTpart = (s16)Copy_fNum;
    2232:	6f 81       	ldd	r22, Y+7	; 0x07
    2234:	78 85       	ldd	r23, Y+8	; 0x08
    2236:	89 85       	ldd	r24, Y+9	; 0x09
    2238:	9a 85       	ldd	r25, Y+10	; 0x0a
    223a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	9e 83       	std	Y+6, r25	; 0x06
    2244:	8d 83       	std	Y+5, r24	; 0x05

	// Extract floating part
	f32 fpart = Copy_fNum - (f32)INTpart;
    2246:	8d 81       	ldd	r24, Y+5	; 0x05
    2248:	9e 81       	ldd	r25, Y+6	; 0x06
    224a:	aa 27       	eor	r26, r26
    224c:	97 fd       	sbrc	r25, 7
    224e:	a0 95       	com	r26
    2250:	ba 2f       	mov	r27, r26
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    225a:	9b 01       	movw	r18, r22
    225c:	ac 01       	movw	r20, r24
    225e:	6f 81       	ldd	r22, Y+7	; 0x07
    2260:	78 85       	ldd	r23, Y+8	; 0x08
    2262:	89 85       	ldd	r24, Y+9	; 0x09
    2264:	9a 85       	ldd	r25, Y+10	; 0x0a
    2266:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	89 83       	std	Y+1, r24	; 0x01
    2270:	9a 83       	std	Y+2, r25	; 0x02
    2272:	ab 83       	std	Y+3, r26	; 0x03
    2274:	bc 83       	std	Y+4, r27	; 0x04

	//Exception for negative number
	if(fpart<0){fpart*=-1;}
    2276:	69 81       	ldd	r22, Y+1	; 0x01
    2278:	7a 81       	ldd	r23, Y+2	; 0x02
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	9c 81       	ldd	r25, Y+4	; 0x04
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	40 e0       	ldi	r20, 0x00	; 0
    2284:	50 e0       	ldi	r21, 0x00	; 0
    2286:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    228a:	88 23       	and	r24, r24
    228c:	4c f4       	brge	.+18     	; 0x22a0 <LCD_VoidSendFloat+0x8e>
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	9a 81       	ldd	r25, Y+2	; 0x02
    2292:	ab 81       	ldd	r26, Y+3	; 0x03
    2294:	bc 81       	ldd	r27, Y+4	; 0x04
    2296:	b0 58       	subi	r27, 0x80	; 128
    2298:	89 83       	std	Y+1, r24	; 0x01
    229a:	9a 83       	std	Y+2, r25	; 0x02
    229c:	ab 83       	std	Y+3, r26	; 0x03
    229e:	bc 83       	std	Y+4, r27	; 0x04

	// convert integer part to string
	LCD_VoidSendNum(INTpart, lcd);
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
    22a2:	9e 81       	ldd	r25, Y+6	; 0x06
    22a4:	2b 85       	ldd	r18, Y+11	; 0x0b
    22a6:	3c 85       	ldd	r19, Y+12	; 0x0c
    22a8:	b9 01       	movw	r22, r18
    22aa:	0e 94 5f 10 	call	0x20be	; 0x20be <LCD_VoidSendNum>

	// add dot
	LCD_VoidSendString(".", lcd);
    22ae:	80 e6       	ldi	r24, 0x60	; 96
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	2b 85       	ldd	r18, Y+11	; 0x0b
    22b4:	3c 85       	ldd	r19, Y+12	; 0x0c
    22b6:	b9 01       	movw	r22, r18
    22b8:	0e 94 2e 10 	call	0x205c	; 0x205c <LCD_VoidSendString>
	// Get the value of fraction part upto 4 digits of points after dot
	fpart = fpart * 10000;
    22bc:	69 81       	ldd	r22, Y+1	; 0x01
    22be:	7a 81       	ldd	r23, Y+2	; 0x02
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	9c 81       	ldd	r25, Y+4	; 0x04
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e4       	ldi	r19, 0x40	; 64
    22c8:	4c e1       	ldi	r20, 0x1C	; 28
    22ca:	56 e4       	ldi	r21, 0x46	; 70
    22cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	89 83       	std	Y+1, r24	; 0x01
    22d6:	9a 83       	std	Y+2, r25	; 0x02
    22d8:	ab 83       	std	Y+3, r26	; 0x03
    22da:	bc 83       	std	Y+4, r27	; 0x04

	LCD_VoidSendNum(fpart, lcd);
    22dc:	69 81       	ldd	r22, Y+1	; 0x01
    22de:	7a 81       	ldd	r23, Y+2	; 0x02
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	9c 81       	ldd	r25, Y+4	; 0x04
    22e4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    22ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    22f0:	b9 01       	movw	r22, r18
    22f2:	0e 94 5f 10 	call	0x20be	; 0x20be <LCD_VoidSendNum>

}
    22f6:	2c 96       	adiw	r28, 0x0c	; 12
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	08 95       	ret

00002308 <LCD_VoidWriteOnCGRAM>:

void LCD_VoidWriteOnCGRAM(u8 CGRAMmemoryLocation, u8 *ArrChar, Lcd_info* lcd)
{
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	00 d0       	rcall	.+0      	; 0x230e <LCD_VoidWriteOnCGRAM+0x6>
    230e:	00 d0       	rcall	.+0      	; 0x2310 <LCD_VoidWriteOnCGRAM+0x8>
    2310:	00 d0       	rcall	.+0      	; 0x2312 <LCD_VoidWriteOnCGRAM+0xa>
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	8a 83       	std	Y+2, r24	; 0x02
    2318:	7c 83       	std	Y+4, r23	; 0x04
    231a:	6b 83       	std	Y+3, r22	; 0x03
    231c:	5e 83       	std	Y+6, r21	; 0x06
    231e:	4d 83       	std	Y+5, r20	; 0x05
	u8 counter;
	if(CGRAMmemoryLocation<MAX_CHAR_SIZE_CGRAM) //If valid address
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	88 30       	cpi	r24, 0x08	; 8
    2324:	58 f5       	brcc	.+86     	; 0x237c <LCD_VoidWriteOnCGRAM+0x74>
	{
		LCD_VoidSendCommand((LCD_SetAddressCGRAM+(CGRAMmemoryLocation*MAX_CHAR_SIZE_CGRAM)),lcd); //Write to CGRAM
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	88 2f       	mov	r24, r24
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	08 96       	adiw	r24, 0x08	; 8
    232e:	88 0f       	add	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	88 0f       	add	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	88 0f       	add	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	2d 81       	ldd	r18, Y+5	; 0x05
    233c:	3e 81       	ldd	r19, Y+6	; 0x06
    233e:	b9 01       	movw	r22, r18
    2340:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <LCD_VoidSendCommand>
		for(counter=0; counter<MAX_CHAR_SIZE_CGRAM; counter++)
    2344:	19 82       	std	Y+1, r1	; 0x01
    2346:	11 c0       	rjmp	.+34     	; 0x236a <LCD_VoidWriteOnCGRAM+0x62>
		{
			LCD_VoidSendChar(ArrChar[counter],lcd); //Write the character pattern to CGRAM
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	28 2f       	mov	r18, r24
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	fc 01       	movw	r30, r24
    2354:	e2 0f       	add	r30, r18
    2356:	f3 1f       	adc	r31, r19
    2358:	80 81       	ld	r24, Z
    235a:	2d 81       	ldd	r18, Y+5	; 0x05
    235c:	3e 81       	ldd	r19, Y+6	; 0x06
    235e:	b9 01       	movw	r22, r18
    2360:	0e 94 04 13 	call	0x2608	; 0x2608 <LCD_VoidSendChar>
{
	u8 counter;
	if(CGRAMmemoryLocation<MAX_CHAR_SIZE_CGRAM) //If valid address
	{
		LCD_VoidSendCommand((LCD_SetAddressCGRAM+(CGRAMmemoryLocation*MAX_CHAR_SIZE_CGRAM)),lcd); //Write to CGRAM
		for(counter=0; counter<MAX_CHAR_SIZE_CGRAM; counter++)
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	8f 5f       	subi	r24, 0xFF	; 255
    2368:	89 83       	std	Y+1, r24	; 0x01
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	88 30       	cpi	r24, 0x08	; 8
    236e:	60 f3       	brcs	.-40     	; 0x2348 <LCD_VoidWriteOnCGRAM+0x40>
		{
			LCD_VoidSendChar(ArrChar[counter],lcd); //Write the character pattern to CGRAM
		}
		LCD_VoidSendCommand(LCD_SetAddressDDRAM,lcd); //back to DDRAM location 0
    2370:	2d 81       	ldd	r18, Y+5	; 0x05
    2372:	3e 81       	ldd	r19, Y+6	; 0x06
    2374:	80 e8       	ldi	r24, 0x80	; 128
    2376:	b9 01       	movw	r22, r18
    2378:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <LCD_VoidSendCommand>
	else
	{
		/*Error*/
	}

}
    237c:	26 96       	adiw	r28, 0x06	; 6
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	de bf       	out	0x3e, r29	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	cd bf       	out	0x3d, r28	; 61
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	08 95       	ret

0000238e <LCD_VoidDispCharCGRAM>:

void LCD_VoidDispCharCGRAM(u8 CGRAMmemoryLocation, Lcd_info* lcd)
{
    238e:	df 93       	push	r29
    2390:	cf 93       	push	r28
    2392:	00 d0       	rcall	.+0      	; 0x2394 <LCD_VoidDispCharCGRAM+0x6>
    2394:	0f 92       	push	r0
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
    239a:	89 83       	std	Y+1, r24	; 0x01
    239c:	7b 83       	std	Y+3, r23	; 0x03
    239e:	6a 83       	std	Y+2, r22	; 0x02
	LCD_VoidSendChar(CGRAMmemoryLocation,lcd);
    23a0:	2a 81       	ldd	r18, Y+2	; 0x02
    23a2:	3b 81       	ldd	r19, Y+3	; 0x03
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	b9 01       	movw	r22, r18
    23a8:	0e 94 04 13 	call	0x2608	; 0x2608 <LCD_VoidSendChar>
}
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <LCD_VoidSendCommand>:

void LCD_VoidSendCommand(u8 Copy_Command, Lcd_info* lcd)
{
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	6f 97       	sbiw	r28, 0x1f	; 31
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	8d 8f       	std	Y+29, r24	; 0x1d
    23ce:	7f 8f       	std	Y+31, r23	; 0x1f
    23d0:	6e 8f       	std	Y+30, r22	; 0x1e
	
	// RS=0 to send a Command and RS=1 to send Instraction
	DIO_ErrStateSetPinValue (lcd->Rs_Group,lcd->Rs_Pin,DIO_Low);
    23d2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    23d4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    23d6:	80 81       	ld	r24, Z
    23d8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    23da:	ff 8d       	ldd	r31, Y+31	; 0x1f
    23dc:	91 81       	ldd	r25, Z+1	; 0x01
    23de:	69 2f       	mov	r22, r25
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_ErrStateSetPinValue>
	// RW=0 to Write and RW=1 to Read
	DIO_ErrStateSetPinValue (lcd->Rw_Group,lcd->Rw_Pin,DIO_Low);
    23e6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    23e8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    23ea:	82 81       	ldd	r24, Z+2	; 0x02
    23ec:	ee 8d       	ldd	r30, Y+30	; 0x1e
    23ee:	ff 8d       	ldd	r31, Y+31	; 0x1f
    23f0:	93 81       	ldd	r25, Z+3	; 0x03
    23f2:	69 2f       	mov	r22, r25
    23f4:	40 e0       	ldi	r20, 0x00	; 0
    23f6:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_ErrStateSetPinValue>
	// Write Command
	DIO_ErrStateSetGroupValue(lcd->Data_Group,Copy_Command);
    23fa:	ee 8d       	ldd	r30, Y+30	; 0x1e
    23fc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    23fe:	86 81       	ldd	r24, Z+6	; 0x06
    2400:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2402:	0e 94 2f 0a 	call	0x145e	; 0x145e <DIO_ErrStateSetGroupValue>
	// Enable=1 for 230 nano secounds 
	DIO_ErrStateSetPinValue (lcd->E_Group,lcd->E_Pin,DIO_High);
    2406:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2408:	ff 8d       	ldd	r31, Y+31	; 0x1f
    240a:	84 81       	ldd	r24, Z+4	; 0x04
    240c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    240e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2410:	95 81       	ldd	r25, Z+5	; 0x05
    2412:	69 2f       	mov	r22, r25
    2414:	41 e0       	ldi	r20, 0x01	; 1
    2416:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_ErrStateSetPinValue>
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	a0 e8       	ldi	r26, 0x80	; 128
    2420:	bf e3       	ldi	r27, 0x3F	; 63
    2422:	89 8f       	std	Y+25, r24	; 0x19
    2424:	9a 8f       	std	Y+26, r25	; 0x1a
    2426:	ab 8f       	std	Y+27, r26	; 0x1b
    2428:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242a:	69 8d       	ldd	r22, Y+25	; 0x19
    242c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    242e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2430:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	4a ef       	ldi	r20, 0xFA	; 250
    2438:	54 e4       	ldi	r21, 0x44	; 68
    243a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	8d 8b       	std	Y+21, r24	; 0x15
    2444:	9e 8b       	std	Y+22, r25	; 0x16
    2446:	af 8b       	std	Y+23, r26	; 0x17
    2448:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    244a:	6d 89       	ldd	r22, Y+21	; 0x15
    244c:	7e 89       	ldd	r23, Y+22	; 0x16
    244e:	8f 89       	ldd	r24, Y+23	; 0x17
    2450:	98 8d       	ldd	r25, Y+24	; 0x18
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e8       	ldi	r20, 0x80	; 128
    2458:	5f e3       	ldi	r21, 0x3F	; 63
    245a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    245e:	88 23       	and	r24, r24
    2460:	2c f4       	brge	.+10     	; 0x246c <LCD_VoidSendCommand+0xb4>
		__ticks = 1;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	9c 8b       	std	Y+20, r25	; 0x14
    2468:	8b 8b       	std	Y+19, r24	; 0x13
    246a:	3f c0       	rjmp	.+126    	; 0x24ea <LCD_VoidSendCommand+0x132>
	else if (__tmp > 65535)
    246c:	6d 89       	ldd	r22, Y+21	; 0x15
    246e:	7e 89       	ldd	r23, Y+22	; 0x16
    2470:	8f 89       	ldd	r24, Y+23	; 0x17
    2472:	98 8d       	ldd	r25, Y+24	; 0x18
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	3f ef       	ldi	r19, 0xFF	; 255
    2478:	4f e7       	ldi	r20, 0x7F	; 127
    247a:	57 e4       	ldi	r21, 0x47	; 71
    247c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2480:	18 16       	cp	r1, r24
    2482:	4c f5       	brge	.+82     	; 0x24d6 <LCD_VoidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2484:	69 8d       	ldd	r22, Y+25	; 0x19
    2486:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2488:	8b 8d       	ldd	r24, Y+27	; 0x1b
    248a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e2       	ldi	r20, 0x20	; 32
    2492:	51 e4       	ldi	r21, 0x41	; 65
    2494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	bc 01       	movw	r22, r24
    249e:	cd 01       	movw	r24, r26
    24a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	9c 8b       	std	Y+20, r25	; 0x14
    24aa:	8b 8b       	std	Y+19, r24	; 0x13
    24ac:	0f c0       	rjmp	.+30     	; 0x24cc <LCD_VoidSendCommand+0x114>
    24ae:	88 ec       	ldi	r24, 0xC8	; 200
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	9a 8b       	std	Y+18, r25	; 0x12
    24b4:	89 8b       	std	Y+17, r24	; 0x11
    24b6:	89 89       	ldd	r24, Y+17	; 0x11
    24b8:	9a 89       	ldd	r25, Y+18	; 0x12
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <LCD_VoidSendCommand+0x102>
    24be:	9a 8b       	std	Y+18, r25	; 0x12
    24c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c2:	8b 89       	ldd	r24, Y+19	; 0x13
    24c4:	9c 89       	ldd	r25, Y+20	; 0x14
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	9c 8b       	std	Y+20, r25	; 0x14
    24ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24cc:	8b 89       	ldd	r24, Y+19	; 0x13
    24ce:	9c 89       	ldd	r25, Y+20	; 0x14
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	69 f7       	brne	.-38     	; 0x24ae <LCD_VoidSendCommand+0xf6>
    24d4:	14 c0       	rjmp	.+40     	; 0x24fe <LCD_VoidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d6:	6d 89       	ldd	r22, Y+21	; 0x15
    24d8:	7e 89       	ldd	r23, Y+22	; 0x16
    24da:	8f 89       	ldd	r24, Y+23	; 0x17
    24dc:	98 8d       	ldd	r25, Y+24	; 0x18
    24de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	9c 8b       	std	Y+20, r25	; 0x14
    24e8:	8b 8b       	std	Y+19, r24	; 0x13
    24ea:	8b 89       	ldd	r24, Y+19	; 0x13
    24ec:	9c 89       	ldd	r25, Y+20	; 0x14
    24ee:	98 8b       	std	Y+16, r25	; 0x10
    24f0:	8f 87       	std	Y+15, r24	; 0x0f
    24f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f4:	98 89       	ldd	r25, Y+16	; 0x10
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <LCD_VoidSendCommand+0x13e>
    24fa:	98 8b       	std	Y+16, r25	; 0x10
    24fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ErrStateSetPinValue (lcd->E_Group,lcd->E_Pin,DIO_Low);
    24fe:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2500:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2502:	84 81       	ldd	r24, Z+4	; 0x04
    2504:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2506:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2508:	95 81       	ldd	r25, Z+5	; 0x05
    250a:	69 2f       	mov	r22, r25
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_ErrStateSetPinValue>
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	a0 e8       	ldi	r26, 0x80	; 128
    2518:	bf e3       	ldi	r27, 0x3F	; 63
    251a:	8b 87       	std	Y+11, r24	; 0x0b
    251c:	9c 87       	std	Y+12, r25	; 0x0c
    251e:	ad 87       	std	Y+13, r26	; 0x0d
    2520:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2522:	6b 85       	ldd	r22, Y+11	; 0x0b
    2524:	7c 85       	ldd	r23, Y+12	; 0x0c
    2526:	8d 85       	ldd	r24, Y+13	; 0x0d
    2528:	9e 85       	ldd	r25, Y+14	; 0x0e
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	4a ef       	ldi	r20, 0xFA	; 250
    2530:	54 e4       	ldi	r21, 0x44	; 68
    2532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	8f 83       	std	Y+7, r24	; 0x07
    253c:	98 87       	std	Y+8, r25	; 0x08
    253e:	a9 87       	std	Y+9, r26	; 0x09
    2540:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2542:	6f 81       	ldd	r22, Y+7	; 0x07
    2544:	78 85       	ldd	r23, Y+8	; 0x08
    2546:	89 85       	ldd	r24, Y+9	; 0x09
    2548:	9a 85       	ldd	r25, Y+10	; 0x0a
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	40 e8       	ldi	r20, 0x80	; 128
    2550:	5f e3       	ldi	r21, 0x3F	; 63
    2552:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2556:	88 23       	and	r24, r24
    2558:	2c f4       	brge	.+10     	; 0x2564 <LCD_VoidSendCommand+0x1ac>
		__ticks = 1;
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	9e 83       	std	Y+6, r25	; 0x06
    2560:	8d 83       	std	Y+5, r24	; 0x05
    2562:	3f c0       	rjmp	.+126    	; 0x25e2 <LCD_VoidSendCommand+0x22a>
	else if (__tmp > 65535)
    2564:	6f 81       	ldd	r22, Y+7	; 0x07
    2566:	78 85       	ldd	r23, Y+8	; 0x08
    2568:	89 85       	ldd	r24, Y+9	; 0x09
    256a:	9a 85       	ldd	r25, Y+10	; 0x0a
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	3f ef       	ldi	r19, 0xFF	; 255
    2570:	4f e7       	ldi	r20, 0x7F	; 127
    2572:	57 e4       	ldi	r21, 0x47	; 71
    2574:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2578:	18 16       	cp	r1, r24
    257a:	4c f5       	brge	.+82     	; 0x25ce <LCD_VoidSendCommand+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257c:	6b 85       	ldd	r22, Y+11	; 0x0b
    257e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2580:	8d 85       	ldd	r24, Y+13	; 0x0d
    2582:	9e 85       	ldd	r25, Y+14	; 0x0e
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	40 e2       	ldi	r20, 0x20	; 32
    258a:	51 e4       	ldi	r21, 0x41	; 65
    258c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	bc 01       	movw	r22, r24
    2596:	cd 01       	movw	r24, r26
    2598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	9e 83       	std	Y+6, r25	; 0x06
    25a2:	8d 83       	std	Y+5, r24	; 0x05
    25a4:	0f c0       	rjmp	.+30     	; 0x25c4 <LCD_VoidSendCommand+0x20c>
    25a6:	88 ec       	ldi	r24, 0xC8	; 200
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	9c 83       	std	Y+4, r25	; 0x04
    25ac:	8b 83       	std	Y+3, r24	; 0x03
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	9c 81       	ldd	r25, Y+4	; 0x04
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <LCD_VoidSendCommand+0x1fa>
    25b6:	9c 83       	std	Y+4, r25	; 0x04
    25b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	9e 81       	ldd	r25, Y+6	; 0x06
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	9e 83       	std	Y+6, r25	; 0x06
    25c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c4:	8d 81       	ldd	r24, Y+5	; 0x05
    25c6:	9e 81       	ldd	r25, Y+6	; 0x06
    25c8:	00 97       	sbiw	r24, 0x00	; 0
    25ca:	69 f7       	brne	.-38     	; 0x25a6 <LCD_VoidSendCommand+0x1ee>
    25cc:	14 c0       	rjmp	.+40     	; 0x25f6 <LCD_VoidSendCommand+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ce:	6f 81       	ldd	r22, Y+7	; 0x07
    25d0:	78 85       	ldd	r23, Y+8	; 0x08
    25d2:	89 85       	ldd	r24, Y+9	; 0x09
    25d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	8d 83       	std	Y+5, r24	; 0x05
    25e2:	8d 81       	ldd	r24, Y+5	; 0x05
    25e4:	9e 81       	ldd	r25, Y+6	; 0x06
    25e6:	9a 83       	std	Y+2, r25	; 0x02
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	9a 81       	ldd	r25, Y+2	; 0x02
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <LCD_VoidSendCommand+0x236>
    25f2:	9a 83       	std	Y+2, r25	; 0x02
    25f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
}
    25f6:	6f 96       	adiw	r28, 0x1f	; 31
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	f8 94       	cli
    25fc:	de bf       	out	0x3e, r29	; 62
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	cd bf       	out	0x3d, r28	; 61
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	08 95       	ret

00002608 <LCD_VoidSendChar>:

void LCD_VoidSendChar(u8 Copy_Char, Lcd_info* lcd)
{
    2608:	df 93       	push	r29
    260a:	cf 93       	push	r28
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
    2610:	6f 97       	sbiw	r28, 0x1f	; 31
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	cd bf       	out	0x3d, r28	; 61
    261c:	8d 8f       	std	Y+29, r24	; 0x1d
    261e:	7f 8f       	std	Y+31, r23	; 0x1f
    2620:	6e 8f       	std	Y+30, r22	; 0x1e
	
	// RS=0 to send a Command and RS=1 to send Data
	DIO_ErrStateSetPinValue (lcd->Rs_Group,lcd->Rs_Pin,DIO_High);
    2622:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2624:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2626:	80 81       	ld	r24, Z
    2628:	ee 8d       	ldd	r30, Y+30	; 0x1e
    262a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    262c:	91 81       	ldd	r25, Z+1	; 0x01
    262e:	69 2f       	mov	r22, r25
    2630:	41 e0       	ldi	r20, 0x01	; 1
    2632:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_ErrStateSetPinValue>
	// RW=0 to Write and RW=1 to Read
	DIO_ErrStateSetPinValue (lcd->Rw_Group,lcd->Rw_Pin,DIO_Low);
    2636:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2638:	ff 8d       	ldd	r31, Y+31	; 0x1f
    263a:	82 81       	ldd	r24, Z+2	; 0x02
    263c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    263e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2640:	93 81       	ldd	r25, Z+3	; 0x03
    2642:	69 2f       	mov	r22, r25
    2644:	40 e0       	ldi	r20, 0x00	; 0
    2646:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_ErrStateSetPinValue>
	// Write Data
	DIO_ErrStateSetGroupValue(lcd->Data_Group,Copy_Char);
    264a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    264c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    264e:	86 81       	ldd	r24, Z+6	; 0x06
    2650:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2652:	0e 94 2f 0a 	call	0x145e	; 0x145e <DIO_ErrStateSetGroupValue>
	// Enable=1 for 230 nano secounds 
	DIO_ErrStateSetPinValue (lcd->E_Group,lcd->E_Pin,DIO_High);
    2656:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2658:	ff 8d       	ldd	r31, Y+31	; 0x1f
    265a:	84 81       	ldd	r24, Z+4	; 0x04
    265c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    265e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2660:	95 81       	ldd	r25, Z+5	; 0x05
    2662:	69 2f       	mov	r22, r25
    2664:	41 e0       	ldi	r20, 0x01	; 1
    2666:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_ErrStateSetPinValue>
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	a0 e8       	ldi	r26, 0x80	; 128
    2670:	bf e3       	ldi	r27, 0x3F	; 63
    2672:	89 8f       	std	Y+25, r24	; 0x19
    2674:	9a 8f       	std	Y+26, r25	; 0x1a
    2676:	ab 8f       	std	Y+27, r26	; 0x1b
    2678:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267a:	69 8d       	ldd	r22, Y+25	; 0x19
    267c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    267e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2680:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	4a ef       	ldi	r20, 0xFA	; 250
    2688:	54 e4       	ldi	r21, 0x44	; 68
    268a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	8d 8b       	std	Y+21, r24	; 0x15
    2694:	9e 8b       	std	Y+22, r25	; 0x16
    2696:	af 8b       	std	Y+23, r26	; 0x17
    2698:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    269a:	6d 89       	ldd	r22, Y+21	; 0x15
    269c:	7e 89       	ldd	r23, Y+22	; 0x16
    269e:	8f 89       	ldd	r24, Y+23	; 0x17
    26a0:	98 8d       	ldd	r25, Y+24	; 0x18
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e8       	ldi	r20, 0x80	; 128
    26a8:	5f e3       	ldi	r21, 0x3F	; 63
    26aa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    26ae:	88 23       	and	r24, r24
    26b0:	2c f4       	brge	.+10     	; 0x26bc <LCD_VoidSendChar+0xb4>
		__ticks = 1;
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	9c 8b       	std	Y+20, r25	; 0x14
    26b8:	8b 8b       	std	Y+19, r24	; 0x13
    26ba:	3f c0       	rjmp	.+126    	; 0x273a <LCD_VoidSendChar+0x132>
	else if (__tmp > 65535)
    26bc:	6d 89       	ldd	r22, Y+21	; 0x15
    26be:	7e 89       	ldd	r23, Y+22	; 0x16
    26c0:	8f 89       	ldd	r24, Y+23	; 0x17
    26c2:	98 8d       	ldd	r25, Y+24	; 0x18
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	3f ef       	ldi	r19, 0xFF	; 255
    26c8:	4f e7       	ldi	r20, 0x7F	; 127
    26ca:	57 e4       	ldi	r21, 0x47	; 71
    26cc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    26d0:	18 16       	cp	r1, r24
    26d2:	4c f5       	brge	.+82     	; 0x2726 <LCD_VoidSendChar+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d4:	69 8d       	ldd	r22, Y+25	; 0x19
    26d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e2       	ldi	r20, 0x20	; 32
    26e2:	51 e4       	ldi	r21, 0x41	; 65
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	bc 01       	movw	r22, r24
    26ee:	cd 01       	movw	r24, r26
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	9c 8b       	std	Y+20, r25	; 0x14
    26fa:	8b 8b       	std	Y+19, r24	; 0x13
    26fc:	0f c0       	rjmp	.+30     	; 0x271c <LCD_VoidSendChar+0x114>
    26fe:	88 ec       	ldi	r24, 0xC8	; 200
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	9a 8b       	std	Y+18, r25	; 0x12
    2704:	89 8b       	std	Y+17, r24	; 0x11
    2706:	89 89       	ldd	r24, Y+17	; 0x11
    2708:	9a 89       	ldd	r25, Y+18	; 0x12
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <LCD_VoidSendChar+0x102>
    270e:	9a 8b       	std	Y+18, r25	; 0x12
    2710:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2712:	8b 89       	ldd	r24, Y+19	; 0x13
    2714:	9c 89       	ldd	r25, Y+20	; 0x14
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	9c 8b       	std	Y+20, r25	; 0x14
    271a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271c:	8b 89       	ldd	r24, Y+19	; 0x13
    271e:	9c 89       	ldd	r25, Y+20	; 0x14
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	69 f7       	brne	.-38     	; 0x26fe <LCD_VoidSendChar+0xf6>
    2724:	14 c0       	rjmp	.+40     	; 0x274e <LCD_VoidSendChar+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2726:	6d 89       	ldd	r22, Y+21	; 0x15
    2728:	7e 89       	ldd	r23, Y+22	; 0x16
    272a:	8f 89       	ldd	r24, Y+23	; 0x17
    272c:	98 8d       	ldd	r25, Y+24	; 0x18
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9c 8b       	std	Y+20, r25	; 0x14
    2738:	8b 8b       	std	Y+19, r24	; 0x13
    273a:	8b 89       	ldd	r24, Y+19	; 0x13
    273c:	9c 89       	ldd	r25, Y+20	; 0x14
    273e:	98 8b       	std	Y+16, r25	; 0x10
    2740:	8f 87       	std	Y+15, r24	; 0x0f
    2742:	8f 85       	ldd	r24, Y+15	; 0x0f
    2744:	98 89       	ldd	r25, Y+16	; 0x10
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <LCD_VoidSendChar+0x13e>
    274a:	98 8b       	std	Y+16, r25	; 0x10
    274c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ErrStateSetPinValue (lcd->E_Group,lcd->E_Pin,DIO_Low);
    274e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2750:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2752:	84 81       	ldd	r24, Z+4	; 0x04
    2754:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2756:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2758:	95 81       	ldd	r25, Z+5	; 0x05
    275a:	69 2f       	mov	r22, r25
    275c:	40 e0       	ldi	r20, 0x00	; 0
    275e:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_ErrStateSetPinValue>
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	a0 e8       	ldi	r26, 0x80	; 128
    2768:	bf e3       	ldi	r27, 0x3F	; 63
    276a:	8b 87       	std	Y+11, r24	; 0x0b
    276c:	9c 87       	std	Y+12, r25	; 0x0c
    276e:	ad 87       	std	Y+13, r26	; 0x0d
    2770:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2772:	6b 85       	ldd	r22, Y+11	; 0x0b
    2774:	7c 85       	ldd	r23, Y+12	; 0x0c
    2776:	8d 85       	ldd	r24, Y+13	; 0x0d
    2778:	9e 85       	ldd	r25, Y+14	; 0x0e
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	4a ef       	ldi	r20, 0xFA	; 250
    2780:	54 e4       	ldi	r21, 0x44	; 68
    2782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	8f 83       	std	Y+7, r24	; 0x07
    278c:	98 87       	std	Y+8, r25	; 0x08
    278e:	a9 87       	std	Y+9, r26	; 0x09
    2790:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2792:	6f 81       	ldd	r22, Y+7	; 0x07
    2794:	78 85       	ldd	r23, Y+8	; 0x08
    2796:	89 85       	ldd	r24, Y+9	; 0x09
    2798:	9a 85       	ldd	r25, Y+10	; 0x0a
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e8       	ldi	r20, 0x80	; 128
    27a0:	5f e3       	ldi	r21, 0x3F	; 63
    27a2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    27a6:	88 23       	and	r24, r24
    27a8:	2c f4       	brge	.+10     	; 0x27b4 <LCD_VoidSendChar+0x1ac>
		__ticks = 1;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	8d 83       	std	Y+5, r24	; 0x05
    27b2:	3f c0       	rjmp	.+126    	; 0x2832 <LCD_VoidSendChar+0x22a>
	else if (__tmp > 65535)
    27b4:	6f 81       	ldd	r22, Y+7	; 0x07
    27b6:	78 85       	ldd	r23, Y+8	; 0x08
    27b8:	89 85       	ldd	r24, Y+9	; 0x09
    27ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	3f ef       	ldi	r19, 0xFF	; 255
    27c0:	4f e7       	ldi	r20, 0x7F	; 127
    27c2:	57 e4       	ldi	r21, 0x47	; 71
    27c4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    27c8:	18 16       	cp	r1, r24
    27ca:	4c f5       	brge	.+82     	; 0x281e <LCD_VoidSendChar+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e2       	ldi	r20, 0x20	; 32
    27da:	51 e4       	ldi	r21, 0x41	; 65
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	bc 01       	movw	r22, r24
    27e6:	cd 01       	movw	r24, r26
    27e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	9e 83       	std	Y+6, r25	; 0x06
    27f2:	8d 83       	std	Y+5, r24	; 0x05
    27f4:	0f c0       	rjmp	.+30     	; 0x2814 <LCD_VoidSendChar+0x20c>
    27f6:	88 ec       	ldi	r24, 0xC8	; 200
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	9c 83       	std	Y+4, r25	; 0x04
    27fc:	8b 83       	std	Y+3, r24	; 0x03
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	9c 81       	ldd	r25, Y+4	; 0x04
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <LCD_VoidSendChar+0x1fa>
    2806:	9c 83       	std	Y+4, r25	; 0x04
    2808:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280a:	8d 81       	ldd	r24, Y+5	; 0x05
    280c:	9e 81       	ldd	r25, Y+6	; 0x06
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	9e 83       	std	Y+6, r25	; 0x06
    2812:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2814:	8d 81       	ldd	r24, Y+5	; 0x05
    2816:	9e 81       	ldd	r25, Y+6	; 0x06
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	69 f7       	brne	.-38     	; 0x27f6 <LCD_VoidSendChar+0x1ee>
    281c:	14 c0       	rjmp	.+40     	; 0x2846 <LCD_VoidSendChar+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281e:	6f 81       	ldd	r22, Y+7	; 0x07
    2820:	78 85       	ldd	r23, Y+8	; 0x08
    2822:	89 85       	ldd	r24, Y+9	; 0x09
    2824:	9a 85       	ldd	r25, Y+10	; 0x0a
    2826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	9e 83       	std	Y+6, r25	; 0x06
    2830:	8d 83       	std	Y+5, r24	; 0x05
    2832:	8d 81       	ldd	r24, Y+5	; 0x05
    2834:	9e 81       	ldd	r25, Y+6	; 0x06
    2836:	9a 83       	std	Y+2, r25	; 0x02
    2838:	89 83       	std	Y+1, r24	; 0x01
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	9a 81       	ldd	r25, Y+2	; 0x02
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <LCD_VoidSendChar+0x236>
    2842:	9a 83       	std	Y+2, r25	; 0x02
    2844:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
}		
    2846:	6f 96       	adiw	r28, 0x1f	; 31
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	cf 91       	pop	r28
    2854:	df 91       	pop	r29
    2856:	08 95       	ret

00002858 <KPD_voidInit>:
const u8 KPD_u8SwitchVal[4][4] = KPD_KEYS;

const u8 KPD_u8RowsPins[4] = { ROW1, ROW2, ROW3, ROW4 };
const u8 KPD_u8ColsPins[4] = { COL1, COL2, COL3, COL4 };

void KPD_voidInit(void) {
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62

	DIO_ErrStateSetPinDirection(KPD_PORT, ROW1, DIO_Output);
    2860:	82 e0       	ldi	r24, 0x02	; 2
    2862:	60 e0       	ldi	r22, 0x00	; 0
    2864:	41 e0       	ldi	r20, 0x01	; 1
    2866:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KPD_PORT, ROW2, DIO_Output);
    286a:	82 e0       	ldi	r24, 0x02	; 2
    286c:	61 e0       	ldi	r22, 0x01	; 1
    286e:	41 e0       	ldi	r20, 0x01	; 1
    2870:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KPD_PORT, ROW3, DIO_Output);
    2874:	82 e0       	ldi	r24, 0x02	; 2
    2876:	62 e0       	ldi	r22, 0x02	; 2
    2878:	41 e0       	ldi	r20, 0x01	; 1
    287a:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KPD_PORT, ROW4, DIO_Output);
    287e:	82 e0       	ldi	r24, 0x02	; 2
    2880:	63 e0       	ldi	r22, 0x03	; 3
    2882:	41 e0       	ldi	r20, 0x01	; 1
    2884:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_ErrStateSetPinDirection>

	DIO_ErrStateSetPinDirection(KPD_PORT, COL1, DIO_Input);
    2888:	82 e0       	ldi	r24, 0x02	; 2
    288a:	64 e0       	ldi	r22, 0x04	; 4
    288c:	40 e0       	ldi	r20, 0x00	; 0
    288e:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KPD_PORT, COL2, DIO_Input);
    2892:	82 e0       	ldi	r24, 0x02	; 2
    2894:	65 e0       	ldi	r22, 0x05	; 5
    2896:	40 e0       	ldi	r20, 0x00	; 0
    2898:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KPD_PORT, COL3, DIO_Input);
    289c:	82 e0       	ldi	r24, 0x02	; 2
    289e:	66 e0       	ldi	r22, 0x06	; 6
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KPD_PORT, COL4, DIO_Input);
    28a6:	82 e0       	ldi	r24, 0x02	; 2
    28a8:	67 e0       	ldi	r22, 0x07	; 7
    28aa:	40 e0       	ldi	r20, 0x00	; 0
    28ac:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_ErrStateSetPinDirection>
	
	// setting the Rows to HIGH and activate the columns internal Pull Up resistors
	PORTC_ITI = 0xff ;
    28b0:	e5 e3       	ldi	r30, 0x35	; 53
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	8f ef       	ldi	r24, 0xFF	; 255
    28b6:	80 83       	st	Z, r24

}
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void) {
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
    28c6:	63 97       	sbiw	r28, 0x13	; 19
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	f8 94       	cli
    28cc:	de bf       	out	0x3e, r29	; 62
    28ce:	0f be       	out	0x3f, r0	; 63
    28d0:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8Col, Local_u8Row;
	u8 Local_u8Sw = KPD_u8KEY_NOT_PRESSED;
    28d2:	8f ef       	ldi	r24, 0xFF	; 255
    28d4:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8Flag = 0;
    28d6:	1f 86       	std	Y+15, r1	; 0x0f
	u8 val = 0;
    28d8:	1b 8a       	std	Y+19, r1	; 0x13

	for (Local_u8Row = 0; Local_u8Row <= 3; Local_u8Row++) {
    28da:	19 8a       	std	Y+17, r1	; 0x11
    28dc:	d4 c0       	rjmp	.+424    	; 0x2a86 <KPD_u8GetPressedKey+0x1c8>

		DIO_ErrStateSetPinValue(KPD_PORT, KPD_u8RowsPins[Local_u8Row], DIO_Low);
    28de:	89 89       	ldd	r24, Y+17	; 0x11
    28e0:	88 2f       	mov	r24, r24
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	fc 01       	movw	r30, r24
    28e6:	e1 57       	subi	r30, 0x71	; 113
    28e8:	fe 4f       	sbci	r31, 0xFE	; 254
    28ea:	90 81       	ld	r25, Z
    28ec:	82 e0       	ldi	r24, 0x02	; 2
    28ee:	69 2f       	mov	r22, r25
    28f0:	40 e0       	ldi	r20, 0x00	; 0
    28f2:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_ErrStateSetPinValue>

		for (Local_u8Col = 0; Local_u8Col <= 3; Local_u8Col++) {
    28f6:	1a 8a       	std	Y+18, r1	; 0x12
    28f8:	b0 c0       	rjmp	.+352    	; 0x2a5a <KPD_u8GetPressedKey+0x19c>

			// Key pressed
			DIO_ErrStateReadPinValue(KPD_PORT, KPD_u8ColsPins[Local_u8Col],&val);
    28fa:	8a 89       	ldd	r24, Y+18	; 0x12
    28fc:	88 2f       	mov	r24, r24
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	fc 01       	movw	r30, r24
    2902:	ed 56       	subi	r30, 0x6D	; 109
    2904:	fe 4f       	sbci	r31, 0xFE	; 254
    2906:	90 81       	ld	r25, Z
    2908:	9e 01       	movw	r18, r28
    290a:	2d 5e       	subi	r18, 0xED	; 237
    290c:	3f 4f       	sbci	r19, 0xFF	; 255
    290e:	82 e0       	ldi	r24, 0x02	; 2
    2910:	69 2f       	mov	r22, r25
    2912:	a9 01       	movw	r20, r18
    2914:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateReadPinValue>
			if (DIO_Low == val)
    2918:	8b 89       	ldd	r24, Y+19	; 0x13
    291a:	88 23       	and	r24, r24
    291c:	09 f0       	breq	.+2      	; 0x2920 <KPD_u8GetPressedKey+0x62>
    291e:	9a c0       	rjmp	.+308    	; 0x2a54 <KPD_u8GetPressedKey+0x196>
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	a0 ee       	ldi	r26, 0xE0	; 224
    2926:	b0 e4       	ldi	r27, 0x40	; 64
    2928:	8b 87       	std	Y+11, r24	; 0x0b
    292a:	9c 87       	std	Y+12, r25	; 0x0c
    292c:	ad 87       	std	Y+13, r26	; 0x0d
    292e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2930:	6b 85       	ldd	r22, Y+11	; 0x0b
    2932:	7c 85       	ldd	r23, Y+12	; 0x0c
    2934:	8d 85       	ldd	r24, Y+13	; 0x0d
    2936:	9e 85       	ldd	r25, Y+14	; 0x0e
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	4a ef       	ldi	r20, 0xFA	; 250
    293e:	54 e4       	ldi	r21, 0x44	; 68
    2940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	8f 83       	std	Y+7, r24	; 0x07
    294a:	98 87       	std	Y+8, r25	; 0x08
    294c:	a9 87       	std	Y+9, r26	; 0x09
    294e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2950:	6f 81       	ldd	r22, Y+7	; 0x07
    2952:	78 85       	ldd	r23, Y+8	; 0x08
    2954:	89 85       	ldd	r24, Y+9	; 0x09
    2956:	9a 85       	ldd	r25, Y+10	; 0x0a
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	40 e8       	ldi	r20, 0x80	; 128
    295e:	5f e3       	ldi	r21, 0x3F	; 63
    2960:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2964:	88 23       	and	r24, r24
    2966:	2c f4       	brge	.+10     	; 0x2972 <KPD_u8GetPressedKey+0xb4>
		__ticks = 1;
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	9e 83       	std	Y+6, r25	; 0x06
    296e:	8d 83       	std	Y+5, r24	; 0x05
    2970:	3f c0       	rjmp	.+126    	; 0x29f0 <KPD_u8GetPressedKey+0x132>
	else if (__tmp > 65535)
    2972:	6f 81       	ldd	r22, Y+7	; 0x07
    2974:	78 85       	ldd	r23, Y+8	; 0x08
    2976:	89 85       	ldd	r24, Y+9	; 0x09
    2978:	9a 85       	ldd	r25, Y+10	; 0x0a
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	3f ef       	ldi	r19, 0xFF	; 255
    297e:	4f e7       	ldi	r20, 0x7F	; 127
    2980:	57 e4       	ldi	r21, 0x47	; 71
    2982:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2986:	18 16       	cp	r1, r24
    2988:	4c f5       	brge	.+82     	; 0x29dc <KPD_u8GetPressedKey+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298a:	6b 85       	ldd	r22, Y+11	; 0x0b
    298c:	7c 85       	ldd	r23, Y+12	; 0x0c
    298e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2990:	9e 85       	ldd	r25, Y+14	; 0x0e
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e2       	ldi	r20, 0x20	; 32
    2998:	51 e4       	ldi	r21, 0x41	; 65
    299a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	bc 01       	movw	r22, r24
    29a4:	cd 01       	movw	r24, r26
    29a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	9e 83       	std	Y+6, r25	; 0x06
    29b0:	8d 83       	std	Y+5, r24	; 0x05
    29b2:	0f c0       	rjmp	.+30     	; 0x29d2 <KPD_u8GetPressedKey+0x114>
    29b4:	88 ec       	ldi	r24, 0xC8	; 200
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	9c 83       	std	Y+4, r25	; 0x04
    29ba:	8b 83       	std	Y+3, r24	; 0x03
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	9c 81       	ldd	r25, Y+4	; 0x04
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	f1 f7       	brne	.-4      	; 0x29c0 <KPD_u8GetPressedKey+0x102>
    29c4:	9c 83       	std	Y+4, r25	; 0x04
    29c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ca:	9e 81       	ldd	r25, Y+6	; 0x06
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	9e 83       	std	Y+6, r25	; 0x06
    29d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d2:	8d 81       	ldd	r24, Y+5	; 0x05
    29d4:	9e 81       	ldd	r25, Y+6	; 0x06
    29d6:	00 97       	sbiw	r24, 0x00	; 0
    29d8:	69 f7       	brne	.-38     	; 0x29b4 <KPD_u8GetPressedKey+0xf6>
    29da:	24 c0       	rjmp	.+72     	; 0x2a24 <KPD_u8GetPressedKey+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29dc:	6f 81       	ldd	r22, Y+7	; 0x07
    29de:	78 85       	ldd	r23, Y+8	; 0x08
    29e0:	89 85       	ldd	r24, Y+9	; 0x09
    29e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	9e 83       	std	Y+6, r25	; 0x06
    29ee:	8d 83       	std	Y+5, r24	; 0x05
    29f0:	8d 81       	ldd	r24, Y+5	; 0x05
    29f2:	9e 81       	ldd	r25, Y+6	; 0x06
    29f4:	9a 83       	std	Y+2, r25	; 0x02
    29f6:	89 83       	std	Y+1, r24	; 0x01
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	9a 81       	ldd	r25, Y+2	; 0x02
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <KPD_u8GetPressedKey+0x13e>
    2a00:	9a 83       	std	Y+2, r25	; 0x02
    2a02:	89 83       	std	Y+1, r24	; 0x01
    2a04:	0f c0       	rjmp	.+30     	; 0x2a24 <KPD_u8GetPressedKey+0x166>
				_delay_ms(7);

				// to delay till pressing is over
				while (DIO_Low == val)
				{
					DIO_ErrStateReadPinValue(KPD_PORT,KPD_u8ColsPins[Local_u8Col], &val);
    2a06:	8a 89       	ldd	r24, Y+18	; 0x12
    2a08:	88 2f       	mov	r24, r24
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	fc 01       	movw	r30, r24
    2a0e:	ed 56       	subi	r30, 0x6D	; 109
    2a10:	fe 4f       	sbci	r31, 0xFE	; 254
    2a12:	90 81       	ld	r25, Z
    2a14:	9e 01       	movw	r18, r28
    2a16:	2d 5e       	subi	r18, 0xED	; 237
    2a18:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1a:	82 e0       	ldi	r24, 0x02	; 2
    2a1c:	69 2f       	mov	r22, r25
    2a1e:	a9 01       	movw	r20, r18
    2a20:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateReadPinValue>
			{
				// bouncing 
				_delay_ms(7);

				// to delay till pressing is over
				while (DIO_Low == val)
    2a24:	8b 89       	ldd	r24, Y+19	; 0x13
    2a26:	88 23       	and	r24, r24
    2a28:	71 f3       	breq	.-36     	; 0x2a06 <KPD_u8GetPressedKey+0x148>
				{
					DIO_ErrStateReadPinValue(KPD_PORT,KPD_u8ColsPins[Local_u8Col], &val);
				}

				Local_u8Sw = KPD_u8SwitchVal[Local_u8Row][Local_u8Col];
    2a2a:	89 89       	ldd	r24, Y+17	; 0x11
    2a2c:	48 2f       	mov	r20, r24
    2a2e:	50 e0       	ldi	r21, 0x00	; 0
    2a30:	8a 89       	ldd	r24, Y+18	; 0x12
    2a32:	28 2f       	mov	r18, r24
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	ca 01       	movw	r24, r20
    2a38:	88 0f       	add	r24, r24
    2a3a:	99 1f       	adc	r25, r25
    2a3c:	88 0f       	add	r24, r24
    2a3e:	99 1f       	adc	r25, r25
    2a40:	82 0f       	add	r24, r18
    2a42:	93 1f       	adc	r25, r19
    2a44:	fc 01       	movw	r30, r24
    2a46:	e1 58       	subi	r30, 0x81	; 129
    2a48:	fe 4f       	sbci	r31, 0xFE	; 254
    2a4a:	80 81       	ld	r24, Z
    2a4c:	88 8b       	std	Y+16, r24	; 0x10

				Local_u8Flag = 1;
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	8f 87       	std	Y+15, r24	; 0x0f
    2a52:	07 c0       	rjmp	.+14     	; 0x2a62 <KPD_u8GetPressedKey+0x1a4>

	for (Local_u8Row = 0; Local_u8Row <= 3; Local_u8Row++) {

		DIO_ErrStateSetPinValue(KPD_PORT, KPD_u8RowsPins[Local_u8Row], DIO_Low);

		for (Local_u8Col = 0; Local_u8Col <= 3; Local_u8Col++) {
    2a54:	8a 89       	ldd	r24, Y+18	; 0x12
    2a56:	8f 5f       	subi	r24, 0xFF	; 255
    2a58:	8a 8b       	std	Y+18, r24	; 0x12
    2a5a:	8a 89       	ldd	r24, Y+18	; 0x12
    2a5c:	84 30       	cpi	r24, 0x04	; 4
    2a5e:	08 f4       	brcc	.+2      	; 0x2a62 <KPD_u8GetPressedKey+0x1a4>
    2a60:	4c cf       	rjmp	.-360    	; 0x28fa <KPD_u8GetPressedKey+0x3c>

			}
		}

		// Reseting the previous Row
		DIO_ErrStateSetPinValue(KPD_PORT, KPD_u8RowsPins[Local_u8Row],DIO_High);
    2a62:	89 89       	ldd	r24, Y+17	; 0x11
    2a64:	88 2f       	mov	r24, r24
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	fc 01       	movw	r30, r24
    2a6a:	e1 57       	subi	r30, 0x71	; 113
    2a6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a6e:	90 81       	ld	r25, Z
    2a70:	82 e0       	ldi	r24, 0x02	; 2
    2a72:	69 2f       	mov	r22, r25
    2a74:	41 e0       	ldi	r20, 0x01	; 1
    2a76:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_ErrStateSetPinValue>

		// if we found the pressed sw will get out the function
		if (1 == Local_u8Flag) {
    2a7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a7c:	81 30       	cpi	r24, 0x01	; 1
    2a7e:	39 f0       	breq	.+14     	; 0x2a8e <KPD_u8GetPressedKey+0x1d0>
	u8 Local_u8Col, Local_u8Row;
	u8 Local_u8Sw = KPD_u8KEY_NOT_PRESSED;
	u8 Local_u8Flag = 0;
	u8 val = 0;

	for (Local_u8Row = 0; Local_u8Row <= 3; Local_u8Row++) {
    2a80:	89 89       	ldd	r24, Y+17	; 0x11
    2a82:	8f 5f       	subi	r24, 0xFF	; 255
    2a84:	89 8b       	std	Y+17, r24	; 0x11
    2a86:	89 89       	ldd	r24, Y+17	; 0x11
    2a88:	84 30       	cpi	r24, 0x04	; 4
    2a8a:	08 f4       	brcc	.+2      	; 0x2a8e <KPD_u8GetPressedKey+0x1d0>
    2a8c:	28 cf       	rjmp	.-432    	; 0x28de <KPD_u8GetPressedKey+0x20>
		if (1 == Local_u8Flag) {
			break;
		}

	}
	return (Local_u8Sw);
    2a8e:	88 89       	ldd	r24, Y+16	; 0x10
}	
    2a90:	63 96       	adiw	r28, 0x13	; 19
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	cd bf       	out	0x3d, r28	; 61
    2a9c:	cf 91       	pop	r28
    2a9e:	df 91       	pop	r29
    2aa0:	08 95       	ret

00002aa2 <NUM>:
u8 KPD_enter , enteranceArr[16],i=0,k;
f32 x ,arr[16] ,opArr[16] ,sumArr[16] ,MdArr[16];

// gathering the complete number
void NUM (void)
{
    2aa2:	0f 93       	push	r16
    2aa4:	1f 93       	push	r17
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    n++ ;
    2aae:	80 91 e4 01 	lds	r24, 0x01E4
    2ab2:	8f 5f       	subi	r24, 0xFF	; 255
    2ab4:	80 93 e4 01 	sts	0x01E4, r24
    arr[n] = arr[n-1]*10 + x ;
    2ab8:	80 91 e4 01 	lds	r24, 0x01E4
    2abc:	08 2f       	mov	r16, r24
    2abe:	11 27       	eor	r17, r17
    2ac0:	07 fd       	sbrc	r16, 7
    2ac2:	10 95       	com	r17
    2ac4:	80 91 e4 01 	lds	r24, 0x01E4
    2ac8:	99 27       	eor	r25, r25
    2aca:	87 fd       	sbrc	r24, 7
    2acc:	90 95       	com	r25
    2ace:	01 97       	sbiw	r24, 0x01	; 1
    2ad0:	88 0f       	add	r24, r24
    2ad2:	99 1f       	adc	r25, r25
    2ad4:	88 0f       	add	r24, r24
    2ad6:	99 1f       	adc	r25, r25
    2ad8:	fc 01       	movw	r30, r24
    2ada:	e0 56       	subi	r30, 0x60	; 96
    2adc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ade:	80 81       	ld	r24, Z
    2ae0:	91 81       	ldd	r25, Z+1	; 0x01
    2ae2:	a2 81       	ldd	r26, Z+2	; 0x02
    2ae4:	b3 81       	ldd	r27, Z+3	; 0x03
    2ae6:	bc 01       	movw	r22, r24
    2ae8:	cd 01       	movw	r24, r26
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e2       	ldi	r20, 0x20	; 32
    2af0:	51 e4       	ldi	r21, 0x41	; 65
    2af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	20 91 e0 01 	lds	r18, 0x01E0
    2afe:	30 91 e1 01 	lds	r19, 0x01E1
    2b02:	40 91 e2 01 	lds	r20, 0x01E2
    2b06:	50 91 e3 01 	lds	r21, 0x01E3
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	9c 01       	movw	r18, r24
    2b18:	ad 01       	movw	r20, r26
    2b1a:	c8 01       	movw	r24, r16
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	fc 01       	movw	r30, r24
    2b26:	e0 56       	subi	r30, 0x60	; 96
    2b28:	fe 4f       	sbci	r31, 0xFE	; 254
    2b2a:	20 83       	st	Z, r18
    2b2c:	31 83       	std	Z+1, r19	; 0x01
    2b2e:	42 83       	std	Z+2, r20	; 0x02
    2b30:	53 83       	std	Z+3, r21	; 0x03
	
	// to make the negative number  
    if (sign==1){arr[n]=arr[n]*(-1); sign=0;}
    2b32:	80 91 9f 01 	lds	r24, 0x019F
    2b36:	81 30       	cpi	r24, 0x01	; 1
    2b38:	39 f5       	brne	.+78     	; 0x2b88 <NUM+0xe6>
    2b3a:	80 91 e4 01 	lds	r24, 0x01E4
    2b3e:	68 2f       	mov	r22, r24
    2b40:	77 27       	eor	r23, r23
    2b42:	67 fd       	sbrc	r22, 7
    2b44:	70 95       	com	r23
    2b46:	80 91 e4 01 	lds	r24, 0x01E4
    2b4a:	99 27       	eor	r25, r25
    2b4c:	87 fd       	sbrc	r24, 7
    2b4e:	90 95       	com	r25
    2b50:	88 0f       	add	r24, r24
    2b52:	99 1f       	adc	r25, r25
    2b54:	88 0f       	add	r24, r24
    2b56:	99 1f       	adc	r25, r25
    2b58:	fc 01       	movw	r30, r24
    2b5a:	e0 56       	subi	r30, 0x60	; 96
    2b5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b5e:	80 81       	ld	r24, Z
    2b60:	91 81       	ldd	r25, Z+1	; 0x01
    2b62:	a2 81       	ldd	r26, Z+2	; 0x02
    2b64:	b3 81       	ldd	r27, Z+3	; 0x03
    2b66:	9c 01       	movw	r18, r24
    2b68:	ad 01       	movw	r20, r26
    2b6a:	50 58       	subi	r21, 0x80	; 128
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	88 0f       	add	r24, r24
    2b70:	99 1f       	adc	r25, r25
    2b72:	88 0f       	add	r24, r24
    2b74:	99 1f       	adc	r25, r25
    2b76:	fc 01       	movw	r30, r24
    2b78:	e0 56       	subi	r30, 0x60	; 96
    2b7a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b7c:	20 83       	st	Z, r18
    2b7e:	31 83       	std	Z+1, r19	; 0x01
    2b80:	42 83       	std	Z+2, r20	; 0x02
    2b82:	53 83       	std	Z+3, r21	; 0x03
    2b84:	10 92 9f 01 	sts	0x019F, r1

}
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	1f 91       	pop	r17
    2b8e:	0f 91       	pop	r16
    2b90:	08 95       	ret

00002b92 <P_fun>:

// Multiplying or Dividing operation function
void P_fun (Lcd_info* lcd)
{
    2b92:	df 93       	push	r29
    2b94:	cf 93       	push	r28
    2b96:	00 d0       	rcall	.+0      	; 0x2b98 <P_fun+0x6>
    2b98:	00 d0       	rcall	.+0      	; 0x2b9a <P_fun+0x8>
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
    2b9e:	9a 83       	std	Y+2, r25	; 0x02
    2ba0:	89 83       	std	Y+1, r24	; 0x01
    Pop ++ ;
    2ba2:	80 91 81 02 	lds	r24, 0x0281
    2ba6:	8f 5f       	subi	r24, 0xFF	; 255
    2ba8:	80 93 81 02 	sts	0x0281, r24
    d++;
    2bac:	80 91 fd 01 	lds	r24, 0x01FD
    2bb0:	8f 5f       	subi	r24, 0xFF	; 255
    2bb2:	80 93 fd 01 	sts	0x01FD, r24
	// MdArr holding first and second number
    MdArr[d] = opArr[z] ;
    2bb6:	80 91 fd 01 	lds	r24, 0x01FD
    2bba:	68 2f       	mov	r22, r24
    2bbc:	77 27       	eor	r23, r23
    2bbe:	67 fd       	sbrc	r22, 7
    2bc0:	70 95       	com	r23
    2bc2:	80 91 eb 01 	lds	r24, 0x01EB
    2bc6:	99 27       	eor	r25, r25
    2bc8:	87 fd       	sbrc	r24, 7
    2bca:	90 95       	com	r25
    2bcc:	88 0f       	add	r24, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	88 0f       	add	r24, r24
    2bd2:	99 1f       	adc	r25, r25
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	ee 57       	subi	r30, 0x7E	; 126
    2bd8:	fd 4f       	sbci	r31, 0xFD	; 253
    2bda:	20 81       	ld	r18, Z
    2bdc:	31 81       	ldd	r19, Z+1	; 0x01
    2bde:	42 81       	ldd	r20, Z+2	; 0x02
    2be0:	53 81       	ldd	r21, Z+3	; 0x03
    2be2:	cb 01       	movw	r24, r22
    2be4:	88 0f       	add	r24, r24
    2be6:	99 1f       	adc	r25, r25
    2be8:	88 0f       	add	r24, r24
    2bea:	99 1f       	adc	r25, r25
    2bec:	fc 01       	movw	r30, r24
    2bee:	e1 50       	subi	r30, 0x01	; 1
    2bf0:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf2:	20 83       	st	Z, r18
    2bf4:	31 83       	std	Z+1, r19	; 0x01
    2bf6:	42 83       	std	Z+2, r20	; 0x02
    2bf8:	53 83       	std	Z+3, r21	; 0x03
	// doing the operation on two numbers
    if (Pop==2)
    2bfa:	80 91 81 02 	lds	r24, 0x0281
    2bfe:	82 30       	cpi	r24, 0x02	; 2
    2c00:	09 f0       	breq	.+2      	; 0x2c04 <P_fun+0x72>
    2c02:	8e c0       	rjmp	.+284    	; 0x2d20 <P_fun+0x18e>
    {

        switch(Pstate)
    2c04:	80 91 e7 01 	lds	r24, 0x01E7
    2c08:	28 2f       	mov	r18, r24
    2c0a:	33 27       	eor	r19, r19
    2c0c:	27 fd       	sbrc	r18, 7
    2c0e:	30 95       	com	r19
    2c10:	3c 83       	std	Y+4, r19	; 0x04
    2c12:	2b 83       	std	Y+3, r18	; 0x03
    2c14:	8b 81       	ldd	r24, Y+3	; 0x03
    2c16:	9c 81       	ldd	r25, Y+4	; 0x04
    2c18:	81 30       	cpi	r24, 0x01	; 1
    2c1a:	91 05       	cpc	r25, r1
    2c1c:	39 f0       	breq	.+14     	; 0x2c2c <P_fun+0x9a>
    2c1e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c20:	3c 81       	ldd	r19, Y+4	; 0x04
    2c22:	22 30       	cpi	r18, 0x02	; 2
    2c24:	31 05       	cpc	r19, r1
    2c26:	09 f4       	brne	.+2      	; 0x2c2a <P_fun+0x98>
    2c28:	44 c0       	rjmp	.+136    	; 0x2cb2 <P_fun+0x120>
    2c2a:	61 c0       	rjmp	.+194    	; 0x2cee <P_fun+0x15c>
        {
			// dividing operation	
			case 1 :
				// Exception for infinity loop (dividing by zero)
				if (MdArr[2]==0)
    2c2c:	80 91 07 02 	lds	r24, 0x0207
    2c30:	90 91 08 02 	lds	r25, 0x0208
    2c34:	a0 91 09 02 	lds	r26, 0x0209
    2c38:	b0 91 0a 02 	lds	r27, 0x020A
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	40 e0       	ldi	r20, 0x00	; 0
    2c46:	50 e0       	ldi	r21, 0x00	; 0
    2c48:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2c4c:	88 23       	and	r24, r24
    2c4e:	91 f4       	brne	.+36     	; 0x2c74 <P_fun+0xe2>
				{
					LCD_VoidGoToXY(1,0,lcd);
    2c50:	29 81       	ldd	r18, Y+1	; 0x01
    2c52:	3a 81       	ldd	r19, Y+2	; 0x02
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	60 e0       	ldi	r22, 0x00	; 0
    2c58:	a9 01       	movw	r20, r18
    2c5a:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_VoidGoToXY>
					LCD_VoidSendString("Math ERROR",lcd);
    2c5e:	82 e6       	ldi	r24, 0x62	; 98
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	29 81       	ldd	r18, Y+1	; 0x01
    2c64:	3a 81       	ldd	r19, Y+2	; 0x02
    2c66:	b9 01       	movw	r22, r18
    2c68:	0e 94 2e 10 	call	0x205c	; 0x205c <LCD_VoidSendString>
					i=17;
    2c6c:	81 e1       	ldi	r24, 0x11	; 17
    2c6e:	80 93 9e 01 	sts	0x019E, r24
    2c72:	3d c0       	rjmp	.+122    	; 0x2cee <P_fun+0x15c>
				}
				else
				// dividing operation	
				{
					MdArr[1]=MdArr[1] / MdArr[2] ;
    2c74:	80 91 03 02 	lds	r24, 0x0203
    2c78:	90 91 04 02 	lds	r25, 0x0204
    2c7c:	a0 91 05 02 	lds	r26, 0x0205
    2c80:	b0 91 06 02 	lds	r27, 0x0206
    2c84:	20 91 07 02 	lds	r18, 0x0207
    2c88:	30 91 08 02 	lds	r19, 0x0208
    2c8c:	40 91 09 02 	lds	r20, 0x0209
    2c90:	50 91 0a 02 	lds	r21, 0x020A
    2c94:	bc 01       	movw	r22, r24
    2c96:	cd 01       	movw	r24, r26
    2c98:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	80 93 03 02 	sts	0x0203, r24
    2ca4:	90 93 04 02 	sts	0x0204, r25
    2ca8:	a0 93 05 02 	sts	0x0205, r26
    2cac:	b0 93 06 02 	sts	0x0206, r27
    2cb0:	1e c0       	rjmp	.+60     	; 0x2cee <P_fun+0x15c>
				}
				break ;
				
			// multiplying operation	
			case 2 :
				MdArr[1]=MdArr[1] * MdArr[2] ;
    2cb2:	80 91 03 02 	lds	r24, 0x0203
    2cb6:	90 91 04 02 	lds	r25, 0x0204
    2cba:	a0 91 05 02 	lds	r26, 0x0205
    2cbe:	b0 91 06 02 	lds	r27, 0x0206
    2cc2:	20 91 07 02 	lds	r18, 0x0207
    2cc6:	30 91 08 02 	lds	r19, 0x0208
    2cca:	40 91 09 02 	lds	r20, 0x0209
    2cce:	50 91 0a 02 	lds	r21, 0x020A
    2cd2:	bc 01       	movw	r22, r24
    2cd4:	cd 01       	movw	r24, r26
    2cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	80 93 03 02 	sts	0x0203, r24
    2ce2:	90 93 04 02 	sts	0x0204, r25
    2ce6:	a0 93 05 02 	sts	0x0205, r26
    2cea:	b0 93 06 02 	sts	0x0206, r27
				break ;
		}

        Pop = 1;
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	80 93 81 02 	sts	0x0281, r24
        d = 1;
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	80 93 fd 01 	sts	0x01FD, r24
        Pstate=0;
    2cfa:	10 92 e7 01 	sts	0x01E7, r1
		
		// Exception to reset P_fun counters 
        if (Preset==1 ){ d=0; Pop=0; Preset=0; }
    2cfe:	80 91 40 02 	lds	r24, 0x0240
    2d02:	81 30       	cpi	r24, 0x01	; 1
    2d04:	31 f4       	brne	.+12     	; 0x2d12 <P_fun+0x180>
    2d06:	10 92 fd 01 	sts	0x01FD, r1
    2d0a:	10 92 81 02 	sts	0x0281, r1
    2d0e:	10 92 40 02 	sts	0x0240, r1
		// Exception to tell the S_fun to start calculating the all number pervious the equal operator
        if (state==1){Pstate=5;}
    2d12:	80 91 ea 01 	lds	r24, 0x01EA
    2d16:	81 30       	cpi	r24, 0x01	; 1
    2d18:	19 f4       	brne	.+6      	; 0x2d20 <P_fun+0x18e>
    2d1a:	85 e0       	ldi	r24, 0x05	; 5
    2d1c:	80 93 e7 01 	sts	0x01E7, r24

    }
}
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	0f 90       	pop	r0
    2d28:	cf 91       	pop	r28
    2d2a:	df 91       	pop	r29
    2d2c:	08 95       	ret

00002d2e <S_fun>:

// Summing or minus operation function
void S_fun (Lcd_info* lcd)
{
    2d2e:	df 93       	push	r29
    2d30:	cf 93       	push	r28
    2d32:	00 d0       	rcall	.+0      	; 0x2d34 <S_fun+0x6>
    2d34:	00 d0       	rcall	.+0      	; 0x2d36 <S_fun+0x8>
    2d36:	cd b7       	in	r28, 0x3d	; 61
    2d38:	de b7       	in	r29, 0x3e	; 62
    2d3a:	9a 83       	std	Y+2, r25	; 0x02
    2d3c:	89 83       	std	Y+1, r24	; 0x01
	Preset =1 ;
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	80 93 40 02 	sts	0x0240, r24
    Sop++;
    2d44:	80 91 e6 01 	lds	r24, 0x01E6
    2d48:	8f 5f       	subi	r24, 0xFF	; 255
    2d4a:	80 93 e6 01 	sts	0x01E6, r24
    s++ ;
    2d4e:	80 91 3f 02 	lds	r24, 0x023F
    2d52:	8f 5f       	subi	r24, 0xFF	; 255
    2d54:	80 93 3f 02 	sts	0x023F, r24
	// sumArr holding first and second number
    sumArr[s] = opArr[z] ;
    2d58:	80 91 3f 02 	lds	r24, 0x023F
    2d5c:	68 2f       	mov	r22, r24
    2d5e:	77 27       	eor	r23, r23
    2d60:	67 fd       	sbrc	r22, 7
    2d62:	70 95       	com	r23
    2d64:	80 91 eb 01 	lds	r24, 0x01EB
    2d68:	99 27       	eor	r25, r25
    2d6a:	87 fd       	sbrc	r24, 7
    2d6c:	90 95       	com	r25
    2d6e:	88 0f       	add	r24, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	88 0f       	add	r24, r24
    2d74:	99 1f       	adc	r25, r25
    2d76:	fc 01       	movw	r30, r24
    2d78:	ee 57       	subi	r30, 0x7E	; 126
    2d7a:	fd 4f       	sbci	r31, 0xFD	; 253
    2d7c:	20 81       	ld	r18, Z
    2d7e:	31 81       	ldd	r19, Z+1	; 0x01
    2d80:	42 81       	ldd	r20, Z+2	; 0x02
    2d82:	53 81       	ldd	r21, Z+3	; 0x03
    2d84:	cb 01       	movw	r24, r22
    2d86:	88 0f       	add	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	88 0f       	add	r24, r24
    2d8c:	99 1f       	adc	r25, r25
    2d8e:	fc 01       	movw	r30, r24
    2d90:	ef 5b       	subi	r30, 0xBF	; 191
    2d92:	fd 4f       	sbci	r31, 0xFD	; 253
    2d94:	20 83       	st	Z, r18
    2d96:	31 83       	std	Z+1, r19	; 0x01
    2d98:	42 83       	std	Z+2, r20	; 0x02
    2d9a:	53 83       	std	Z+3, r21	; 0x03
	// if there is any previous multiplication or division operation have to be done first
    if (Pstate==1 || Pstate==2)
    2d9c:	80 91 e7 01 	lds	r24, 0x01E7
    2da0:	81 30       	cpi	r24, 0x01	; 1
    2da2:	21 f0       	breq	.+8      	; 0x2dac <S_fun+0x7e>
    2da4:	80 91 e7 01 	lds	r24, 0x01E7
    2da8:	82 30       	cpi	r24, 0x02	; 2
    2daa:	e1 f4       	brne	.+56     	; 0x2de4 <S_fun+0xb6>
    {
        P_fun(lcd);
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	9a 81       	ldd	r25, Y+2	; 0x02
    2db0:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <P_fun>
        sumArr[s] = MdArr[1];
    2db4:	80 91 3f 02 	lds	r24, 0x023F
    2db8:	99 27       	eor	r25, r25
    2dba:	87 fd       	sbrc	r24, 7
    2dbc:	90 95       	com	r25
    2dbe:	20 91 03 02 	lds	r18, 0x0203
    2dc2:	30 91 04 02 	lds	r19, 0x0204
    2dc6:	40 91 05 02 	lds	r20, 0x0205
    2dca:	50 91 06 02 	lds	r21, 0x0206
    2dce:	88 0f       	add	r24, r24
    2dd0:	99 1f       	adc	r25, r25
    2dd2:	88 0f       	add	r24, r24
    2dd4:	99 1f       	adc	r25, r25
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	ef 5b       	subi	r30, 0xBF	; 191
    2dda:	fd 4f       	sbci	r31, 0xFD	; 253
    2ddc:	20 83       	st	Z, r18
    2dde:	31 83       	std	Z+1, r19	; 0x01
    2de0:	42 83       	std	Z+2, r20	; 0x02
    2de2:	53 83       	std	Z+3, r21	; 0x03
    }
    if (Pstate==5 && state==1)
    2de4:	80 91 e7 01 	lds	r24, 0x01E7
    2de8:	85 30       	cpi	r24, 0x05	; 5
    2dea:	e1 f4       	brne	.+56     	; 0x2e24 <S_fun+0xf6>
    2dec:	80 91 ea 01 	lds	r24, 0x01EA
    2df0:	81 30       	cpi	r24, 0x01	; 1
    2df2:	c1 f4       	brne	.+48     	; 0x2e24 <S_fun+0xf6>
    {
        sumArr[s] = MdArr[1];
    2df4:	80 91 3f 02 	lds	r24, 0x023F
    2df8:	99 27       	eor	r25, r25
    2dfa:	87 fd       	sbrc	r24, 7
    2dfc:	90 95       	com	r25
    2dfe:	20 91 03 02 	lds	r18, 0x0203
    2e02:	30 91 04 02 	lds	r19, 0x0204
    2e06:	40 91 05 02 	lds	r20, 0x0205
    2e0a:	50 91 06 02 	lds	r21, 0x0206
    2e0e:	88 0f       	add	r24, r24
    2e10:	99 1f       	adc	r25, r25
    2e12:	88 0f       	add	r24, r24
    2e14:	99 1f       	adc	r25, r25
    2e16:	fc 01       	movw	r30, r24
    2e18:	ef 5b       	subi	r30, 0xBF	; 191
    2e1a:	fd 4f       	sbci	r31, 0xFD	; 253
    2e1c:	20 83       	st	Z, r18
    2e1e:	31 83       	std	Z+1, r19	; 0x01
    2e20:	42 83       	std	Z+2, r20	; 0x02
    2e22:	53 83       	std	Z+3, r21	; 0x03
    }
	// doing the operation on two numbers
    if (Sop==2)
    2e24:	80 91 e6 01 	lds	r24, 0x01E6
    2e28:	82 30       	cpi	r24, 0x02	; 2
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <S_fun+0x100>
    2e2c:	5a c0       	rjmp	.+180    	; 0x2ee2 <S_fun+0x1b4>
    {

        switch (Sstate)
    2e2e:	80 91 e5 01 	lds	r24, 0x01E5
    2e32:	28 2f       	mov	r18, r24
    2e34:	33 27       	eor	r19, r19
    2e36:	27 fd       	sbrc	r18, 7
    2e38:	30 95       	com	r19
    2e3a:	3c 83       	std	Y+4, r19	; 0x04
    2e3c:	2b 83       	std	Y+3, r18	; 0x03
    2e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e40:	9c 81       	ldd	r25, Y+4	; 0x04
    2e42:	81 30       	cpi	r24, 0x01	; 1
    2e44:	91 05       	cpc	r25, r1
    2e46:	31 f0       	breq	.+12     	; 0x2e54 <S_fun+0x126>
    2e48:	2b 81       	ldd	r18, Y+3	; 0x03
    2e4a:	3c 81       	ldd	r19, Y+4	; 0x04
    2e4c:	22 30       	cpi	r18, 0x02	; 2
    2e4e:	31 05       	cpc	r19, r1
    2e50:	01 f1       	breq	.+64     	; 0x2e92 <S_fun+0x164>
    2e52:	3d c0       	rjmp	.+122    	; 0x2ece <S_fun+0x1a0>
        {
			// Summing operation
            case 1 : 
                sumArr[1]=sumArr[1] + sumArr[2] ;
    2e54:	80 91 45 02 	lds	r24, 0x0245
    2e58:	90 91 46 02 	lds	r25, 0x0246
    2e5c:	a0 91 47 02 	lds	r26, 0x0247
    2e60:	b0 91 48 02 	lds	r27, 0x0248
    2e64:	20 91 49 02 	lds	r18, 0x0249
    2e68:	30 91 4a 02 	lds	r19, 0x024A
    2e6c:	40 91 4b 02 	lds	r20, 0x024B
    2e70:	50 91 4c 02 	lds	r21, 0x024C
    2e74:	bc 01       	movw	r22, r24
    2e76:	cd 01       	movw	r24, r26
    2e78:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	80 93 45 02 	sts	0x0245, r24
    2e84:	90 93 46 02 	sts	0x0246, r25
    2e88:	a0 93 47 02 	sts	0x0247, r26
    2e8c:	b0 93 48 02 	sts	0x0248, r27
    2e90:	1e c0       	rjmp	.+60     	; 0x2ece <S_fun+0x1a0>
                break ;
			// minus operation 	
            case 2 :
                sumArr[1]=sumArr[1] - sumArr[2] ;
    2e92:	80 91 45 02 	lds	r24, 0x0245
    2e96:	90 91 46 02 	lds	r25, 0x0246
    2e9a:	a0 91 47 02 	lds	r26, 0x0247
    2e9e:	b0 91 48 02 	lds	r27, 0x0248
    2ea2:	20 91 49 02 	lds	r18, 0x0249
    2ea6:	30 91 4a 02 	lds	r19, 0x024A
    2eaa:	40 91 4b 02 	lds	r20, 0x024B
    2eae:	50 91 4c 02 	lds	r21, 0x024C
    2eb2:	bc 01       	movw	r22, r24
    2eb4:	cd 01       	movw	r24, r26
    2eb6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	80 93 45 02 	sts	0x0245, r24
    2ec2:	90 93 46 02 	sts	0x0246, r25
    2ec6:	a0 93 47 02 	sts	0x0247, r26
    2eca:	b0 93 48 02 	sts	0x0248, r27
                break ;
        }
        Sop=1;
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	80 93 e6 01 	sts	0x01E6, r24
        s=1;
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	80 93 3f 02 	sts	0x023F, r24
        Pop=0;
    2eda:	10 92 81 02 	sts	0x0281, r1
        d=0;
    2ede:	10 92 fd 01 	sts	0x01FD, r1

    }

}
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	cf 91       	pop	r28
    2eec:	df 91       	pop	r29
    2eee:	08 95       	ret

00002ef0 <Equal_fun>:

// Displaying the final result
void Equal_fun (Lcd_info* lcd)
{
    2ef0:	df 93       	push	r29
    2ef2:	cf 93       	push	r28
    2ef4:	00 d0       	rcall	.+0      	; 0x2ef6 <Equal_fun+0x6>
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    2efa:	9a 83       	std	Y+2, r25	; 0x02
    2efc:	89 83       	std	Y+1, r24	; 0x01

	cleanSc = 1 ;
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	80 93 fc 01 	sts	0x01FC, r24

    if (Pstate==1 || Pstate==2 )
    2f04:	80 91 e7 01 	lds	r24, 0x01E7
    2f08:	81 30       	cpi	r24, 0x01	; 1
    2f0a:	21 f0       	breq	.+8      	; 0x2f14 <Equal_fun+0x24>
    2f0c:	80 91 e7 01 	lds	r24, 0x01E7
    2f10:	82 30       	cpi	r24, 0x02	; 2
    2f12:	f1 f4       	brne	.+60     	; 0x2f50 <Equal_fun+0x60>
    {
        P_fun (lcd);
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	9a 81       	ldd	r25, Y+2	; 0x02
    2f18:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <P_fun>
		// Exception for infinity loop (dividing by zero)
        if(i==17){}
    2f1c:	80 91 9e 01 	lds	r24, 0x019E
    2f20:	81 31       	cpi	r24, 0x11	; 17
    2f22:	b1 f0       	breq	.+44     	; 0x2f50 <Equal_fun+0x60>
        else
		// printing the result
        {
			LCD_VoidGoToXY (1,0,lcd);
    2f24:	29 81       	ldd	r18, Y+1	; 0x01
    2f26:	3a 81       	ldd	r19, Y+2	; 0x02
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	60 e0       	ldi	r22, 0x00	; 0
    2f2c:	a9 01       	movw	r20, r18
    2f2e:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_VoidGoToXY>
			LCD_VoidSendFloat(MdArr[1],lcd);
    2f32:	80 91 03 02 	lds	r24, 0x0203
    2f36:	90 91 04 02 	lds	r25, 0x0204
    2f3a:	a0 91 05 02 	lds	r26, 0x0205
    2f3e:	b0 91 06 02 	lds	r27, 0x0206
    2f42:	29 81       	ldd	r18, Y+1	; 0x01
    2f44:	3a 81       	ldd	r19, Y+2	; 0x02
    2f46:	bc 01       	movw	r22, r24
    2f48:	cd 01       	movw	r24, r26
    2f4a:	a9 01       	movw	r20, r18
    2f4c:	0e 94 09 11 	call	0x2212	; 0x2212 <LCD_VoidSendFloat>
        }

    }
    if (Sstate==1 || Sstate==2 )
    2f50:	80 91 e5 01 	lds	r24, 0x01E5
    2f54:	81 30       	cpi	r24, 0x01	; 1
    2f56:	21 f0       	breq	.+8      	; 0x2f60 <Equal_fun+0x70>
    2f58:	80 91 e5 01 	lds	r24, 0x01E5
    2f5c:	82 30       	cpi	r24, 0x02	; 2
    2f5e:	f1 f4       	brne	.+60     	; 0x2f9c <Equal_fun+0xac>
    {
        S_fun (lcd);
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	9a 81       	ldd	r25, Y+2	; 0x02
    2f64:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <S_fun>
		// Exception for infinity loop (dividing by zero)
        if(i==17){}
    2f68:	80 91 9e 01 	lds	r24, 0x019E
    2f6c:	81 31       	cpi	r24, 0x11	; 17
    2f6e:	b1 f0       	breq	.+44     	; 0x2f9c <Equal_fun+0xac>
		else
		// printing the result
		{
			LCD_VoidGoToXY (1,0,lcd);
    2f70:	29 81       	ldd	r18, Y+1	; 0x01
    2f72:	3a 81       	ldd	r19, Y+2	; 0x02
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	60 e0       	ldi	r22, 0x00	; 0
    2f78:	a9 01       	movw	r20, r18
    2f7a:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_VoidGoToXY>
			LCD_VoidSendFloat(sumArr[1],lcd);
    2f7e:	80 91 45 02 	lds	r24, 0x0245
    2f82:	90 91 46 02 	lds	r25, 0x0246
    2f86:	a0 91 47 02 	lds	r26, 0x0247
    2f8a:	b0 91 48 02 	lds	r27, 0x0248
    2f8e:	29 81       	ldd	r18, Y+1	; 0x01
    2f90:	3a 81       	ldd	r19, Y+2	; 0x02
    2f92:	bc 01       	movw	r22, r24
    2f94:	cd 01       	movw	r24, r26
    2f96:	a9 01       	movw	r20, r18
    2f98:	0e 94 09 11 	call	0x2212	; 0x2212 <LCD_VoidSendFloat>
		}
    }

}
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	cf 91       	pop	r28
    2fa2:	df 91       	pop	r29
    2fa4:	08 95       	ret

00002fa6 <operat>:

// Receiving the operations
void operat (Lcd_info* lcd)
{
    2fa6:	df 93       	push	r29
    2fa8:	cf 93       	push	r28
    2faa:	00 d0       	rcall	.+0      	; 0x2fac <operat+0x6>
    2fac:	00 d0       	rcall	.+0      	; 0x2fae <operat+0x8>
    2fae:	cd b7       	in	r28, 0x3d	; 61
    2fb0:	de b7       	in	r29, 0x3e	; 62
    2fb2:	9a 83       	std	Y+2, r25	; 0x02
    2fb4:	89 83       	std	Y+1, r24	; 0x01
    z++;
    2fb6:	80 91 eb 01 	lds	r24, 0x01EB
    2fba:	8f 5f       	subi	r24, 0xFF	; 255
    2fbc:	80 93 eb 01 	sts	0x01EB, r24
    opArr[z]=arr[n];
    2fc0:	80 91 eb 01 	lds	r24, 0x01EB
    2fc4:	68 2f       	mov	r22, r24
    2fc6:	77 27       	eor	r23, r23
    2fc8:	67 fd       	sbrc	r22, 7
    2fca:	70 95       	com	r23
    2fcc:	80 91 e4 01 	lds	r24, 0x01E4
    2fd0:	99 27       	eor	r25, r25
    2fd2:	87 fd       	sbrc	r24, 7
    2fd4:	90 95       	com	r25
    2fd6:	88 0f       	add	r24, r24
    2fd8:	99 1f       	adc	r25, r25
    2fda:	88 0f       	add	r24, r24
    2fdc:	99 1f       	adc	r25, r25
    2fde:	fc 01       	movw	r30, r24
    2fe0:	e0 56       	subi	r30, 0x60	; 96
    2fe2:	fe 4f       	sbci	r31, 0xFE	; 254
    2fe4:	20 81       	ld	r18, Z
    2fe6:	31 81       	ldd	r19, Z+1	; 0x01
    2fe8:	42 81       	ldd	r20, Z+2	; 0x02
    2fea:	53 81       	ldd	r21, Z+3	; 0x03
    2fec:	cb 01       	movw	r24, r22
    2fee:	88 0f       	add	r24, r24
    2ff0:	99 1f       	adc	r25, r25
    2ff2:	88 0f       	add	r24, r24
    2ff4:	99 1f       	adc	r25, r25
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	ee 57       	subi	r30, 0x7E	; 126
    2ffa:	fd 4f       	sbci	r31, 0xFD	; 253
    2ffc:	20 83       	st	Z, r18
    2ffe:	31 83       	std	Z+1, r19	; 0x01
    3000:	42 83       	std	Z+2, r20	; 0x02
    3002:	53 83       	std	Z+3, r21	; 0x03
    n++;
    3004:	80 91 e4 01 	lds	r24, 0x01E4
    3008:	8f 5f       	subi	r24, 0xFF	; 255
    300a:	80 93 e4 01 	sts	0x01E4, r24
    arr[n]=0 ;
    300e:	80 91 e4 01 	lds	r24, 0x01E4
    3012:	99 27       	eor	r25, r25
    3014:	87 fd       	sbrc	r24, 7
    3016:	90 95       	com	r25
    3018:	88 0f       	add	r24, r24
    301a:	99 1f       	adc	r25, r25
    301c:	88 0f       	add	r24, r24
    301e:	99 1f       	adc	r25, r25
    3020:	fc 01       	movw	r30, r24
    3022:	e0 56       	subi	r30, 0x60	; 96
    3024:	fe 4f       	sbci	r31, 0xFE	; 254
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	a0 e0       	ldi	r26, 0x00	; 0
    302c:	b0 e0       	ldi	r27, 0x00	; 0
    302e:	80 83       	st	Z, r24
    3030:	91 83       	std	Z+1, r25	; 0x01
    3032:	a2 83       	std	Z+2, r26	; 0x02
    3034:	b3 83       	std	Z+3, r27	; 0x03

    switch (keyPressed)
    3036:	80 91 fe 01 	lds	r24, 0x01FE
    303a:	28 2f       	mov	r18, r24
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	3c 83       	std	Y+4, r19	; 0x04
    3040:	2b 83       	std	Y+3, r18	; 0x03
    3042:	8b 81       	ldd	r24, Y+3	; 0x03
    3044:	9c 81       	ldd	r25, Y+4	; 0x04
    3046:	8d 32       	cpi	r24, 0x2D	; 45
    3048:	91 05       	cpc	r25, r1
    304a:	99 f1       	breq	.+102    	; 0x30b2 <operat+0x10c>
    304c:	2b 81       	ldd	r18, Y+3	; 0x03
    304e:	3c 81       	ldd	r19, Y+4	; 0x04
    3050:	2e 32       	cpi	r18, 0x2E	; 46
    3052:	31 05       	cpc	r19, r1
    3054:	5c f4       	brge	.+22     	; 0x306c <operat+0xc6>
    3056:	8b 81       	ldd	r24, Y+3	; 0x03
    3058:	9c 81       	ldd	r25, Y+4	; 0x04
    305a:	8a 32       	cpi	r24, 0x2A	; 42
    305c:	91 05       	cpc	r25, r1
    305e:	c9 f0       	breq	.+50     	; 0x3092 <operat+0xec>
    3060:	2b 81       	ldd	r18, Y+3	; 0x03
    3062:	3c 81       	ldd	r19, Y+4	; 0x04
    3064:	2b 32       	cpi	r18, 0x2B	; 43
    3066:	31 05       	cpc	r19, r1
    3068:	e1 f0       	breq	.+56     	; 0x30a2 <operat+0xfc>
    306a:	32 c0       	rjmp	.+100    	; 0x30d0 <operat+0x12a>
    306c:	8b 81       	ldd	r24, Y+3	; 0x03
    306e:	9c 81       	ldd	r25, Y+4	; 0x04
    3070:	8f 32       	cpi	r24, 0x2F	; 47
    3072:	91 05       	cpc	r25, r1
    3074:	31 f0       	breq	.+12     	; 0x3082 <operat+0xdc>
    3076:	2b 81       	ldd	r18, Y+3	; 0x03
    3078:	3c 81       	ldd	r19, Y+4	; 0x04
    307a:	2d 33       	cpi	r18, 0x3D	; 61
    307c:	31 05       	cpc	r19, r1
    307e:	09 f1       	breq	.+66     	; 0x30c2 <operat+0x11c>
    3080:	27 c0       	rjmp	.+78     	; 0x30d0 <operat+0x12a>
    {

        case '/':

            P_fun (lcd);
    3082:	89 81       	ldd	r24, Y+1	; 0x01
    3084:	9a 81       	ldd	r25, Y+2	; 0x02
    3086:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <P_fun>
            Pstate=1;
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	80 93 e7 01 	sts	0x01E7, r24
    3090:	1f c0       	rjmp	.+62     	; 0x30d0 <operat+0x12a>
            break;
        case '*':

            P_fun (lcd);
    3092:	89 81       	ldd	r24, Y+1	; 0x01
    3094:	9a 81       	ldd	r25, Y+2	; 0x02
    3096:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <P_fun>
            Pstate=2;
    309a:	82 e0       	ldi	r24, 0x02	; 2
    309c:	80 93 e7 01 	sts	0x01E7, r24
    30a0:	17 c0       	rjmp	.+46     	; 0x30d0 <operat+0x12a>
            break;
        case '+':

            S_fun (lcd);
    30a2:	89 81       	ldd	r24, Y+1	; 0x01
    30a4:	9a 81       	ldd	r25, Y+2	; 0x02
    30a6:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <S_fun>
            Sstate=1;
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	80 93 e5 01 	sts	0x01E5, r24
    30b0:	0f c0       	rjmp	.+30     	; 0x30d0 <operat+0x12a>
            break;
        case '-':

            S_fun (lcd);
    30b2:	89 81       	ldd	r24, Y+1	; 0x01
    30b4:	9a 81       	ldd	r25, Y+2	; 0x02
    30b6:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <S_fun>
            Sstate=2;
    30ba:	82 e0       	ldi	r24, 0x02	; 2
    30bc:	80 93 e5 01 	sts	0x01E5, r24
    30c0:	07 c0       	rjmp	.+14     	; 0x30d0 <operat+0x12a>
            break;
        case '=':
            state=1;
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	80 93 ea 01 	sts	0x01EA, r24

            Equal_fun (lcd);
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	9a 81       	ldd	r25, Y+2	; 0x02
    30cc:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <Equal_fun>
            break;

    }
}
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	0f 90       	pop	r0
    30d8:	cf 91       	pop	r28
    30da:	df 91       	pop	r29
    30dc:	08 95       	ret

000030de <reset>:

// resting all variables
void reset(void)
{
    30de:	df 93       	push	r29
    30e0:	cf 93       	push	r28
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
	arr[0]=0; x=0;
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	a0 e0       	ldi	r26, 0x00	; 0
    30ec:	b0 e0       	ldi	r27, 0x00	; 0
    30ee:	80 93 a0 01 	sts	0x01A0, r24
    30f2:	90 93 a1 01 	sts	0x01A1, r25
    30f6:	a0 93 a2 01 	sts	0x01A2, r26
    30fa:	b0 93 a3 01 	sts	0x01A3, r27
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	a0 e0       	ldi	r26, 0x00	; 0
    3104:	b0 e0       	ldi	r27, 0x00	; 0
    3106:	80 93 e0 01 	sts	0x01E0, r24
    310a:	90 93 e1 01 	sts	0x01E1, r25
    310e:	a0 93 e2 01 	sts	0x01E2, r26
    3112:	b0 93 e3 01 	sts	0x01E3, r27
	n=0; z=0; s=0; d=0; opArr[0]=0;
    3116:	10 92 e4 01 	sts	0x01E4, r1
    311a:	10 92 eb 01 	sts	0x01EB, r1
    311e:	10 92 3f 02 	sts	0x023F, r1
    3122:	10 92 fd 01 	sts	0x01FD, r1
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	a0 e0       	ldi	r26, 0x00	; 0
    312c:	b0 e0       	ldi	r27, 0x00	; 0
    312e:	80 93 82 02 	sts	0x0282, r24
    3132:	90 93 83 02 	sts	0x0283, r25
    3136:	a0 93 84 02 	sts	0x0284, r26
    313a:	b0 93 85 02 	sts	0x0285, r27
	Pop=0; Sop=0; sumArr[0]=0; MdArr[0]=0;
    313e:	10 92 81 02 	sts	0x0281, r1
    3142:	10 92 e6 01 	sts	0x01E6, r1
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	a0 e0       	ldi	r26, 0x00	; 0
    314c:	b0 e0       	ldi	r27, 0x00	; 0
    314e:	80 93 41 02 	sts	0x0241, r24
    3152:	90 93 42 02 	sts	0x0242, r25
    3156:	a0 93 43 02 	sts	0x0243, r26
    315a:	b0 93 44 02 	sts	0x0244, r27
    315e:	80 e0       	ldi	r24, 0x00	; 0
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	a0 e0       	ldi	r26, 0x00	; 0
    3164:	b0 e0       	ldi	r27, 0x00	; 0
    3166:	80 93 ff 01 	sts	0x01FF, r24
    316a:	90 93 00 02 	sts	0x0200, r25
    316e:	a0 93 01 02 	sts	0x0201, r26
    3172:	b0 93 02 02 	sts	0x0202, r27
	Sstate=0;state=0;Pstate=0; i=0;
    3176:	10 92 e5 01 	sts	0x01E5, r1
    317a:	10 92 ea 01 	sts	0x01EA, r1
    317e:	10 92 e7 01 	sts	0x01E7, r1
    3182:	10 92 9e 01 	sts	0x019E, r1

}
    3186:	cf 91       	pop	r28
    3188:	df 91       	pop	r29
    318a:	08 95       	ret

0000318c <CalculatorMode>:


//*****************************************************************************************************
// the main function receives and displays the key pressed
void CalculatorMode (Lcd_info* lcd)
{
    318c:	df 93       	push	r29
    318e:	cf 93       	push	r28
    3190:	00 d0       	rcall	.+0      	; 0x3192 <CalculatorMode+0x6>
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
    3196:	9a 83       	std	Y+2, r25	; 0x02
    3198:	89 83       	std	Y+1, r24	; 0x01
	KPD_enter = KPD_u8GetPressedKey();
    319a:	0e 94 5f 14 	call	0x28be	; 0x28be <KPD_u8GetPressedKey>
    319e:	80 93 e8 01 	sts	0x01E8, r24
	if(KPD_enter != 0xff)
    31a2:	80 91 e8 01 	lds	r24, 0x01E8
    31a6:	8f 3f       	cpi	r24, 0xFF	; 255
    31a8:	09 f4       	brne	.+2      	; 0x31ac <CalculatorMode+0x20>
    31aa:	90 c0       	rjmp	.+288    	; 0x32cc <CalculatorMode+0x140>
	{
		// exception for erasing the screen after click on (C) key
		if ( (KPD_enter == 'C') && (cleanSc == 1) )
    31ac:	80 91 e8 01 	lds	r24, 0x01E8
    31b0:	83 34       	cpi	r24, 0x43	; 67
    31b2:	61 f4       	brne	.+24     	; 0x31cc <CalculatorMode+0x40>
    31b4:	80 91 fc 01 	lds	r24, 0x01FC
    31b8:	81 30       	cpi	r24, 0x01	; 1
    31ba:	41 f4       	brne	.+16     	; 0x31cc <CalculatorMode+0x40>
		{
			cleanSc =0;
    31bc:	10 92 fc 01 	sts	0x01FC, r1
			LCD_VoidSendCommand(LCD_ClearDisplay,lcd);
    31c0:	29 81       	ldd	r18, Y+1	; 0x01
    31c2:	3a 81       	ldd	r19, Y+2	; 0x02
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	b9 01       	movw	r22, r18
    31c8:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <LCD_VoidSendCommand>
			
		}



		if (KPD_enter != 'C')
    31cc:	80 91 e8 01 	lds	r24, 0x01E8
    31d0:	83 34       	cpi	r24, 0x43	; 67
    31d2:	09 f4       	brne	.+2      	; 0x31d6 <CalculatorMode+0x4a>
    31d4:	5f c0       	rjmp	.+190    	; 0x3294 <CalculatorMode+0x108>
		{
			// exception for entering two operations next to each other
			if ( ((KPD_enter == '/') || (KPD_enter == '*')|| (KPD_enter == '+')|| (KPD_enter == '-')) && ((enteranceArr[i-1] == '/') || (enteranceArr[i-1] == '*')|| (enteranceArr[i-1] == '+')|| (enteranceArr[i-1] == '-')) )
    31d6:	80 91 e8 01 	lds	r24, 0x01E8
    31da:	8f 32       	cpi	r24, 0x2F	; 47
    31dc:	61 f0       	breq	.+24     	; 0x31f6 <CalculatorMode+0x6a>
    31de:	80 91 e8 01 	lds	r24, 0x01E8
    31e2:	8a 32       	cpi	r24, 0x2A	; 42
    31e4:	41 f0       	breq	.+16     	; 0x31f6 <CalculatorMode+0x6a>
    31e6:	80 91 e8 01 	lds	r24, 0x01E8
    31ea:	8b 32       	cpi	r24, 0x2B	; 43
    31ec:	21 f0       	breq	.+8      	; 0x31f6 <CalculatorMode+0x6a>
    31ee:	80 91 e8 01 	lds	r24, 0x01E8
    31f2:	8d 32       	cpi	r24, 0x2D	; 45
    31f4:	89 f5       	brne	.+98     	; 0x3258 <CalculatorMode+0xcc>
    31f6:	80 91 9e 01 	lds	r24, 0x019E
    31fa:	88 2f       	mov	r24, r24
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	01 97       	sbiw	r24, 0x01	; 1
    3200:	fc 01       	movw	r30, r24
    3202:	e4 51       	subi	r30, 0x14	; 20
    3204:	fe 4f       	sbci	r31, 0xFE	; 254
    3206:	80 81       	ld	r24, Z
    3208:	8f 32       	cpi	r24, 0x2F	; 47
    320a:	09 f1       	breq	.+66     	; 0x324e <CalculatorMode+0xc2>
    320c:	80 91 9e 01 	lds	r24, 0x019E
    3210:	88 2f       	mov	r24, r24
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	fc 01       	movw	r30, r24
    3218:	e4 51       	subi	r30, 0x14	; 20
    321a:	fe 4f       	sbci	r31, 0xFE	; 254
    321c:	80 81       	ld	r24, Z
    321e:	8a 32       	cpi	r24, 0x2A	; 42
    3220:	b1 f0       	breq	.+44     	; 0x324e <CalculatorMode+0xc2>
    3222:	80 91 9e 01 	lds	r24, 0x019E
    3226:	88 2f       	mov	r24, r24
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	01 97       	sbiw	r24, 0x01	; 1
    322c:	fc 01       	movw	r30, r24
    322e:	e4 51       	subi	r30, 0x14	; 20
    3230:	fe 4f       	sbci	r31, 0xFE	; 254
    3232:	80 81       	ld	r24, Z
    3234:	8b 32       	cpi	r24, 0x2B	; 43
    3236:	59 f0       	breq	.+22     	; 0x324e <CalculatorMode+0xc2>
    3238:	80 91 9e 01 	lds	r24, 0x019E
    323c:	88 2f       	mov	r24, r24
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	01 97       	sbiw	r24, 0x01	; 1
    3242:	fc 01       	movw	r30, r24
    3244:	e4 51       	subi	r30, 0x14	; 20
    3246:	fe 4f       	sbci	r31, 0xFE	; 254
    3248:	80 81       	ld	r24, Z
    324a:	8d 32       	cpi	r24, 0x2D	; 45
    324c:	29 f4       	brne	.+10     	; 0x3258 <CalculatorMode+0xcc>
			{
				i--;
    324e:	80 91 9e 01 	lds	r24, 0x019E
    3252:	81 50       	subi	r24, 0x01	; 1
    3254:	80 93 9e 01 	sts	0x019E, r24
			}
			// storing and displaying the entered key
			LCD_VoidGoToXY(0,i,lcd);
    3258:	90 91 9e 01 	lds	r25, 0x019E
    325c:	29 81       	ldd	r18, Y+1	; 0x01
    325e:	3a 81       	ldd	r19, Y+2	; 0x02
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	69 2f       	mov	r22, r25
    3264:	a9 01       	movw	r20, r18
    3266:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_VoidGoToXY>
			LCD_VoidSendChar(KPD_enter,lcd);
    326a:	80 91 e8 01 	lds	r24, 0x01E8
    326e:	29 81       	ldd	r18, Y+1	; 0x01
    3270:	3a 81       	ldd	r19, Y+2	; 0x02
    3272:	b9 01       	movw	r22, r18
    3274:	0e 94 04 13 	call	0x2608	; 0x2608 <LCD_VoidSendChar>
			enteranceArr[i++] = KPD_enter ;
    3278:	30 91 9e 01 	lds	r19, 0x019E
    327c:	83 2f       	mov	r24, r19
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	20 91 e8 01 	lds	r18, 0x01E8
    3284:	fc 01       	movw	r30, r24
    3286:	e4 51       	subi	r30, 0x14	; 20
    3288:	fe 4f       	sbci	r31, 0xFE	; 254
    328a:	20 83       	st	Z, r18
    328c:	83 2f       	mov	r24, r19
    328e:	8f 5f       	subi	r24, 0xFF	; 255
    3290:	80 93 9e 01 	sts	0x019E, r24
		}
		
		// clearing the previous cell
		if (KPD_enter == 'C')
    3294:	80 91 e8 01 	lds	r24, 0x01E8
    3298:	83 34       	cpi	r24, 0x43	; 67
    329a:	c1 f4       	brne	.+48     	; 0x32cc <CalculatorMode+0x140>
		{
			if(i != 0)
    329c:	80 91 9e 01 	lds	r24, 0x019E
    32a0:	88 23       	and	r24, r24
    32a2:	a1 f0       	breq	.+40     	; 0x32cc <CalculatorMode+0x140>
			{
				i--;
    32a4:	80 91 9e 01 	lds	r24, 0x019E
    32a8:	81 50       	subi	r24, 0x01	; 1
    32aa:	80 93 9e 01 	sts	0x019E, r24
				LCD_VoidGoToXY(0,i,lcd);
    32ae:	90 91 9e 01 	lds	r25, 0x019E
    32b2:	29 81       	ldd	r18, Y+1	; 0x01
    32b4:	3a 81       	ldd	r19, Y+2	; 0x02
    32b6:	80 e0       	ldi	r24, 0x00	; 0
    32b8:	69 2f       	mov	r22, r25
    32ba:	a9 01       	movw	r20, r18
    32bc:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_VoidGoToXY>
				LCD_VoidSendChar(CLR_Cell,lcd);
    32c0:	29 81       	ldd	r18, Y+1	; 0x01
    32c2:	3a 81       	ldd	r19, Y+2	; 0x02
    32c4:	8e ef       	ldi	r24, 0xFE	; 254
    32c6:	b9 01       	movw	r22, r18
    32c8:	0e 94 04 13 	call	0x2608	; 0x2608 <LCD_VoidSendChar>
		}*/

	}
	
	// Calculating the result and reading the entire line of entered number and operations
	if (KPD_enter == '=')
    32cc:	80 91 e8 01 	lds	r24, 0x01E8
    32d0:	8d 33       	cpi	r24, 0x3D	; 61
    32d2:	09 f0       	breq	.+2      	; 0x32d6 <CalculatorMode+0x14a>
    32d4:	64 c0       	rjmp	.+200    	; 0x339e <CalculatorMode+0x212>
	{
		k = i ;
    32d6:	80 91 9e 01 	lds	r24, 0x019E
    32da:	80 93 e9 01 	sts	0x01E9, r24
		LCD_VoidGoToXY(1,0,lcd);
    32de:	29 81       	ldd	r18, Y+1	; 0x01
    32e0:	3a 81       	ldd	r19, Y+2	; 0x02
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	60 e0       	ldi	r22, 0x00	; 0
    32e6:	a9 01       	movw	r20, r18
    32e8:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_VoidGoToXY>
		for(i=0 ; i <= k ; i++)
    32ec:	10 92 9e 01 	sts	0x019E, r1
    32f0:	4d c0       	rjmp	.+154    	; 0x338c <CalculatorMode+0x200>
		{
			keyPressed = enteranceArr[i];
    32f2:	80 91 9e 01 	lds	r24, 0x019E
    32f6:	88 2f       	mov	r24, r24
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	fc 01       	movw	r30, r24
    32fc:	e4 51       	subi	r30, 0x14	; 20
    32fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3300:	80 81       	ld	r24, Z
    3302:	80 93 fe 01 	sts	0x01FE, r24
			
			// making exception for negative number
			if ( (n==0) && (keyPressed== '-') ) {sign = 1; }
    3306:	80 91 e4 01 	lds	r24, 0x01E4
    330a:	88 23       	and	r24, r24
    330c:	41 f4       	brne	.+16     	; 0x331e <CalculatorMode+0x192>
    330e:	80 91 fe 01 	lds	r24, 0x01FE
    3312:	8d 32       	cpi	r24, 0x2D	; 45
    3314:	21 f4       	brne	.+8      	; 0x331e <CalculatorMode+0x192>
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	80 93 9f 01 	sts	0x019F, r24
    331c:	32 c0       	rjmp	.+100    	; 0x3382 <CalculatorMode+0x1f6>
			
			// determining either operation or number  
			else if ((keyPressed == '/') || (keyPressed == '*')|| (keyPressed == '+')|| (keyPressed == '-')|| (keyPressed == '='))
    331e:	80 91 fe 01 	lds	r24, 0x01FE
    3322:	8f 32       	cpi	r24, 0x2F	; 47
    3324:	81 f0       	breq	.+32     	; 0x3346 <CalculatorMode+0x1ba>
    3326:	80 91 fe 01 	lds	r24, 0x01FE
    332a:	8a 32       	cpi	r24, 0x2A	; 42
    332c:	61 f0       	breq	.+24     	; 0x3346 <CalculatorMode+0x1ba>
    332e:	80 91 fe 01 	lds	r24, 0x01FE
    3332:	8b 32       	cpi	r24, 0x2B	; 43
    3334:	41 f0       	breq	.+16     	; 0x3346 <CalculatorMode+0x1ba>
    3336:	80 91 fe 01 	lds	r24, 0x01FE
    333a:	8d 32       	cpi	r24, 0x2D	; 45
    333c:	21 f0       	breq	.+8      	; 0x3346 <CalculatorMode+0x1ba>
    333e:	80 91 fe 01 	lds	r24, 0x01FE
    3342:	8d 33       	cpi	r24, 0x3D	; 61
    3344:	29 f4       	brne	.+10     	; 0x3350 <CalculatorMode+0x1c4>
			{

				operat (lcd);
    3346:	89 81       	ldd	r24, Y+1	; 0x01
    3348:	9a 81       	ldd	r25, Y+2	; 0x02
    334a:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <operat>
    334e:	19 c0       	rjmp	.+50     	; 0x3382 <CalculatorMode+0x1f6>
			}
			else
			{
				x=keyPressed - 48 ;
    3350:	80 91 fe 01 	lds	r24, 0x01FE
    3354:	88 2f       	mov	r24, r24
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	c0 97       	sbiw	r24, 0x30	; 48
    335a:	aa 27       	eor	r26, r26
    335c:	97 fd       	sbrc	r25, 7
    335e:	a0 95       	com	r26
    3360:	ba 2f       	mov	r27, r26
    3362:	bc 01       	movw	r22, r24
    3364:	cd 01       	movw	r24, r26
    3366:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	80 93 e0 01 	sts	0x01E0, r24
    3372:	90 93 e1 01 	sts	0x01E1, r25
    3376:	a0 93 e2 01 	sts	0x01E2, r26
    337a:	b0 93 e3 01 	sts	0x01E3, r27

				NUM () ;
    337e:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <NUM>
	// Calculating the result and reading the entire line of entered number and operations
	if (KPD_enter == '=')
	{
		k = i ;
		LCD_VoidGoToXY(1,0,lcd);
		for(i=0 ; i <= k ; i++)
    3382:	80 91 9e 01 	lds	r24, 0x019E
    3386:	8f 5f       	subi	r24, 0xFF	; 255
    3388:	80 93 9e 01 	sts	0x019E, r24
    338c:	90 91 9e 01 	lds	r25, 0x019E
    3390:	80 91 e9 01 	lds	r24, 0x01E9
    3394:	89 17       	cp	r24, r25
    3396:	08 f0       	brcs	.+2      	; 0x339a <CalculatorMode+0x20e>
    3398:	ac cf       	rjmp	.-168    	; 0x32f2 <CalculatorMode+0x166>

				NUM () ;
			}

		}
		reset();
    339a:	0e 94 6f 18 	call	0x30de	; 0x30de <reset>
	}
}
    339e:	0f 90       	pop	r0
    33a0:	0f 90       	pop	r0
    33a2:	cf 91       	pop	r28
    33a4:	df 91       	pop	r29
    33a6:	08 95       	ret

000033a8 <main>:
#include <avr/delay.h>
#include "APP/Calculator_interface.h"


void main()
{
    33a8:	df 93       	push	r29
    33aa:	cf 93       	push	r28
    33ac:	cd b7       	in	r28, 0x3d	; 61
    33ae:	de b7       	in	r29, 0x3e	; 62
    33b0:	2c 97       	sbiw	r28, 0x0c	; 12
    33b2:	0f b6       	in	r0, 0x3f	; 63
    33b4:	f8 94       	cli
    33b6:	de bf       	out	0x3e, r29	; 62
    33b8:	0f be       	out	0x3f, r0	; 63
    33ba:	cd bf       	out	0x3d, r28	; 61
	Pin0,
	DIO_GroupB,
	Pin1,
	DIO_GroupB,
	Pin2,
	DIO_GroupA};
    33bc:	ce 01       	movw	r24, r28
    33be:	01 96       	adiw	r24, 0x01	; 1
    33c0:	99 87       	std	Y+9, r25	; 0x09
    33c2:	88 87       	std	Y+8, r24	; 0x08
    33c4:	e7 e9       	ldi	r30, 0x97	; 151
    33c6:	f1 e0       	ldi	r31, 0x01	; 1
    33c8:	fb 87       	std	Y+11, r31	; 0x0b
    33ca:	ea 87       	std	Y+10, r30	; 0x0a
    33cc:	f7 e0       	ldi	r31, 0x07	; 7
    33ce:	fc 87       	std	Y+12, r31	; 0x0c
    33d0:	ea 85       	ldd	r30, Y+10	; 0x0a
    33d2:	fb 85       	ldd	r31, Y+11	; 0x0b
    33d4:	00 80       	ld	r0, Z
    33d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    33d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    33da:	01 96       	adiw	r24, 0x01	; 1
    33dc:	9b 87       	std	Y+11, r25	; 0x0b
    33de:	8a 87       	std	Y+10, r24	; 0x0a
    33e0:	e8 85       	ldd	r30, Y+8	; 0x08
    33e2:	f9 85       	ldd	r31, Y+9	; 0x09
    33e4:	00 82       	st	Z, r0
    33e6:	88 85       	ldd	r24, Y+8	; 0x08
    33e8:	99 85       	ldd	r25, Y+9	; 0x09
    33ea:	01 96       	adiw	r24, 0x01	; 1
    33ec:	99 87       	std	Y+9, r25	; 0x09
    33ee:	88 87       	std	Y+8, r24	; 0x08
    33f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    33f2:	91 50       	subi	r25, 0x01	; 1
    33f4:	9c 87       	std	Y+12, r25	; 0x0c
    33f6:	ec 85       	ldd	r30, Y+12	; 0x0c
    33f8:	ee 23       	and	r30, r30
    33fa:	51 f7       	brne	.-44     	; 0x33d0 <main+0x28>

	KPD_voidInit();
    33fc:	0e 94 2c 14 	call	0x2858	; 0x2858 <KPD_voidInit>
	LCD_VoidInit(&lcdd);
    3400:	ce 01       	movw	r24, r28
    3402:	01 96       	adiw	r24, 0x01	; 1
    3404:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_VoidInit>


	while(1)
	{
		CalculatorMode(&lcdd);
    3408:	ce 01       	movw	r24, r28
    340a:	01 96       	adiw	r24, 0x01	; 1
    340c:	0e 94 c6 18 	call	0x318c	; 0x318c <CalculatorMode>
    3410:	fb cf       	rjmp	.-10     	; 0x3408 <main+0x60>

00003412 <__divmodhi4>:
    3412:	97 fb       	bst	r25, 7
    3414:	09 2e       	mov	r0, r25
    3416:	07 26       	eor	r0, r23
    3418:	0a d0       	rcall	.+20     	; 0x342e <__divmodhi4_neg1>
    341a:	77 fd       	sbrc	r23, 7
    341c:	04 d0       	rcall	.+8      	; 0x3426 <__divmodhi4_neg2>
    341e:	0c d0       	rcall	.+24     	; 0x3438 <__udivmodhi4>
    3420:	06 d0       	rcall	.+12     	; 0x342e <__divmodhi4_neg1>
    3422:	00 20       	and	r0, r0
    3424:	1a f4       	brpl	.+6      	; 0x342c <__divmodhi4_exit>

00003426 <__divmodhi4_neg2>:
    3426:	70 95       	com	r23
    3428:	61 95       	neg	r22
    342a:	7f 4f       	sbci	r23, 0xFF	; 255

0000342c <__divmodhi4_exit>:
    342c:	08 95       	ret

0000342e <__divmodhi4_neg1>:
    342e:	f6 f7       	brtc	.-4      	; 0x342c <__divmodhi4_exit>
    3430:	90 95       	com	r25
    3432:	81 95       	neg	r24
    3434:	9f 4f       	sbci	r25, 0xFF	; 255
    3436:	08 95       	ret

00003438 <__udivmodhi4>:
    3438:	aa 1b       	sub	r26, r26
    343a:	bb 1b       	sub	r27, r27
    343c:	51 e1       	ldi	r21, 0x11	; 17
    343e:	07 c0       	rjmp	.+14     	; 0x344e <__udivmodhi4_ep>

00003440 <__udivmodhi4_loop>:
    3440:	aa 1f       	adc	r26, r26
    3442:	bb 1f       	adc	r27, r27
    3444:	a6 17       	cp	r26, r22
    3446:	b7 07       	cpc	r27, r23
    3448:	10 f0       	brcs	.+4      	; 0x344e <__udivmodhi4_ep>
    344a:	a6 1b       	sub	r26, r22
    344c:	b7 0b       	sbc	r27, r23

0000344e <__udivmodhi4_ep>:
    344e:	88 1f       	adc	r24, r24
    3450:	99 1f       	adc	r25, r25
    3452:	5a 95       	dec	r21
    3454:	a9 f7       	brne	.-22     	; 0x3440 <__udivmodhi4_loop>
    3456:	80 95       	com	r24
    3458:	90 95       	com	r25
    345a:	bc 01       	movw	r22, r24
    345c:	cd 01       	movw	r24, r26
    345e:	08 95       	ret

00003460 <__prologue_saves__>:
    3460:	2f 92       	push	r2
    3462:	3f 92       	push	r3
    3464:	4f 92       	push	r4
    3466:	5f 92       	push	r5
    3468:	6f 92       	push	r6
    346a:	7f 92       	push	r7
    346c:	8f 92       	push	r8
    346e:	9f 92       	push	r9
    3470:	af 92       	push	r10
    3472:	bf 92       	push	r11
    3474:	cf 92       	push	r12
    3476:	df 92       	push	r13
    3478:	ef 92       	push	r14
    347a:	ff 92       	push	r15
    347c:	0f 93       	push	r16
    347e:	1f 93       	push	r17
    3480:	cf 93       	push	r28
    3482:	df 93       	push	r29
    3484:	cd b7       	in	r28, 0x3d	; 61
    3486:	de b7       	in	r29, 0x3e	; 62
    3488:	ca 1b       	sub	r28, r26
    348a:	db 0b       	sbc	r29, r27
    348c:	0f b6       	in	r0, 0x3f	; 63
    348e:	f8 94       	cli
    3490:	de bf       	out	0x3e, r29	; 62
    3492:	0f be       	out	0x3f, r0	; 63
    3494:	cd bf       	out	0x3d, r28	; 61
    3496:	09 94       	ijmp

00003498 <__epilogue_restores__>:
    3498:	2a 88       	ldd	r2, Y+18	; 0x12
    349a:	39 88       	ldd	r3, Y+17	; 0x11
    349c:	48 88       	ldd	r4, Y+16	; 0x10
    349e:	5f 84       	ldd	r5, Y+15	; 0x0f
    34a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    34a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    34a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    34a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    34a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    34aa:	b9 84       	ldd	r11, Y+9	; 0x09
    34ac:	c8 84       	ldd	r12, Y+8	; 0x08
    34ae:	df 80       	ldd	r13, Y+7	; 0x07
    34b0:	ee 80       	ldd	r14, Y+6	; 0x06
    34b2:	fd 80       	ldd	r15, Y+5	; 0x05
    34b4:	0c 81       	ldd	r16, Y+4	; 0x04
    34b6:	1b 81       	ldd	r17, Y+3	; 0x03
    34b8:	aa 81       	ldd	r26, Y+2	; 0x02
    34ba:	b9 81       	ldd	r27, Y+1	; 0x01
    34bc:	ce 0f       	add	r28, r30
    34be:	d1 1d       	adc	r29, r1
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	f8 94       	cli
    34c4:	de bf       	out	0x3e, r29	; 62
    34c6:	0f be       	out	0x3f, r0	; 63
    34c8:	cd bf       	out	0x3d, r28	; 61
    34ca:	ed 01       	movw	r28, r26
    34cc:	08 95       	ret

000034ce <_exit>:
    34ce:	f8 94       	cli

000034d0 <__stop_program>:
    34d0:	ff cf       	rjmp	.-2      	; 0x34d0 <__stop_program>
