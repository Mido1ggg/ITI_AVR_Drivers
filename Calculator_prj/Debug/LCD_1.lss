
LCD_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002436  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002436  000024aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000216c  00000000  00000000  000024cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000017ea  00000000  00000000  00004638  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005f62  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000060d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000099b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a56f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <main>
      7a:	0c 94 19 12 	jmp	0x2432	; 0x2432 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e6       	ldi	r26, 0x66	; 102
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	86 e6       	ldi	r24, 0x66	; 102
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_ErrStateSetPinDirection>:
/* Date   : 24 MAR 2023                            */
/***************************************************/
#include "DIO_Interface.h"

ErrState  DIO_ErrStateSetPinDirection(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber,DIO_DirectionState Copy_DirectionState,DIO_PullUpState Copy_PullUpState)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	29 97       	sbiw	r28, 0x09	; 9
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
     b50:	2c 83       	std	Y+4, r18	; 0x04
	if(Copy_PinNumber<=Pin7 && Copy_PinNumber>=Pin0)
     b52:	8a 81       	ldd	r24, Y+2	; 0x02
     b54:	88 30       	cpi	r24, 0x08	; 8
     b56:	08 f0       	brcs	.+2      	; 0xb5a <DIO_ErrStateSetPinDirection+0x24>
     b58:	54 c1       	rjmp	.+680    	; 0xe02 <DIO_ErrStateSetPinDirection+0x2cc>
	{
		/*Input-> write Zero DDR (CLR) */
		if (Copy_DirectionState == DIO_Input )
     b5a:	8b 81       	ldd	r24, Y+3	; 0x03
     b5c:	88 23       	and	r24, r24
     b5e:	09 f0       	breq	.+2      	; 0xb62 <DIO_ErrStateSetPinDirection+0x2c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <DIO_ErrStateSetPinDirection+0x1d6>
		{
			switch(Copy_GroupNumber){
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	39 87       	std	Y+9, r19	; 0x09
     b6a:	28 87       	std	Y+8, r18	; 0x08
     b6c:	88 85       	ldd	r24, Y+8	; 0x08
     b6e:	99 85       	ldd	r25, Y+9	; 0x09
     b70:	81 30       	cpi	r24, 0x01	; 1
     b72:	91 05       	cpc	r25, r1
     b74:	09 f4       	brne	.+2      	; 0xb78 <DIO_ErrStateSetPinDirection+0x42>
     b76:	43 c0       	rjmp	.+134    	; 0xbfe <DIO_ErrStateSetPinDirection+0xc8>
     b78:	28 85       	ldd	r18, Y+8	; 0x08
     b7a:	39 85       	ldd	r19, Y+9	; 0x09
     b7c:	22 30       	cpi	r18, 0x02	; 2
     b7e:	31 05       	cpc	r19, r1
     b80:	2c f4       	brge	.+10     	; 0xb8c <DIO_ErrStateSetPinDirection+0x56>
     b82:	88 85       	ldd	r24, Y+8	; 0x08
     b84:	99 85       	ldd	r25, Y+9	; 0x09
     b86:	00 97       	sbiw	r24, 0x00	; 0
     b88:	71 f0       	breq	.+28     	; 0xba6 <DIO_ErrStateSetPinDirection+0x70>
     b8a:	bd c0       	rjmp	.+378    	; 0xd06 <DIO_ErrStateSetPinDirection+0x1d0>
     b8c:	28 85       	ldd	r18, Y+8	; 0x08
     b8e:	39 85       	ldd	r19, Y+9	; 0x09
     b90:	22 30       	cpi	r18, 0x02	; 2
     b92:	31 05       	cpc	r19, r1
     b94:	09 f4       	brne	.+2      	; 0xb98 <DIO_ErrStateSetPinDirection+0x62>
     b96:	5f c0       	rjmp	.+190    	; 0xc56 <DIO_ErrStateSetPinDirection+0x120>
     b98:	88 85       	ldd	r24, Y+8	; 0x08
     b9a:	99 85       	ldd	r25, Y+9	; 0x09
     b9c:	83 30       	cpi	r24, 0x03	; 3
     b9e:	91 05       	cpc	r25, r1
     ba0:	09 f4       	brne	.+2      	; 0xba4 <DIO_ErrStateSetPinDirection+0x6e>
     ba2:	85 c0       	rjmp	.+266    	; 0xcae <DIO_ErrStateSetPinDirection+0x178>
     ba4:	b0 c0       	rjmp	.+352    	; 0xd06 <DIO_ErrStateSetPinDirection+0x1d0>
			/*Group A*/
			case DIO_GroupA : CLR_BIT(DDRA_ITI , Copy_PinNumber ) ;
     ba6:	aa e3       	ldi	r26, 0x3A	; 58
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e3       	ldi	r30, 0x3A	; 58
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_ErrStateSetPinDirection+0x8e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_ErrStateSetPinDirection+0x8a>
     bc8:	80 95       	com	r24
     bca:	84 23       	and	r24, r20
     bcc:	8c 93       	st	X, r24
			if (Copy_PullUpState == PULLUP_ON) SET_BIT(PORTA_ITI,Copy_PinNumber);
     bce:	8c 81       	ldd	r24, Y+4	; 0x04
     bd0:	81 30       	cpi	r24, 0x01	; 1
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <DIO_ErrStateSetPinDirection+0xa0>
     bd4:	14 c1       	rjmp	.+552    	; 0xdfe <DIO_ErrStateSetPinDirection+0x2c8>
     bd6:	ab e3       	ldi	r26, 0x3B	; 59
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	eb e3       	ldi	r30, 0x3B	; 59
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	48 2f       	mov	r20, r24
     be2:	8a 81       	ldd	r24, Y+2	; 0x02
     be4:	28 2f       	mov	r18, r24
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	02 2e       	mov	r0, r18
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <DIO_ErrStateSetPinDirection+0xbe>
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	0a 94       	dec	r0
     bf6:	e2 f7       	brpl	.-8      	; 0xbf0 <DIO_ErrStateSetPinDirection+0xba>
     bf8:	84 2b       	or	r24, r20
     bfa:	8c 93       	st	X, r24
     bfc:	00 c1       	rjmp	.+512    	; 0xdfe <DIO_ErrStateSetPinDirection+0x2c8>
			break ;
			/*Group B*/
			case DIO_GroupB : CLR_BIT(DDRB_ITI , Copy_PinNumber ) ;
     bfe:	a7 e3       	ldi	r26, 0x37	; 55
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e7 e3       	ldi	r30, 0x37	; 55
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	48 2f       	mov	r20, r24
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 2e       	mov	r0, r18
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <DIO_ErrStateSetPinDirection+0xe6>
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	0a 94       	dec	r0
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <DIO_ErrStateSetPinDirection+0xe2>
     c20:	80 95       	com	r24
     c22:	84 23       	and	r24, r20
     c24:	8c 93       	st	X, r24
			if (Copy_PullUpState == PULLUP_ON) SET_BIT(PORTA_ITI,Copy_PinNumber);
     c26:	8c 81       	ldd	r24, Y+4	; 0x04
     c28:	81 30       	cpi	r24, 0x01	; 1
     c2a:	09 f0       	breq	.+2      	; 0xc2e <DIO_ErrStateSetPinDirection+0xf8>
     c2c:	e8 c0       	rjmp	.+464    	; 0xdfe <DIO_ErrStateSetPinDirection+0x2c8>
     c2e:	ab e3       	ldi	r26, 0x3B	; 59
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	eb e3       	ldi	r30, 0x3B	; 59
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	48 2f       	mov	r20, r24
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	02 2e       	mov	r0, r18
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <DIO_ErrStateSetPinDirection+0x116>
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	0a 94       	dec	r0
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <DIO_ErrStateSetPinDirection+0x112>
     c50:	84 2b       	or	r24, r20
     c52:	8c 93       	st	X, r24
     c54:	d4 c0       	rjmp	.+424    	; 0xdfe <DIO_ErrStateSetPinDirection+0x2c8>
			break ;
			/*Group C*/
			case DIO_GroupC : CLR_BIT(DDRC_ITI , Copy_PinNumber ) ;
     c56:	a4 e3       	ldi	r26, 0x34	; 52
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e4 e3       	ldi	r30, 0x34	; 52
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	48 2f       	mov	r20, r24
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 2e       	mov	r0, r18
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <DIO_ErrStateSetPinDirection+0x13e>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <DIO_ErrStateSetPinDirection+0x13a>
     c78:	80 95       	com	r24
     c7a:	84 23       	and	r24, r20
     c7c:	8c 93       	st	X, r24
			if (Copy_PullUpState == PULLUP_ON) SET_BIT(PORTA_ITI,Copy_PinNumber);
     c7e:	8c 81       	ldd	r24, Y+4	; 0x04
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	09 f0       	breq	.+2      	; 0xc86 <DIO_ErrStateSetPinDirection+0x150>
     c84:	bc c0       	rjmp	.+376    	; 0xdfe <DIO_ErrStateSetPinDirection+0x2c8>
     c86:	ab e3       	ldi	r26, 0x3B	; 59
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	eb e3       	ldi	r30, 0x3B	; 59
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	48 2f       	mov	r20, r24
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 2e       	mov	r0, r18
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <DIO_ErrStateSetPinDirection+0x16e>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	0a 94       	dec	r0
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <DIO_ErrStateSetPinDirection+0x16a>
     ca8:	84 2b       	or	r24, r20
     caa:	8c 93       	st	X, r24
     cac:	a8 c0       	rjmp	.+336    	; 0xdfe <DIO_ErrStateSetPinDirection+0x2c8>
			break ;
			/*Group D*/
			case DIO_GroupD : CLR_BIT(DDRD_ITI , Copy_PinNumber ) ;
     cae:	a1 e3       	ldi	r26, 0x31	; 49
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e1 e3       	ldi	r30, 0x31	; 49
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	48 2f       	mov	r20, r24
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 2e       	mov	r0, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <DIO_ErrStateSetPinDirection+0x196>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	0a 94       	dec	r0
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <DIO_ErrStateSetPinDirection+0x192>
     cd0:	80 95       	com	r24
     cd2:	84 23       	and	r24, r20
     cd4:	8c 93       	st	X, r24
			if (Copy_PullUpState == PULLUP_ON) SET_BIT(PORTA_ITI,Copy_PinNumber);
     cd6:	8c 81       	ldd	r24, Y+4	; 0x04
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	09 f0       	breq	.+2      	; 0xcde <DIO_ErrStateSetPinDirection+0x1a8>
     cdc:	90 c0       	rjmp	.+288    	; 0xdfe <DIO_ErrStateSetPinDirection+0x2c8>
     cde:	ab e3       	ldi	r26, 0x3B	; 59
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	eb e3       	ldi	r30, 0x3B	; 59
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	48 2f       	mov	r20, r24
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	02 2e       	mov	r0, r18
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <DIO_ErrStateSetPinDirection+0x1c6>
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	0a 94       	dec	r0
     cfe:	e2 f7       	brpl	.-8      	; 0xcf8 <DIO_ErrStateSetPinDirection+0x1c2>
     d00:	84 2b       	or	r24, r20
     d02:	8c 93       	st	X, r24
     d04:	7c c0       	rjmp	.+248    	; 0xdfe <DIO_ErrStateSetPinDirection+0x2c8>
			break ;
			/*Wrong*/
			default:
				return GroupError ;
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	9f 83       	std	Y+7, r25	; 0x07
     d0a:	7d c0       	rjmp	.+250    	; 0xe06 <DIO_ErrStateSetPinDirection+0x2d0>


		}

		/*Output -> write DDR = one */
		else if (Copy_DirectionState == DIO_Output )
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	09 f0       	breq	.+2      	; 0xd14 <DIO_ErrStateSetPinDirection+0x1de>
     d12:	72 c0       	rjmp	.+228    	; 0xdf8 <DIO_ErrStateSetPinDirection+0x2c2>
		{
			switch(Copy_GroupNumber){
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	3e 83       	std	Y+6, r19	; 0x06
     d1c:	2d 83       	std	Y+5, r18	; 0x05
     d1e:	8d 81       	ldd	r24, Y+5	; 0x05
     d20:	9e 81       	ldd	r25, Y+6	; 0x06
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	91 05       	cpc	r25, r1
     d26:	49 f1       	breq	.+82     	; 0xd7a <DIO_ErrStateSetPinDirection+0x244>
     d28:	2d 81       	ldd	r18, Y+5	; 0x05
     d2a:	3e 81       	ldd	r19, Y+6	; 0x06
     d2c:	22 30       	cpi	r18, 0x02	; 2
     d2e:	31 05       	cpc	r19, r1
     d30:	2c f4       	brge	.+10     	; 0xd3c <DIO_ErrStateSetPinDirection+0x206>
     d32:	8d 81       	ldd	r24, Y+5	; 0x05
     d34:	9e 81       	ldd	r25, Y+6	; 0x06
     d36:	00 97       	sbiw	r24, 0x00	; 0
     d38:	61 f0       	breq	.+24     	; 0xd52 <DIO_ErrStateSetPinDirection+0x21c>
     d3a:	5b c0       	rjmp	.+182    	; 0xdf2 <DIO_ErrStateSetPinDirection+0x2bc>
     d3c:	2d 81       	ldd	r18, Y+5	; 0x05
     d3e:	3e 81       	ldd	r19, Y+6	; 0x06
     d40:	22 30       	cpi	r18, 0x02	; 2
     d42:	31 05       	cpc	r19, r1
     d44:	71 f1       	breq	.+92     	; 0xda2 <DIO_ErrStateSetPinDirection+0x26c>
     d46:	8d 81       	ldd	r24, Y+5	; 0x05
     d48:	9e 81       	ldd	r25, Y+6	; 0x06
     d4a:	83 30       	cpi	r24, 0x03	; 3
     d4c:	91 05       	cpc	r25, r1
     d4e:	e9 f1       	breq	.+122    	; 0xdca <DIO_ErrStateSetPinDirection+0x294>
     d50:	50 c0       	rjmp	.+160    	; 0xdf2 <DIO_ErrStateSetPinDirection+0x2bc>
			/*Group A*/
			case DIO_GroupA : SET_BIT(DDRA_ITI,Copy_PinNumber);break;
     d52:	aa e3       	ldi	r26, 0x3A	; 58
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	ea e3       	ldi	r30, 0x3A	; 58
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	48 2f       	mov	r20, r24
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 2e       	mov	r0, r18
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <DIO_ErrStateSetPinDirection+0x23a>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <DIO_ErrStateSetPinDirection+0x236>
     d74:	84 2b       	or	r24, r20
     d76:	8c 93       	st	X, r24
     d78:	42 c0       	rjmp	.+132    	; 0xdfe <DIO_ErrStateSetPinDirection+0x2c8>
			/*Group B*/
			case DIO_GroupB : SET_BIT(DDRB_ITI,Copy_PinNumber);break;
     d7a:	a7 e3       	ldi	r26, 0x37	; 55
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e7 e3       	ldi	r30, 0x37	; 55
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <DIO_ErrStateSetPinDirection+0x262>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <DIO_ErrStateSetPinDirection+0x25e>
     d9c:	84 2b       	or	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	2e c0       	rjmp	.+92     	; 0xdfe <DIO_ErrStateSetPinDirection+0x2c8>
			/*Group C*/
			case DIO_GroupC : SET_BIT(DDRC_ITI,Copy_PinNumber);break;
     da2:	a4 e3       	ldi	r26, 0x34	; 52
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e4 e3       	ldi	r30, 0x34	; 52
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <DIO_ErrStateSetPinDirection+0x28a>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <DIO_ErrStateSetPinDirection+0x286>
     dc4:	84 2b       	or	r24, r20
     dc6:	8c 93       	st	X, r24
     dc8:	1a c0       	rjmp	.+52     	; 0xdfe <DIO_ErrStateSetPinDirection+0x2c8>
			/*Group D*/
			case DIO_GroupD : SET_BIT(DDRD_ITI,Copy_PinNumber);break;
     dca:	a1 e3       	ldi	r26, 0x31	; 49
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e1 e3       	ldi	r30, 0x31	; 49
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	48 2f       	mov	r20, r24
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	02 2e       	mov	r0, r18
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <DIO_ErrStateSetPinDirection+0x2b2>
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	0a 94       	dec	r0
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <DIO_ErrStateSetPinDirection+0x2ae>
     dec:	84 2b       	or	r24, r20
     dee:	8c 93       	st	X, r24
     df0:	06 c0       	rjmp	.+12     	; 0xdfe <DIO_ErrStateSetPinDirection+0x2c8>
			/*Wrong*/
			default:
				return GroupError ;
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	9f 83       	std	Y+7, r25	; 0x07
     df6:	07 c0       	rjmp	.+14     	; 0xe06 <DIO_ErrStateSetPinDirection+0x2d0>
			}
		}

		else
		{
			return DirectionError ;
     df8:	23 e0       	ldi	r18, 0x03	; 3
     dfa:	2f 83       	std	Y+7, r18	; 0x07
     dfc:	04 c0       	rjmp	.+8      	; 0xe06 <DIO_ErrStateSetPinDirection+0x2d0>
		}

		return NoError ;
     dfe:	1f 82       	std	Y+7, r1	; 0x07
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <DIO_ErrStateSetPinDirection+0x2d0>
	}
	else
	{
		return PinNumberError ;
     e02:	32 e0       	ldi	r19, 0x02	; 2
     e04:	3f 83       	std	Y+7, r19	; 0x07
     e06:	8f 81       	ldd	r24, Y+7	; 0x07
	}
}
     e08:	29 96       	adiw	r28, 0x09	; 9
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <DIO_ErrStateSetPinValue>:

ErrState  DIO_ErrStateSetPinValue(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber,DIO_ValueState Copy_ValueState)
{
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	28 97       	sbiw	r28, 0x08	; 8
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	6a 83       	std	Y+2, r22	; 0x02
     e32:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_PinNumber<=Pin7 && Copy_PinNumber>=Pin0)
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	88 30       	cpi	r24, 0x08	; 8
     e38:	08 f0       	brcs	.+2      	; 0xe3c <DIO_ErrStateSetPinValue+0x22>
     e3a:	f6 c0       	rjmp	.+492    	; 0x1028 <DIO_ErrStateSetPinValue+0x20e>
	{
		/*Low-> write Zero Port (CLR) */
		if (Copy_ValueState == DIO_Low )
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	88 23       	and	r24, r24
     e40:	09 f0       	breq	.+2      	; 0xe44 <DIO_ErrStateSetPinValue+0x2a>
     e42:	77 c0       	rjmp	.+238    	; 0xf32 <DIO_ErrStateSetPinValue+0x118>
		{
			switch(Copy_GroupNumber){
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	38 87       	std	Y+8, r19	; 0x08
     e4c:	2f 83       	std	Y+7, r18	; 0x07
     e4e:	8f 81       	ldd	r24, Y+7	; 0x07
     e50:	98 85       	ldd	r25, Y+8	; 0x08
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	91 05       	cpc	r25, r1
     e56:	59 f1       	breq	.+86     	; 0xeae <DIO_ErrStateSetPinValue+0x94>
     e58:	2f 81       	ldd	r18, Y+7	; 0x07
     e5a:	38 85       	ldd	r19, Y+8	; 0x08
     e5c:	22 30       	cpi	r18, 0x02	; 2
     e5e:	31 05       	cpc	r19, r1
     e60:	2c f4       	brge	.+10     	; 0xe6c <DIO_ErrStateSetPinValue+0x52>
     e62:	8f 81       	ldd	r24, Y+7	; 0x07
     e64:	98 85       	ldd	r25, Y+8	; 0x08
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	69 f0       	breq	.+26     	; 0xe84 <DIO_ErrStateSetPinValue+0x6a>
     e6a:	60 c0       	rjmp	.+192    	; 0xf2c <DIO_ErrStateSetPinValue+0x112>
     e6c:	2f 81       	ldd	r18, Y+7	; 0x07
     e6e:	38 85       	ldd	r19, Y+8	; 0x08
     e70:	22 30       	cpi	r18, 0x02	; 2
     e72:	31 05       	cpc	r19, r1
     e74:	89 f1       	breq	.+98     	; 0xed8 <DIO_ErrStateSetPinValue+0xbe>
     e76:	8f 81       	ldd	r24, Y+7	; 0x07
     e78:	98 85       	ldd	r25, Y+8	; 0x08
     e7a:	83 30       	cpi	r24, 0x03	; 3
     e7c:	91 05       	cpc	r25, r1
     e7e:	09 f4       	brne	.+2      	; 0xe82 <DIO_ErrStateSetPinValue+0x68>
     e80:	40 c0       	rjmp	.+128    	; 0xf02 <DIO_ErrStateSetPinValue+0xe8>
     e82:	54 c0       	rjmp	.+168    	; 0xf2c <DIO_ErrStateSetPinValue+0x112>
			/*Group A*/
			case DIO_GroupA : CLR_BIT(PORTA_ITI , Copy_PinNumber ) ;break ;
     e84:	ab e3       	ldi	r26, 0x3B	; 59
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	eb e3       	ldi	r30, 0x3B	; 59
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <DIO_ErrStateSetPinValue+0x88>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <DIO_ErrStateSetPinValue+0x84>
     ea6:	80 95       	com	r24
     ea8:	84 23       	and	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	bb c0       	rjmp	.+374    	; 0x1024 <DIO_ErrStateSetPinValue+0x20a>
			/*Group B*/
			case DIO_GroupB : CLR_BIT(PORTB_ITI , Copy_PinNumber ) ;break ;
     eae:	a8 e3       	ldi	r26, 0x38	; 56
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e8 e3       	ldi	r30, 0x38	; 56
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <DIO_ErrStateSetPinValue+0xb2>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <DIO_ErrStateSetPinValue+0xae>
     ed0:	80 95       	com	r24
     ed2:	84 23       	and	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	a6 c0       	rjmp	.+332    	; 0x1024 <DIO_ErrStateSetPinValue+0x20a>
			/*Group C*/
			case DIO_GroupC : CLR_BIT(PORTC_ITI , Copy_PinNumber ) ;break ;
     ed8:	a5 e3       	ldi	r26, 0x35	; 53
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e5 e3       	ldi	r30, 0x35	; 53
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_ErrStateSetPinValue+0xdc>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_ErrStateSetPinValue+0xd8>
     efa:	80 95       	com	r24
     efc:	84 23       	and	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	91 c0       	rjmp	.+290    	; 0x1024 <DIO_ErrStateSetPinValue+0x20a>
			/*Group D*/
			case DIO_GroupD : CLR_BIT(PORTD_ITI , Copy_PinNumber ) ;break ;
     f02:	a2 e3       	ldi	r26, 0x32	; 50
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e2 e3       	ldi	r30, 0x32	; 50
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <DIO_ErrStateSetPinValue+0x106>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <DIO_ErrStateSetPinValue+0x102>
     f24:	80 95       	com	r24
     f26:	84 23       	and	r24, r20
     f28:	8c 93       	st	X, r24
     f2a:	7c c0       	rjmp	.+248    	; 0x1024 <DIO_ErrStateSetPinValue+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
     f2c:	91 e0       	ldi	r25, 0x01	; 1
     f2e:	9e 83       	std	Y+6, r25	; 0x06
     f30:	7d c0       	rjmp	.+250    	; 0x102c <DIO_ErrStateSetPinValue+0x212>
			}
		}

		/*High -> write port = one */
		else if (Copy_ValueState == DIO_High )
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	09 f0       	breq	.+2      	; 0xf3a <DIO_ErrStateSetPinValue+0x120>
     f38:	72 c0       	rjmp	.+228    	; 0x101e <DIO_ErrStateSetPinValue+0x204>
		{
			switch(Copy_GroupNumber){
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	3d 83       	std	Y+5, r19	; 0x05
     f42:	2c 83       	std	Y+4, r18	; 0x04
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	9d 81       	ldd	r25, Y+5	; 0x05
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	91 05       	cpc	r25, r1
     f4c:	49 f1       	breq	.+82     	; 0xfa0 <DIO_ErrStateSetPinValue+0x186>
     f4e:	2c 81       	ldd	r18, Y+4	; 0x04
     f50:	3d 81       	ldd	r19, Y+5	; 0x05
     f52:	22 30       	cpi	r18, 0x02	; 2
     f54:	31 05       	cpc	r19, r1
     f56:	2c f4       	brge	.+10     	; 0xf62 <DIO_ErrStateSetPinValue+0x148>
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	9d 81       	ldd	r25, Y+5	; 0x05
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	61 f0       	breq	.+24     	; 0xf78 <DIO_ErrStateSetPinValue+0x15e>
     f60:	5b c0       	rjmp	.+182    	; 0x1018 <DIO_ErrStateSetPinValue+0x1fe>
     f62:	2c 81       	ldd	r18, Y+4	; 0x04
     f64:	3d 81       	ldd	r19, Y+5	; 0x05
     f66:	22 30       	cpi	r18, 0x02	; 2
     f68:	31 05       	cpc	r19, r1
     f6a:	71 f1       	breq	.+92     	; 0xfc8 <DIO_ErrStateSetPinValue+0x1ae>
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	9d 81       	ldd	r25, Y+5	; 0x05
     f70:	83 30       	cpi	r24, 0x03	; 3
     f72:	91 05       	cpc	r25, r1
     f74:	e9 f1       	breq	.+122    	; 0xff0 <DIO_ErrStateSetPinValue+0x1d6>
     f76:	50 c0       	rjmp	.+160    	; 0x1018 <DIO_ErrStateSetPinValue+0x1fe>
			/*Group A*/
			case DIO_GroupA : SET_BIT(PORTA_ITI,Copy_PinNumber);break;
     f78:	ab e3       	ldi	r26, 0x3B	; 59
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	eb e3       	ldi	r30, 0x3B	; 59
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_ErrStateSetPinValue+0x17c>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_ErrStateSetPinValue+0x178>
     f9a:	84 2b       	or	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	42 c0       	rjmp	.+132    	; 0x1024 <DIO_ErrStateSetPinValue+0x20a>
			/*Group B*/
			case DIO_GroupB : SET_BIT(PORTB_ITI,Copy_PinNumber);break;
     fa0:	a8 e3       	ldi	r26, 0x38	; 56
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e8 e3       	ldi	r30, 0x38	; 56
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_ErrStateSetPinValue+0x1a4>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_ErrStateSetPinValue+0x1a0>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	2e c0       	rjmp	.+92     	; 0x1024 <DIO_ErrStateSetPinValue+0x20a>
			/*Group C*/
			case DIO_GroupC : SET_BIT(PORTC_ITI,Copy_PinNumber);break;
     fc8:	a5 e3       	ldi	r26, 0x35	; 53
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e5 e3       	ldi	r30, 0x35	; 53
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <DIO_ErrStateSetPinValue+0x1cc>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <DIO_ErrStateSetPinValue+0x1c8>
     fea:	84 2b       	or	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	1a c0       	rjmp	.+52     	; 0x1024 <DIO_ErrStateSetPinValue+0x20a>
			/*Group D*/
			case DIO_GroupD : SET_BIT(PORTD_ITI,Copy_PinNumber);break;
     ff0:	a2 e3       	ldi	r26, 0x32	; 50
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e2 e3       	ldi	r30, 0x32	; 50
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <DIO_ErrStateSetPinValue+0x1f4>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <DIO_ErrStateSetPinValue+0x1f0>
    1012:	84 2b       	or	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	06 c0       	rjmp	.+12     	; 0x1024 <DIO_ErrStateSetPinValue+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	9e 83       	std	Y+6, r25	; 0x06
    101c:	07 c0       	rjmp	.+14     	; 0x102c <DIO_ErrStateSetPinValue+0x212>
			}
		}

		else
		{
			return DirectionError ;
    101e:	23 e0       	ldi	r18, 0x03	; 3
    1020:	2e 83       	std	Y+6, r18	; 0x06
    1022:	04 c0       	rjmp	.+8      	; 0x102c <DIO_ErrStateSetPinValue+0x212>
		}

		return NoError ;
    1024:	1e 82       	std	Y+6, r1	; 0x06
    1026:	02 c0       	rjmp	.+4      	; 0x102c <DIO_ErrStateSetPinValue+0x212>
	}
	else
	{
		return PinNumberError ;
    1028:	32 e0       	ldi	r19, 0x02	; 2
    102a:	3e 83       	std	Y+6, r19	; 0x06
    102c:	8e 81       	ldd	r24, Y+6	; 0x06
	}

}
    102e:	28 96       	adiw	r28, 0x08	; 8
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <DIO_ErrStateReadPinValue>:

ErrState  DIO_ErrStateReadPinValue(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber ,u8 *Result)
{
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	27 97       	sbiw	r28, 0x07	; 7
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	6a 83       	std	Y+2, r22	; 0x02
    1058:	5c 83       	std	Y+4, r21	; 0x04
    105a:	4b 83       	std	Y+3, r20	; 0x03
	/*check on pin range from 0 to 7 */
	if (Copy_PinNumber>= Pin0 && Copy_PinNumber <=Pin7)
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	88 30       	cpi	r24, 0x08	; 8
    1060:	08 f0       	brcs	.+2      	; 0x1064 <DIO_ErrStateReadPinValue+0x24>
    1062:	76 c0       	rjmp	.+236    	; 0x1150 <DIO_ErrStateReadPinValue+0x110>
	{
		switch(Copy_GroupNumber)
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	3f 83       	std	Y+7, r19	; 0x07
    106c:	2e 83       	std	Y+6, r18	; 0x06
    106e:	4e 81       	ldd	r20, Y+6	; 0x06
    1070:	5f 81       	ldd	r21, Y+7	; 0x07
    1072:	41 30       	cpi	r20, 0x01	; 1
    1074:	51 05       	cpc	r21, r1
    1076:	59 f1       	breq	.+86     	; 0x10ce <DIO_ErrStateReadPinValue+0x8e>
    1078:	8e 81       	ldd	r24, Y+6	; 0x06
    107a:	9f 81       	ldd	r25, Y+7	; 0x07
    107c:	82 30       	cpi	r24, 0x02	; 2
    107e:	91 05       	cpc	r25, r1
    1080:	34 f4       	brge	.+12     	; 0x108e <DIO_ErrStateReadPinValue+0x4e>
    1082:	2e 81       	ldd	r18, Y+6	; 0x06
    1084:	3f 81       	ldd	r19, Y+7	; 0x07
    1086:	21 15       	cp	r18, r1
    1088:	31 05       	cpc	r19, r1
    108a:	69 f0       	breq	.+26     	; 0x10a6 <DIO_ErrStateReadPinValue+0x66>
    108c:	5c c0       	rjmp	.+184    	; 0x1146 <DIO_ErrStateReadPinValue+0x106>
    108e:	4e 81       	ldd	r20, Y+6	; 0x06
    1090:	5f 81       	ldd	r21, Y+7	; 0x07
    1092:	42 30       	cpi	r20, 0x02	; 2
    1094:	51 05       	cpc	r21, r1
    1096:	79 f1       	breq	.+94     	; 0x10f6 <DIO_ErrStateReadPinValue+0xb6>
    1098:	8e 81       	ldd	r24, Y+6	; 0x06
    109a:	9f 81       	ldd	r25, Y+7	; 0x07
    109c:	83 30       	cpi	r24, 0x03	; 3
    109e:	91 05       	cpc	r25, r1
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <DIO_ErrStateReadPinValue+0x64>
    10a2:	3d c0       	rjmp	.+122    	; 0x111e <DIO_ErrStateReadPinValue+0xde>
    10a4:	50 c0       	rjmp	.+160    	; 0x1146 <DIO_ErrStateReadPinValue+0x106>
		{
		case DIO_GroupA: *Result=GET_BIT(PINA_ITI,Copy_PinNumber); break ;
    10a6:	e9 e3       	ldi	r30, 0x39	; 57
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	a9 01       	movw	r20, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <DIO_ErrStateReadPinValue+0x7e>
    10ba:	55 95       	asr	r21
    10bc:	47 95       	ror	r20
    10be:	8a 95       	dec	r24
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <DIO_ErrStateReadPinValue+0x7a>
    10c2:	ca 01       	movw	r24, r20
    10c4:	81 70       	andi	r24, 0x01	; 1
    10c6:	eb 81       	ldd	r30, Y+3	; 0x03
    10c8:	fc 81       	ldd	r31, Y+4	; 0x04
    10ca:	80 83       	st	Z, r24
    10cc:	3f c0       	rjmp	.+126    	; 0x114c <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupB: *Result=GET_BIT(PINB_ITI,Copy_PinNumber); break ;
    10ce:	e6 e3       	ldi	r30, 0x36	; 54
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a9 01       	movw	r20, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_ErrStateReadPinValue+0xa6>
    10e2:	55 95       	asr	r21
    10e4:	47 95       	ror	r20
    10e6:	8a 95       	dec	r24
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_ErrStateReadPinValue+0xa2>
    10ea:	ca 01       	movw	r24, r20
    10ec:	81 70       	andi	r24, 0x01	; 1
    10ee:	eb 81       	ldd	r30, Y+3	; 0x03
    10f0:	fc 81       	ldd	r31, Y+4	; 0x04
    10f2:	80 83       	st	Z, r24
    10f4:	2b c0       	rjmp	.+86     	; 0x114c <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupC: *Result=GET_BIT(PINC_ITI,Copy_PinNumber); break ;
    10f6:	e3 e3       	ldi	r30, 0x33	; 51
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	a9 01       	movw	r20, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <DIO_ErrStateReadPinValue+0xce>
    110a:	55 95       	asr	r21
    110c:	47 95       	ror	r20
    110e:	8a 95       	dec	r24
    1110:	e2 f7       	brpl	.-8      	; 0x110a <DIO_ErrStateReadPinValue+0xca>
    1112:	ca 01       	movw	r24, r20
    1114:	81 70       	andi	r24, 0x01	; 1
    1116:	eb 81       	ldd	r30, Y+3	; 0x03
    1118:	fc 81       	ldd	r31, Y+4	; 0x04
    111a:	80 83       	st	Z, r24
    111c:	17 c0       	rjmp	.+46     	; 0x114c <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupD: *Result=GET_BIT(PIND_ITI,Copy_PinNumber); break ;
    111e:	e0 e3       	ldi	r30, 0x30	; 48
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	a9 01       	movw	r20, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <DIO_ErrStateReadPinValue+0xf6>
    1132:	55 95       	asr	r21
    1134:	47 95       	ror	r20
    1136:	8a 95       	dec	r24
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <DIO_ErrStateReadPinValue+0xf2>
    113a:	ca 01       	movw	r24, r20
    113c:	81 70       	andi	r24, 0x01	; 1
    113e:	eb 81       	ldd	r30, Y+3	; 0x03
    1140:	fc 81       	ldd	r31, Y+4	; 0x04
    1142:	80 83       	st	Z, r24
    1144:	03 c0       	rjmp	.+6      	; 0x114c <DIO_ErrStateReadPinValue+0x10c>
		default:
			return GroupError ;
    1146:	51 e0       	ldi	r21, 0x01	; 1
    1148:	5d 83       	std	Y+5, r21	; 0x05
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <DIO_ErrStateReadPinValue+0x114>
		}
		return NoError ;
    114c:	1d 82       	std	Y+5, r1	; 0x05
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_ErrStateReadPinValue+0x114>
	}
	else
	{
		return PinNumberError ;
    1150:	82 e0       	ldi	r24, 0x02	; 2
    1152:	8d 83       	std	Y+5, r24	; 0x05
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
	}

}
    1156:	27 96       	adiw	r28, 0x07	; 7
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <DIO_ErrStateSetGroupDirection>:



//
ErrState  DIO_ErrStateSetGroupDirection(DIO_GroupNumber Copy_GroupNumber ,u8 Copy_DirectionState)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	00 d0       	rcall	.+0      	; 0x116e <DIO_ErrStateSetGroupDirection+0x6>
    116e:	00 d0       	rcall	.+0      	; 0x1170 <DIO_ErrStateSetGroupDirection+0x8>
    1170:	0f 92       	push	r0
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_DirectionState <= 0xff && Copy_DirectionState>=0x00)
	{
		switch(Copy_GroupNumber)
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	3d 83       	std	Y+5, r19	; 0x05
    1182:	2c 83       	std	Y+4, r18	; 0x04
    1184:	8c 81       	ldd	r24, Y+4	; 0x04
    1186:	9d 81       	ldd	r25, Y+5	; 0x05
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	91 05       	cpc	r25, r1
    118c:	d1 f0       	breq	.+52     	; 0x11c2 <DIO_ErrStateSetGroupDirection+0x5a>
    118e:	2c 81       	ldd	r18, Y+4	; 0x04
    1190:	3d 81       	ldd	r19, Y+5	; 0x05
    1192:	22 30       	cpi	r18, 0x02	; 2
    1194:	31 05       	cpc	r19, r1
    1196:	2c f4       	brge	.+10     	; 0x11a2 <DIO_ErrStateSetGroupDirection+0x3a>
    1198:	8c 81       	ldd	r24, Y+4	; 0x04
    119a:	9d 81       	ldd	r25, Y+5	; 0x05
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	61 f0       	breq	.+24     	; 0x11b8 <DIO_ErrStateSetGroupDirection+0x50>
    11a0:	1f c0       	rjmp	.+62     	; 0x11e0 <DIO_ErrStateSetGroupDirection+0x78>
    11a2:	2c 81       	ldd	r18, Y+4	; 0x04
    11a4:	3d 81       	ldd	r19, Y+5	; 0x05
    11a6:	22 30       	cpi	r18, 0x02	; 2
    11a8:	31 05       	cpc	r19, r1
    11aa:	81 f0       	breq	.+32     	; 0x11cc <DIO_ErrStateSetGroupDirection+0x64>
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	9d 81       	ldd	r25, Y+5	; 0x05
    11b0:	83 30       	cpi	r24, 0x03	; 3
    11b2:	91 05       	cpc	r25, r1
    11b4:	81 f0       	breq	.+32     	; 0x11d6 <DIO_ErrStateSetGroupDirection+0x6e>
    11b6:	14 c0       	rjmp	.+40     	; 0x11e0 <DIO_ErrStateSetGroupDirection+0x78>
		{
		case DIO_GroupA: DDRA_ITI =  Copy_DirectionState ;break ;
    11b8:	ea e3       	ldi	r30, 0x3A	; 58
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	80 83       	st	Z, r24
    11c0:	12 c0       	rjmp	.+36     	; 0x11e6 <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupB: DDRB_ITI =  Copy_DirectionState ;break ;
    11c2:	e7 e3       	ldi	r30, 0x37	; 55
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	80 83       	st	Z, r24
    11ca:	0d c0       	rjmp	.+26     	; 0x11e6 <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupC: DDRC_ITI =  Copy_DirectionState ;break ;
    11cc:	e4 e3       	ldi	r30, 0x34	; 52
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	80 83       	st	Z, r24
    11d4:	08 c0       	rjmp	.+16     	; 0x11e6 <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupD: DDRD_ITI =  Copy_DirectionState ;break ;
    11d6:	e1 e3       	ldi	r30, 0x31	; 49
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	80 83       	st	Z, r24
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <DIO_ErrStateSetGroupDirection+0x7e>
		default :
			return GroupError ;
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	9b 83       	std	Y+3, r25	; 0x03
    11e4:	01 c0       	rjmp	.+2      	; 0x11e8 <DIO_ErrStateSetGroupDirection+0x80>
		}
		return NoError ;
    11e6:	1b 82       	std	Y+3, r1	; 0x03
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	else
	{
		return DirectionRangError;
	}
}
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <DIO_ErrStateSetGroupValue>:
ErrState  DIO_ErrStateSetGroupValue(DIO_GroupNumber Copy_GroupNumber ,u8 Copy_ValueState)
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <DIO_ErrStateSetGroupValue+0x6>
    1200:	00 d0       	rcall	.+0      	; 0x1202 <DIO_ErrStateSetGroupValue+0x8>
    1202:	0f 92       	push	r0
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_ValueState <= 0xff && Copy_ValueState>=0x00)
	{
		switch(Copy_GroupNumber)
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	3d 83       	std	Y+5, r19	; 0x05
    1214:	2c 83       	std	Y+4, r18	; 0x04
    1216:	8c 81       	ldd	r24, Y+4	; 0x04
    1218:	9d 81       	ldd	r25, Y+5	; 0x05
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	91 05       	cpc	r25, r1
    121e:	d1 f0       	breq	.+52     	; 0x1254 <DIO_ErrStateSetGroupValue+0x5a>
    1220:	2c 81       	ldd	r18, Y+4	; 0x04
    1222:	3d 81       	ldd	r19, Y+5	; 0x05
    1224:	22 30       	cpi	r18, 0x02	; 2
    1226:	31 05       	cpc	r19, r1
    1228:	2c f4       	brge	.+10     	; 0x1234 <DIO_ErrStateSetGroupValue+0x3a>
    122a:	8c 81       	ldd	r24, Y+4	; 0x04
    122c:	9d 81       	ldd	r25, Y+5	; 0x05
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	61 f0       	breq	.+24     	; 0x124a <DIO_ErrStateSetGroupValue+0x50>
    1232:	1f c0       	rjmp	.+62     	; 0x1272 <DIO_ErrStateSetGroupValue+0x78>
    1234:	2c 81       	ldd	r18, Y+4	; 0x04
    1236:	3d 81       	ldd	r19, Y+5	; 0x05
    1238:	22 30       	cpi	r18, 0x02	; 2
    123a:	31 05       	cpc	r19, r1
    123c:	81 f0       	breq	.+32     	; 0x125e <DIO_ErrStateSetGroupValue+0x64>
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	9d 81       	ldd	r25, Y+5	; 0x05
    1242:	83 30       	cpi	r24, 0x03	; 3
    1244:	91 05       	cpc	r25, r1
    1246:	81 f0       	breq	.+32     	; 0x1268 <DIO_ErrStateSetGroupValue+0x6e>
    1248:	14 c0       	rjmp	.+40     	; 0x1272 <DIO_ErrStateSetGroupValue+0x78>
		{
		case DIO_GroupA: PORTA_ITI =  Copy_ValueState ;break ;
    124a:	eb e3       	ldi	r30, 0x3B	; 59
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	80 83       	st	Z, r24
    1252:	12 c0       	rjmp	.+36     	; 0x1278 <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupB: PORTB_ITI =  Copy_ValueState ;break ;
    1254:	e8 e3       	ldi	r30, 0x38	; 56
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	80 83       	st	Z, r24
    125c:	0d c0       	rjmp	.+26     	; 0x1278 <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupC: PORTC_ITI =  Copy_ValueState ;break ;
    125e:	e5 e3       	ldi	r30, 0x35	; 53
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	80 83       	st	Z, r24
    1266:	08 c0       	rjmp	.+16     	; 0x1278 <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupD: PORTD_ITI =  Copy_ValueState ;break ;
    1268:	e2 e3       	ldi	r30, 0x32	; 50
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	80 83       	st	Z, r24
    1270:	03 c0       	rjmp	.+6      	; 0x1278 <DIO_ErrStateSetGroupValue+0x7e>
		default :
			return GroupError ;
    1272:	91 e0       	ldi	r25, 0x01	; 1
    1274:	9b 83       	std	Y+3, r25	; 0x03
    1276:	01 c0       	rjmp	.+2      	; 0x127a <DIO_ErrStateSetGroupValue+0x80>
		}
		return NoError ;
    1278:	1b 82       	std	Y+3, r1	; 0x03
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
	else
	{
		return ValueRangError;
	}

}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <DIO_ErrStateReadGroupValue>:
ErrState  DIO_ErrStateReadGroupValue(DIO_GroupNumber Copy_GroupNumber ,u8 *Result)
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	00 d0       	rcall	.+0      	; 0x1292 <DIO_ErrStateReadGroupValue+0x6>
    1292:	00 d0       	rcall	.+0      	; 0x1294 <DIO_ErrStateReadGroupValue+0x8>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <DIO_ErrStateReadGroupValue+0xa>
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	7b 83       	std	Y+3, r23	; 0x03
    129e:	6a 83       	std	Y+2, r22	; 0x02
	if(Result!=Null)
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	9b 81       	ldd	r25, Y+3	; 0x03
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	09 f4       	brne	.+2      	; 0x12aa <DIO_ErrStateReadGroupValue+0x1e>
    12a8:	40 c0       	rjmp	.+128    	; 0x132a <DIO_ErrStateReadGroupValue+0x9e>
	{
		switch(Copy_GroupNumber)
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	3e 83       	std	Y+6, r19	; 0x06
    12b2:	2d 83       	std	Y+5, r18	; 0x05
    12b4:	8d 81       	ldd	r24, Y+5	; 0x05
    12b6:	9e 81       	ldd	r25, Y+6	; 0x06
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	91 05       	cpc	r25, r1
    12bc:	e1 f0       	breq	.+56     	; 0x12f6 <DIO_ErrStateReadGroupValue+0x6a>
    12be:	2d 81       	ldd	r18, Y+5	; 0x05
    12c0:	3e 81       	ldd	r19, Y+6	; 0x06
    12c2:	22 30       	cpi	r18, 0x02	; 2
    12c4:	31 05       	cpc	r19, r1
    12c6:	2c f4       	brge	.+10     	; 0x12d2 <DIO_ErrStateReadGroupValue+0x46>
    12c8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ca:	9e 81       	ldd	r25, Y+6	; 0x06
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <DIO_ErrStateReadGroupValue+0x5c>
    12d0:	27 c0       	rjmp	.+78     	; 0x1320 <DIO_ErrStateReadGroupValue+0x94>
    12d2:	2d 81       	ldd	r18, Y+5	; 0x05
    12d4:	3e 81       	ldd	r19, Y+6	; 0x06
    12d6:	22 30       	cpi	r18, 0x02	; 2
    12d8:	31 05       	cpc	r19, r1
    12da:	a1 f0       	breq	.+40     	; 0x1304 <DIO_ErrStateReadGroupValue+0x78>
    12dc:	8d 81       	ldd	r24, Y+5	; 0x05
    12de:	9e 81       	ldd	r25, Y+6	; 0x06
    12e0:	83 30       	cpi	r24, 0x03	; 3
    12e2:	91 05       	cpc	r25, r1
    12e4:	b1 f0       	breq	.+44     	; 0x1312 <DIO_ErrStateReadGroupValue+0x86>
    12e6:	1c c0       	rjmp	.+56     	; 0x1320 <DIO_ErrStateReadGroupValue+0x94>
		{
		case DIO_GroupA: *Result = PINA_ITI ; break ;
    12e8:	e9 e3       	ldi	r30, 0x39	; 57
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	ea 81       	ldd	r30, Y+2	; 0x02
    12f0:	fb 81       	ldd	r31, Y+3	; 0x03
    12f2:	80 83       	st	Z, r24
    12f4:	18 c0       	rjmp	.+48     	; 0x1326 <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupB: *Result = PINB_ITI ; break ;
    12f6:	e6 e3       	ldi	r30, 0x36	; 54
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	ea 81       	ldd	r30, Y+2	; 0x02
    12fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1300:	80 83       	st	Z, r24
    1302:	11 c0       	rjmp	.+34     	; 0x1326 <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupC: *Result = PINC_ITI ; break ;
    1304:	e3 e3       	ldi	r30, 0x33	; 51
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	ea 81       	ldd	r30, Y+2	; 0x02
    130c:	fb 81       	ldd	r31, Y+3	; 0x03
    130e:	80 83       	st	Z, r24
    1310:	0a c0       	rjmp	.+20     	; 0x1326 <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupD: *Result = PIND_ITI ; break ;
    1312:	e0 e3       	ldi	r30, 0x30	; 48
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	ea 81       	ldd	r30, Y+2	; 0x02
    131a:	fb 81       	ldd	r31, Y+3	; 0x03
    131c:	80 83       	st	Z, r24
    131e:	03 c0       	rjmp	.+6      	; 0x1326 <DIO_ErrStateReadGroupValue+0x9a>
		default :
			return GroupError ;
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	9c 83       	std	Y+4, r25	; 0x04
    1324:	04 c0       	rjmp	.+8      	; 0x132e <DIO_ErrStateReadGroupValue+0xa2>
		}
		return NoError ;
    1326:	1c 82       	std	Y+4, r1	; 0x04
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_ErrStateReadGroupValue+0xa2>
	}
	else
	{
		return AddressError;
    132a:	25 e0       	ldi	r18, 0x05	; 5
    132c:	2c 83       	std	Y+4, r18	; 0x04
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    1330:	26 96       	adiw	r28, 0x06	; 6
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <SevSeg_SevErrInit>:
		SevSegCA_8 ,
		SevSegCA_9
};

SevErrState	   SevSeg_SevErrInit(SevSeg_info* SevenSegment1)
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	00 d0       	rcall	.+0      	; 0x1348 <SevSeg_SevErrInit+0x6>
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	9a 83       	std	Y+2, r25	; 0x02
    134e:	89 83       	std	Y+1, r24	; 0x01
	DIO_ErrStateSetGroupDirection ((SevenSegment1->SevSeg_Group),0xff);
    1350:	e9 81       	ldd	r30, Y+1	; 0x01
    1352:	fa 81       	ldd	r31, Y+2	; 0x02
    1354:	81 81       	ldd	r24, Z+1	; 0x01
    1356:	6f ef       	ldi	r22, 0xFF	; 255
    1358:	0e 94 b4 08 	call	0x1168	; 0x1168 <DIO_ErrStateSetGroupDirection>
	return SevSegNoError;
    135c:	80 e0       	ldi	r24, 0x00	; 0
}
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <SevSeg_SevErrStateSetNumber>:

SevErrState    SevSeg_SevErrStateSetNumber(u8 Copy_Number , SevSeg_info* SevenSegment1)
{
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	61 97       	sbiw	r28, 0x11	; 17
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	8f 87       	std	Y+15, r24	; 0x0f
    137e:	79 8b       	std	Y+17, r23	; 0x11
    1380:	68 8b       	std	Y+16, r22	; 0x10
	DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[Copy_Number]);
    1382:	e8 89       	ldd	r30, Y+16	; 0x10
    1384:	f9 89       	ldd	r31, Y+17	; 0x11
    1386:	21 81       	ldd	r18, Z+1	; 0x01
    1388:	8f 85       	ldd	r24, Y+15	; 0x0f
    138a:	88 2f       	mov	r24, r24
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	fc 01       	movw	r30, r24
    1390:	e2 59       	subi	r30, 0x92	; 146
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	90 81       	ld	r25, Z
    1396:	82 2f       	mov	r24, r18
    1398:	69 2f       	mov	r22, r25
    139a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetGroupValue>
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	aa e7       	ldi	r26, 0x7A	; 122
    13a4:	b4 e4       	ldi	r27, 0x44	; 68
    13a6:	8b 87       	std	Y+11, r24	; 0x0b
    13a8:	9c 87       	std	Y+12, r25	; 0x0c
    13aa:	ad 87       	std	Y+13, r26	; 0x0d
    13ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	4a e7       	ldi	r20, 0x7A	; 122
    13bc:	53 e4       	ldi	r21, 0x43	; 67
    13be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	8f 83       	std	Y+7, r24	; 0x07
    13c8:	98 87       	std	Y+8, r25	; 0x08
    13ca:	a9 87       	std	Y+9, r26	; 0x09
    13cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13ce:	6f 81       	ldd	r22, Y+7	; 0x07
    13d0:	78 85       	ldd	r23, Y+8	; 0x08
    13d2:	89 85       	ldd	r24, Y+9	; 0x09
    13d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	40 e8       	ldi	r20, 0x80	; 128
    13dc:	5f e3       	ldi	r21, 0x3F	; 63
    13de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13e2:	88 23       	and	r24, r24
    13e4:	2c f4       	brge	.+10     	; 0x13f0 <SevSeg_SevErrStateSetNumber+0x88>
		__ticks = 1;
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	9e 83       	std	Y+6, r25	; 0x06
    13ec:	8d 83       	std	Y+5, r24	; 0x05
    13ee:	3f c0       	rjmp	.+126    	; 0x146e <SevSeg_SevErrStateSetNumber+0x106>
	else if (__tmp > 65535)
    13f0:	6f 81       	ldd	r22, Y+7	; 0x07
    13f2:	78 85       	ldd	r23, Y+8	; 0x08
    13f4:	89 85       	ldd	r24, Y+9	; 0x09
    13f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	3f ef       	ldi	r19, 0xFF	; 255
    13fc:	4f e7       	ldi	r20, 0x7F	; 127
    13fe:	57 e4       	ldi	r21, 0x47	; 71
    1400:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1404:	18 16       	cp	r1, r24
    1406:	4c f5       	brge	.+82     	; 0x145a <SevSeg_SevErrStateSetNumber+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1408:	6b 85       	ldd	r22, Y+11	; 0x0b
    140a:	7c 85       	ldd	r23, Y+12	; 0x0c
    140c:	8d 85       	ldd	r24, Y+13	; 0x0d
    140e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e2       	ldi	r20, 0x20	; 32
    1416:	51 e4       	ldi	r21, 0x41	; 65
    1418:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	bc 01       	movw	r22, r24
    1422:	cd 01       	movw	r24, r26
    1424:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	9e 83       	std	Y+6, r25	; 0x06
    142e:	8d 83       	std	Y+5, r24	; 0x05
    1430:	0f c0       	rjmp	.+30     	; 0x1450 <SevSeg_SevErrStateSetNumber+0xe8>
    1432:	89 e1       	ldi	r24, 0x19	; 25
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	9c 83       	std	Y+4, r25	; 0x04
    1438:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	f1 f7       	brne	.-4      	; 0x143e <SevSeg_SevErrStateSetNumber+0xd6>
    1442:	9c 83       	std	Y+4, r25	; 0x04
    1444:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1446:	8d 81       	ldd	r24, Y+5	; 0x05
    1448:	9e 81       	ldd	r25, Y+6	; 0x06
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	9e 83       	std	Y+6, r25	; 0x06
    144e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1450:	8d 81       	ldd	r24, Y+5	; 0x05
    1452:	9e 81       	ldd	r25, Y+6	; 0x06
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	69 f7       	brne	.-38     	; 0x1432 <SevSeg_SevErrStateSetNumber+0xca>
    1458:	14 c0       	rjmp	.+40     	; 0x1482 <SevSeg_SevErrStateSetNumber+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145a:	6f 81       	ldd	r22, Y+7	; 0x07
    145c:	78 85       	ldd	r23, Y+8	; 0x08
    145e:	89 85       	ldd	r24, Y+9	; 0x09
    1460:	9a 85       	ldd	r25, Y+10	; 0x0a
    1462:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	9e 83       	std	Y+6, r25	; 0x06
    146c:	8d 83       	std	Y+5, r24	; 0x05
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	9e 81       	ldd	r25, Y+6	; 0x06
    1472:	9a 83       	std	Y+2, r25	; 0x02
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	9a 81       	ldd	r25, Y+2	; 0x02
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	f1 f7       	brne	.-4      	; 0x147a <SevSeg_SevErrStateSetNumber+0x112>
    147e:	9a 83       	std	Y+2, r25	; 0x02
    1480:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	return SevSegNoError;
    1482:	80 e0       	ldi	r24, 0x00	; 0
}
    1484:	61 96       	adiw	r28, 0x11	; 17
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <SevSeg_SevErrStateDisplayRange>:

SevErrState    SevSeg_SevErrStateDisplayRange(SevSeg_info* SevenSegment1 , u8 Copy_start , u8 Copy_End )
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	a3 97       	sbiw	r28, 0x23	; 35
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	98 a3       	std	Y+32, r25	; 0x20
    14ac:	8f 8f       	std	Y+31, r24	; 0x1f
    14ae:	69 a3       	std	Y+33, r22	; 0x21
    14b0:	4a a3       	std	Y+34, r20	; 0x22
	if (Copy_start<Copy_End)
    14b2:	99 a1       	ldd	r25, Y+33	; 0x21
    14b4:	8a a1       	ldd	r24, Y+34	; 0x22
    14b6:	98 17       	cp	r25, r24
    14b8:	08 f0       	brcs	.+2      	; 0x14bc <SevSeg_SevErrStateDisplayRange+0x26>
    14ba:	94 c0       	rjmp	.+296    	; 0x15e4 <SevSeg_SevErrStateDisplayRange+0x14e>
	{
		for(s8 i = Copy_start; i<=Copy_End;i++)
    14bc:	89 a1       	ldd	r24, Y+33	; 0x21
    14be:	8e 8f       	std	Y+30, r24	; 0x1e
    14c0:	84 c0       	rjmp	.+264    	; 0x15ca <SevSeg_SevErrStateDisplayRange+0x134>
		{
			DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[i]);
    14c2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    14c4:	f8 a1       	ldd	r31, Y+32	; 0x20
    14c6:	21 81       	ldd	r18, Z+1	; 0x01
    14c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14ca:	99 27       	eor	r25, r25
    14cc:	87 fd       	sbrc	r24, 7
    14ce:	90 95       	com	r25
    14d0:	fc 01       	movw	r30, r24
    14d2:	e2 59       	subi	r30, 0x92	; 146
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	90 81       	ld	r25, Z
    14d8:	82 2f       	mov	r24, r18
    14da:	69 2f       	mov	r22, r25
    14dc:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetGroupValue>
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	aa e7       	ldi	r26, 0x7A	; 122
    14e6:	b4 e4       	ldi	r27, 0x44	; 68
    14e8:	89 8f       	std	Y+25, r24	; 0x19
    14ea:	9a 8f       	std	Y+26, r25	; 0x1a
    14ec:	ab 8f       	std	Y+27, r26	; 0x1b
    14ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f0:	69 8d       	ldd	r22, Y+25	; 0x19
    14f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	4a e7       	ldi	r20, 0x7A	; 122
    14fe:	53 e4       	ldi	r21, 0x43	; 67
    1500:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	8d 8b       	std	Y+21, r24	; 0x15
    150a:	9e 8b       	std	Y+22, r25	; 0x16
    150c:	af 8b       	std	Y+23, r26	; 0x17
    150e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1510:	6d 89       	ldd	r22, Y+21	; 0x15
    1512:	7e 89       	ldd	r23, Y+22	; 0x16
    1514:	8f 89       	ldd	r24, Y+23	; 0x17
    1516:	98 8d       	ldd	r25, Y+24	; 0x18
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	40 e8       	ldi	r20, 0x80	; 128
    151e:	5f e3       	ldi	r21, 0x3F	; 63
    1520:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1524:	88 23       	and	r24, r24
    1526:	2c f4       	brge	.+10     	; 0x1532 <SevSeg_SevErrStateDisplayRange+0x9c>
		__ticks = 1;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	9c 8b       	std	Y+20, r25	; 0x14
    152e:	8b 8b       	std	Y+19, r24	; 0x13
    1530:	3f c0       	rjmp	.+126    	; 0x15b0 <SevSeg_SevErrStateDisplayRange+0x11a>
	else if (__tmp > 65535)
    1532:	6d 89       	ldd	r22, Y+21	; 0x15
    1534:	7e 89       	ldd	r23, Y+22	; 0x16
    1536:	8f 89       	ldd	r24, Y+23	; 0x17
    1538:	98 8d       	ldd	r25, Y+24	; 0x18
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	3f ef       	ldi	r19, 0xFF	; 255
    153e:	4f e7       	ldi	r20, 0x7F	; 127
    1540:	57 e4       	ldi	r21, 0x47	; 71
    1542:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1546:	18 16       	cp	r1, r24
    1548:	4c f5       	brge	.+82     	; 0x159c <SevSeg_SevErrStateDisplayRange+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154a:	69 8d       	ldd	r22, Y+25	; 0x19
    154c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    154e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1550:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	40 e2       	ldi	r20, 0x20	; 32
    1558:	51 e4       	ldi	r21, 0x41	; 65
    155a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	bc 01       	movw	r22, r24
    1564:	cd 01       	movw	r24, r26
    1566:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	9c 8b       	std	Y+20, r25	; 0x14
    1570:	8b 8b       	std	Y+19, r24	; 0x13
    1572:	0f c0       	rjmp	.+30     	; 0x1592 <SevSeg_SevErrStateDisplayRange+0xfc>
    1574:	89 e1       	ldi	r24, 0x19	; 25
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	9a 8b       	std	Y+18, r25	; 0x12
    157a:	89 8b       	std	Y+17, r24	; 0x11
    157c:	89 89       	ldd	r24, Y+17	; 0x11
    157e:	9a 89       	ldd	r25, Y+18	; 0x12
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <SevSeg_SevErrStateDisplayRange+0xea>
    1584:	9a 8b       	std	Y+18, r25	; 0x12
    1586:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1588:	8b 89       	ldd	r24, Y+19	; 0x13
    158a:	9c 89       	ldd	r25, Y+20	; 0x14
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	9c 8b       	std	Y+20, r25	; 0x14
    1590:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1592:	8b 89       	ldd	r24, Y+19	; 0x13
    1594:	9c 89       	ldd	r25, Y+20	; 0x14
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	69 f7       	brne	.-38     	; 0x1574 <SevSeg_SevErrStateDisplayRange+0xde>
    159a:	14 c0       	rjmp	.+40     	; 0x15c4 <SevSeg_SevErrStateDisplayRange+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159c:	6d 89       	ldd	r22, Y+21	; 0x15
    159e:	7e 89       	ldd	r23, Y+22	; 0x16
    15a0:	8f 89       	ldd	r24, Y+23	; 0x17
    15a2:	98 8d       	ldd	r25, Y+24	; 0x18
    15a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	9c 8b       	std	Y+20, r25	; 0x14
    15ae:	8b 8b       	std	Y+19, r24	; 0x13
    15b0:	8b 89       	ldd	r24, Y+19	; 0x13
    15b2:	9c 89       	ldd	r25, Y+20	; 0x14
    15b4:	98 8b       	std	Y+16, r25	; 0x10
    15b6:	8f 87       	std	Y+15, r24	; 0x0f
    15b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ba:	98 89       	ldd	r25, Y+16	; 0x10
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <SevSeg_SevErrStateDisplayRange+0x126>
    15c0:	98 8b       	std	Y+16, r25	; 0x10
    15c2:	8f 87       	std	Y+15, r24	; 0x0f

SevErrState    SevSeg_SevErrStateDisplayRange(SevSeg_info* SevenSegment1 , u8 Copy_start , u8 Copy_End )
{
	if (Copy_start<Copy_End)
	{
		for(s8 i = Copy_start; i<=Copy_End;i++)
    15c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15c6:	8f 5f       	subi	r24, 0xFF	; 255
    15c8:	8e 8f       	std	Y+30, r24	; 0x1e
    15ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15cc:	28 2f       	mov	r18, r24
    15ce:	33 27       	eor	r19, r19
    15d0:	27 fd       	sbrc	r18, 7
    15d2:	30 95       	com	r19
    15d4:	8a a1       	ldd	r24, Y+34	; 0x22
    15d6:	88 2f       	mov	r24, r24
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	82 17       	cp	r24, r18
    15dc:	93 07       	cpc	r25, r19
    15de:	0c f0       	brlt	.+2      	; 0x15e2 <SevSeg_SevErrStateDisplayRange+0x14c>
    15e0:	70 cf       	rjmp	.-288    	; 0x14c2 <SevSeg_SevErrStateDisplayRange+0x2c>
    15e2:	9c c0       	rjmp	.+312    	; 0x171c <SevSeg_SevErrStateDisplayRange+0x286>
		{
			DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[i]);
			_delay_ms(1000);
		}
	}
	else if(Copy_start>Copy_End)
    15e4:	99 a1       	ldd	r25, Y+33	; 0x21
    15e6:	8a a1       	ldd	r24, Y+34	; 0x22
    15e8:	89 17       	cp	r24, r25
    15ea:	08 f0       	brcs	.+2      	; 0x15ee <SevSeg_SevErrStateDisplayRange+0x158>
    15ec:	94 c0       	rjmp	.+296    	; 0x1716 <SevSeg_SevErrStateDisplayRange+0x280>
	{
		for(s8 i = Copy_start; i>=Copy_End;i--)
    15ee:	89 a1       	ldd	r24, Y+33	; 0x21
    15f0:	8d 8f       	std	Y+29, r24	; 0x1d
    15f2:	84 c0       	rjmp	.+264    	; 0x16fc <SevSeg_SevErrStateDisplayRange+0x266>
		{
			DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[i]);
    15f4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    15f6:	f8 a1       	ldd	r31, Y+32	; 0x20
    15f8:	21 81       	ldd	r18, Z+1	; 0x01
    15fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15fc:	99 27       	eor	r25, r25
    15fe:	87 fd       	sbrc	r24, 7
    1600:	90 95       	com	r25
    1602:	fc 01       	movw	r30, r24
    1604:	e2 59       	subi	r30, 0x92	; 146
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	90 81       	ld	r25, Z
    160a:	82 2f       	mov	r24, r18
    160c:	69 2f       	mov	r22, r25
    160e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetGroupValue>
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	aa e7       	ldi	r26, 0x7A	; 122
    1618:	b4 e4       	ldi	r27, 0x44	; 68
    161a:	8b 87       	std	Y+11, r24	; 0x0b
    161c:	9c 87       	std	Y+12, r25	; 0x0c
    161e:	ad 87       	std	Y+13, r26	; 0x0d
    1620:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1622:	6b 85       	ldd	r22, Y+11	; 0x0b
    1624:	7c 85       	ldd	r23, Y+12	; 0x0c
    1626:	8d 85       	ldd	r24, Y+13	; 0x0d
    1628:	9e 85       	ldd	r25, Y+14	; 0x0e
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	4a e7       	ldi	r20, 0x7A	; 122
    1630:	53 e4       	ldi	r21, 0x43	; 67
    1632:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	8f 83       	std	Y+7, r24	; 0x07
    163c:	98 87       	std	Y+8, r25	; 0x08
    163e:	a9 87       	std	Y+9, r26	; 0x09
    1640:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1642:	6f 81       	ldd	r22, Y+7	; 0x07
    1644:	78 85       	ldd	r23, Y+8	; 0x08
    1646:	89 85       	ldd	r24, Y+9	; 0x09
    1648:	9a 85       	ldd	r25, Y+10	; 0x0a
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e8       	ldi	r20, 0x80	; 128
    1650:	5f e3       	ldi	r21, 0x3F	; 63
    1652:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1656:	88 23       	and	r24, r24
    1658:	2c f4       	brge	.+10     	; 0x1664 <SevSeg_SevErrStateDisplayRange+0x1ce>
		__ticks = 1;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	9e 83       	std	Y+6, r25	; 0x06
    1660:	8d 83       	std	Y+5, r24	; 0x05
    1662:	3f c0       	rjmp	.+126    	; 0x16e2 <SevSeg_SevErrStateDisplayRange+0x24c>
	else if (__tmp > 65535)
    1664:	6f 81       	ldd	r22, Y+7	; 0x07
    1666:	78 85       	ldd	r23, Y+8	; 0x08
    1668:	89 85       	ldd	r24, Y+9	; 0x09
    166a:	9a 85       	ldd	r25, Y+10	; 0x0a
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	3f ef       	ldi	r19, 0xFF	; 255
    1670:	4f e7       	ldi	r20, 0x7F	; 127
    1672:	57 e4       	ldi	r21, 0x47	; 71
    1674:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1678:	18 16       	cp	r1, r24
    167a:	4c f5       	brge	.+82     	; 0x16ce <SevSeg_SevErrStateDisplayRange+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167c:	6b 85       	ldd	r22, Y+11	; 0x0b
    167e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1680:	8d 85       	ldd	r24, Y+13	; 0x0d
    1682:	9e 85       	ldd	r25, Y+14	; 0x0e
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e2       	ldi	r20, 0x20	; 32
    168a:	51 e4       	ldi	r21, 0x41	; 65
    168c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	bc 01       	movw	r22, r24
    1696:	cd 01       	movw	r24, r26
    1698:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	9e 83       	std	Y+6, r25	; 0x06
    16a2:	8d 83       	std	Y+5, r24	; 0x05
    16a4:	0f c0       	rjmp	.+30     	; 0x16c4 <SevSeg_SevErrStateDisplayRange+0x22e>
    16a6:	89 e1       	ldi	r24, 0x19	; 25
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	9c 83       	std	Y+4, r25	; 0x04
    16ac:	8b 83       	std	Y+3, r24	; 0x03
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	9c 81       	ldd	r25, Y+4	; 0x04
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <SevSeg_SevErrStateDisplayRange+0x21c>
    16b6:	9c 83       	std	Y+4, r25	; 0x04
    16b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	9e 83       	std	Y+6, r25	; 0x06
    16c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c4:	8d 81       	ldd	r24, Y+5	; 0x05
    16c6:	9e 81       	ldd	r25, Y+6	; 0x06
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	69 f7       	brne	.-38     	; 0x16a6 <SevSeg_SevErrStateDisplayRange+0x210>
    16cc:	14 c0       	rjmp	.+40     	; 0x16f6 <SevSeg_SevErrStateDisplayRange+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ce:	6f 81       	ldd	r22, Y+7	; 0x07
    16d0:	78 85       	ldd	r23, Y+8	; 0x08
    16d2:	89 85       	ldd	r24, Y+9	; 0x09
    16d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	9e 83       	std	Y+6, r25	; 0x06
    16e0:	8d 83       	std	Y+5, r24	; 0x05
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	9e 81       	ldd	r25, Y+6	; 0x06
    16e6:	9a 83       	std	Y+2, r25	; 0x02
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <SevSeg_SevErrStateDisplayRange+0x258>
    16f2:	9a 83       	std	Y+2, r25	; 0x02
    16f4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
		}
	}
	else if(Copy_start>Copy_End)
	{
		for(s8 i = Copy_start; i>=Copy_End;i--)
    16f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16f8:	81 50       	subi	r24, 0x01	; 1
    16fa:	8d 8f       	std	Y+29, r24	; 0x1d
    16fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16fe:	28 2f       	mov	r18, r24
    1700:	33 27       	eor	r19, r19
    1702:	27 fd       	sbrc	r18, 7
    1704:	30 95       	com	r19
    1706:	8a a1       	ldd	r24, Y+34	; 0x22
    1708:	88 2f       	mov	r24, r24
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	28 17       	cp	r18, r24
    170e:	39 07       	cpc	r19, r25
    1710:	0c f0       	brlt	.+2      	; 0x1714 <SevSeg_SevErrStateDisplayRange+0x27e>
    1712:	70 cf       	rjmp	.-288    	; 0x15f4 <SevSeg_SevErrStateDisplayRange+0x15e>
    1714:	03 c0       	rjmp	.+6      	; 0x171c <SevSeg_SevErrStateDisplayRange+0x286>
			_delay_ms(1000);
		}
	}
	else
	{
		return DispRangeError;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	8b a3       	std	Y+35, r24	; 0x23
    171a:	01 c0       	rjmp	.+2      	; 0x171e <SevSeg_SevErrStateDisplayRange+0x288>
	}
	return SevSegNoError;
    171c:	1b a2       	std	Y+35, r1	; 0x23
    171e:	8b a1       	ldd	r24, Y+35	; 0x23
	
}
    1720:	a3 96       	adiw	r28, 0x23	; 35
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <Led_LedErrStateTurnOn>:
#include "../../Common/definition.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "Led_Interface.h"

LedErrState	Led_LedErrStateTurnOn(Led_info *Led) 
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	00 d0       	rcall	.+0      	; 0x1738 <Led_LedErrStateTurnOn+0x6>
    1738:	0f 92       	push	r0
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	9a 83       	std	Y+2, r25	; 0x02
    1740:	89 83       	std	Y+1, r24	; 0x01
	
	if (Led->ConnectionType == Source_Connection)
    1742:	e9 81       	ldd	r30, Y+1	; 0x01
    1744:	fa 81       	ldd	r31, Y+2	; 0x02
    1746:	82 81       	ldd	r24, Z+2	; 0x02
    1748:	88 23       	and	r24, r24
    174a:	59 f4       	brne	.+22     	; 0x1762 <Led_LedErrStateTurnOn+0x30>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_High);
    174c:	e9 81       	ldd	r30, Y+1	; 0x01
    174e:	fa 81       	ldd	r31, Y+2	; 0x02
    1750:	80 81       	ld	r24, Z
    1752:	e9 81       	ldd	r30, Y+1	; 0x01
    1754:	fa 81       	ldd	r31, Y+2	; 0x02
    1756:	91 81       	ldd	r25, Z+1	; 0x01
    1758:	69 2f       	mov	r22, r25
    175a:	41 e0       	ldi	r20, 0x01	; 1
    175c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_ErrStateSetPinValue>
    1760:	13 c0       	rjmp	.+38     	; 0x1788 <Led_LedErrStateTurnOn+0x56>
	}
	else if (Led->ConnectionType == Sink_Connection)
    1762:	e9 81       	ldd	r30, Y+1	; 0x01
    1764:	fa 81       	ldd	r31, Y+2	; 0x02
    1766:	82 81       	ldd	r24, Z+2	; 0x02
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	59 f4       	brne	.+22     	; 0x1782 <Led_LedErrStateTurnOn+0x50>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_Low);
    176c:	e9 81       	ldd	r30, Y+1	; 0x01
    176e:	fa 81       	ldd	r31, Y+2	; 0x02
    1770:	80 81       	ld	r24, Z
    1772:	e9 81       	ldd	r30, Y+1	; 0x01
    1774:	fa 81       	ldd	r31, Y+2	; 0x02
    1776:	91 81       	ldd	r25, Z+1	; 0x01
    1778:	69 2f       	mov	r22, r25
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_ErrStateSetPinValue>
    1780:	03 c0       	rjmp	.+6      	; 0x1788 <Led_LedErrStateTurnOn+0x56>
	}
	else 
	{
		return ConnectionTypeError;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	8b 83       	std	Y+3, r24	; 0x03
    1786:	01 c0       	rjmp	.+2      	; 0x178a <Led_LedErrStateTurnOn+0x58>
	}
	return LedNoError;
    1788:	1b 82       	std	Y+3, r1	; 0x03
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
	
	
} 
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <Led_LedErrStateTurnOff>:
  


LedErrState	Led_LedErrStateTurnOff(Led_info *Led) 
{
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	00 d0       	rcall	.+0      	; 0x179e <Led_LedErrStateTurnOff+0x6>
    179e:	0f 92       	push	r0
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	9a 83       	std	Y+2, r25	; 0x02
    17a6:	89 83       	std	Y+1, r24	; 0x01
	if (Led->ConnectionType == Source_Connection)
    17a8:	e9 81       	ldd	r30, Y+1	; 0x01
    17aa:	fa 81       	ldd	r31, Y+2	; 0x02
    17ac:	82 81       	ldd	r24, Z+2	; 0x02
    17ae:	88 23       	and	r24, r24
    17b0:	59 f4       	brne	.+22     	; 0x17c8 <Led_LedErrStateTurnOff+0x30>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_Low);
    17b2:	e9 81       	ldd	r30, Y+1	; 0x01
    17b4:	fa 81       	ldd	r31, Y+2	; 0x02
    17b6:	80 81       	ld	r24, Z
    17b8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ba:	fa 81       	ldd	r31, Y+2	; 0x02
    17bc:	91 81       	ldd	r25, Z+1	; 0x01
    17be:	69 2f       	mov	r22, r25
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_ErrStateSetPinValue>
    17c6:	13 c0       	rjmp	.+38     	; 0x17ee <Led_LedErrStateTurnOff+0x56>
	}
	else if (Led->ConnectionType == Sink_Connection)
    17c8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ca:	fa 81       	ldd	r31, Y+2	; 0x02
    17cc:	82 81       	ldd	r24, Z+2	; 0x02
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	59 f4       	brne	.+22     	; 0x17e8 <Led_LedErrStateTurnOff+0x50>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_High);
    17d2:	e9 81       	ldd	r30, Y+1	; 0x01
    17d4:	fa 81       	ldd	r31, Y+2	; 0x02
    17d6:	80 81       	ld	r24, Z
    17d8:	e9 81       	ldd	r30, Y+1	; 0x01
    17da:	fa 81       	ldd	r31, Y+2	; 0x02
    17dc:	91 81       	ldd	r25, Z+1	; 0x01
    17de:	69 2f       	mov	r22, r25
    17e0:	41 e0       	ldi	r20, 0x01	; 1
    17e2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_ErrStateSetPinValue>
    17e6:	03 c0       	rjmp	.+6      	; 0x17ee <Led_LedErrStateTurnOff+0x56>
	}
	else 
	{
		return ConnectionTypeError;
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	8b 83       	std	Y+3, r24	; 0x03
    17ec:	01 c0       	rjmp	.+2      	; 0x17f0 <Led_LedErrStateTurnOff+0x58>
	}
	return NoError;
    17ee:	1b 82       	std	Y+3, r1	; 0x03
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
	
}
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <LCD_VoidInit>:




void LCD_VoidInit(Lcd_info* lcd)
{
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	ea 97       	sbiw	r28, 0x3a	; 58
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	9a af       	std	Y+58, r25	; 0x3a
    1814:	89 af       	std	Y+57, r24	; 0x39
	
	
	/*Set Direction*/
	DIO_ErrStateSetPinDirection(lcd->Rs_Group,lcd->Rs_Pin,DIO_Output,PULLUP_OFF);
    1816:	e9 ad       	ldd	r30, Y+57	; 0x39
    1818:	fa ad       	ldd	r31, Y+58	; 0x3a
    181a:	80 81       	ld	r24, Z
    181c:	e9 ad       	ldd	r30, Y+57	; 0x39
    181e:	fa ad       	ldd	r31, Y+58	; 0x3a
    1820:	91 81       	ldd	r25, Z+1	; 0x01
    1822:	69 2f       	mov	r22, r25
    1824:	41 e0       	ldi	r20, 0x01	; 1
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->Rw_Group,lcd->Rw_Pin,DIO_Output,PULLUP_OFF);
    182c:	e9 ad       	ldd	r30, Y+57	; 0x39
    182e:	fa ad       	ldd	r31, Y+58	; 0x3a
    1830:	82 81       	ldd	r24, Z+2	; 0x02
    1832:	e9 ad       	ldd	r30, Y+57	; 0x39
    1834:	fa ad       	ldd	r31, Y+58	; 0x3a
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	69 2f       	mov	r22, r25
    183a:	41 e0       	ldi	r20, 0x01	; 1
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->E_Group,lcd->E_Pin,DIO_Output,PULLUP_OFF);
    1842:	e9 ad       	ldd	r30, Y+57	; 0x39
    1844:	fa ad       	ldd	r31, Y+58	; 0x3a
    1846:	84 81       	ldd	r24, Z+4	; 0x04
    1848:	e9 ad       	ldd	r30, Y+57	; 0x39
    184a:	fa ad       	ldd	r31, Y+58	; 0x3a
    184c:	95 81       	ldd	r25, Z+5	; 0x05
    184e:	69 2f       	mov	r22, r25
    1850:	41 e0       	ldi	r20, 0x01	; 1
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetGroupDirection(lcd->Data_Group,0xff);
    1858:	e9 ad       	ldd	r30, Y+57	; 0x39
    185a:	fa ad       	ldd	r31, Y+58	; 0x3a
    185c:	86 81       	ldd	r24, Z+6	; 0x06
    185e:	6f ef       	ldi	r22, 0xFF	; 255
    1860:	0e 94 b4 08 	call	0x1168	; 0x1168 <DIO_ErrStateSetGroupDirection>
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	a0 e2       	ldi	r26, 0x20	; 32
    186a:	b2 e4       	ldi	r27, 0x42	; 66
    186c:	8d ab       	std	Y+53, r24	; 0x35
    186e:	9e ab       	std	Y+54, r25	; 0x36
    1870:	af ab       	std	Y+55, r26	; 0x37
    1872:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1874:	6d a9       	ldd	r22, Y+53	; 0x35
    1876:	7e a9       	ldd	r23, Y+54	; 0x36
    1878:	8f a9       	ldd	r24, Y+55	; 0x37
    187a:	98 ad       	ldd	r25, Y+56	; 0x38
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	4a e7       	ldi	r20, 0x7A	; 122
    1882:	53 e4       	ldi	r21, 0x43	; 67
    1884:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	89 ab       	std	Y+49, r24	; 0x31
    188e:	9a ab       	std	Y+50, r25	; 0x32
    1890:	ab ab       	std	Y+51, r26	; 0x33
    1892:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1894:	69 a9       	ldd	r22, Y+49	; 0x31
    1896:	7a a9       	ldd	r23, Y+50	; 0x32
    1898:	8b a9       	ldd	r24, Y+51	; 0x33
    189a:	9c a9       	ldd	r25, Y+52	; 0x34
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	40 e8       	ldi	r20, 0x80	; 128
    18a2:	5f e3       	ldi	r21, 0x3F	; 63
    18a4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18a8:	88 23       	and	r24, r24
    18aa:	2c f4       	brge	.+10     	; 0x18b6 <LCD_VoidInit+0xb8>
		__ticks = 1;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	98 ab       	std	Y+48, r25	; 0x30
    18b2:	8f a7       	std	Y+47, r24	; 0x2f
    18b4:	3f c0       	rjmp	.+126    	; 0x1934 <LCD_VoidInit+0x136>
	else if (__tmp > 65535)
    18b6:	69 a9       	ldd	r22, Y+49	; 0x31
    18b8:	7a a9       	ldd	r23, Y+50	; 0x32
    18ba:	8b a9       	ldd	r24, Y+51	; 0x33
    18bc:	9c a9       	ldd	r25, Y+52	; 0x34
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	3f ef       	ldi	r19, 0xFF	; 255
    18c2:	4f e7       	ldi	r20, 0x7F	; 127
    18c4:	57 e4       	ldi	r21, 0x47	; 71
    18c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18ca:	18 16       	cp	r1, r24
    18cc:	4c f5       	brge	.+82     	; 0x1920 <LCD_VoidInit+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ce:	6d a9       	ldd	r22, Y+53	; 0x35
    18d0:	7e a9       	ldd	r23, Y+54	; 0x36
    18d2:	8f a9       	ldd	r24, Y+55	; 0x37
    18d4:	98 ad       	ldd	r25, Y+56	; 0x38
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e2       	ldi	r20, 0x20	; 32
    18dc:	51 e4       	ldi	r21, 0x41	; 65
    18de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	bc 01       	movw	r22, r24
    18e8:	cd 01       	movw	r24, r26
    18ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	98 ab       	std	Y+48, r25	; 0x30
    18f4:	8f a7       	std	Y+47, r24	; 0x2f
    18f6:	0f c0       	rjmp	.+30     	; 0x1916 <LCD_VoidInit+0x118>
    18f8:	89 e1       	ldi	r24, 0x19	; 25
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	9e a7       	std	Y+46, r25	; 0x2e
    18fe:	8d a7       	std	Y+45, r24	; 0x2d
    1900:	8d a5       	ldd	r24, Y+45	; 0x2d
    1902:	9e a5       	ldd	r25, Y+46	; 0x2e
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	f1 f7       	brne	.-4      	; 0x1904 <LCD_VoidInit+0x106>
    1908:	9e a7       	std	Y+46, r25	; 0x2e
    190a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190c:	8f a5       	ldd	r24, Y+47	; 0x2f
    190e:	98 a9       	ldd	r25, Y+48	; 0x30
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	98 ab       	std	Y+48, r25	; 0x30
    1914:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1916:	8f a5       	ldd	r24, Y+47	; 0x2f
    1918:	98 a9       	ldd	r25, Y+48	; 0x30
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	69 f7       	brne	.-38     	; 0x18f8 <LCD_VoidInit+0xfa>
    191e:	14 c0       	rjmp	.+40     	; 0x1948 <LCD_VoidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1920:	69 a9       	ldd	r22, Y+49	; 0x31
    1922:	7a a9       	ldd	r23, Y+50	; 0x32
    1924:	8b a9       	ldd	r24, Y+51	; 0x33
    1926:	9c a9       	ldd	r25, Y+52	; 0x34
    1928:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	98 ab       	std	Y+48, r25	; 0x30
    1932:	8f a7       	std	Y+47, r24	; 0x2f
    1934:	8f a5       	ldd	r24, Y+47	; 0x2f
    1936:	98 a9       	ldd	r25, Y+48	; 0x30
    1938:	9c a7       	std	Y+44, r25	; 0x2c
    193a:	8b a7       	std	Y+43, r24	; 0x2b
    193c:	8b a5       	ldd	r24, Y+43	; 0x2b
    193e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <LCD_VoidInit+0x142>
    1944:	9c a7       	std	Y+44, r25	; 0x2c
    1946:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);


	// Function set
	LCD_VoidSendCommand(LCD_Set8Bit2Line5x8,lcd);
    1948:	29 ad       	ldd	r18, Y+57	; 0x39
    194a:	3a ad       	ldd	r19, Y+58	; 0x3a
    194c:	88 e3       	ldi	r24, 0x38	; 56
    194e:	b9 01       	movw	r22, r18
    1950:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <LCD_VoidSendCommand>
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	a0 e8       	ldi	r26, 0x80	; 128
    195a:	bf e3       	ldi	r27, 0x3F	; 63
    195c:	8f a3       	std	Y+39, r24	; 0x27
    195e:	98 a7       	std	Y+40, r25	; 0x28
    1960:	a9 a7       	std	Y+41, r26	; 0x29
    1962:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1964:	6f a1       	ldd	r22, Y+39	; 0x27
    1966:	78 a5       	ldd	r23, Y+40	; 0x28
    1968:	89 a5       	ldd	r24, Y+41	; 0x29
    196a:	9a a5       	ldd	r25, Y+42	; 0x2a
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	4a e7       	ldi	r20, 0x7A	; 122
    1972:	53 e4       	ldi	r21, 0x43	; 67
    1974:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	8b a3       	std	Y+35, r24	; 0x23
    197e:	9c a3       	std	Y+36, r25	; 0x24
    1980:	ad a3       	std	Y+37, r26	; 0x25
    1982:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1984:	6b a1       	ldd	r22, Y+35	; 0x23
    1986:	7c a1       	ldd	r23, Y+36	; 0x24
    1988:	8d a1       	ldd	r24, Y+37	; 0x25
    198a:	9e a1       	ldd	r25, Y+38	; 0x26
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e8       	ldi	r20, 0x80	; 128
    1992:	5f e3       	ldi	r21, 0x3F	; 63
    1994:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1998:	88 23       	and	r24, r24
    199a:	2c f4       	brge	.+10     	; 0x19a6 <LCD_VoidInit+0x1a8>
		__ticks = 1;
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	9a a3       	std	Y+34, r25	; 0x22
    19a2:	89 a3       	std	Y+33, r24	; 0x21
    19a4:	3f c0       	rjmp	.+126    	; 0x1a24 <LCD_VoidInit+0x226>
	else if (__tmp > 65535)
    19a6:	6b a1       	ldd	r22, Y+35	; 0x23
    19a8:	7c a1       	ldd	r23, Y+36	; 0x24
    19aa:	8d a1       	ldd	r24, Y+37	; 0x25
    19ac:	9e a1       	ldd	r25, Y+38	; 0x26
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	3f ef       	ldi	r19, 0xFF	; 255
    19b2:	4f e7       	ldi	r20, 0x7F	; 127
    19b4:	57 e4       	ldi	r21, 0x47	; 71
    19b6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19ba:	18 16       	cp	r1, r24
    19bc:	4c f5       	brge	.+82     	; 0x1a10 <LCD_VoidInit+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19be:	6f a1       	ldd	r22, Y+39	; 0x27
    19c0:	78 a5       	ldd	r23, Y+40	; 0x28
    19c2:	89 a5       	ldd	r24, Y+41	; 0x29
    19c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	40 e2       	ldi	r20, 0x20	; 32
    19cc:	51 e4       	ldi	r21, 0x41	; 65
    19ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	bc 01       	movw	r22, r24
    19d8:	cd 01       	movw	r24, r26
    19da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	9a a3       	std	Y+34, r25	; 0x22
    19e4:	89 a3       	std	Y+33, r24	; 0x21
    19e6:	0f c0       	rjmp	.+30     	; 0x1a06 <LCD_VoidInit+0x208>
    19e8:	89 e1       	ldi	r24, 0x19	; 25
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	98 a3       	std	Y+32, r25	; 0x20
    19ee:	8f 8f       	std	Y+31, r24	; 0x1f
    19f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19f2:	98 a1       	ldd	r25, Y+32	; 0x20
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	f1 f7       	brne	.-4      	; 0x19f4 <LCD_VoidInit+0x1f6>
    19f8:	98 a3       	std	Y+32, r25	; 0x20
    19fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fc:	89 a1       	ldd	r24, Y+33	; 0x21
    19fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	9a a3       	std	Y+34, r25	; 0x22
    1a04:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a06:	89 a1       	ldd	r24, Y+33	; 0x21
    1a08:	9a a1       	ldd	r25, Y+34	; 0x22
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	69 f7       	brne	.-38     	; 0x19e8 <LCD_VoidInit+0x1ea>
    1a0e:	14 c0       	rjmp	.+40     	; 0x1a38 <LCD_VoidInit+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a10:	6b a1       	ldd	r22, Y+35	; 0x23
    1a12:	7c a1       	ldd	r23, Y+36	; 0x24
    1a14:	8d a1       	ldd	r24, Y+37	; 0x25
    1a16:	9e a1       	ldd	r25, Y+38	; 0x26
    1a18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	9a a3       	std	Y+34, r25	; 0x22
    1a22:	89 a3       	std	Y+33, r24	; 0x21
    1a24:	89 a1       	ldd	r24, Y+33	; 0x21
    1a26:	9a a1       	ldd	r25, Y+34	; 0x22
    1a28:	9e 8f       	std	Y+30, r25	; 0x1e
    1a2a:	8d 8f       	std	Y+29, r24	; 0x1d
    1a2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <LCD_VoidInit+0x232>
    1a34:	9e 8f       	std	Y+30, r25	; 0x1e
    1a36:	8d 8f       	std	Y+29, r24	; 0x1d
	//_delay_us(40);
	_delay_ms(1);
	// Display ON/OFF control
	LCD_VoidSendCommand(LCD_CursorON,lcd);
    1a38:	29 ad       	ldd	r18, Y+57	; 0x39
    1a3a:	3a ad       	ldd	r19, Y+58	; 0x3a
    1a3c:	8e e0       	ldi	r24, 0x0E	; 14
    1a3e:	b9 01       	movw	r22, r18
    1a40:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <LCD_VoidSendCommand>
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	a0 e8       	ldi	r26, 0x80	; 128
    1a4a:	bf e3       	ldi	r27, 0x3F	; 63
    1a4c:	89 8f       	std	Y+25, r24	; 0x19
    1a4e:	9a 8f       	std	Y+26, r25	; 0x1a
    1a50:	ab 8f       	std	Y+27, r26	; 0x1b
    1a52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a54:	69 8d       	ldd	r22, Y+25	; 0x19
    1a56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	4a e7       	ldi	r20, 0x7A	; 122
    1a62:	53 e4       	ldi	r21, 0x43	; 67
    1a64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	8d 8b       	std	Y+21, r24	; 0x15
    1a6e:	9e 8b       	std	Y+22, r25	; 0x16
    1a70:	af 8b       	std	Y+23, r26	; 0x17
    1a72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a74:	6d 89       	ldd	r22, Y+21	; 0x15
    1a76:	7e 89       	ldd	r23, Y+22	; 0x16
    1a78:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e8       	ldi	r20, 0x80	; 128
    1a82:	5f e3       	ldi	r21, 0x3F	; 63
    1a84:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a88:	88 23       	and	r24, r24
    1a8a:	2c f4       	brge	.+10     	; 0x1a96 <LCD_VoidInit+0x298>
		__ticks = 1;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	9c 8b       	std	Y+20, r25	; 0x14
    1a92:	8b 8b       	std	Y+19, r24	; 0x13
    1a94:	3f c0       	rjmp	.+126    	; 0x1b14 <LCD_VoidInit+0x316>
	else if (__tmp > 65535)
    1a96:	6d 89       	ldd	r22, Y+21	; 0x15
    1a98:	7e 89       	ldd	r23, Y+22	; 0x16
    1a9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	3f ef       	ldi	r19, 0xFF	; 255
    1aa2:	4f e7       	ldi	r20, 0x7F	; 127
    1aa4:	57 e4       	ldi	r21, 0x47	; 71
    1aa6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1aaa:	18 16       	cp	r1, r24
    1aac:	4c f5       	brge	.+82     	; 0x1b00 <LCD_VoidInit+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aae:	69 8d       	ldd	r22, Y+25	; 0x19
    1ab0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ab2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ab4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e2       	ldi	r20, 0x20	; 32
    1abc:	51 e4       	ldi	r21, 0x41	; 65
    1abe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	cd 01       	movw	r24, r26
    1aca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	9c 8b       	std	Y+20, r25	; 0x14
    1ad4:	8b 8b       	std	Y+19, r24	; 0x13
    1ad6:	0f c0       	rjmp	.+30     	; 0x1af6 <LCD_VoidInit+0x2f8>
    1ad8:	89 e1       	ldi	r24, 0x19	; 25
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	9a 8b       	std	Y+18, r25	; 0x12
    1ade:	89 8b       	std	Y+17, r24	; 0x11
    1ae0:	89 89       	ldd	r24, Y+17	; 0x11
    1ae2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <LCD_VoidInit+0x2e6>
    1ae8:	9a 8b       	std	Y+18, r25	; 0x12
    1aea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aec:	8b 89       	ldd	r24, Y+19	; 0x13
    1aee:	9c 89       	ldd	r25, Y+20	; 0x14
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	9c 8b       	std	Y+20, r25	; 0x14
    1af4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af6:	8b 89       	ldd	r24, Y+19	; 0x13
    1af8:	9c 89       	ldd	r25, Y+20	; 0x14
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	69 f7       	brne	.-38     	; 0x1ad8 <LCD_VoidInit+0x2da>
    1afe:	14 c0       	rjmp	.+40     	; 0x1b28 <LCD_VoidInit+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b00:	6d 89       	ldd	r22, Y+21	; 0x15
    1b02:	7e 89       	ldd	r23, Y+22	; 0x16
    1b04:	8f 89       	ldd	r24, Y+23	; 0x17
    1b06:	98 8d       	ldd	r25, Y+24	; 0x18
    1b08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	9c 8b       	std	Y+20, r25	; 0x14
    1b12:	8b 8b       	std	Y+19, r24	; 0x13
    1b14:	8b 89       	ldd	r24, Y+19	; 0x13
    1b16:	9c 89       	ldd	r25, Y+20	; 0x14
    1b18:	98 8b       	std	Y+16, r25	; 0x10
    1b1a:	8f 87       	std	Y+15, r24	; 0x0f
    1b1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b1e:	98 89       	ldd	r25, Y+16	; 0x10
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	f1 f7       	brne	.-4      	; 0x1b20 <LCD_VoidInit+0x322>
    1b24:	98 8b       	std	Y+16, r25	; 0x10
    1b26:	8f 87       	std	Y+15, r24	; 0x0f
	//_delay_us(40);
	_delay_ms(1);
	// Display Clear
	LCD_VoidSendCommand(LCD_ClearDisplay,lcd);
    1b28:	29 ad       	ldd	r18, Y+57	; 0x39
    1b2a:	3a ad       	ldd	r19, Y+58	; 0x3a
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	b9 01       	movw	r22, r18
    1b30:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <LCD_VoidSendCommand>
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	a0 e0       	ldi	r26, 0x00	; 0
    1b3a:	b0 e4       	ldi	r27, 0x40	; 64
    1b3c:	8b 87       	std	Y+11, r24	; 0x0b
    1b3e:	9c 87       	std	Y+12, r25	; 0x0c
    1b40:	ad 87       	std	Y+13, r26	; 0x0d
    1b42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	4a e7       	ldi	r20, 0x7A	; 122
    1b52:	53 e4       	ldi	r21, 0x43	; 67
    1b54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	8f 83       	std	Y+7, r24	; 0x07
    1b5e:	98 87       	std	Y+8, r25	; 0x08
    1b60:	a9 87       	std	Y+9, r26	; 0x09
    1b62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b64:	6f 81       	ldd	r22, Y+7	; 0x07
    1b66:	78 85       	ldd	r23, Y+8	; 0x08
    1b68:	89 85       	ldd	r24, Y+9	; 0x09
    1b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	40 e8       	ldi	r20, 0x80	; 128
    1b72:	5f e3       	ldi	r21, 0x3F	; 63
    1b74:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b78:	88 23       	and	r24, r24
    1b7a:	2c f4       	brge	.+10     	; 0x1b86 <LCD_VoidInit+0x388>
		__ticks = 1;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	9e 83       	std	Y+6, r25	; 0x06
    1b82:	8d 83       	std	Y+5, r24	; 0x05
    1b84:	3f c0       	rjmp	.+126    	; 0x1c04 <LCD_VoidInit+0x406>
	else if (__tmp > 65535)
    1b86:	6f 81       	ldd	r22, Y+7	; 0x07
    1b88:	78 85       	ldd	r23, Y+8	; 0x08
    1b8a:	89 85       	ldd	r24, Y+9	; 0x09
    1b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	3f ef       	ldi	r19, 0xFF	; 255
    1b92:	4f e7       	ldi	r20, 0x7F	; 127
    1b94:	57 e4       	ldi	r21, 0x47	; 71
    1b96:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b9a:	18 16       	cp	r1, r24
    1b9c:	4c f5       	brge	.+82     	; 0x1bf0 <LCD_VoidInit+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e2       	ldi	r20, 0x20	; 32
    1bac:	51 e4       	ldi	r21, 0x41	; 65
    1bae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	bc 01       	movw	r22, r24
    1bb8:	cd 01       	movw	r24, r26
    1bba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	9e 83       	std	Y+6, r25	; 0x06
    1bc4:	8d 83       	std	Y+5, r24	; 0x05
    1bc6:	0f c0       	rjmp	.+30     	; 0x1be6 <LCD_VoidInit+0x3e8>
    1bc8:	89 e1       	ldi	r24, 0x19	; 25
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	9c 83       	std	Y+4, r25	; 0x04
    1bce:	8b 83       	std	Y+3, r24	; 0x03
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <LCD_VoidInit+0x3d6>
    1bd8:	9c 83       	std	Y+4, r25	; 0x04
    1bda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bde:	9e 81       	ldd	r25, Y+6	; 0x06
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	9e 83       	std	Y+6, r25	; 0x06
    1be4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be6:	8d 81       	ldd	r24, Y+5	; 0x05
    1be8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	69 f7       	brne	.-38     	; 0x1bc8 <LCD_VoidInit+0x3ca>
    1bee:	14 c0       	rjmp	.+40     	; 0x1c18 <LCD_VoidInit+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf2:	78 85       	ldd	r23, Y+8	; 0x08
    1bf4:	89 85       	ldd	r24, Y+9	; 0x09
    1bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	9e 83       	std	Y+6, r25	; 0x06
    1c02:	8d 83       	std	Y+5, r24	; 0x05
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <LCD_VoidInit+0x412>
    1c14:	9a 83       	std	Y+2, r25	; 0x02
    1c16:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);


}	
    1c18:	ea 96       	adiw	r28, 0x3a	; 58
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <LCD_VoidGoToXY>:


void LCD_VoidGoToXY(u8 Local_XPosition,u8 Local_YPosition, Lcd_info* lcd)
{
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	00 d0       	rcall	.+0      	; 0x1c30 <LCD_VoidGoToXY+0x6>
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <LCD_VoidGoToXY+0x8>
    1c32:	0f 92       	push	r0
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	8a 83       	std	Y+2, r24	; 0x02
    1c3a:	6b 83       	std	Y+3, r22	; 0x03
    1c3c:	5d 83       	std	Y+5, r21	; 0x05
    1c3e:	4c 83       	std	Y+4, r20	; 0x04
	// x_pos from 0 to 1
	// y_pos from 0 to 15
	u8 Adress = 0 ;
    1c40:	19 82       	std	Y+1, r1	; 0x01
	if (0 == Local_XPosition)
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	88 23       	and	r24, r24
    1c46:	19 f4       	brne	.+6      	; 0x1c4e <LCD_VoidGoToXY+0x24>
	{
		Adress = LCD_FirstLine + LCD_SetAddressDDRAM;
    1c48:	80 e8       	ldi	r24, 0x80	; 128
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	05 c0       	rjmp	.+10     	; 0x1c58 <LCD_VoidGoToXY+0x2e>
	}
	else if (1 == Local_XPosition)
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	81 30       	cpi	r24, 0x01	; 1
    1c52:	11 f4       	brne	.+4      	; 0x1c58 <LCD_VoidGoToXY+0x2e>
	{
		Adress = LCD_SecoundLine + LCD_SetAddressDDRAM;
    1c54:	80 ec       	ldi	r24, 0xC0	; 192
    1c56:	89 83       	std	Y+1, r24	; 0x01
	}
	if (Local_YPosition < 16)
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	80 31       	cpi	r24, 0x10	; 16
    1c5c:	20 f4       	brcc	.+8      	; 0x1c66 <LCD_VoidGoToXY+0x3c>
	{
		Adress += Local_YPosition ;
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9b 81       	ldd	r25, Y+3	; 0x03
    1c62:	89 0f       	add	r24, r25
    1c64:	89 83       	std	Y+1, r24	; 0x01
	}
	else{/*error*/}

	LCD_VoidSendCommand(Adress,lcd) ;
    1c66:	2c 81       	ldd	r18, Y+4	; 0x04
    1c68:	3d 81       	ldd	r19, Y+5	; 0x05
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	b9 01       	movw	r22, r18
    1c6e:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <LCD_VoidSendCommand>

}
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <LCD_VoidSendString>:


void LCD_VoidSendString(u8 *Address_String, Lcd_info* lcd)
{
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <LCD_VoidSendString+0x6>
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <LCD_VoidSendString+0x8>
    1c8a:	0f 92       	push	r0
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	9b 83       	std	Y+3, r25	; 0x03
    1c92:	8a 83       	std	Y+2, r24	; 0x02
    1c94:	7d 83       	std	Y+5, r23	; 0x05
    1c96:	6c 83       	std	Y+4, r22	; 0x04
	u8 stringCounter=0;
    1c98:	19 82       	std	Y+1, r1	; 0x01
    1c9a:	11 c0       	rjmp	.+34     	; 0x1cbe <LCD_VoidSendString+0x3c>
	for(;Address_String[stringCounter] != '\0'; stringCounter++ )
	{
		LCD_VoidSendChar(Address_String[stringCounter],lcd);
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	e2 0f       	add	r30, r18
    1caa:	f3 1f       	adc	r31, r19
    1cac:	80 81       	ld	r24, Z
    1cae:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cb2:	b9 01       	movw	r22, r18
    1cb4:	0e 94 44 10 	call	0x2088	; 0x2088 <LCD_VoidSendChar>


void LCD_VoidSendString(u8 *Address_String, Lcd_info* lcd)
{
	u8 stringCounter=0;
	for(;Address_String[stringCounter] != '\0'; stringCounter++ )
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	8f 5f       	subi	r24, 0xFF	; 255
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	28 2f       	mov	r18, r24
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc8:	fc 01       	movw	r30, r24
    1cca:	e2 0f       	add	r30, r18
    1ccc:	f3 1f       	adc	r31, r19
    1cce:	80 81       	ld	r24, Z
    1cd0:	88 23       	and	r24, r24
    1cd2:	21 f7       	brne	.-56     	; 0x1c9c <LCD_VoidSendString+0x1a>
	{
		LCD_VoidSendChar(Address_String[stringCounter],lcd);
	}
}
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <LCD_voidSendNum>:


void LCD_voidSendNum(s16 Copy_Num, Lcd_info* lcd)
 {
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	69 97       	sbiw	r28, 0x19	; 25
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
    1cf8:	9f 8b       	std	Y+23, r25	; 0x17
    1cfa:	8e 8b       	std	Y+22, r24	; 0x16
    1cfc:	79 8f       	std	Y+25, r23	; 0x19
    1cfe:	68 8f       	std	Y+24, r22	; 0x18
    u8 i,j,c,ArrCount,s[15];
	s16 sign;
	i = 0;
    1d00:	1e 82       	std	Y+6, r1	; 0x06
	ArrCount = 0;
    1d02:	1b 82       	std	Y+3, r1	; 0x03
	sign = Copy_Num;
    1d04:	8e 89       	ldd	r24, Y+22	; 0x16
    1d06:	9f 89       	ldd	r25, Y+23	; 0x17
    1d08:	9a 83       	std	Y+2, r25	; 0x02
    1d0a:	89 83       	std	Y+1, r24	; 0x01
	if (sign < 0)  /* record sign */
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d10:	99 23       	and	r25, r25
    1d12:	3c f4       	brge	.+14     	; 0x1d22 <LCD_voidSendNum+0x3e>
	{
	 Copy_Num = -Copy_Num;          /* make the NUM positive */
    1d14:	8e 89       	ldd	r24, Y+22	; 0x16
    1d16:	9f 89       	ldd	r25, Y+23	; 0x17
    1d18:	90 95       	com	r25
    1d1a:	81 95       	neg	r24
    1d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1e:	9f 8b       	std	Y+23, r25	; 0x17
    1d20:	8e 8b       	std	Y+22, r24	; 0x16
	}

	do {                       /* Convert NUM to ASCII in reverse order */

	 s[i] = (Copy_Num % 10) + '0';
    1d22:	8e 81       	ldd	r24, Y+6	; 0x06
    1d24:	e8 2f       	mov	r30, r24
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	8e 89       	ldd	r24, Y+22	; 0x16
    1d2a:	9f 89       	ldd	r25, Y+23	; 0x17
    1d2c:	2a e0       	ldi	r18, 0x0A	; 10
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	b9 01       	movw	r22, r18
    1d32:	0e 94 bb 11 	call	0x2376	; 0x2376 <__divmodhi4>
    1d36:	28 2f       	mov	r18, r24
    1d38:	20 5d       	subi	r18, 0xD0	; 208
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	07 96       	adiw	r24, 0x07	; 7
    1d3e:	e8 0f       	add	r30, r24
    1d40:	f9 1f       	adc	r31, r25
    1d42:	20 83       	st	Z, r18
	 i++;
    1d44:	8e 81       	ldd	r24, Y+6	; 0x06
    1d46:	8f 5f       	subi	r24, 0xFF	; 255
    1d48:	8e 83       	std	Y+6, r24	; 0x06

	 } while ((Copy_Num /= 10) > 0);
    1d4a:	8e 89       	ldd	r24, Y+22	; 0x16
    1d4c:	9f 89       	ldd	r25, Y+23	; 0x17
    1d4e:	2a e0       	ldi	r18, 0x0A	; 10
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	b9 01       	movw	r22, r18
    1d54:	0e 94 bb 11 	call	0x2376	; 0x2376 <__divmodhi4>
    1d58:	cb 01       	movw	r24, r22
    1d5a:	9f 8b       	std	Y+23, r25	; 0x17
    1d5c:	8e 8b       	std	Y+22, r24	; 0x16
    1d5e:	8e 89       	ldd	r24, Y+22	; 0x16
    1d60:	9f 89       	ldd	r25, Y+23	; 0x17
    1d62:	18 16       	cp	r1, r24
    1d64:	19 06       	cpc	r1, r25
    1d66:	ec f2       	brlt	.-70     	; 0x1d22 <LCD_voidSendNum+0x3e>

	if (sign < 0)      /* putting sign */
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
    1d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6c:	99 23       	and	r25, r25
    1d6e:	6c f4       	brge	.+26     	; 0x1d8a <LCD_voidSendNum+0xa6>
	{
		s[i++] = '-';
    1d70:	8e 81       	ldd	r24, Y+6	; 0x06
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	ce 01       	movw	r24, r28
    1d78:	07 96       	adiw	r24, 0x07	; 7
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	e2 0f       	add	r30, r18
    1d7e:	f3 1f       	adc	r31, r19
    1d80:	8d e2       	ldi	r24, 0x2D	; 45
    1d82:	80 83       	st	Z, r24
    1d84:	8e 81       	ldd	r24, Y+6	; 0x06
    1d86:	8f 5f       	subi	r24, 0xFF	; 255
    1d88:	8e 83       	std	Y+6, r24	; 0x06
	}

	ArrCount=i;
    1d8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d8c:	8b 83       	std	Y+3, r24	; 0x03
	j=ArrCount-1;
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	81 50       	subi	r24, 0x01	; 1
    1d92:	8d 83       	std	Y+5, r24	; 0x05
	for (i = 0; i<j; i++, j--) /* reversing the array to make the NUM in order */
    1d94:	1e 82       	std	Y+6, r1	; 0x06
    1d96:	2c c0       	rjmp	.+88     	; 0x1df0 <LCD_voidSendNum+0x10c>
	{
	  c = s[i];
    1d98:	8e 81       	ldd	r24, Y+6	; 0x06
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	ce 01       	movw	r24, r28
    1da0:	07 96       	adiw	r24, 0x07	; 7
    1da2:	fc 01       	movw	r30, r24
    1da4:	e2 0f       	add	r30, r18
    1da6:	f3 1f       	adc	r31, r19
    1da8:	80 81       	ld	r24, Z
    1daa:	8c 83       	std	Y+4, r24	; 0x04
	  s[i] = s[j];
    1dac:	8e 81       	ldd	r24, Y+6	; 0x06
    1dae:	48 2f       	mov	r20, r24
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	8d 81       	ldd	r24, Y+5	; 0x05
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	ce 01       	movw	r24, r28
    1dba:	07 96       	adiw	r24, 0x07	; 7
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	e2 0f       	add	r30, r18
    1dc0:	f3 1f       	adc	r31, r19
    1dc2:	20 81       	ld	r18, Z
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	07 96       	adiw	r24, 0x07	; 7
    1dc8:	fc 01       	movw	r30, r24
    1dca:	e4 0f       	add	r30, r20
    1dcc:	f5 1f       	adc	r31, r21
    1dce:	20 83       	st	Z, r18
	  s[j] = c;
    1dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	07 96       	adiw	r24, 0x07	; 7
    1dda:	fc 01       	movw	r30, r24
    1ddc:	e2 0f       	add	r30, r18
    1dde:	f3 1f       	adc	r31, r19
    1de0:	8c 81       	ldd	r24, Y+4	; 0x04
    1de2:	80 83       	st	Z, r24
		s[i++] = '-';
	}

	ArrCount=i;
	j=ArrCount-1;
	for (i = 0; i<j; i++, j--) /* reversing the array to make the NUM in order */
    1de4:	8e 81       	ldd	r24, Y+6	; 0x06
    1de6:	8f 5f       	subi	r24, 0xFF	; 255
    1de8:	8e 83       	std	Y+6, r24	; 0x06
    1dea:	8d 81       	ldd	r24, Y+5	; 0x05
    1dec:	81 50       	subi	r24, 0x01	; 1
    1dee:	8d 83       	std	Y+5, r24	; 0x05
    1df0:	9e 81       	ldd	r25, Y+6	; 0x06
    1df2:	8d 81       	ldd	r24, Y+5	; 0x05
    1df4:	98 17       	cp	r25, r24
    1df6:	80 f2       	brcs	.-96     	; 0x1d98 <LCD_voidSendNum+0xb4>
	  c = s[i];
	  s[i] = s[j];
	  s[j] = c;
	}

	for (i = 0; i<ArrCount; i++) /* PRINTNIG the NUM */
    1df8:	1e 82       	std	Y+6, r1	; 0x06
    1dfa:	11 c0       	rjmp	.+34     	; 0x1e1e <LCD_voidSendNum+0x13a>
	{
		LCD_VoidSendChar (s[i],lcd);
    1dfc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	ce 01       	movw	r24, r28
    1e04:	07 96       	adiw	r24, 0x07	; 7
    1e06:	fc 01       	movw	r30, r24
    1e08:	e2 0f       	add	r30, r18
    1e0a:	f3 1f       	adc	r31, r19
    1e0c:	80 81       	ld	r24, Z
    1e0e:	28 8d       	ldd	r18, Y+24	; 0x18
    1e10:	39 8d       	ldd	r19, Y+25	; 0x19
    1e12:	b9 01       	movw	r22, r18
    1e14:	0e 94 44 10 	call	0x2088	; 0x2088 <LCD_VoidSendChar>
	  c = s[i];
	  s[i] = s[j];
	  s[j] = c;
	}

	for (i = 0; i<ArrCount; i++) /* PRINTNIG the NUM */
    1e18:	8e 81       	ldd	r24, Y+6	; 0x06
    1e1a:	8f 5f       	subi	r24, 0xFF	; 255
    1e1c:	8e 83       	std	Y+6, r24	; 0x06
    1e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	98 17       	cp	r25, r24
    1e24:	58 f3       	brcs	.-42     	; 0x1dfc <LCD_voidSendNum+0x118>
	{
		LCD_VoidSendChar (s[i],lcd);
	}


 }
    1e26:	69 96       	adiw	r28, 0x19	; 25
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	08 95       	ret

00001e38 <LCD_VoidSendCommand>:

void LCD_VoidSendCommand(u8 Copy_Command, Lcd_info* lcd)
{
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	6f 97       	sbiw	r28, 0x1f	; 31
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	de bf       	out	0x3e, r29	; 62
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	cd bf       	out	0x3d, r28	; 61
    1e4c:	8d 8f       	std	Y+29, r24	; 0x1d
    1e4e:	7f 8f       	std	Y+31, r23	; 0x1f
    1e50:	6e 8f       	std	Y+30, r22	; 0x1e
	
	// RS=0 to send a Command and RS=1 to send Instraction
	DIO_ErrStateSetPinValue (lcd->Rs_Group,lcd->Rs_Pin,DIO_Low);
    1e52:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1e54:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1e56:	80 81       	ld	r24, Z
    1e58:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1e5a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1e5c:	91 81       	ldd	r25, Z+1	; 0x01
    1e5e:	69 2f       	mov	r22, r25
    1e60:	40 e0       	ldi	r20, 0x00	; 0
    1e62:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_ErrStateSetPinValue>
	// RW=0 to Write and RW=1 to Read
	DIO_ErrStateSetPinValue (lcd->Rw_Group,lcd->Rw_Pin,DIO_Low);
    1e66:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1e68:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1e6a:	82 81       	ldd	r24, Z+2	; 0x02
    1e6c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1e6e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1e70:	93 81       	ldd	r25, Z+3	; 0x03
    1e72:	69 2f       	mov	r22, r25
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_ErrStateSetPinValue>
	// Write Command
	DIO_ErrStateSetGroupValue(lcd->Data_Group,Copy_Command);
    1e7a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1e7c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1e7e:	86 81       	ldd	r24, Z+6	; 0x06
    1e80:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e82:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetGroupValue>
	// Enable=1 for 230 nano secounds 
	DIO_ErrStateSetPinValue (lcd->E_Group,lcd->E_Pin,DIO_High);
    1e86:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1e88:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1e8a:	84 81       	ldd	r24, Z+4	; 0x04
    1e8c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1e8e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1e90:	95 81       	ldd	r25, Z+5	; 0x05
    1e92:	69 2f       	mov	r22, r25
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_ErrStateSetPinValue>
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	a0 e8       	ldi	r26, 0x80	; 128
    1ea0:	bf e3       	ldi	r27, 0x3F	; 63
    1ea2:	89 8f       	std	Y+25, r24	; 0x19
    1ea4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ea6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ea8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eaa:	69 8d       	ldd	r22, Y+25	; 0x19
    1eac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	4a e7       	ldi	r20, 0x7A	; 122
    1eb8:	53 e4       	ldi	r21, 0x43	; 67
    1eba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	8d 8b       	std	Y+21, r24	; 0x15
    1ec4:	9e 8b       	std	Y+22, r25	; 0x16
    1ec6:	af 8b       	std	Y+23, r26	; 0x17
    1ec8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1eca:	6d 89       	ldd	r22, Y+21	; 0x15
    1ecc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ece:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e8       	ldi	r20, 0x80	; 128
    1ed8:	5f e3       	ldi	r21, 0x3F	; 63
    1eda:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ede:	88 23       	and	r24, r24
    1ee0:	2c f4       	brge	.+10     	; 0x1eec <LCD_VoidSendCommand+0xb4>
		__ticks = 1;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	9c 8b       	std	Y+20, r25	; 0x14
    1ee8:	8b 8b       	std	Y+19, r24	; 0x13
    1eea:	3f c0       	rjmp	.+126    	; 0x1f6a <LCD_VoidSendCommand+0x132>
	else if (__tmp > 65535)
    1eec:	6d 89       	ldd	r22, Y+21	; 0x15
    1eee:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	3f ef       	ldi	r19, 0xFF	; 255
    1ef8:	4f e7       	ldi	r20, 0x7F	; 127
    1efa:	57 e4       	ldi	r21, 0x47	; 71
    1efc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f00:	18 16       	cp	r1, r24
    1f02:	4c f5       	brge	.+82     	; 0x1f56 <LCD_VoidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f04:	69 8d       	ldd	r22, Y+25	; 0x19
    1f06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e2       	ldi	r20, 0x20	; 32
    1f12:	51 e4       	ldi	r21, 0x41	; 65
    1f14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	bc 01       	movw	r22, r24
    1f1e:	cd 01       	movw	r24, r26
    1f20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	9c 8b       	std	Y+20, r25	; 0x14
    1f2a:	8b 8b       	std	Y+19, r24	; 0x13
    1f2c:	0f c0       	rjmp	.+30     	; 0x1f4c <LCD_VoidSendCommand+0x114>
    1f2e:	89 e1       	ldi	r24, 0x19	; 25
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	9a 8b       	std	Y+18, r25	; 0x12
    1f34:	89 8b       	std	Y+17, r24	; 0x11
    1f36:	89 89       	ldd	r24, Y+17	; 0x11
    1f38:	9a 89       	ldd	r25, Y+18	; 0x12
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <LCD_VoidSendCommand+0x102>
    1f3e:	9a 8b       	std	Y+18, r25	; 0x12
    1f40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f42:	8b 89       	ldd	r24, Y+19	; 0x13
    1f44:	9c 89       	ldd	r25, Y+20	; 0x14
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	9c 8b       	std	Y+20, r25	; 0x14
    1f4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	69 f7       	brne	.-38     	; 0x1f2e <LCD_VoidSendCommand+0xf6>
    1f54:	14 c0       	rjmp	.+40     	; 0x1f7e <LCD_VoidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f56:	6d 89       	ldd	r22, Y+21	; 0x15
    1f58:	7e 89       	ldd	r23, Y+22	; 0x16
    1f5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	9c 8b       	std	Y+20, r25	; 0x14
    1f68:	8b 8b       	std	Y+19, r24	; 0x13
    1f6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f6e:	98 8b       	std	Y+16, r25	; 0x10
    1f70:	8f 87       	std	Y+15, r24	; 0x0f
    1f72:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f74:	98 89       	ldd	r25, Y+16	; 0x10
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	f1 f7       	brne	.-4      	; 0x1f76 <LCD_VoidSendCommand+0x13e>
    1f7a:	98 8b       	std	Y+16, r25	; 0x10
    1f7c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ErrStateSetPinValue (lcd->E_Group,lcd->E_Pin,DIO_Low);
    1f7e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1f80:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1f82:	84 81       	ldd	r24, Z+4	; 0x04
    1f84:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1f86:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1f88:	95 81       	ldd	r25, Z+5	; 0x05
    1f8a:	69 2f       	mov	r22, r25
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_ErrStateSetPinValue>
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	a0 e8       	ldi	r26, 0x80	; 128
    1f98:	bf e3       	ldi	r27, 0x3F	; 63
    1f9a:	8b 87       	std	Y+11, r24	; 0x0b
    1f9c:	9c 87       	std	Y+12, r25	; 0x0c
    1f9e:	ad 87       	std	Y+13, r26	; 0x0d
    1fa0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	4a e7       	ldi	r20, 0x7A	; 122
    1fb0:	53 e4       	ldi	r21, 0x43	; 67
    1fb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	8f 83       	std	Y+7, r24	; 0x07
    1fbc:	98 87       	std	Y+8, r25	; 0x08
    1fbe:	a9 87       	std	Y+9, r26	; 0x09
    1fc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc4:	78 85       	ldd	r23, Y+8	; 0x08
    1fc6:	89 85       	ldd	r24, Y+9	; 0x09
    1fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e8       	ldi	r20, 0x80	; 128
    1fd0:	5f e3       	ldi	r21, 0x3F	; 63
    1fd2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fd6:	88 23       	and	r24, r24
    1fd8:	2c f4       	brge	.+10     	; 0x1fe4 <LCD_VoidSendCommand+0x1ac>
		__ticks = 1;
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	9e 83       	std	Y+6, r25	; 0x06
    1fe0:	8d 83       	std	Y+5, r24	; 0x05
    1fe2:	3f c0       	rjmp	.+126    	; 0x2062 <LCD_VoidSendCommand+0x22a>
	else if (__tmp > 65535)
    1fe4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe6:	78 85       	ldd	r23, Y+8	; 0x08
    1fe8:	89 85       	ldd	r24, Y+9	; 0x09
    1fea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	3f ef       	ldi	r19, 0xFF	; 255
    1ff0:	4f e7       	ldi	r20, 0x7F	; 127
    1ff2:	57 e4       	ldi	r21, 0x47	; 71
    1ff4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ff8:	18 16       	cp	r1, r24
    1ffa:	4c f5       	brge	.+82     	; 0x204e <LCD_VoidSendCommand+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ffe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2000:	8d 85       	ldd	r24, Y+13	; 0x0d
    2002:	9e 85       	ldd	r25, Y+14	; 0x0e
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e2       	ldi	r20, 0x20	; 32
    200a:	51 e4       	ldi	r21, 0x41	; 65
    200c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	bc 01       	movw	r22, r24
    2016:	cd 01       	movw	r24, r26
    2018:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	9e 83       	std	Y+6, r25	; 0x06
    2022:	8d 83       	std	Y+5, r24	; 0x05
    2024:	0f c0       	rjmp	.+30     	; 0x2044 <LCD_VoidSendCommand+0x20c>
    2026:	89 e1       	ldi	r24, 0x19	; 25
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	9c 83       	std	Y+4, r25	; 0x04
    202c:	8b 83       	std	Y+3, r24	; 0x03
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	9c 81       	ldd	r25, Y+4	; 0x04
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	f1 f7       	brne	.-4      	; 0x2032 <LCD_VoidSendCommand+0x1fa>
    2036:	9c 83       	std	Y+4, r25	; 0x04
    2038:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203a:	8d 81       	ldd	r24, Y+5	; 0x05
    203c:	9e 81       	ldd	r25, Y+6	; 0x06
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	9e 83       	std	Y+6, r25	; 0x06
    2042:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2044:	8d 81       	ldd	r24, Y+5	; 0x05
    2046:	9e 81       	ldd	r25, Y+6	; 0x06
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	69 f7       	brne	.-38     	; 0x2026 <LCD_VoidSendCommand+0x1ee>
    204c:	14 c0       	rjmp	.+40     	; 0x2076 <LCD_VoidSendCommand+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204e:	6f 81       	ldd	r22, Y+7	; 0x07
    2050:	78 85       	ldd	r23, Y+8	; 0x08
    2052:	89 85       	ldd	r24, Y+9	; 0x09
    2054:	9a 85       	ldd	r25, Y+10	; 0x0a
    2056:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	9e 83       	std	Y+6, r25	; 0x06
    2060:	8d 83       	std	Y+5, r24	; 0x05
    2062:	8d 81       	ldd	r24, Y+5	; 0x05
    2064:	9e 81       	ldd	r25, Y+6	; 0x06
    2066:	9a 83       	std	Y+2, r25	; 0x02
    2068:	89 83       	std	Y+1, r24	; 0x01
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	9a 81       	ldd	r25, Y+2	; 0x02
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <LCD_VoidSendCommand+0x236>
    2072:	9a 83       	std	Y+2, r25	; 0x02
    2074:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
}
    2076:	6f 96       	adiw	r28, 0x1f	; 31
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <LCD_VoidSendChar>:

void LCD_VoidSendChar(u8 Copy_Char, Lcd_info* lcd)
{
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	6f 97       	sbiw	r28, 0x1f	; 31
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	8d 8f       	std	Y+29, r24	; 0x1d
    209e:	7f 8f       	std	Y+31, r23	; 0x1f
    20a0:	6e 8f       	std	Y+30, r22	; 0x1e
	
	// RS=0 to send a Command and RS=1 to send Data
	DIO_ErrStateSetPinValue (lcd->Rs_Group,lcd->Rs_Pin,DIO_High);
    20a2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    20a4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    20a6:	80 81       	ld	r24, Z
    20a8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    20aa:	ff 8d       	ldd	r31, Y+31	; 0x1f
    20ac:	91 81       	ldd	r25, Z+1	; 0x01
    20ae:	69 2f       	mov	r22, r25
    20b0:	41 e0       	ldi	r20, 0x01	; 1
    20b2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_ErrStateSetPinValue>
	// RW=0 to Write and RW=1 to Read
	DIO_ErrStateSetPinValue (lcd->Rw_Group,lcd->Rw_Pin,DIO_Low);
    20b6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    20b8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    20ba:	82 81       	ldd	r24, Z+2	; 0x02
    20bc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    20be:	ff 8d       	ldd	r31, Y+31	; 0x1f
    20c0:	93 81       	ldd	r25, Z+3	; 0x03
    20c2:	69 2f       	mov	r22, r25
    20c4:	40 e0       	ldi	r20, 0x00	; 0
    20c6:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_ErrStateSetPinValue>
	// Write Data
	DIO_ErrStateSetGroupValue(lcd->Data_Group,Copy_Char);
    20ca:	ee 8d       	ldd	r30, Y+30	; 0x1e
    20cc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    20ce:	86 81       	ldd	r24, Z+6	; 0x06
    20d0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    20d2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetGroupValue>
	// Enable=1 for 230 nano secounds 
	DIO_ErrStateSetPinValue (lcd->E_Group,lcd->E_Pin,DIO_High);
    20d6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    20d8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    20da:	84 81       	ldd	r24, Z+4	; 0x04
    20dc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    20de:	ff 8d       	ldd	r31, Y+31	; 0x1f
    20e0:	95 81       	ldd	r25, Z+5	; 0x05
    20e2:	69 2f       	mov	r22, r25
    20e4:	41 e0       	ldi	r20, 0x01	; 1
    20e6:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_ErrStateSetPinValue>
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	a0 e8       	ldi	r26, 0x80	; 128
    20f0:	bf e3       	ldi	r27, 0x3F	; 63
    20f2:	89 8f       	std	Y+25, r24	; 0x19
    20f4:	9a 8f       	std	Y+26, r25	; 0x1a
    20f6:	ab 8f       	std	Y+27, r26	; 0x1b
    20f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fa:	69 8d       	ldd	r22, Y+25	; 0x19
    20fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2100:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	4a e7       	ldi	r20, 0x7A	; 122
    2108:	53 e4       	ldi	r21, 0x43	; 67
    210a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	8d 8b       	std	Y+21, r24	; 0x15
    2114:	9e 8b       	std	Y+22, r25	; 0x16
    2116:	af 8b       	std	Y+23, r26	; 0x17
    2118:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    211a:	6d 89       	ldd	r22, Y+21	; 0x15
    211c:	7e 89       	ldd	r23, Y+22	; 0x16
    211e:	8f 89       	ldd	r24, Y+23	; 0x17
    2120:	98 8d       	ldd	r25, Y+24	; 0x18
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e8       	ldi	r20, 0x80	; 128
    2128:	5f e3       	ldi	r21, 0x3F	; 63
    212a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    212e:	88 23       	and	r24, r24
    2130:	2c f4       	brge	.+10     	; 0x213c <LCD_VoidSendChar+0xb4>
		__ticks = 1;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	9c 8b       	std	Y+20, r25	; 0x14
    2138:	8b 8b       	std	Y+19, r24	; 0x13
    213a:	3f c0       	rjmp	.+126    	; 0x21ba <LCD_VoidSendChar+0x132>
	else if (__tmp > 65535)
    213c:	6d 89       	ldd	r22, Y+21	; 0x15
    213e:	7e 89       	ldd	r23, Y+22	; 0x16
    2140:	8f 89       	ldd	r24, Y+23	; 0x17
    2142:	98 8d       	ldd	r25, Y+24	; 0x18
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	3f ef       	ldi	r19, 0xFF	; 255
    2148:	4f e7       	ldi	r20, 0x7F	; 127
    214a:	57 e4       	ldi	r21, 0x47	; 71
    214c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2150:	18 16       	cp	r1, r24
    2152:	4c f5       	brge	.+82     	; 0x21a6 <LCD_VoidSendChar+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2154:	69 8d       	ldd	r22, Y+25	; 0x19
    2156:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2158:	8b 8d       	ldd	r24, Y+27	; 0x1b
    215a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e2       	ldi	r20, 0x20	; 32
    2162:	51 e4       	ldi	r21, 0x41	; 65
    2164:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	bc 01       	movw	r22, r24
    216e:	cd 01       	movw	r24, r26
    2170:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9c 8b       	std	Y+20, r25	; 0x14
    217a:	8b 8b       	std	Y+19, r24	; 0x13
    217c:	0f c0       	rjmp	.+30     	; 0x219c <LCD_VoidSendChar+0x114>
    217e:	89 e1       	ldi	r24, 0x19	; 25
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	9a 8b       	std	Y+18, r25	; 0x12
    2184:	89 8b       	std	Y+17, r24	; 0x11
    2186:	89 89       	ldd	r24, Y+17	; 0x11
    2188:	9a 89       	ldd	r25, Y+18	; 0x12
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <LCD_VoidSendChar+0x102>
    218e:	9a 8b       	std	Y+18, r25	; 0x12
    2190:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2192:	8b 89       	ldd	r24, Y+19	; 0x13
    2194:	9c 89       	ldd	r25, Y+20	; 0x14
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	9c 8b       	std	Y+20, r25	; 0x14
    219a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219c:	8b 89       	ldd	r24, Y+19	; 0x13
    219e:	9c 89       	ldd	r25, Y+20	; 0x14
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	69 f7       	brne	.-38     	; 0x217e <LCD_VoidSendChar+0xf6>
    21a4:	14 c0       	rjmp	.+40     	; 0x21ce <LCD_VoidSendChar+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a6:	6d 89       	ldd	r22, Y+21	; 0x15
    21a8:	7e 89       	ldd	r23, Y+22	; 0x16
    21aa:	8f 89       	ldd	r24, Y+23	; 0x17
    21ac:	98 8d       	ldd	r25, Y+24	; 0x18
    21ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9c 8b       	std	Y+20, r25	; 0x14
    21b8:	8b 8b       	std	Y+19, r24	; 0x13
    21ba:	8b 89       	ldd	r24, Y+19	; 0x13
    21bc:	9c 89       	ldd	r25, Y+20	; 0x14
    21be:	98 8b       	std	Y+16, r25	; 0x10
    21c0:	8f 87       	std	Y+15, r24	; 0x0f
    21c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c4:	98 89       	ldd	r25, Y+16	; 0x10
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <LCD_VoidSendChar+0x13e>
    21ca:	98 8b       	std	Y+16, r25	; 0x10
    21cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ErrStateSetPinValue (lcd->E_Group,lcd->E_Pin,DIO_Low);
    21ce:	ee 8d       	ldd	r30, Y+30	; 0x1e
    21d0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    21d2:	84 81       	ldd	r24, Z+4	; 0x04
    21d4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    21d6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    21d8:	95 81       	ldd	r25, Z+5	; 0x05
    21da:	69 2f       	mov	r22, r25
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_ErrStateSetPinValue>
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	a0 e8       	ldi	r26, 0x80	; 128
    21e8:	bf e3       	ldi	r27, 0x3F	; 63
    21ea:	8b 87       	std	Y+11, r24	; 0x0b
    21ec:	9c 87       	std	Y+12, r25	; 0x0c
    21ee:	ad 87       	std	Y+13, r26	; 0x0d
    21f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	4a e7       	ldi	r20, 0x7A	; 122
    2200:	53 e4       	ldi	r21, 0x43	; 67
    2202:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	8f 83       	std	Y+7, r24	; 0x07
    220c:	98 87       	std	Y+8, r25	; 0x08
    220e:	a9 87       	std	Y+9, r26	; 0x09
    2210:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2212:	6f 81       	ldd	r22, Y+7	; 0x07
    2214:	78 85       	ldd	r23, Y+8	; 0x08
    2216:	89 85       	ldd	r24, Y+9	; 0x09
    2218:	9a 85       	ldd	r25, Y+10	; 0x0a
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e8       	ldi	r20, 0x80	; 128
    2220:	5f e3       	ldi	r21, 0x3F	; 63
    2222:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2226:	88 23       	and	r24, r24
    2228:	2c f4       	brge	.+10     	; 0x2234 <LCD_VoidSendChar+0x1ac>
		__ticks = 1;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	9e 83       	std	Y+6, r25	; 0x06
    2230:	8d 83       	std	Y+5, r24	; 0x05
    2232:	3f c0       	rjmp	.+126    	; 0x22b2 <LCD_VoidSendChar+0x22a>
	else if (__tmp > 65535)
    2234:	6f 81       	ldd	r22, Y+7	; 0x07
    2236:	78 85       	ldd	r23, Y+8	; 0x08
    2238:	89 85       	ldd	r24, Y+9	; 0x09
    223a:	9a 85       	ldd	r25, Y+10	; 0x0a
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	3f ef       	ldi	r19, 0xFF	; 255
    2240:	4f e7       	ldi	r20, 0x7F	; 127
    2242:	57 e4       	ldi	r21, 0x47	; 71
    2244:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2248:	18 16       	cp	r1, r24
    224a:	4c f5       	brge	.+82     	; 0x229e <LCD_VoidSendChar+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224c:	6b 85       	ldd	r22, Y+11	; 0x0b
    224e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2250:	8d 85       	ldd	r24, Y+13	; 0x0d
    2252:	9e 85       	ldd	r25, Y+14	; 0x0e
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e2       	ldi	r20, 0x20	; 32
    225a:	51 e4       	ldi	r21, 0x41	; 65
    225c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	bc 01       	movw	r22, r24
    2266:	cd 01       	movw	r24, r26
    2268:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	9e 83       	std	Y+6, r25	; 0x06
    2272:	8d 83       	std	Y+5, r24	; 0x05
    2274:	0f c0       	rjmp	.+30     	; 0x2294 <LCD_VoidSendChar+0x20c>
    2276:	89 e1       	ldi	r24, 0x19	; 25
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	9c 83       	std	Y+4, r25	; 0x04
    227c:	8b 83       	std	Y+3, r24	; 0x03
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	9c 81       	ldd	r25, Y+4	; 0x04
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <LCD_VoidSendChar+0x1fa>
    2286:	9c 83       	std	Y+4, r25	; 0x04
    2288:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228a:	8d 81       	ldd	r24, Y+5	; 0x05
    228c:	9e 81       	ldd	r25, Y+6	; 0x06
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	9e 83       	std	Y+6, r25	; 0x06
    2292:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2294:	8d 81       	ldd	r24, Y+5	; 0x05
    2296:	9e 81       	ldd	r25, Y+6	; 0x06
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	69 f7       	brne	.-38     	; 0x2276 <LCD_VoidSendChar+0x1ee>
    229c:	14 c0       	rjmp	.+40     	; 0x22c6 <LCD_VoidSendChar+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229e:	6f 81       	ldd	r22, Y+7	; 0x07
    22a0:	78 85       	ldd	r23, Y+8	; 0x08
    22a2:	89 85       	ldd	r24, Y+9	; 0x09
    22a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	9e 83       	std	Y+6, r25	; 0x06
    22b0:	8d 83       	std	Y+5, r24	; 0x05
    22b2:	8d 81       	ldd	r24, Y+5	; 0x05
    22b4:	9e 81       	ldd	r25, Y+6	; 0x06
    22b6:	9a 83       	std	Y+2, r25	; 0x02
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	9a 81       	ldd	r25, Y+2	; 0x02
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <LCD_VoidSendChar+0x236>
    22c2:	9a 83       	std	Y+2, r25	; 0x02
    22c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
}		
    22c6:	6f 96       	adiw	r28, 0x1f	; 31
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	de bf       	out	0x3e, r29	; 62
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	cd bf       	out	0x3d, r28	; 61
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	08 95       	ret

000022d8 <main>:

#include "MCAL/DIO/DIO_Interface.h"
#include "HAL/LCD/LCD_interface.h"

void main()
{
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	2c 97       	sbiw	r28, 0x0c	; 12
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	f8 94       	cli
    22e6:	de bf       	out	0x3e, r29	; 62
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	cd bf       	out	0x3d, r28	; 61
	Pin0,
	DIO_GroupB,
	Pin1,
	DIO_GroupB,
	Pin2,
	DIO_GroupA};
    22ec:	ce 01       	movw	r24, r28
    22ee:	01 96       	adiw	r24, 0x01	; 1
    22f0:	99 87       	std	Y+9, r25	; 0x09
    22f2:	88 87       	std	Y+8, r24	; 0x08
    22f4:	e8 e7       	ldi	r30, 0x78	; 120
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	fb 87       	std	Y+11, r31	; 0x0b
    22fa:	ea 87       	std	Y+10, r30	; 0x0a
    22fc:	f7 e0       	ldi	r31, 0x07	; 7
    22fe:	fc 87       	std	Y+12, r31	; 0x0c
    2300:	ea 85       	ldd	r30, Y+10	; 0x0a
    2302:	fb 85       	ldd	r31, Y+11	; 0x0b
    2304:	00 80       	ld	r0, Z
    2306:	8a 85       	ldd	r24, Y+10	; 0x0a
    2308:	9b 85       	ldd	r25, Y+11	; 0x0b
    230a:	01 96       	adiw	r24, 0x01	; 1
    230c:	9b 87       	std	Y+11, r25	; 0x0b
    230e:	8a 87       	std	Y+10, r24	; 0x0a
    2310:	e8 85       	ldd	r30, Y+8	; 0x08
    2312:	f9 85       	ldd	r31, Y+9	; 0x09
    2314:	00 82       	st	Z, r0
    2316:	88 85       	ldd	r24, Y+8	; 0x08
    2318:	99 85       	ldd	r25, Y+9	; 0x09
    231a:	01 96       	adiw	r24, 0x01	; 1
    231c:	99 87       	std	Y+9, r25	; 0x09
    231e:	88 87       	std	Y+8, r24	; 0x08
    2320:	9c 85       	ldd	r25, Y+12	; 0x0c
    2322:	91 50       	subi	r25, 0x01	; 1
    2324:	9c 87       	std	Y+12, r25	; 0x0c
    2326:	ec 85       	ldd	r30, Y+12	; 0x0c
    2328:	ee 23       	and	r30, r30
    232a:	51 f7       	brne	.-44     	; 0x2300 <main+0x28>
	LCD_VoidInit(&lcdd);
    232c:	ce 01       	movw	r24, r28
    232e:	01 96       	adiw	r24, 0x01	; 1
    2330:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <LCD_VoidInit>
	LCD_VoidGoToXY(0,5,&lcdd);
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	65 e0       	ldi	r22, 0x05	; 5
    2338:	9e 01       	movw	r18, r28
    233a:	2f 5f       	subi	r18, 0xFF	; 255
    233c:	3f 4f       	sbci	r19, 0xFF	; 255
    233e:	a9 01       	movw	r20, r18
    2340:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_VoidGoToXY>
	LCD_VoidSendString("Samir",&lcdd);
    2344:	80 e6       	ldi	r24, 0x60	; 96
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	9e 01       	movw	r18, r28
    234a:	2f 5f       	subi	r18, 0xFF	; 255
    234c:	3f 4f       	sbci	r19, 0xFF	; 255
    234e:	b9 01       	movw	r22, r18
    2350:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <LCD_VoidSendString>
	LCD_VoidGoToXY(1,5,&lcdd);
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	65 e0       	ldi	r22, 0x05	; 5
    2358:	9e 01       	movw	r18, r28
    235a:	2f 5f       	subi	r18, 0xFF	; 255
    235c:	3f 4f       	sbci	r19, 0xFF	; 255
    235e:	a9 01       	movw	r20, r18
    2360:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_VoidGoToXY>
	LCD_voidSendNum(15,&lcdd);
    2364:	8f e0       	ldi	r24, 0x0F	; 15
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	9e 01       	movw	r18, r28
    236a:	2f 5f       	subi	r18, 0xFF	; 255
    236c:	3f 4f       	sbci	r19, 0xFF	; 255
    236e:	b9 01       	movw	r22, r18
    2370:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LCD_voidSendNum>
    2374:	ff cf       	rjmp	.-2      	; 0x2374 <main+0x9c>

00002376 <__divmodhi4>:
    2376:	97 fb       	bst	r25, 7
    2378:	09 2e       	mov	r0, r25
    237a:	07 26       	eor	r0, r23
    237c:	0a d0       	rcall	.+20     	; 0x2392 <__divmodhi4_neg1>
    237e:	77 fd       	sbrc	r23, 7
    2380:	04 d0       	rcall	.+8      	; 0x238a <__divmodhi4_neg2>
    2382:	0c d0       	rcall	.+24     	; 0x239c <__udivmodhi4>
    2384:	06 d0       	rcall	.+12     	; 0x2392 <__divmodhi4_neg1>
    2386:	00 20       	and	r0, r0
    2388:	1a f4       	brpl	.+6      	; 0x2390 <__divmodhi4_exit>

0000238a <__divmodhi4_neg2>:
    238a:	70 95       	com	r23
    238c:	61 95       	neg	r22
    238e:	7f 4f       	sbci	r23, 0xFF	; 255

00002390 <__divmodhi4_exit>:
    2390:	08 95       	ret

00002392 <__divmodhi4_neg1>:
    2392:	f6 f7       	brtc	.-4      	; 0x2390 <__divmodhi4_exit>
    2394:	90 95       	com	r25
    2396:	81 95       	neg	r24
    2398:	9f 4f       	sbci	r25, 0xFF	; 255
    239a:	08 95       	ret

0000239c <__udivmodhi4>:
    239c:	aa 1b       	sub	r26, r26
    239e:	bb 1b       	sub	r27, r27
    23a0:	51 e1       	ldi	r21, 0x11	; 17
    23a2:	07 c0       	rjmp	.+14     	; 0x23b2 <__udivmodhi4_ep>

000023a4 <__udivmodhi4_loop>:
    23a4:	aa 1f       	adc	r26, r26
    23a6:	bb 1f       	adc	r27, r27
    23a8:	a6 17       	cp	r26, r22
    23aa:	b7 07       	cpc	r27, r23
    23ac:	10 f0       	brcs	.+4      	; 0x23b2 <__udivmodhi4_ep>
    23ae:	a6 1b       	sub	r26, r22
    23b0:	b7 0b       	sbc	r27, r23

000023b2 <__udivmodhi4_ep>:
    23b2:	88 1f       	adc	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	5a 95       	dec	r21
    23b8:	a9 f7       	brne	.-22     	; 0x23a4 <__udivmodhi4_loop>
    23ba:	80 95       	com	r24
    23bc:	90 95       	com	r25
    23be:	bc 01       	movw	r22, r24
    23c0:	cd 01       	movw	r24, r26
    23c2:	08 95       	ret

000023c4 <__prologue_saves__>:
    23c4:	2f 92       	push	r2
    23c6:	3f 92       	push	r3
    23c8:	4f 92       	push	r4
    23ca:	5f 92       	push	r5
    23cc:	6f 92       	push	r6
    23ce:	7f 92       	push	r7
    23d0:	8f 92       	push	r8
    23d2:	9f 92       	push	r9
    23d4:	af 92       	push	r10
    23d6:	bf 92       	push	r11
    23d8:	cf 92       	push	r12
    23da:	df 92       	push	r13
    23dc:	ef 92       	push	r14
    23de:	ff 92       	push	r15
    23e0:	0f 93       	push	r16
    23e2:	1f 93       	push	r17
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	ca 1b       	sub	r28, r26
    23ee:	db 0b       	sbc	r29, r27
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	f8 94       	cli
    23f4:	de bf       	out	0x3e, r29	; 62
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	cd bf       	out	0x3d, r28	; 61
    23fa:	09 94       	ijmp

000023fc <__epilogue_restores__>:
    23fc:	2a 88       	ldd	r2, Y+18	; 0x12
    23fe:	39 88       	ldd	r3, Y+17	; 0x11
    2400:	48 88       	ldd	r4, Y+16	; 0x10
    2402:	5f 84       	ldd	r5, Y+15	; 0x0f
    2404:	6e 84       	ldd	r6, Y+14	; 0x0e
    2406:	7d 84       	ldd	r7, Y+13	; 0x0d
    2408:	8c 84       	ldd	r8, Y+12	; 0x0c
    240a:	9b 84       	ldd	r9, Y+11	; 0x0b
    240c:	aa 84       	ldd	r10, Y+10	; 0x0a
    240e:	b9 84       	ldd	r11, Y+9	; 0x09
    2410:	c8 84       	ldd	r12, Y+8	; 0x08
    2412:	df 80       	ldd	r13, Y+7	; 0x07
    2414:	ee 80       	ldd	r14, Y+6	; 0x06
    2416:	fd 80       	ldd	r15, Y+5	; 0x05
    2418:	0c 81       	ldd	r16, Y+4	; 0x04
    241a:	1b 81       	ldd	r17, Y+3	; 0x03
    241c:	aa 81       	ldd	r26, Y+2	; 0x02
    241e:	b9 81       	ldd	r27, Y+1	; 0x01
    2420:	ce 0f       	add	r28, r30
    2422:	d1 1d       	adc	r29, r1
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	f8 94       	cli
    2428:	de bf       	out	0x3e, r29	; 62
    242a:	0f be       	out	0x3f, r0	; 63
    242c:	cd bf       	out	0x3d, r28	; 61
    242e:	ed 01       	movw	r28, r26
    2430:	08 95       	ret

00002432 <_exit>:
    2432:	f8 94       	cli

00002434 <__stop_program>:
    2434:	ff cf       	rjmp	.-2      	; 0x2434 <__stop_program>
