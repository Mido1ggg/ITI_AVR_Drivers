
Kypd_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a46  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00800060  00002a46  00002aba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002ba4  00000000  00000000  00002bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001f9a  00000000  00000000  00005798  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00007732  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d1  00000000  00000000  000078b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002010  00000000  00000000  00007a83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001161  00000000  00000000  00009a93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001003  00000000  00000000  0000abf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000bbf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002be  00000000  00000000  0000bd98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090e  00000000  00000000  0000c056  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c964  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 6d 14 	call	0x28da	; 0x28da <main>
      7a:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e6       	ldi	r26, 0x68	; 104
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e6       	ldi	r24, 0x68	; 104
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 0f 15 	jmp	0x2a1e	; 0x2a1e <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__stack+0x1f>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__stack+0x1f>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__stack+0x29>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__stack+0x33>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__stack+0x1f>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__stack+0x29>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__stack+0x33>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__stack+0x3b>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__stack+0x3b>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__stack+0x3b>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__epilogue_restores__+0x20>

000008a6 <__clzsi2>:
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	7b 01       	movw	r14, r22
     8b0:	8c 01       	movw	r16, r24
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	e8 16       	cp	r14, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	f8 06       	cpc	r15, r24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 07       	cpc	r16, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	18 07       	cpc	r17, r24
     8c2:	88 f4       	brcc	.+34     	; 0x8e6 <__clzsi2+0x40>
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	e8 16       	cp	r14, r24
     8c8:	f1 04       	cpc	r15, r1
     8ca:	01 05       	cpc	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	31 f0       	breq	.+12     	; 0x8dc <__clzsi2+0x36>
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__clzsi2+0x36>
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a0 e0       	ldi	r26, 0x00	; 0
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	17 c0       	rjmp	.+46     	; 0x90a <__clzsi2+0x64>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	12 c0       	rjmp	.+36     	; 0x90a <__clzsi2+0x64>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	e8 16       	cp	r14, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	f8 06       	cpc	r15, r24
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 07       	cpc	r16, r24
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	18 07       	cpc	r17, r24
     8f6:	28 f0       	brcs	.+10     	; 0x902 <__clzsi2+0x5c>
     8f8:	88 e1       	ldi	r24, 0x18	; 24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <__clzsi2+0x64>
     902:	80 e1       	ldi	r24, 0x10	; 16
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	20 e2       	ldi	r18, 0x20	; 32
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	28 1b       	sub	r18, r24
     914:	39 0b       	sbc	r19, r25
     916:	4a 0b       	sbc	r20, r26
     918:	5b 0b       	sbc	r21, r27
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__clzsi2+0x7e>
     91c:	16 95       	lsr	r17
     91e:	07 95       	ror	r16
     920:	f7 94       	ror	r15
     922:	e7 94       	ror	r14
     924:	8a 95       	dec	r24
     926:	d2 f7       	brpl	.-12     	; 0x91c <__clzsi2+0x76>
     928:	f7 01       	movw	r30, r14
     92a:	e0 59       	subi	r30, 0x90	; 144
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	80 81       	ld	r24, Z
     930:	28 1b       	sub	r18, r24
     932:	31 09       	sbc	r19, r1
     934:	41 09       	sbc	r20, r1
     936:	51 09       	sbc	r21, r1
     938:	c9 01       	movw	r24, r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <__pack_f>:
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	fc 01       	movw	r30, r24
     950:	e4 80       	ldd	r14, Z+4	; 0x04
     952:	f5 80       	ldd	r15, Z+5	; 0x05
     954:	06 81       	ldd	r16, Z+6	; 0x06
     956:	17 81       	ldd	r17, Z+7	; 0x07
     958:	d1 80       	ldd	r13, Z+1	; 0x01
     95a:	80 81       	ld	r24, Z
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	48 f4       	brcc	.+18     	; 0x972 <__pack_f+0x2e>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 e1       	ldi	r26, 0x10	; 16
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 2a       	or	r14, r24
     96a:	f9 2a       	or	r15, r25
     96c:	0a 2b       	or	r16, r26
     96e:	1b 2b       	or	r17, r27
     970:	a5 c0       	rjmp	.+330    	; 0xabc <__pack_f+0x178>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	09 f4       	brne	.+2      	; 0x978 <__pack_f+0x34>
     976:	9f c0       	rjmp	.+318    	; 0xab6 <__pack_f+0x172>
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	21 f4       	brne	.+8      	; 0x984 <__pack_f+0x40>
     97c:	ee 24       	eor	r14, r14
     97e:	ff 24       	eor	r15, r15
     980:	87 01       	movw	r16, r14
     982:	05 c0       	rjmp	.+10     	; 0x98e <__pack_f+0x4a>
     984:	e1 14       	cp	r14, r1
     986:	f1 04       	cpc	r15, r1
     988:	01 05       	cpc	r16, r1
     98a:	11 05       	cpc	r17, r1
     98c:	19 f4       	brne	.+6      	; 0x994 <__pack_f+0x50>
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	96 c0       	rjmp	.+300    	; 0xac0 <__pack_f+0x17c>
     994:	62 81       	ldd	r22, Z+2	; 0x02
     996:	73 81       	ldd	r23, Z+3	; 0x03
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	62 38       	cpi	r22, 0x82	; 130
     99c:	79 07       	cpc	r23, r25
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <__pack_f+0x5e>
     9a0:	5b c0       	rjmp	.+182    	; 0xa58 <__pack_f+0x114>
     9a2:	22 e8       	ldi	r18, 0x82	; 130
     9a4:	3f ef       	ldi	r19, 0xFF	; 255
     9a6:	26 1b       	sub	r18, r22
     9a8:	37 0b       	sbc	r19, r23
     9aa:	2a 31       	cpi	r18, 0x1A	; 26
     9ac:	31 05       	cpc	r19, r1
     9ae:	2c f0       	brlt	.+10     	; 0x9ba <__pack_f+0x76>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	2a c0       	rjmp	.+84     	; 0xa0e <__pack_f+0xca>
     9ba:	b8 01       	movw	r22, r16
     9bc:	a7 01       	movw	r20, r14
     9be:	02 2e       	mov	r0, r18
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__pack_f+0x86>
     9c2:	76 95       	lsr	r23
     9c4:	67 95       	ror	r22
     9c6:	57 95       	ror	r21
     9c8:	47 95       	ror	r20
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__pack_f+0x7e>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x9c>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	aa 1f       	adc	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	2a 95       	dec	r18
     9e2:	d2 f7       	brpl	.-12     	; 0x9d8 <__pack_f+0x94>
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	a1 09       	sbc	r26, r1
     9e8:	b1 09       	sbc	r27, r1
     9ea:	8e 21       	and	r24, r14
     9ec:	9f 21       	and	r25, r15
     9ee:	a0 23       	and	r26, r16
     9f0:	b1 23       	and	r27, r17
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	21 f0       	breq	.+8      	; 0xa02 <__pack_f+0xbe>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	9a 01       	movw	r18, r20
     a04:	ab 01       	movw	r20, r22
     a06:	28 2b       	or	r18, r24
     a08:	39 2b       	or	r19, r25
     a0a:	4a 2b       	or	r20, r26
     a0c:	5b 2b       	or	r21, r27
     a0e:	da 01       	movw	r26, r20
     a10:	c9 01       	movw	r24, r18
     a12:	8f 77       	andi	r24, 0x7F	; 127
     a14:	90 70       	andi	r25, 0x00	; 0
     a16:	a0 70       	andi	r26, 0x00	; 0
     a18:	b0 70       	andi	r27, 0x00	; 0
     a1a:	80 34       	cpi	r24, 0x40	; 64
     a1c:	91 05       	cpc	r25, r1
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	39 f4       	brne	.+14     	; 0xa32 <__pack_f+0xee>
     a24:	27 ff       	sbrs	r18, 7
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <__pack_f+0xf6>
     a28:	20 5c       	subi	r18, 0xC0	; 192
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	4f 4f       	sbci	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0xf6>
     a32:	21 5c       	subi	r18, 0xC1	; 193
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	4f 4f       	sbci	r20, 0xFF	; 255
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	3a 07       	cpc	r19, r26
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	4a 07       	cpc	r20, r26
     a48:	a0 e4       	ldi	r26, 0x40	; 64
     a4a:	5a 07       	cpc	r21, r26
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <__pack_f+0x10e>
     a4e:	e1 e0       	ldi	r30, 0x01	; 1
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	79 01       	movw	r14, r18
     a54:	8a 01       	movw	r16, r20
     a56:	27 c0       	rjmp	.+78     	; 0xaa6 <__pack_f+0x162>
     a58:	60 38       	cpi	r22, 0x80	; 128
     a5a:	71 05       	cpc	r23, r1
     a5c:	64 f5       	brge	.+88     	; 0xab6 <__pack_f+0x172>
     a5e:	fb 01       	movw	r30, r22
     a60:	e1 58       	subi	r30, 0x81	; 129
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	d8 01       	movw	r26, r16
     a66:	c7 01       	movw	r24, r14
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	a0 70       	andi	r26, 0x00	; 0
     a6e:	b0 70       	andi	r27, 0x00	; 0
     a70:	80 34       	cpi	r24, 0x40	; 64
     a72:	91 05       	cpc	r25, r1
     a74:	a1 05       	cpc	r26, r1
     a76:	b1 05       	cpc	r27, r1
     a78:	39 f4       	brne	.+14     	; 0xa88 <__pack_f+0x144>
     a7a:	e7 fe       	sbrs	r14, 7
     a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__pack_f+0x154>
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__pack_f+0x14c>
     a88:	8f e3       	ldi	r24, 0x3F	; 63
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a0 e0       	ldi	r26, 0x00	; 0
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e8 0e       	add	r14, r24
     a92:	f9 1e       	adc	r15, r25
     a94:	0a 1f       	adc	r16, r26
     a96:	1b 1f       	adc	r17, r27
     a98:	17 ff       	sbrs	r17, 7
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__pack_f+0x162>
     a9c:	16 95       	lsr	r17
     a9e:	07 95       	ror	r16
     aa0:	f7 94       	ror	r15
     aa2:	e7 94       	ror	r14
     aa4:	31 96       	adiw	r30, 0x01	; 1
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	16 95       	lsr	r17
     aaa:	07 95       	ror	r16
     aac:	f7 94       	ror	r15
     aae:	e7 94       	ror	r14
     ab0:	8a 95       	dec	r24
     ab2:	d1 f7       	brne	.-12     	; 0xaa8 <__pack_f+0x164>
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__pack_f+0x17c>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	ef ef       	ldi	r30, 0xFF	; 255
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	6e 2f       	mov	r22, r30
     ac2:	67 95       	ror	r22
     ac4:	66 27       	eor	r22, r22
     ac6:	67 95       	ror	r22
     ac8:	90 2f       	mov	r25, r16
     aca:	9f 77       	andi	r25, 0x7F	; 127
     acc:	d7 94       	ror	r13
     ace:	dd 24       	eor	r13, r13
     ad0:	d7 94       	ror	r13
     ad2:	8e 2f       	mov	r24, r30
     ad4:	86 95       	lsr	r24
     ad6:	49 2f       	mov	r20, r25
     ad8:	46 2b       	or	r20, r22
     ada:	58 2f       	mov	r21, r24
     adc:	5d 29       	or	r21, r13
     ade:	b7 01       	movw	r22, r14
     ae0:	ca 01       	movw	r24, r20
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	08 95       	ret

00000aee <__unpack_f>:
     aee:	fc 01       	movw	r30, r24
     af0:	db 01       	movw	r26, r22
     af2:	40 81       	ld	r20, Z
     af4:	51 81       	ldd	r21, Z+1	; 0x01
     af6:	22 81       	ldd	r18, Z+2	; 0x02
     af8:	62 2f       	mov	r22, r18
     afa:	6f 77       	andi	r22, 0x7F	; 127
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	22 1f       	adc	r18, r18
     b00:	22 27       	eor	r18, r18
     b02:	22 1f       	adc	r18, r18
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	89 2f       	mov	r24, r25
     b08:	88 0f       	add	r24, r24
     b0a:	82 2b       	or	r24, r18
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	99 1f       	adc	r25, r25
     b12:	99 27       	eor	r25, r25
     b14:	99 1f       	adc	r25, r25
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	9c 93       	st	X, r25
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	a9 f5       	brne	.+106    	; 0xb8c <__unpack_f+0x9e>
     b22:	41 15       	cp	r20, r1
     b24:	51 05       	cpc	r21, r1
     b26:	61 05       	cpc	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__unpack_f+0x42>
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	37 c0       	rjmp	.+110    	; 0xb9e <__unpack_f+0xb0>
     b30:	82 e8       	ldi	r24, 0x82	; 130
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	13 96       	adiw	r26, 0x03	; 3
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	9a 01       	movw	r18, r20
     b3e:	ab 01       	movw	r20, r22
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	44 1f       	adc	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	6a 95       	dec	r22
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <__unpack_f+0x54>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8c 93       	st	X, r24
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <__unpack_f+0x80>
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	13 96       	adiw	r26, 0x03	; 3
     b68:	9c 93       	st	X, r25
     b6a:	8e 93       	st	-X, r24
     b6c:	12 97       	sbiw	r26, 0x02	; 2
     b6e:	20 30       	cpi	r18, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	38 07       	cpc	r19, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	48 07       	cpc	r20, r24
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	58 07       	cpc	r21, r24
     b7c:	58 f3       	brcs	.-42     	; 0xb54 <__unpack_f+0x66>
     b7e:	14 96       	adiw	r26, 0x04	; 4
     b80:	2d 93       	st	X+, r18
     b82:	3d 93       	st	X+, r19
     b84:	4d 93       	st	X+, r20
     b86:	5c 93       	st	X, r21
     b88:	17 97       	sbiw	r26, 0x07	; 7
     b8a:	08 95       	ret
     b8c:	2f 3f       	cpi	r18, 0xFF	; 255
     b8e:	31 05       	cpc	r19, r1
     b90:	79 f4       	brne	.+30     	; 0xbb0 <__unpack_f+0xc2>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__unpack_f+0xb4>
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	8c 93       	st	X, r24
     ba0:	08 95       	ret
     ba2:	64 ff       	sbrs	r22, 4
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <__unpack_f+0xbe>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	8c 93       	st	X, r24
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__unpack_f+0xe2>
     bac:	1c 92       	st	X, r1
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <__unpack_f+0xe2>
     bb0:	2f 57       	subi	r18, 0x7F	; 127
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	13 96       	adiw	r26, 0x03	; 3
     bb6:	3c 93       	st	X, r19
     bb8:	2e 93       	st	-X, r18
     bba:	12 97       	sbiw	r26, 0x02	; 2
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	8a 95       	dec	r24
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <__unpack_f+0xd4>
     bce:	70 64       	ori	r23, 0x40	; 64
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	4d 93       	st	X+, r20
     bd4:	5d 93       	st	X+, r21
     bd6:	6d 93       	st	X+, r22
     bd8:	7c 93       	st	X, r23
     bda:	17 97       	sbiw	r26, 0x07	; 7
     bdc:	08 95       	ret

00000bde <__fpcmp_parts_f>:
     bde:	1f 93       	push	r17
     be0:	dc 01       	movw	r26, r24
     be2:	fb 01       	movw	r30, r22
     be4:	9c 91       	ld	r25, X
     be6:	92 30       	cpi	r25, 0x02	; 2
     be8:	08 f4       	brcc	.+2      	; 0xbec <__fpcmp_parts_f+0xe>
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bec:	80 81       	ld	r24, Z
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <__fpcmp_parts_f+0x16>
     bf2:	43 c0       	rjmp	.+134    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bf4:	94 30       	cpi	r25, 0x04	; 4
     bf6:	51 f4       	brne	.+20     	; 0xc0c <__fpcmp_parts_f+0x2e>
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	1c 91       	ld	r17, X
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	99 f5       	brne	.+102    	; 0xc66 <__fpcmp_parts_f+0x88>
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	68 2f       	mov	r22, r24
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	61 1b       	sub	r22, r17
     c08:	71 09       	sbc	r23, r1
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <__fpcmp_parts_f+0xac>
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	21 f0       	breq	.+8      	; 0xc18 <__fpcmp_parts_f+0x3a>
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	31 f4       	brne	.+12     	; 0xc20 <__fpcmp_parts_f+0x42>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	b9 f1       	breq	.+110    	; 0xc86 <__fpcmp_parts_f+0xa8>
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	88 23       	and	r24, r24
     c1c:	89 f1       	breq	.+98     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c1e:	2d c0       	rjmp	.+90     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	1c 91       	ld	r17, X
     c24:	11 97       	sbiw	r26, 0x01	; 1
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	f1 f0       	breq	.+60     	; 0xc66 <__fpcmp_parts_f+0x88>
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	18 17       	cp	r17, r24
     c2e:	d9 f4       	brne	.+54     	; 0xc66 <__fpcmp_parts_f+0x88>
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	2d 91       	ld	r18, X+
     c34:	3c 91       	ld	r19, X
     c36:	13 97       	sbiw	r26, 0x03	; 3
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	94 f0       	brlt	.+36     	; 0xc66 <__fpcmp_parts_f+0x88>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	bc f0       	brlt	.+46     	; 0xc76 <__fpcmp_parts_f+0x98>
     c48:	14 96       	adiw	r26, 0x04	; 4
     c4a:	8d 91       	ld	r24, X+
     c4c:	9d 91       	ld	r25, X+
     c4e:	0d 90       	ld	r0, X+
     c50:	bc 91       	ld	r27, X
     c52:	a0 2d       	mov	r26, r0
     c54:	24 81       	ldd	r18, Z+4	; 0x04
     c56:	35 81       	ldd	r19, Z+5	; 0x05
     c58:	46 81       	ldd	r20, Z+6	; 0x06
     c5a:	57 81       	ldd	r21, Z+7	; 0x07
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	4a 07       	cpc	r20, r26
     c62:	5b 07       	cpc	r21, r27
     c64:	18 f4       	brcc	.+6      	; 0xc6c <__fpcmp_parts_f+0x8e>
     c66:	11 23       	and	r17, r17
     c68:	41 f0       	breq	.+16     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	a4 07       	cpc	r26, r20
     c72:	b5 07       	cpc	r27, r21
     c74:	40 f4       	brcc	.+16     	; 0xc86 <__fpcmp_parts_f+0xa8>
     c76:	11 23       	and	r17, r17
     c78:	19 f0       	breq	.+6      	; 0xc80 <__fpcmp_parts_f+0xa2>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__fpcmp_parts_f+0xac>
     c80:	6f ef       	ldi	r22, 0xFF	; 255
     c82:	7f ef       	ldi	r23, 0xFF	; 255
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <__fpcmp_parts_f+0xac>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	cb 01       	movw	r24, r22
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <DIO_ErrStateSetPinDirection>:
/* Date   : 24 MAR 2023                            */
/***************************************************/
#include "DIO_Interface.h"

ErrState  DIO_ErrStateSetPinDirection(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber,DIO_DirectionState Copy_DirectionState)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	28 97       	sbiw	r28, 0x08	; 8
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	89 83       	std	Y+1, r24	; 0x01
     ca6:	6a 83       	std	Y+2, r22	; 0x02
     ca8:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_PinNumber<=Pin7 && Copy_PinNumber>=Pin0)
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	88 30       	cpi	r24, 0x08	; 8
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <DIO_ErrStateSetPinDirection+0x22>
     cb0:	f6 c0       	rjmp	.+492    	; 0xe9e <DIO_ErrStateSetPinDirection+0x20e>
	{
		/*Input-> write Zero DDR (CLR) */
		if (Copy_DirectionState == DIO_Input )
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	88 23       	and	r24, r24
     cb6:	09 f0       	breq	.+2      	; 0xcba <DIO_ErrStateSetPinDirection+0x2a>
     cb8:	77 c0       	rjmp	.+238    	; 0xda8 <DIO_ErrStateSetPinDirection+0x118>
		{
			switch(Copy_GroupNumber){
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	38 87       	std	Y+8, r19	; 0x08
     cc2:	2f 83       	std	Y+7, r18	; 0x07
     cc4:	8f 81       	ldd	r24, Y+7	; 0x07
     cc6:	98 85       	ldd	r25, Y+8	; 0x08
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	91 05       	cpc	r25, r1
     ccc:	59 f1       	breq	.+86     	; 0xd24 <DIO_ErrStateSetPinDirection+0x94>
     cce:	2f 81       	ldd	r18, Y+7	; 0x07
     cd0:	38 85       	ldd	r19, Y+8	; 0x08
     cd2:	22 30       	cpi	r18, 0x02	; 2
     cd4:	31 05       	cpc	r19, r1
     cd6:	2c f4       	brge	.+10     	; 0xce2 <DIO_ErrStateSetPinDirection+0x52>
     cd8:	8f 81       	ldd	r24, Y+7	; 0x07
     cda:	98 85       	ldd	r25, Y+8	; 0x08
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	69 f0       	breq	.+26     	; 0xcfa <DIO_ErrStateSetPinDirection+0x6a>
     ce0:	60 c0       	rjmp	.+192    	; 0xda2 <DIO_ErrStateSetPinDirection+0x112>
     ce2:	2f 81       	ldd	r18, Y+7	; 0x07
     ce4:	38 85       	ldd	r19, Y+8	; 0x08
     ce6:	22 30       	cpi	r18, 0x02	; 2
     ce8:	31 05       	cpc	r19, r1
     cea:	89 f1       	breq	.+98     	; 0xd4e <DIO_ErrStateSetPinDirection+0xbe>
     cec:	8f 81       	ldd	r24, Y+7	; 0x07
     cee:	98 85       	ldd	r25, Y+8	; 0x08
     cf0:	83 30       	cpi	r24, 0x03	; 3
     cf2:	91 05       	cpc	r25, r1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <DIO_ErrStateSetPinDirection+0x68>
     cf6:	40 c0       	rjmp	.+128    	; 0xd78 <DIO_ErrStateSetPinDirection+0xe8>
     cf8:	54 c0       	rjmp	.+168    	; 0xda2 <DIO_ErrStateSetPinDirection+0x112>
			/*Group A*/
			case DIO_GroupA : CLR_BIT(DDRA_ITI , Copy_PinNumber ) ;
     cfa:	aa e3       	ldi	r26, 0x3A	; 58
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	ea e3       	ldi	r30, 0x3A	; 58
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	48 2f       	mov	r20, r24
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	02 2e       	mov	r0, r18
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <DIO_ErrStateSetPinDirection+0x88>
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	0a 94       	dec	r0
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <DIO_ErrStateSetPinDirection+0x84>
     d1c:	80 95       	com	r24
     d1e:	84 23       	and	r24, r20
     d20:	8c 93       	st	X, r24
     d22:	bb c0       	rjmp	.+374    	; 0xe9a <DIO_ErrStateSetPinDirection+0x20a>
			break ;
			/*Group B*/
			case DIO_GroupB : CLR_BIT(DDRB_ITI , Copy_PinNumber ) ;
     d24:	a7 e3       	ldi	r26, 0x37	; 55
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e7 e3       	ldi	r30, 0x37	; 55
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	48 2f       	mov	r20, r24
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	02 2e       	mov	r0, r18
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <DIO_ErrStateSetPinDirection+0xb2>
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	0a 94       	dec	r0
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <DIO_ErrStateSetPinDirection+0xae>
     d46:	80 95       	com	r24
     d48:	84 23       	and	r24, r20
     d4a:	8c 93       	st	X, r24
     d4c:	a6 c0       	rjmp	.+332    	; 0xe9a <DIO_ErrStateSetPinDirection+0x20a>
			break ;
			/*Group C*/
			case DIO_GroupC : CLR_BIT(DDRC_ITI , Copy_PinNumber ) ;
     d4e:	a4 e3       	ldi	r26, 0x34	; 52
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e4 e3       	ldi	r30, 0x34	; 52
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	48 2f       	mov	r20, r24
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 2e       	mov	r0, r18
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <DIO_ErrStateSetPinDirection+0xdc>
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	0a 94       	dec	r0
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <DIO_ErrStateSetPinDirection+0xd8>
     d70:	80 95       	com	r24
     d72:	84 23       	and	r24, r20
     d74:	8c 93       	st	X, r24
     d76:	91 c0       	rjmp	.+290    	; 0xe9a <DIO_ErrStateSetPinDirection+0x20a>
			break ;
			/*Group D*/
			case DIO_GroupD : CLR_BIT(DDRD_ITI , Copy_PinNumber ) ;
     d78:	a1 e3       	ldi	r26, 0x31	; 49
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e1 e3       	ldi	r30, 0x31	; 49
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	48 2f       	mov	r20, r24
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	02 2e       	mov	r0, r18
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <DIO_ErrStateSetPinDirection+0x106>
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	0a 94       	dec	r0
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <DIO_ErrStateSetPinDirection+0x102>
     d9a:	80 95       	com	r24
     d9c:	84 23       	and	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	7c c0       	rjmp	.+248    	; 0xe9a <DIO_ErrStateSetPinDirection+0x20a>
			break ;
			/*Wrong*/
			default:
				return GroupError ;
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	9e 83       	std	Y+6, r25	; 0x06
     da6:	7d c0       	rjmp	.+250    	; 0xea2 <DIO_ErrStateSetPinDirection+0x212>


		}

		/*Output -> write DDR = one */
		else if (Copy_DirectionState == DIO_Output )
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	09 f0       	breq	.+2      	; 0xdb0 <DIO_ErrStateSetPinDirection+0x120>
     dae:	72 c0       	rjmp	.+228    	; 0xe94 <DIO_ErrStateSetPinDirection+0x204>
		{
			switch(Copy_GroupNumber){
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	3d 83       	std	Y+5, r19	; 0x05
     db8:	2c 83       	std	Y+4, r18	; 0x04
     dba:	8c 81       	ldd	r24, Y+4	; 0x04
     dbc:	9d 81       	ldd	r25, Y+5	; 0x05
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	91 05       	cpc	r25, r1
     dc2:	49 f1       	breq	.+82     	; 0xe16 <DIO_ErrStateSetPinDirection+0x186>
     dc4:	2c 81       	ldd	r18, Y+4	; 0x04
     dc6:	3d 81       	ldd	r19, Y+5	; 0x05
     dc8:	22 30       	cpi	r18, 0x02	; 2
     dca:	31 05       	cpc	r19, r1
     dcc:	2c f4       	brge	.+10     	; 0xdd8 <DIO_ErrStateSetPinDirection+0x148>
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	9d 81       	ldd	r25, Y+5	; 0x05
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	61 f0       	breq	.+24     	; 0xdee <DIO_ErrStateSetPinDirection+0x15e>
     dd6:	5b c0       	rjmp	.+182    	; 0xe8e <DIO_ErrStateSetPinDirection+0x1fe>
     dd8:	2c 81       	ldd	r18, Y+4	; 0x04
     dda:	3d 81       	ldd	r19, Y+5	; 0x05
     ddc:	22 30       	cpi	r18, 0x02	; 2
     dde:	31 05       	cpc	r19, r1
     de0:	71 f1       	breq	.+92     	; 0xe3e <DIO_ErrStateSetPinDirection+0x1ae>
     de2:	8c 81       	ldd	r24, Y+4	; 0x04
     de4:	9d 81       	ldd	r25, Y+5	; 0x05
     de6:	83 30       	cpi	r24, 0x03	; 3
     de8:	91 05       	cpc	r25, r1
     dea:	e9 f1       	breq	.+122    	; 0xe66 <DIO_ErrStateSetPinDirection+0x1d6>
     dec:	50 c0       	rjmp	.+160    	; 0xe8e <DIO_ErrStateSetPinDirection+0x1fe>
			/*Group A*/
			case DIO_GroupA : SET_BIT(DDRA_ITI,Copy_PinNumber);break;
     dee:	aa e3       	ldi	r26, 0x3A	; 58
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	ea e3       	ldi	r30, 0x3A	; 58
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_ErrStateSetPinDirection+0x17c>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_ErrStateSetPinDirection+0x178>
     e10:	84 2b       	or	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	42 c0       	rjmp	.+132    	; 0xe9a <DIO_ErrStateSetPinDirection+0x20a>
			/*Group B*/
			case DIO_GroupB : SET_BIT(DDRB_ITI,Copy_PinNumber);break;
     e16:	a7 e3       	ldi	r26, 0x37	; 55
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e7 e3       	ldi	r30, 0x37	; 55
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_ErrStateSetPinDirection+0x1a4>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_ErrStateSetPinDirection+0x1a0>
     e38:	84 2b       	or	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	2e c0       	rjmp	.+92     	; 0xe9a <DIO_ErrStateSetPinDirection+0x20a>
			/*Group C*/
			case DIO_GroupC : SET_BIT(DDRC_ITI,Copy_PinNumber);break;
     e3e:	a4 e3       	ldi	r26, 0x34	; 52
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e4 e3       	ldi	r30, 0x34	; 52
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 2e       	mov	r0, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <DIO_ErrStateSetPinDirection+0x1cc>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <DIO_ErrStateSetPinDirection+0x1c8>
     e60:	84 2b       	or	r24, r20
     e62:	8c 93       	st	X, r24
     e64:	1a c0       	rjmp	.+52     	; 0xe9a <DIO_ErrStateSetPinDirection+0x20a>
			/*Group D*/
			case DIO_GroupD : SET_BIT(DDRD_ITI,Copy_PinNumber);break;
     e66:	a1 e3       	ldi	r26, 0x31	; 49
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e1 e3       	ldi	r30, 0x31	; 49
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_ErrStateSetPinDirection+0x1f4>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_ErrStateSetPinDirection+0x1f0>
     e88:	84 2b       	or	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	06 c0       	rjmp	.+12     	; 0xe9a <DIO_ErrStateSetPinDirection+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	9e 83       	std	Y+6, r25	; 0x06
     e92:	07 c0       	rjmp	.+14     	; 0xea2 <DIO_ErrStateSetPinDirection+0x212>
			}
		}

		else
		{
			return DirectionError ;
     e94:	23 e0       	ldi	r18, 0x03	; 3
     e96:	2e 83       	std	Y+6, r18	; 0x06
     e98:	04 c0       	rjmp	.+8      	; 0xea2 <DIO_ErrStateSetPinDirection+0x212>
		}

		return NoError ;
     e9a:	1e 82       	std	Y+6, r1	; 0x06
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <DIO_ErrStateSetPinDirection+0x212>
	}
	else
	{
		return PinNumberError ;
     e9e:	32 e0       	ldi	r19, 0x02	; 2
     ea0:	3e 83       	std	Y+6, r19	; 0x06
     ea2:	8e 81       	ldd	r24, Y+6	; 0x06
	}
}
     ea4:	28 96       	adiw	r28, 0x08	; 8
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <DIO_ErrStateSetPinValue>:

ErrState  DIO_ErrStateSetPinValue(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber,DIO_ValueState Copy_ValueState)
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	28 97       	sbiw	r28, 0x08	; 8
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	89 83       	std	Y+1, r24	; 0x01
     ecc:	6a 83       	std	Y+2, r22	; 0x02
     ece:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_PinNumber<=Pin7 && Copy_PinNumber>=Pin0)
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	88 30       	cpi	r24, 0x08	; 8
     ed4:	08 f0       	brcs	.+2      	; 0xed8 <DIO_ErrStateSetPinValue+0x22>
     ed6:	f6 c0       	rjmp	.+492    	; 0x10c4 <DIO_ErrStateSetPinValue+0x20e>
	{
		/*Low-> write Zero Port (CLR) */
		if (Copy_ValueState == DIO_Low )
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	88 23       	and	r24, r24
     edc:	09 f0       	breq	.+2      	; 0xee0 <DIO_ErrStateSetPinValue+0x2a>
     ede:	77 c0       	rjmp	.+238    	; 0xfce <DIO_ErrStateSetPinValue+0x118>
		{
			switch(Copy_GroupNumber){
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	38 87       	std	Y+8, r19	; 0x08
     ee8:	2f 83       	std	Y+7, r18	; 0x07
     eea:	8f 81       	ldd	r24, Y+7	; 0x07
     eec:	98 85       	ldd	r25, Y+8	; 0x08
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	91 05       	cpc	r25, r1
     ef2:	59 f1       	breq	.+86     	; 0xf4a <DIO_ErrStateSetPinValue+0x94>
     ef4:	2f 81       	ldd	r18, Y+7	; 0x07
     ef6:	38 85       	ldd	r19, Y+8	; 0x08
     ef8:	22 30       	cpi	r18, 0x02	; 2
     efa:	31 05       	cpc	r19, r1
     efc:	2c f4       	brge	.+10     	; 0xf08 <DIO_ErrStateSetPinValue+0x52>
     efe:	8f 81       	ldd	r24, Y+7	; 0x07
     f00:	98 85       	ldd	r25, Y+8	; 0x08
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	69 f0       	breq	.+26     	; 0xf20 <DIO_ErrStateSetPinValue+0x6a>
     f06:	60 c0       	rjmp	.+192    	; 0xfc8 <DIO_ErrStateSetPinValue+0x112>
     f08:	2f 81       	ldd	r18, Y+7	; 0x07
     f0a:	38 85       	ldd	r19, Y+8	; 0x08
     f0c:	22 30       	cpi	r18, 0x02	; 2
     f0e:	31 05       	cpc	r19, r1
     f10:	89 f1       	breq	.+98     	; 0xf74 <DIO_ErrStateSetPinValue+0xbe>
     f12:	8f 81       	ldd	r24, Y+7	; 0x07
     f14:	98 85       	ldd	r25, Y+8	; 0x08
     f16:	83 30       	cpi	r24, 0x03	; 3
     f18:	91 05       	cpc	r25, r1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <DIO_ErrStateSetPinValue+0x68>
     f1c:	40 c0       	rjmp	.+128    	; 0xf9e <DIO_ErrStateSetPinValue+0xe8>
     f1e:	54 c0       	rjmp	.+168    	; 0xfc8 <DIO_ErrStateSetPinValue+0x112>
			/*Group A*/
			case DIO_GroupA : CLR_BIT(PORTA_ITI , Copy_PinNumber ) ;break ;
     f20:	ab e3       	ldi	r26, 0x3B	; 59
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	eb e3       	ldi	r30, 0x3B	; 59
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 2e       	mov	r0, r18
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <DIO_ErrStateSetPinValue+0x88>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <DIO_ErrStateSetPinValue+0x84>
     f42:	80 95       	com	r24
     f44:	84 23       	and	r24, r20
     f46:	8c 93       	st	X, r24
     f48:	bb c0       	rjmp	.+374    	; 0x10c0 <DIO_ErrStateSetPinValue+0x20a>
			/*Group B*/
			case DIO_GroupB : CLR_BIT(PORTB_ITI , Copy_PinNumber ) ;break ;
     f4a:	a8 e3       	ldi	r26, 0x38	; 56
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e8 e3       	ldi	r30, 0x38	; 56
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_ErrStateSetPinValue+0xb2>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_ErrStateSetPinValue+0xae>
     f6c:	80 95       	com	r24
     f6e:	84 23       	and	r24, r20
     f70:	8c 93       	st	X, r24
     f72:	a6 c0       	rjmp	.+332    	; 0x10c0 <DIO_ErrStateSetPinValue+0x20a>
			/*Group C*/
			case DIO_GroupC : CLR_BIT(PORTC_ITI , Copy_PinNumber ) ;break ;
     f74:	a5 e3       	ldi	r26, 0x35	; 53
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e5 e3       	ldi	r30, 0x35	; 53
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <DIO_ErrStateSetPinValue+0xdc>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <DIO_ErrStateSetPinValue+0xd8>
     f96:	80 95       	com	r24
     f98:	84 23       	and	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	91 c0       	rjmp	.+290    	; 0x10c0 <DIO_ErrStateSetPinValue+0x20a>
			/*Group D*/
			case DIO_GroupD : CLR_BIT(PORTD_ITI , Copy_PinNumber ) ;break ;
     f9e:	a2 e3       	ldi	r26, 0x32	; 50
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e2 e3       	ldi	r30, 0x32	; 50
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <DIO_ErrStateSetPinValue+0x106>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <DIO_ErrStateSetPinValue+0x102>
     fc0:	80 95       	com	r24
     fc2:	84 23       	and	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	7c c0       	rjmp	.+248    	; 0x10c0 <DIO_ErrStateSetPinValue+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	9e 83       	std	Y+6, r25	; 0x06
     fcc:	7d c0       	rjmp	.+250    	; 0x10c8 <DIO_ErrStateSetPinValue+0x212>
			}
		}

		/*High -> write port = one */
		else if (Copy_ValueState == DIO_High )
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <DIO_ErrStateSetPinValue+0x120>
     fd4:	72 c0       	rjmp	.+228    	; 0x10ba <DIO_ErrStateSetPinValue+0x204>
		{
			switch(Copy_GroupNumber){
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	3d 83       	std	Y+5, r19	; 0x05
     fde:	2c 83       	std	Y+4, r18	; 0x04
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	9d 81       	ldd	r25, Y+5	; 0x05
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	91 05       	cpc	r25, r1
     fe8:	49 f1       	breq	.+82     	; 0x103c <DIO_ErrStateSetPinValue+0x186>
     fea:	2c 81       	ldd	r18, Y+4	; 0x04
     fec:	3d 81       	ldd	r19, Y+5	; 0x05
     fee:	22 30       	cpi	r18, 0x02	; 2
     ff0:	31 05       	cpc	r19, r1
     ff2:	2c f4       	brge	.+10     	; 0xffe <DIO_ErrStateSetPinValue+0x148>
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	61 f0       	breq	.+24     	; 0x1014 <DIO_ErrStateSetPinValue+0x15e>
     ffc:	5b c0       	rjmp	.+182    	; 0x10b4 <DIO_ErrStateSetPinValue+0x1fe>
     ffe:	2c 81       	ldd	r18, Y+4	; 0x04
    1000:	3d 81       	ldd	r19, Y+5	; 0x05
    1002:	22 30       	cpi	r18, 0x02	; 2
    1004:	31 05       	cpc	r19, r1
    1006:	71 f1       	breq	.+92     	; 0x1064 <DIO_ErrStateSetPinValue+0x1ae>
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	9d 81       	ldd	r25, Y+5	; 0x05
    100c:	83 30       	cpi	r24, 0x03	; 3
    100e:	91 05       	cpc	r25, r1
    1010:	e9 f1       	breq	.+122    	; 0x108c <DIO_ErrStateSetPinValue+0x1d6>
    1012:	50 c0       	rjmp	.+160    	; 0x10b4 <DIO_ErrStateSetPinValue+0x1fe>
			/*Group A*/
			case DIO_GroupA : SET_BIT(PORTA_ITI,Copy_PinNumber);break;
    1014:	ab e3       	ldi	r26, 0x3B	; 59
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	eb e3       	ldi	r30, 0x3B	; 59
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <DIO_ErrStateSetPinValue+0x17c>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <DIO_ErrStateSetPinValue+0x178>
    1036:	84 2b       	or	r24, r20
    1038:	8c 93       	st	X, r24
    103a:	42 c0       	rjmp	.+132    	; 0x10c0 <DIO_ErrStateSetPinValue+0x20a>
			/*Group B*/
			case DIO_GroupB : SET_BIT(PORTB_ITI,Copy_PinNumber);break;
    103c:	a8 e3       	ldi	r26, 0x38	; 56
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e8 e3       	ldi	r30, 0x38	; 56
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_ErrStateSetPinValue+0x1a4>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_ErrStateSetPinValue+0x1a0>
    105e:	84 2b       	or	r24, r20
    1060:	8c 93       	st	X, r24
    1062:	2e c0       	rjmp	.+92     	; 0x10c0 <DIO_ErrStateSetPinValue+0x20a>
			/*Group C*/
			case DIO_GroupC : SET_BIT(PORTC_ITI,Copy_PinNumber);break;
    1064:	a5 e3       	ldi	r26, 0x35	; 53
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e5 e3       	ldi	r30, 0x35	; 53
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <DIO_ErrStateSetPinValue+0x1cc>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <DIO_ErrStateSetPinValue+0x1c8>
    1086:	84 2b       	or	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	1a c0       	rjmp	.+52     	; 0x10c0 <DIO_ErrStateSetPinValue+0x20a>
			/*Group D*/
			case DIO_GroupD : SET_BIT(PORTD_ITI,Copy_PinNumber);break;
    108c:	a2 e3       	ldi	r26, 0x32	; 50
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e2 e3       	ldi	r30, 0x32	; 50
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <DIO_ErrStateSetPinValue+0x1f4>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <DIO_ErrStateSetPinValue+0x1f0>
    10ae:	84 2b       	or	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	06 c0       	rjmp	.+12     	; 0x10c0 <DIO_ErrStateSetPinValue+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
    10b4:	91 e0       	ldi	r25, 0x01	; 1
    10b6:	9e 83       	std	Y+6, r25	; 0x06
    10b8:	07 c0       	rjmp	.+14     	; 0x10c8 <DIO_ErrStateSetPinValue+0x212>
			}
		}

		else
		{
			return DirectionError ;
    10ba:	23 e0       	ldi	r18, 0x03	; 3
    10bc:	2e 83       	std	Y+6, r18	; 0x06
    10be:	04 c0       	rjmp	.+8      	; 0x10c8 <DIO_ErrStateSetPinValue+0x212>
		}

		return NoError ;
    10c0:	1e 82       	std	Y+6, r1	; 0x06
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_ErrStateSetPinValue+0x212>
	}
	else
	{
		return PinNumberError ;
    10c4:	32 e0       	ldi	r19, 0x02	; 2
    10c6:	3e 83       	std	Y+6, r19	; 0x06
    10c8:	8e 81       	ldd	r24, Y+6	; 0x06
	}

}
    10ca:	28 96       	adiw	r28, 0x08	; 8
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <DIO_ErrStateReadPinValue>:

ErrState  DIO_ErrStateReadPinValue(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber ,u8 *Result)
{
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	27 97       	sbiw	r28, 0x07	; 7
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	89 83       	std	Y+1, r24	; 0x01
    10f2:	6a 83       	std	Y+2, r22	; 0x02
    10f4:	5c 83       	std	Y+4, r21	; 0x04
    10f6:	4b 83       	std	Y+3, r20	; 0x03
	/*check on pin range from 0 to 7 */
	if (Copy_PinNumber>= Pin0 && Copy_PinNumber <=Pin7)
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	88 30       	cpi	r24, 0x08	; 8
    10fc:	08 f0       	brcs	.+2      	; 0x1100 <DIO_ErrStateReadPinValue+0x24>
    10fe:	76 c0       	rjmp	.+236    	; 0x11ec <DIO_ErrStateReadPinValue+0x110>
	{
		switch(Copy_GroupNumber)
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	3f 83       	std	Y+7, r19	; 0x07
    1108:	2e 83       	std	Y+6, r18	; 0x06
    110a:	4e 81       	ldd	r20, Y+6	; 0x06
    110c:	5f 81       	ldd	r21, Y+7	; 0x07
    110e:	41 30       	cpi	r20, 0x01	; 1
    1110:	51 05       	cpc	r21, r1
    1112:	59 f1       	breq	.+86     	; 0x116a <DIO_ErrStateReadPinValue+0x8e>
    1114:	8e 81       	ldd	r24, Y+6	; 0x06
    1116:	9f 81       	ldd	r25, Y+7	; 0x07
    1118:	82 30       	cpi	r24, 0x02	; 2
    111a:	91 05       	cpc	r25, r1
    111c:	34 f4       	brge	.+12     	; 0x112a <DIO_ErrStateReadPinValue+0x4e>
    111e:	2e 81       	ldd	r18, Y+6	; 0x06
    1120:	3f 81       	ldd	r19, Y+7	; 0x07
    1122:	21 15       	cp	r18, r1
    1124:	31 05       	cpc	r19, r1
    1126:	69 f0       	breq	.+26     	; 0x1142 <DIO_ErrStateReadPinValue+0x66>
    1128:	5c c0       	rjmp	.+184    	; 0x11e2 <DIO_ErrStateReadPinValue+0x106>
    112a:	4e 81       	ldd	r20, Y+6	; 0x06
    112c:	5f 81       	ldd	r21, Y+7	; 0x07
    112e:	42 30       	cpi	r20, 0x02	; 2
    1130:	51 05       	cpc	r21, r1
    1132:	79 f1       	breq	.+94     	; 0x1192 <DIO_ErrStateReadPinValue+0xb6>
    1134:	8e 81       	ldd	r24, Y+6	; 0x06
    1136:	9f 81       	ldd	r25, Y+7	; 0x07
    1138:	83 30       	cpi	r24, 0x03	; 3
    113a:	91 05       	cpc	r25, r1
    113c:	09 f4       	brne	.+2      	; 0x1140 <DIO_ErrStateReadPinValue+0x64>
    113e:	3d c0       	rjmp	.+122    	; 0x11ba <DIO_ErrStateReadPinValue+0xde>
    1140:	50 c0       	rjmp	.+160    	; 0x11e2 <DIO_ErrStateReadPinValue+0x106>
		{
		case DIO_GroupA: *Result=GET_BIT(PINA_ITI,Copy_PinNumber); break ;
    1142:	e9 e3       	ldi	r30, 0x39	; 57
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	88 2f       	mov	r24, r24
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	a9 01       	movw	r20, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_ErrStateReadPinValue+0x7e>
    1156:	55 95       	asr	r21
    1158:	47 95       	ror	r20
    115a:	8a 95       	dec	r24
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_ErrStateReadPinValue+0x7a>
    115e:	ca 01       	movw	r24, r20
    1160:	81 70       	andi	r24, 0x01	; 1
    1162:	eb 81       	ldd	r30, Y+3	; 0x03
    1164:	fc 81       	ldd	r31, Y+4	; 0x04
    1166:	80 83       	st	Z, r24
    1168:	3f c0       	rjmp	.+126    	; 0x11e8 <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupB: *Result=GET_BIT(PINB_ITI,Copy_PinNumber); break ;
    116a:	e6 e3       	ldi	r30, 0x36	; 54
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	88 2f       	mov	r24, r24
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	a9 01       	movw	r20, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <DIO_ErrStateReadPinValue+0xa6>
    117e:	55 95       	asr	r21
    1180:	47 95       	ror	r20
    1182:	8a 95       	dec	r24
    1184:	e2 f7       	brpl	.-8      	; 0x117e <DIO_ErrStateReadPinValue+0xa2>
    1186:	ca 01       	movw	r24, r20
    1188:	81 70       	andi	r24, 0x01	; 1
    118a:	eb 81       	ldd	r30, Y+3	; 0x03
    118c:	fc 81       	ldd	r31, Y+4	; 0x04
    118e:	80 83       	st	Z, r24
    1190:	2b c0       	rjmp	.+86     	; 0x11e8 <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupC: *Result=GET_BIT(PINC_ITI,Copy_PinNumber); break ;
    1192:	e3 e3       	ldi	r30, 0x33	; 51
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	a9 01       	movw	r20, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_ErrStateReadPinValue+0xce>
    11a6:	55 95       	asr	r21
    11a8:	47 95       	ror	r20
    11aa:	8a 95       	dec	r24
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_ErrStateReadPinValue+0xca>
    11ae:	ca 01       	movw	r24, r20
    11b0:	81 70       	andi	r24, 0x01	; 1
    11b2:	eb 81       	ldd	r30, Y+3	; 0x03
    11b4:	fc 81       	ldd	r31, Y+4	; 0x04
    11b6:	80 83       	st	Z, r24
    11b8:	17 c0       	rjmp	.+46     	; 0x11e8 <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupD: *Result=GET_BIT(PIND_ITI,Copy_PinNumber); break ;
    11ba:	e0 e3       	ldi	r30, 0x30	; 48
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a9 01       	movw	r20, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_ErrStateReadPinValue+0xf6>
    11ce:	55 95       	asr	r21
    11d0:	47 95       	ror	r20
    11d2:	8a 95       	dec	r24
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <DIO_ErrStateReadPinValue+0xf2>
    11d6:	ca 01       	movw	r24, r20
    11d8:	81 70       	andi	r24, 0x01	; 1
    11da:	eb 81       	ldd	r30, Y+3	; 0x03
    11dc:	fc 81       	ldd	r31, Y+4	; 0x04
    11de:	80 83       	st	Z, r24
    11e0:	03 c0       	rjmp	.+6      	; 0x11e8 <DIO_ErrStateReadPinValue+0x10c>
		default:
			return GroupError ;
    11e2:	51 e0       	ldi	r21, 0x01	; 1
    11e4:	5d 83       	std	Y+5, r21	; 0x05
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <DIO_ErrStateReadPinValue+0x114>
		}
		return NoError ;
    11e8:	1d 82       	std	Y+5, r1	; 0x05
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_ErrStateReadPinValue+0x114>
	}
	else
	{
		return PinNumberError ;
    11ec:	82 e0       	ldi	r24, 0x02	; 2
    11ee:	8d 83       	std	Y+5, r24	; 0x05
    11f0:	8d 81       	ldd	r24, Y+5	; 0x05
	}

}
    11f2:	27 96       	adiw	r28, 0x07	; 7
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <DIO_ErrStateSetGroupDirection>:



//
ErrState  DIO_ErrStateSetGroupDirection(DIO_GroupNumber Copy_GroupNumber ,u8 Copy_DirectionState)
{
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	00 d0       	rcall	.+0      	; 0x120a <DIO_ErrStateSetGroupDirection+0x6>
    120a:	00 d0       	rcall	.+0      	; 0x120c <DIO_ErrStateSetGroupDirection+0x8>
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_DirectionState <= 0xff && Copy_DirectionState>=0x00)
	{
		switch(Copy_GroupNumber)
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3d 83       	std	Y+5, r19	; 0x05
    121e:	2c 83       	std	Y+4, r18	; 0x04
    1220:	8c 81       	ldd	r24, Y+4	; 0x04
    1222:	9d 81       	ldd	r25, Y+5	; 0x05
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	91 05       	cpc	r25, r1
    1228:	d1 f0       	breq	.+52     	; 0x125e <DIO_ErrStateSetGroupDirection+0x5a>
    122a:	2c 81       	ldd	r18, Y+4	; 0x04
    122c:	3d 81       	ldd	r19, Y+5	; 0x05
    122e:	22 30       	cpi	r18, 0x02	; 2
    1230:	31 05       	cpc	r19, r1
    1232:	2c f4       	brge	.+10     	; 0x123e <DIO_ErrStateSetGroupDirection+0x3a>
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	9d 81       	ldd	r25, Y+5	; 0x05
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	61 f0       	breq	.+24     	; 0x1254 <DIO_ErrStateSetGroupDirection+0x50>
    123c:	1f c0       	rjmp	.+62     	; 0x127c <DIO_ErrStateSetGroupDirection+0x78>
    123e:	2c 81       	ldd	r18, Y+4	; 0x04
    1240:	3d 81       	ldd	r19, Y+5	; 0x05
    1242:	22 30       	cpi	r18, 0x02	; 2
    1244:	31 05       	cpc	r19, r1
    1246:	81 f0       	breq	.+32     	; 0x1268 <DIO_ErrStateSetGroupDirection+0x64>
    1248:	8c 81       	ldd	r24, Y+4	; 0x04
    124a:	9d 81       	ldd	r25, Y+5	; 0x05
    124c:	83 30       	cpi	r24, 0x03	; 3
    124e:	91 05       	cpc	r25, r1
    1250:	81 f0       	breq	.+32     	; 0x1272 <DIO_ErrStateSetGroupDirection+0x6e>
    1252:	14 c0       	rjmp	.+40     	; 0x127c <DIO_ErrStateSetGroupDirection+0x78>
		{
		case DIO_GroupA: DDRA_ITI =  Copy_DirectionState ;break ;
    1254:	ea e3       	ldi	r30, 0x3A	; 58
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	80 83       	st	Z, r24
    125c:	12 c0       	rjmp	.+36     	; 0x1282 <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupB: DDRB_ITI =  Copy_DirectionState ;break ;
    125e:	e7 e3       	ldi	r30, 0x37	; 55
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	80 83       	st	Z, r24
    1266:	0d c0       	rjmp	.+26     	; 0x1282 <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupC: DDRC_ITI =  Copy_DirectionState ;break ;
    1268:	e4 e3       	ldi	r30, 0x34	; 52
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	80 83       	st	Z, r24
    1270:	08 c0       	rjmp	.+16     	; 0x1282 <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupD: DDRD_ITI =  Copy_DirectionState ;break ;
    1272:	e1 e3       	ldi	r30, 0x31	; 49
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	80 83       	st	Z, r24
    127a:	03 c0       	rjmp	.+6      	; 0x1282 <DIO_ErrStateSetGroupDirection+0x7e>
		default :
			return GroupError ;
    127c:	91 e0       	ldi	r25, 0x01	; 1
    127e:	9b 83       	std	Y+3, r25	; 0x03
    1280:	01 c0       	rjmp	.+2      	; 0x1284 <DIO_ErrStateSetGroupDirection+0x80>
		}
		return NoError ;
    1282:	1b 82       	std	Y+3, r1	; 0x03
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	else
	{
		return DirectionRangError;
	}
}
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <DIO_ErrStateSetGroupValue>:
ErrState  DIO_ErrStateSetGroupValue(DIO_GroupNumber Copy_GroupNumber ,u8 Copy_ValueState)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	00 d0       	rcall	.+0      	; 0x129c <DIO_ErrStateSetGroupValue+0x6>
    129c:	00 d0       	rcall	.+0      	; 0x129e <DIO_ErrStateSetGroupValue+0x8>
    129e:	0f 92       	push	r0
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_ValueState <= 0xff && Copy_ValueState>=0x00)
	{
		switch(Copy_GroupNumber)
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	3d 83       	std	Y+5, r19	; 0x05
    12b0:	2c 83       	std	Y+4, r18	; 0x04
    12b2:	8c 81       	ldd	r24, Y+4	; 0x04
    12b4:	9d 81       	ldd	r25, Y+5	; 0x05
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	91 05       	cpc	r25, r1
    12ba:	d1 f0       	breq	.+52     	; 0x12f0 <DIO_ErrStateSetGroupValue+0x5a>
    12bc:	2c 81       	ldd	r18, Y+4	; 0x04
    12be:	3d 81       	ldd	r19, Y+5	; 0x05
    12c0:	22 30       	cpi	r18, 0x02	; 2
    12c2:	31 05       	cpc	r19, r1
    12c4:	2c f4       	brge	.+10     	; 0x12d0 <DIO_ErrStateSetGroupValue+0x3a>
    12c6:	8c 81       	ldd	r24, Y+4	; 0x04
    12c8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ca:	00 97       	sbiw	r24, 0x00	; 0
    12cc:	61 f0       	breq	.+24     	; 0x12e6 <DIO_ErrStateSetGroupValue+0x50>
    12ce:	1f c0       	rjmp	.+62     	; 0x130e <DIO_ErrStateSetGroupValue+0x78>
    12d0:	2c 81       	ldd	r18, Y+4	; 0x04
    12d2:	3d 81       	ldd	r19, Y+5	; 0x05
    12d4:	22 30       	cpi	r18, 0x02	; 2
    12d6:	31 05       	cpc	r19, r1
    12d8:	81 f0       	breq	.+32     	; 0x12fa <DIO_ErrStateSetGroupValue+0x64>
    12da:	8c 81       	ldd	r24, Y+4	; 0x04
    12dc:	9d 81       	ldd	r25, Y+5	; 0x05
    12de:	83 30       	cpi	r24, 0x03	; 3
    12e0:	91 05       	cpc	r25, r1
    12e2:	81 f0       	breq	.+32     	; 0x1304 <DIO_ErrStateSetGroupValue+0x6e>
    12e4:	14 c0       	rjmp	.+40     	; 0x130e <DIO_ErrStateSetGroupValue+0x78>
		{
		case DIO_GroupA: PORTA_ITI =  Copy_ValueState ;break ;
    12e6:	eb e3       	ldi	r30, 0x3B	; 59
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	80 83       	st	Z, r24
    12ee:	12 c0       	rjmp	.+36     	; 0x1314 <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupB: PORTB_ITI =  Copy_ValueState ;break ;
    12f0:	e8 e3       	ldi	r30, 0x38	; 56
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	80 83       	st	Z, r24
    12f8:	0d c0       	rjmp	.+26     	; 0x1314 <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupC: PORTC_ITI =  Copy_ValueState ;break ;
    12fa:	e5 e3       	ldi	r30, 0x35	; 53
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	80 83       	st	Z, r24
    1302:	08 c0       	rjmp	.+16     	; 0x1314 <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupD: PORTD_ITI =  Copy_ValueState ;break ;
    1304:	e2 e3       	ldi	r30, 0x32	; 50
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	80 83       	st	Z, r24
    130c:	03 c0       	rjmp	.+6      	; 0x1314 <DIO_ErrStateSetGroupValue+0x7e>
		default :
			return GroupError ;
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	9b 83       	std	Y+3, r25	; 0x03
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <DIO_ErrStateSetGroupValue+0x80>
		}
		return NoError ;
    1314:	1b 82       	std	Y+3, r1	; 0x03
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
	else
	{
		return ValueRangError;
	}

}
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <DIO_ErrStateReadGroupValue>:
ErrState  DIO_ErrStateReadGroupValue(DIO_GroupNumber Copy_GroupNumber ,u8 *Result)
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	00 d0       	rcall	.+0      	; 0x132e <DIO_ErrStateReadGroupValue+0x6>
    132e:	00 d0       	rcall	.+0      	; 0x1330 <DIO_ErrStateReadGroupValue+0x8>
    1330:	00 d0       	rcall	.+0      	; 0x1332 <DIO_ErrStateReadGroupValue+0xa>
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	7b 83       	std	Y+3, r23	; 0x03
    133a:	6a 83       	std	Y+2, r22	; 0x02
	if(Result!=Null)
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	9b 81       	ldd	r25, Y+3	; 0x03
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	09 f4       	brne	.+2      	; 0x1346 <DIO_ErrStateReadGroupValue+0x1e>
    1344:	40 c0       	rjmp	.+128    	; 0x13c6 <DIO_ErrStateReadGroupValue+0x9e>
	{
		switch(Copy_GroupNumber)
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3e 83       	std	Y+6, r19	; 0x06
    134e:	2d 83       	std	Y+5, r18	; 0x05
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	e1 f0       	breq	.+56     	; 0x1392 <DIO_ErrStateReadGroupValue+0x6a>
    135a:	2d 81       	ldd	r18, Y+5	; 0x05
    135c:	3e 81       	ldd	r19, Y+6	; 0x06
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	2c f4       	brge	.+10     	; 0x136e <DIO_ErrStateReadGroupValue+0x46>
    1364:	8d 81       	ldd	r24, Y+5	; 0x05
    1366:	9e 81       	ldd	r25, Y+6	; 0x06
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	61 f0       	breq	.+24     	; 0x1384 <DIO_ErrStateReadGroupValue+0x5c>
    136c:	27 c0       	rjmp	.+78     	; 0x13bc <DIO_ErrStateReadGroupValue+0x94>
    136e:	2d 81       	ldd	r18, Y+5	; 0x05
    1370:	3e 81       	ldd	r19, Y+6	; 0x06
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	31 05       	cpc	r19, r1
    1376:	a1 f0       	breq	.+40     	; 0x13a0 <DIO_ErrStateReadGroupValue+0x78>
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	9e 81       	ldd	r25, Y+6	; 0x06
    137c:	83 30       	cpi	r24, 0x03	; 3
    137e:	91 05       	cpc	r25, r1
    1380:	b1 f0       	breq	.+44     	; 0x13ae <DIO_ErrStateReadGroupValue+0x86>
    1382:	1c c0       	rjmp	.+56     	; 0x13bc <DIO_ErrStateReadGroupValue+0x94>
		{
		case DIO_GroupA: *Result = PINA_ITI ; break ;
    1384:	e9 e3       	ldi	r30, 0x39	; 57
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	ea 81       	ldd	r30, Y+2	; 0x02
    138c:	fb 81       	ldd	r31, Y+3	; 0x03
    138e:	80 83       	st	Z, r24
    1390:	18 c0       	rjmp	.+48     	; 0x13c2 <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupB: *Result = PINB_ITI ; break ;
    1392:	e6 e3       	ldi	r30, 0x36	; 54
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	ea 81       	ldd	r30, Y+2	; 0x02
    139a:	fb 81       	ldd	r31, Y+3	; 0x03
    139c:	80 83       	st	Z, r24
    139e:	11 c0       	rjmp	.+34     	; 0x13c2 <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupC: *Result = PINC_ITI ; break ;
    13a0:	e3 e3       	ldi	r30, 0x33	; 51
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	ea 81       	ldd	r30, Y+2	; 0x02
    13a8:	fb 81       	ldd	r31, Y+3	; 0x03
    13aa:	80 83       	st	Z, r24
    13ac:	0a c0       	rjmp	.+20     	; 0x13c2 <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupD: *Result = PIND_ITI ; break ;
    13ae:	e0 e3       	ldi	r30, 0x30	; 48
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	ea 81       	ldd	r30, Y+2	; 0x02
    13b6:	fb 81       	ldd	r31, Y+3	; 0x03
    13b8:	80 83       	st	Z, r24
    13ba:	03 c0       	rjmp	.+6      	; 0x13c2 <DIO_ErrStateReadGroupValue+0x9a>
		default :
			return GroupError ;
    13bc:	91 e0       	ldi	r25, 0x01	; 1
    13be:	9c 83       	std	Y+4, r25	; 0x04
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <DIO_ErrStateReadGroupValue+0xa2>
		}
		return NoError ;
    13c2:	1c 82       	std	Y+4, r1	; 0x04
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <DIO_ErrStateReadGroupValue+0xa2>
	}
	else
	{
		return AddressError;
    13c6:	25 e0       	ldi	r18, 0x05	; 5
    13c8:	2c 83       	std	Y+4, r18	; 0x04
    13ca:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    13cc:	26 96       	adiw	r28, 0x06	; 6
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <SW_SwitchErrStateInit>:

#include "Switch_Interface.h"


SwitchErrState  SW_SwitchErrStateInit(Switch_Info * Switch)
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <SW_SwitchErrStateInit+0x6>
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <SW_SwitchErrStateInit+0x8>
    13e6:	0f 92       	push	r0
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	9a 83       	std	Y+2, r25	; 0x02
    13ee:	89 83       	std	Y+1, r24	; 0x01

	DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_Input);
    13f0:	e9 81       	ldd	r30, Y+1	; 0x01
    13f2:	fa 81       	ldd	r31, Y+2	; 0x02
    13f4:	80 81       	ld	r24, Z
    13f6:	e9 81       	ldd	r30, Y+1	; 0x01
    13f8:	fa 81       	ldd	r31, Y+2	; 0x02
    13fa:	91 81       	ldd	r25, Z+1	; 0x01
    13fc:	69 2f       	mov	r22, r25
    13fe:	40 e0       	ldi	r20, 0x00	; 0
    1400:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_ErrStateSetPinDirection>
	if(Switch->ConnectionType == InternalPullUp)
    1404:	e9 81       	ldd	r30, Y+1	; 0x01
    1406:	fa 81       	ldd	r31, Y+2	; 0x02
    1408:	82 81       	ldd	r24, Z+2	; 0x02
    140a:	88 23       	and	r24, r24
    140c:	09 f0       	breq	.+2      	; 0x1410 <SW_SwitchErrStateInit+0x32>
    140e:	7d c0       	rjmp	.+250    	; 0x150a <SW_SwitchErrStateInit+0x12c>
	{
		switch(Switch->SW_Group)
    1410:	e9 81       	ldd	r30, Y+1	; 0x01
    1412:	fa 81       	ldd	r31, Y+2	; 0x02
    1414:	80 81       	ld	r24, Z
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	3d 83       	std	Y+5, r19	; 0x05
    141c:	2c 83       	std	Y+4, r18	; 0x04
    141e:	8c 81       	ldd	r24, Y+4	; 0x04
    1420:	9d 81       	ldd	r25, Y+5	; 0x05
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	91 05       	cpc	r25, r1
    1426:	61 f1       	breq	.+88     	; 0x1480 <SW_SwitchErrStateInit+0xa2>
    1428:	2c 81       	ldd	r18, Y+4	; 0x04
    142a:	3d 81       	ldd	r19, Y+5	; 0x05
    142c:	22 30       	cpi	r18, 0x02	; 2
    142e:	31 05       	cpc	r19, r1
    1430:	2c f4       	brge	.+10     	; 0x143c <SW_SwitchErrStateInit+0x5e>
    1432:	8c 81       	ldd	r24, Y+4	; 0x04
    1434:	9d 81       	ldd	r25, Y+5	; 0x05
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	69 f0       	breq	.+26     	; 0x1454 <SW_SwitchErrStateInit+0x76>
    143a:	64 c0       	rjmp	.+200    	; 0x1504 <SW_SwitchErrStateInit+0x126>
    143c:	2c 81       	ldd	r18, Y+4	; 0x04
    143e:	3d 81       	ldd	r19, Y+5	; 0x05
    1440:	22 30       	cpi	r18, 0x02	; 2
    1442:	31 05       	cpc	r19, r1
    1444:	99 f1       	breq	.+102    	; 0x14ac <SW_SwitchErrStateInit+0xce>
    1446:	8c 81       	ldd	r24, Y+4	; 0x04
    1448:	9d 81       	ldd	r25, Y+5	; 0x05
    144a:	83 30       	cpi	r24, 0x03	; 3
    144c:	91 05       	cpc	r25, r1
    144e:	09 f4       	brne	.+2      	; 0x1452 <SW_SwitchErrStateInit+0x74>
    1450:	43 c0       	rjmp	.+134    	; 0x14d8 <SW_SwitchErrStateInit+0xfa>
    1452:	58 c0       	rjmp	.+176    	; 0x1504 <SW_SwitchErrStateInit+0x126>
		{
			/*Group A*/
			case DIO_GroupA : SET_BIT(PORTA_ITI , Switch->SW_Pin ) ;
    1454:	ab e3       	ldi	r26, 0x3B	; 59
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	eb e3       	ldi	r30, 0x3B	; 59
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	e9 81       	ldd	r30, Y+1	; 0x01
    1462:	fa 81       	ldd	r31, Y+2	; 0x02
    1464:	81 81       	ldd	r24, Z+1	; 0x01
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <SW_SwitchErrStateInit+0x98>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <SW_SwitchErrStateInit+0x94>
    147a:	84 2b       	or	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	45 c0       	rjmp	.+138    	; 0x150a <SW_SwitchErrStateInit+0x12c>
			break ;
			/*Group B*/
			case DIO_GroupB : SET_BIT(PORTB_ITI , Switch->SW_Pin ) ;
    1480:	a8 e3       	ldi	r26, 0x38	; 56
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e8 e3       	ldi	r30, 0x38	; 56
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	e9 81       	ldd	r30, Y+1	; 0x01
    148e:	fa 81       	ldd	r31, Y+2	; 0x02
    1490:	81 81       	ldd	r24, Z+1	; 0x01
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <SW_SwitchErrStateInit+0xc4>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <SW_SwitchErrStateInit+0xc0>
    14a6:	84 2b       	or	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	2f c0       	rjmp	.+94     	; 0x150a <SW_SwitchErrStateInit+0x12c>
			break ;
			/*Group C*/
			case DIO_GroupC : SET_BIT(PORTC_ITI , Switch->SW_Pin ) ;
    14ac:	a5 e3       	ldi	r26, 0x35	; 53
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e5 e3       	ldi	r30, 0x35	; 53
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ba:	fa 81       	ldd	r31, Y+2	; 0x02
    14bc:	81 81       	ldd	r24, Z+1	; 0x01
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	02 2e       	mov	r0, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <SW_SwitchErrStateInit+0xf0>
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	0a 94       	dec	r0
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <SW_SwitchErrStateInit+0xec>
    14d2:	84 2b       	or	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	19 c0       	rjmp	.+50     	; 0x150a <SW_SwitchErrStateInit+0x12c>
			break ;
			/*Group D*/
			case DIO_GroupD : SET_BIT(PORTD_ITI , Switch->SW_Pin ) ;
    14d8:	a2 e3       	ldi	r26, 0x32	; 50
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e2 e3       	ldi	r30, 0x32	; 50
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	e9 81       	ldd	r30, Y+1	; 0x01
    14e6:	fa 81       	ldd	r31, Y+2	; 0x02
    14e8:	81 81       	ldd	r24, Z+1	; 0x01
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	02 2e       	mov	r0, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <SW_SwitchErrStateInit+0x11c>
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	0a 94       	dec	r0
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <SW_SwitchErrStateInit+0x118>
    14fe:	84 2b       	or	r24, r20
    1500:	8c 93       	st	X, r24
    1502:	03 c0       	rjmp	.+6      	; 0x150a <SW_SwitchErrStateInit+0x12c>
			break ;
			/*Wrong*/
			default:
				return SwitchGroupNumError ;
    1504:	91 e0       	ldi	r25, 0x01	; 1
    1506:	9b 83       	std	Y+3, r25	; 0x03
    1508:	01 c0       	rjmp	.+2      	; 0x150c <SW_SwitchErrStateInit+0x12e>
		}
	}
	return SwitchNoError;
    150a:	1b 82       	std	Y+3, r1	; 0x03
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	08 95       	ret

0000151e <SW_SwitchErrStateGetState>:
SwitchErrState  SW_SwitchErrStateGetState(Switch_Info * Switch ,SwitchState * Result)
{
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	00 d0       	rcall	.+0      	; 0x1524 <SW_SwitchErrStateGetState+0x6>
    1524:	00 d0       	rcall	.+0      	; 0x1526 <SW_SwitchErrStateGetState+0x8>
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	9a 83       	std	Y+2, r25	; 0x02
    152c:	89 83       	std	Y+1, r24	; 0x01
    152e:	7c 83       	std	Y+4, r23	; 0x04
    1530:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,Result);
    1532:	e9 81       	ldd	r30, Y+1	; 0x01
    1534:	fa 81       	ldd	r31, Y+2	; 0x02
    1536:	80 81       	ld	r24, Z
    1538:	e9 81       	ldd	r30, Y+1	; 0x01
    153a:	fa 81       	ldd	r31, Y+2	; 0x02
    153c:	91 81       	ldd	r25, Z+1	; 0x01
    153e:	2b 81       	ldd	r18, Y+3	; 0x03
    1540:	3c 81       	ldd	r19, Y+4	; 0x04
    1542:	69 2f       	mov	r22, r25
    1544:	a9 01       	movw	r20, r18
    1546:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_ErrStateReadPinValue>
	return SwitchNoError;
    154a:	80 e0       	ldi	r24, 0x00	; 0
}
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <SevSeg_SevErrInit>:
		SevSegCA_8 ,
		SevSegCA_9
};

SevErrState	   SevSeg_SevErrInit(SevSeg_info* SevenSegment1)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	00 d0       	rcall	.+0      	; 0x1560 <SevSeg_SevErrInit+0x6>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	9a 83       	std	Y+2, r25	; 0x02
    1566:	89 83       	std	Y+1, r24	; 0x01
	DIO_ErrStateSetGroupDirection ((SevenSegment1->SevSeg_Group),0xff);
    1568:	e9 81       	ldd	r30, Y+1	; 0x01
    156a:	fa 81       	ldd	r31, Y+2	; 0x02
    156c:	81 81       	ldd	r24, Z+1	; 0x01
    156e:	6f ef       	ldi	r22, 0xFF	; 255
    1570:	0e 94 02 09 	call	0x1204	; 0x1204 <DIO_ErrStateSetGroupDirection>
	return SevSegNoError;
    1574:	80 e0       	ldi	r24, 0x00	; 0
}
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <SevSeg_SevErrStateSetNumber>:

SevErrState    SevSeg_SevErrStateSetNumber(u8 Copy_Number , SevSeg_info* SevenSegment1)
{
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	61 97       	sbiw	r28, 0x11	; 17
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	8f 87       	std	Y+15, r24	; 0x0f
    1596:	79 8b       	std	Y+17, r23	; 0x11
    1598:	68 8b       	std	Y+16, r22	; 0x10
	DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[Copy_Number]);
    159a:	e8 89       	ldd	r30, Y+16	; 0x10
    159c:	f9 89       	ldd	r31, Y+17	; 0x11
    159e:	21 81       	ldd	r18, Z+1	; 0x01
    15a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a2:	88 2f       	mov	r24, r24
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	fc 01       	movw	r30, r24
    15a8:	e0 59       	subi	r30, 0x90	; 144
    15aa:	fe 4f       	sbci	r31, 0xFE	; 254
    15ac:	90 81       	ld	r25, Z
    15ae:	82 2f       	mov	r24, r18
    15b0:	69 2f       	mov	r22, r25
    15b2:	0e 94 4b 09 	call	0x1296	; 0x1296 <DIO_ErrStateSetGroupValue>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	aa e7       	ldi	r26, 0x7A	; 122
    15bc:	b4 e4       	ldi	r27, 0x44	; 68
    15be:	8b 87       	std	Y+11, r24	; 0x0b
    15c0:	9c 87       	std	Y+12, r25	; 0x0c
    15c2:	ad 87       	std	Y+13, r26	; 0x0d
    15c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    15cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	4a ef       	ldi	r20, 0xFA	; 250
    15d4:	54 e4       	ldi	r21, 0x44	; 68
    15d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	8f 83       	std	Y+7, r24	; 0x07
    15e0:	98 87       	std	Y+8, r25	; 0x08
    15e2:	a9 87       	std	Y+9, r26	; 0x09
    15e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15e6:	6f 81       	ldd	r22, Y+7	; 0x07
    15e8:	78 85       	ldd	r23, Y+8	; 0x08
    15ea:	89 85       	ldd	r24, Y+9	; 0x09
    15ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e8       	ldi	r20, 0x80	; 128
    15f4:	5f e3       	ldi	r21, 0x3F	; 63
    15f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15fa:	88 23       	and	r24, r24
    15fc:	2c f4       	brge	.+10     	; 0x1608 <SevSeg_SevErrStateSetNumber+0x88>
		__ticks = 1;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	9e 83       	std	Y+6, r25	; 0x06
    1604:	8d 83       	std	Y+5, r24	; 0x05
    1606:	3f c0       	rjmp	.+126    	; 0x1686 <SevSeg_SevErrStateSetNumber+0x106>
	else if (__tmp > 65535)
    1608:	6f 81       	ldd	r22, Y+7	; 0x07
    160a:	78 85       	ldd	r23, Y+8	; 0x08
    160c:	89 85       	ldd	r24, Y+9	; 0x09
    160e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	3f ef       	ldi	r19, 0xFF	; 255
    1614:	4f e7       	ldi	r20, 0x7F	; 127
    1616:	57 e4       	ldi	r21, 0x47	; 71
    1618:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    161c:	18 16       	cp	r1, r24
    161e:	4c f5       	brge	.+82     	; 0x1672 <SevSeg_SevErrStateSetNumber+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1620:	6b 85       	ldd	r22, Y+11	; 0x0b
    1622:	7c 85       	ldd	r23, Y+12	; 0x0c
    1624:	8d 85       	ldd	r24, Y+13	; 0x0d
    1626:	9e 85       	ldd	r25, Y+14	; 0x0e
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e2       	ldi	r20, 0x20	; 32
    162e:	51 e4       	ldi	r21, 0x41	; 65
    1630:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	bc 01       	movw	r22, r24
    163a:	cd 01       	movw	r24, r26
    163c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	9e 83       	std	Y+6, r25	; 0x06
    1646:	8d 83       	std	Y+5, r24	; 0x05
    1648:	0f c0       	rjmp	.+30     	; 0x1668 <SevSeg_SevErrStateSetNumber+0xe8>
    164a:	88 ec       	ldi	r24, 0xC8	; 200
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	9c 83       	std	Y+4, r25	; 0x04
    1650:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	9c 81       	ldd	r25, Y+4	; 0x04
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <SevSeg_SevErrStateSetNumber+0xd6>
    165a:	9c 83       	std	Y+4, r25	; 0x04
    165c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165e:	8d 81       	ldd	r24, Y+5	; 0x05
    1660:	9e 81       	ldd	r25, Y+6	; 0x06
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	9e 83       	std	Y+6, r25	; 0x06
    1666:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	9e 81       	ldd	r25, Y+6	; 0x06
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	69 f7       	brne	.-38     	; 0x164a <SevSeg_SevErrStateSetNumber+0xca>
    1670:	14 c0       	rjmp	.+40     	; 0x169a <SevSeg_SevErrStateSetNumber+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1672:	6f 81       	ldd	r22, Y+7	; 0x07
    1674:	78 85       	ldd	r23, Y+8	; 0x08
    1676:	89 85       	ldd	r24, Y+9	; 0x09
    1678:	9a 85       	ldd	r25, Y+10	; 0x0a
    167a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	9e 83       	std	Y+6, r25	; 0x06
    1684:	8d 83       	std	Y+5, r24	; 0x05
    1686:	8d 81       	ldd	r24, Y+5	; 0x05
    1688:	9e 81       	ldd	r25, Y+6	; 0x06
    168a:	9a 83       	std	Y+2, r25	; 0x02
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	9a 81       	ldd	r25, Y+2	; 0x02
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <SevSeg_SevErrStateSetNumber+0x112>
    1696:	9a 83       	std	Y+2, r25	; 0x02
    1698:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	return SevSegNoError;
    169a:	80 e0       	ldi	r24, 0x00	; 0
}
    169c:	61 96       	adiw	r28, 0x11	; 17
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <SevSeg_SevErrStateDisplayRange>:

SevErrState    SevSeg_SevErrStateDisplayRange(SevSeg_info* SevenSegment1 , u8 Copy_start , u8 Copy_End )
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	a3 97       	sbiw	r28, 0x23	; 35
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	98 a3       	std	Y+32, r25	; 0x20
    16c4:	8f 8f       	std	Y+31, r24	; 0x1f
    16c6:	69 a3       	std	Y+33, r22	; 0x21
    16c8:	4a a3       	std	Y+34, r20	; 0x22
	if (Copy_start<Copy_End)
    16ca:	99 a1       	ldd	r25, Y+33	; 0x21
    16cc:	8a a1       	ldd	r24, Y+34	; 0x22
    16ce:	98 17       	cp	r25, r24
    16d0:	08 f0       	brcs	.+2      	; 0x16d4 <SevSeg_SevErrStateDisplayRange+0x26>
    16d2:	94 c0       	rjmp	.+296    	; 0x17fc <SevSeg_SevErrStateDisplayRange+0x14e>
	{
		for(s8 i = Copy_start; i<=Copy_End;i++)
    16d4:	89 a1       	ldd	r24, Y+33	; 0x21
    16d6:	8e 8f       	std	Y+30, r24	; 0x1e
    16d8:	84 c0       	rjmp	.+264    	; 0x17e2 <SevSeg_SevErrStateDisplayRange+0x134>
		{
			DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[i]);
    16da:	ef 8d       	ldd	r30, Y+31	; 0x1f
    16dc:	f8 a1       	ldd	r31, Y+32	; 0x20
    16de:	21 81       	ldd	r18, Z+1	; 0x01
    16e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16e2:	99 27       	eor	r25, r25
    16e4:	87 fd       	sbrc	r24, 7
    16e6:	90 95       	com	r25
    16e8:	fc 01       	movw	r30, r24
    16ea:	e0 59       	subi	r30, 0x90	; 144
    16ec:	fe 4f       	sbci	r31, 0xFE	; 254
    16ee:	90 81       	ld	r25, Z
    16f0:	82 2f       	mov	r24, r18
    16f2:	69 2f       	mov	r22, r25
    16f4:	0e 94 4b 09 	call	0x1296	; 0x1296 <DIO_ErrStateSetGroupValue>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	aa e7       	ldi	r26, 0x7A	; 122
    16fe:	b4 e4       	ldi	r27, 0x44	; 68
    1700:	89 8f       	std	Y+25, r24	; 0x19
    1702:	9a 8f       	std	Y+26, r25	; 0x1a
    1704:	ab 8f       	std	Y+27, r26	; 0x1b
    1706:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1708:	69 8d       	ldd	r22, Y+25	; 0x19
    170a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    170c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    170e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	4a ef       	ldi	r20, 0xFA	; 250
    1716:	54 e4       	ldi	r21, 0x44	; 68
    1718:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	8d 8b       	std	Y+21, r24	; 0x15
    1722:	9e 8b       	std	Y+22, r25	; 0x16
    1724:	af 8b       	std	Y+23, r26	; 0x17
    1726:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1728:	6d 89       	ldd	r22, Y+21	; 0x15
    172a:	7e 89       	ldd	r23, Y+22	; 0x16
    172c:	8f 89       	ldd	r24, Y+23	; 0x17
    172e:	98 8d       	ldd	r25, Y+24	; 0x18
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e8       	ldi	r20, 0x80	; 128
    1736:	5f e3       	ldi	r21, 0x3F	; 63
    1738:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    173c:	88 23       	and	r24, r24
    173e:	2c f4       	brge	.+10     	; 0x174a <SevSeg_SevErrStateDisplayRange+0x9c>
		__ticks = 1;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9c 8b       	std	Y+20, r25	; 0x14
    1746:	8b 8b       	std	Y+19, r24	; 0x13
    1748:	3f c0       	rjmp	.+126    	; 0x17c8 <SevSeg_SevErrStateDisplayRange+0x11a>
	else if (__tmp > 65535)
    174a:	6d 89       	ldd	r22, Y+21	; 0x15
    174c:	7e 89       	ldd	r23, Y+22	; 0x16
    174e:	8f 89       	ldd	r24, Y+23	; 0x17
    1750:	98 8d       	ldd	r25, Y+24	; 0x18
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	3f ef       	ldi	r19, 0xFF	; 255
    1756:	4f e7       	ldi	r20, 0x7F	; 127
    1758:	57 e4       	ldi	r21, 0x47	; 71
    175a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    175e:	18 16       	cp	r1, r24
    1760:	4c f5       	brge	.+82     	; 0x17b4 <SevSeg_SevErrStateDisplayRange+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1762:	69 8d       	ldd	r22, Y+25	; 0x19
    1764:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1766:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1768:	9c 8d       	ldd	r25, Y+28	; 0x1c
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e2       	ldi	r20, 0x20	; 32
    1770:	51 e4       	ldi	r21, 0x41	; 65
    1772:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	bc 01       	movw	r22, r24
    177c:	cd 01       	movw	r24, r26
    177e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9c 8b       	std	Y+20, r25	; 0x14
    1788:	8b 8b       	std	Y+19, r24	; 0x13
    178a:	0f c0       	rjmp	.+30     	; 0x17aa <SevSeg_SevErrStateDisplayRange+0xfc>
    178c:	88 ec       	ldi	r24, 0xC8	; 200
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	9a 8b       	std	Y+18, r25	; 0x12
    1792:	89 8b       	std	Y+17, r24	; 0x11
    1794:	89 89       	ldd	r24, Y+17	; 0x11
    1796:	9a 89       	ldd	r25, Y+18	; 0x12
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <SevSeg_SevErrStateDisplayRange+0xea>
    179c:	9a 8b       	std	Y+18, r25	; 0x12
    179e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a0:	8b 89       	ldd	r24, Y+19	; 0x13
    17a2:	9c 89       	ldd	r25, Y+20	; 0x14
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	9c 8b       	std	Y+20, r25	; 0x14
    17a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17aa:	8b 89       	ldd	r24, Y+19	; 0x13
    17ac:	9c 89       	ldd	r25, Y+20	; 0x14
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	69 f7       	brne	.-38     	; 0x178c <SevSeg_SevErrStateDisplayRange+0xde>
    17b2:	14 c0       	rjmp	.+40     	; 0x17dc <SevSeg_SevErrStateDisplayRange+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b4:	6d 89       	ldd	r22, Y+21	; 0x15
    17b6:	7e 89       	ldd	r23, Y+22	; 0x16
    17b8:	8f 89       	ldd	r24, Y+23	; 0x17
    17ba:	98 8d       	ldd	r25, Y+24	; 0x18
    17bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	9c 8b       	std	Y+20, r25	; 0x14
    17c6:	8b 8b       	std	Y+19, r24	; 0x13
    17c8:	8b 89       	ldd	r24, Y+19	; 0x13
    17ca:	9c 89       	ldd	r25, Y+20	; 0x14
    17cc:	98 8b       	std	Y+16, r25	; 0x10
    17ce:	8f 87       	std	Y+15, r24	; 0x0f
    17d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d2:	98 89       	ldd	r25, Y+16	; 0x10
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <SevSeg_SevErrStateDisplayRange+0x126>
    17d8:	98 8b       	std	Y+16, r25	; 0x10
    17da:	8f 87       	std	Y+15, r24	; 0x0f

SevErrState    SevSeg_SevErrStateDisplayRange(SevSeg_info* SevenSegment1 , u8 Copy_start , u8 Copy_End )
{
	if (Copy_start<Copy_End)
	{
		for(s8 i = Copy_start; i<=Copy_End;i++)
    17dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17de:	8f 5f       	subi	r24, 0xFF	; 255
    17e0:	8e 8f       	std	Y+30, r24	; 0x1e
    17e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17e4:	28 2f       	mov	r18, r24
    17e6:	33 27       	eor	r19, r19
    17e8:	27 fd       	sbrc	r18, 7
    17ea:	30 95       	com	r19
    17ec:	8a a1       	ldd	r24, Y+34	; 0x22
    17ee:	88 2f       	mov	r24, r24
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	82 17       	cp	r24, r18
    17f4:	93 07       	cpc	r25, r19
    17f6:	0c f0       	brlt	.+2      	; 0x17fa <SevSeg_SevErrStateDisplayRange+0x14c>
    17f8:	70 cf       	rjmp	.-288    	; 0x16da <SevSeg_SevErrStateDisplayRange+0x2c>
    17fa:	9c c0       	rjmp	.+312    	; 0x1934 <SevSeg_SevErrStateDisplayRange+0x286>
		{
			DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[i]);
			_delay_ms(1000);
		}
	}
	else if(Copy_start>Copy_End)
    17fc:	99 a1       	ldd	r25, Y+33	; 0x21
    17fe:	8a a1       	ldd	r24, Y+34	; 0x22
    1800:	89 17       	cp	r24, r25
    1802:	08 f0       	brcs	.+2      	; 0x1806 <SevSeg_SevErrStateDisplayRange+0x158>
    1804:	94 c0       	rjmp	.+296    	; 0x192e <SevSeg_SevErrStateDisplayRange+0x280>
	{
		for(s8 i = Copy_start; i>=Copy_End;i--)
    1806:	89 a1       	ldd	r24, Y+33	; 0x21
    1808:	8d 8f       	std	Y+29, r24	; 0x1d
    180a:	84 c0       	rjmp	.+264    	; 0x1914 <SevSeg_SevErrStateDisplayRange+0x266>
		{
			DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[i]);
    180c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    180e:	f8 a1       	ldd	r31, Y+32	; 0x20
    1810:	21 81       	ldd	r18, Z+1	; 0x01
    1812:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1814:	99 27       	eor	r25, r25
    1816:	87 fd       	sbrc	r24, 7
    1818:	90 95       	com	r25
    181a:	fc 01       	movw	r30, r24
    181c:	e0 59       	subi	r30, 0x90	; 144
    181e:	fe 4f       	sbci	r31, 0xFE	; 254
    1820:	90 81       	ld	r25, Z
    1822:	82 2f       	mov	r24, r18
    1824:	69 2f       	mov	r22, r25
    1826:	0e 94 4b 09 	call	0x1296	; 0x1296 <DIO_ErrStateSetGroupValue>
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	aa e7       	ldi	r26, 0x7A	; 122
    1830:	b4 e4       	ldi	r27, 0x44	; 68
    1832:	8b 87       	std	Y+11, r24	; 0x0b
    1834:	9c 87       	std	Y+12, r25	; 0x0c
    1836:	ad 87       	std	Y+13, r26	; 0x0d
    1838:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183a:	6b 85       	ldd	r22, Y+11	; 0x0b
    183c:	7c 85       	ldd	r23, Y+12	; 0x0c
    183e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1840:	9e 85       	ldd	r25, Y+14	; 0x0e
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	4a ef       	ldi	r20, 0xFA	; 250
    1848:	54 e4       	ldi	r21, 0x44	; 68
    184a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	8f 83       	std	Y+7, r24	; 0x07
    1854:	98 87       	std	Y+8, r25	; 0x08
    1856:	a9 87       	std	Y+9, r26	; 0x09
    1858:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    185a:	6f 81       	ldd	r22, Y+7	; 0x07
    185c:	78 85       	ldd	r23, Y+8	; 0x08
    185e:	89 85       	ldd	r24, Y+9	; 0x09
    1860:	9a 85       	ldd	r25, Y+10	; 0x0a
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e8       	ldi	r20, 0x80	; 128
    1868:	5f e3       	ldi	r21, 0x3F	; 63
    186a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    186e:	88 23       	and	r24, r24
    1870:	2c f4       	brge	.+10     	; 0x187c <SevSeg_SevErrStateDisplayRange+0x1ce>
		__ticks = 1;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	9e 83       	std	Y+6, r25	; 0x06
    1878:	8d 83       	std	Y+5, r24	; 0x05
    187a:	3f c0       	rjmp	.+126    	; 0x18fa <SevSeg_SevErrStateDisplayRange+0x24c>
	else if (__tmp > 65535)
    187c:	6f 81       	ldd	r22, Y+7	; 0x07
    187e:	78 85       	ldd	r23, Y+8	; 0x08
    1880:	89 85       	ldd	r24, Y+9	; 0x09
    1882:	9a 85       	ldd	r25, Y+10	; 0x0a
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	3f ef       	ldi	r19, 0xFF	; 255
    1888:	4f e7       	ldi	r20, 0x7F	; 127
    188a:	57 e4       	ldi	r21, 0x47	; 71
    188c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1890:	18 16       	cp	r1, r24
    1892:	4c f5       	brge	.+82     	; 0x18e6 <SevSeg_SevErrStateDisplayRange+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1894:	6b 85       	ldd	r22, Y+11	; 0x0b
    1896:	7c 85       	ldd	r23, Y+12	; 0x0c
    1898:	8d 85       	ldd	r24, Y+13	; 0x0d
    189a:	9e 85       	ldd	r25, Y+14	; 0x0e
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	40 e2       	ldi	r20, 0x20	; 32
    18a2:	51 e4       	ldi	r21, 0x41	; 65
    18a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	bc 01       	movw	r22, r24
    18ae:	cd 01       	movw	r24, r26
    18b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	9e 83       	std	Y+6, r25	; 0x06
    18ba:	8d 83       	std	Y+5, r24	; 0x05
    18bc:	0f c0       	rjmp	.+30     	; 0x18dc <SevSeg_SevErrStateDisplayRange+0x22e>
    18be:	88 ec       	ldi	r24, 0xC8	; 200
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	9c 83       	std	Y+4, r25	; 0x04
    18c4:	8b 83       	std	Y+3, r24	; 0x03
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <SevSeg_SevErrStateDisplayRange+0x21c>
    18ce:	9c 83       	std	Y+4, r25	; 0x04
    18d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	9e 83       	std	Y+6, r25	; 0x06
    18da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18dc:	8d 81       	ldd	r24, Y+5	; 0x05
    18de:	9e 81       	ldd	r25, Y+6	; 0x06
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	69 f7       	brne	.-38     	; 0x18be <SevSeg_SevErrStateDisplayRange+0x210>
    18e4:	14 c0       	rjmp	.+40     	; 0x190e <SevSeg_SevErrStateDisplayRange+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e6:	6f 81       	ldd	r22, Y+7	; 0x07
    18e8:	78 85       	ldd	r23, Y+8	; 0x08
    18ea:	89 85       	ldd	r24, Y+9	; 0x09
    18ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	9e 83       	std	Y+6, r25	; 0x06
    18f8:	8d 83       	std	Y+5, r24	; 0x05
    18fa:	8d 81       	ldd	r24, Y+5	; 0x05
    18fc:	9e 81       	ldd	r25, Y+6	; 0x06
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	f1 f7       	brne	.-4      	; 0x1906 <SevSeg_SevErrStateDisplayRange+0x258>
    190a:	9a 83       	std	Y+2, r25	; 0x02
    190c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
		}
	}
	else if(Copy_start>Copy_End)
	{
		for(s8 i = Copy_start; i>=Copy_End;i--)
    190e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1910:	81 50       	subi	r24, 0x01	; 1
    1912:	8d 8f       	std	Y+29, r24	; 0x1d
    1914:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1916:	28 2f       	mov	r18, r24
    1918:	33 27       	eor	r19, r19
    191a:	27 fd       	sbrc	r18, 7
    191c:	30 95       	com	r19
    191e:	8a a1       	ldd	r24, Y+34	; 0x22
    1920:	88 2f       	mov	r24, r24
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	28 17       	cp	r18, r24
    1926:	39 07       	cpc	r19, r25
    1928:	0c f0       	brlt	.+2      	; 0x192c <SevSeg_SevErrStateDisplayRange+0x27e>
    192a:	70 cf       	rjmp	.-288    	; 0x180c <SevSeg_SevErrStateDisplayRange+0x15e>
    192c:	03 c0       	rjmp	.+6      	; 0x1934 <SevSeg_SevErrStateDisplayRange+0x286>
			_delay_ms(1000);
		}
	}
	else
	{
		return DispRangeError;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	8b a3       	std	Y+35, r24	; 0x23
    1932:	01 c0       	rjmp	.+2      	; 0x1936 <SevSeg_SevErrStateDisplayRange+0x288>
	}
	return SevSegNoError;
    1934:	1b a2       	std	Y+35, r1	; 0x23
    1936:	8b a1       	ldd	r24, Y+35	; 0x23
	
}
    1938:	a3 96       	adiw	r28, 0x23	; 35
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <Led_LedErrStateTurnOn>:
#include "../../Common/definition.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "Led_Interface.h"

LedErrState	Led_LedErrStateTurnOn(Led_info *Led) 
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	00 d0       	rcall	.+0      	; 0x1950 <Led_LedErrStateTurnOn+0x6>
    1950:	0f 92       	push	r0
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	9a 83       	std	Y+2, r25	; 0x02
    1958:	89 83       	std	Y+1, r24	; 0x01
	
	if (Led->ConnectionType == Source_Connection)
    195a:	e9 81       	ldd	r30, Y+1	; 0x01
    195c:	fa 81       	ldd	r31, Y+2	; 0x02
    195e:	82 81       	ldd	r24, Z+2	; 0x02
    1960:	88 23       	and	r24, r24
    1962:	59 f4       	brne	.+22     	; 0x197a <Led_LedErrStateTurnOn+0x30>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_High);
    1964:	e9 81       	ldd	r30, Y+1	; 0x01
    1966:	fa 81       	ldd	r31, Y+2	; 0x02
    1968:	80 81       	ld	r24, Z
    196a:	e9 81       	ldd	r30, Y+1	; 0x01
    196c:	fa 81       	ldd	r31, Y+2	; 0x02
    196e:	91 81       	ldd	r25, Z+1	; 0x01
    1970:	69 2f       	mov	r22, r25
    1972:	41 e0       	ldi	r20, 0x01	; 1
    1974:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_ErrStateSetPinValue>
    1978:	13 c0       	rjmp	.+38     	; 0x19a0 <Led_LedErrStateTurnOn+0x56>
	}
	else if (Led->ConnectionType == Sink_Connection)
    197a:	e9 81       	ldd	r30, Y+1	; 0x01
    197c:	fa 81       	ldd	r31, Y+2	; 0x02
    197e:	82 81       	ldd	r24, Z+2	; 0x02
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	59 f4       	brne	.+22     	; 0x199a <Led_LedErrStateTurnOn+0x50>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_Low);
    1984:	e9 81       	ldd	r30, Y+1	; 0x01
    1986:	fa 81       	ldd	r31, Y+2	; 0x02
    1988:	80 81       	ld	r24, Z
    198a:	e9 81       	ldd	r30, Y+1	; 0x01
    198c:	fa 81       	ldd	r31, Y+2	; 0x02
    198e:	91 81       	ldd	r25, Z+1	; 0x01
    1990:	69 2f       	mov	r22, r25
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_ErrStateSetPinValue>
    1998:	03 c0       	rjmp	.+6      	; 0x19a0 <Led_LedErrStateTurnOn+0x56>
	}
	else 
	{
		return ConnectionTypeError;
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	8b 83       	std	Y+3, r24	; 0x03
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <Led_LedErrStateTurnOn+0x58>
	}
	return LedNoError;
    19a0:	1b 82       	std	Y+3, r1	; 0x03
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
	
	
} 
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <Led_LedErrStateTurnOff>:
  


LedErrState	Led_LedErrStateTurnOff(Led_info *Led) 
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	00 d0       	rcall	.+0      	; 0x19b6 <Led_LedErrStateTurnOff+0x6>
    19b6:	0f 92       	push	r0
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	9a 83       	std	Y+2, r25	; 0x02
    19be:	89 83       	std	Y+1, r24	; 0x01
	if (Led->ConnectionType == Source_Connection)
    19c0:	e9 81       	ldd	r30, Y+1	; 0x01
    19c2:	fa 81       	ldd	r31, Y+2	; 0x02
    19c4:	82 81       	ldd	r24, Z+2	; 0x02
    19c6:	88 23       	and	r24, r24
    19c8:	59 f4       	brne	.+22     	; 0x19e0 <Led_LedErrStateTurnOff+0x30>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_Low);
    19ca:	e9 81       	ldd	r30, Y+1	; 0x01
    19cc:	fa 81       	ldd	r31, Y+2	; 0x02
    19ce:	80 81       	ld	r24, Z
    19d0:	e9 81       	ldd	r30, Y+1	; 0x01
    19d2:	fa 81       	ldd	r31, Y+2	; 0x02
    19d4:	91 81       	ldd	r25, Z+1	; 0x01
    19d6:	69 2f       	mov	r22, r25
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_ErrStateSetPinValue>
    19de:	13 c0       	rjmp	.+38     	; 0x1a06 <Led_LedErrStateTurnOff+0x56>
	}
	else if (Led->ConnectionType == Sink_Connection)
    19e0:	e9 81       	ldd	r30, Y+1	; 0x01
    19e2:	fa 81       	ldd	r31, Y+2	; 0x02
    19e4:	82 81       	ldd	r24, Z+2	; 0x02
    19e6:	81 30       	cpi	r24, 0x01	; 1
    19e8:	59 f4       	brne	.+22     	; 0x1a00 <Led_LedErrStateTurnOff+0x50>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_High);
    19ea:	e9 81       	ldd	r30, Y+1	; 0x01
    19ec:	fa 81       	ldd	r31, Y+2	; 0x02
    19ee:	80 81       	ld	r24, Z
    19f0:	e9 81       	ldd	r30, Y+1	; 0x01
    19f2:	fa 81       	ldd	r31, Y+2	; 0x02
    19f4:	91 81       	ldd	r25, Z+1	; 0x01
    19f6:	69 2f       	mov	r22, r25
    19f8:	41 e0       	ldi	r20, 0x01	; 1
    19fa:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_ErrStateSetPinValue>
    19fe:	03 c0       	rjmp	.+6      	; 0x1a06 <Led_LedErrStateTurnOff+0x56>
	}
	else 
	{
		return ConnectionTypeError;
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	8b 83       	std	Y+3, r24	; 0x03
    1a04:	01 c0       	rjmp	.+2      	; 0x1a08 <Led_LedErrStateTurnOff+0x58>
	}
	return NoError;
    1a06:	1b 82       	std	Y+3, r1	; 0x03
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
	
}
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <LCD_VoidInit>:




void LCD_VoidInit(Lcd_info* lcd)
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	ea 97       	sbiw	r28, 0x3a	; 58
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	9a af       	std	Y+58, r25	; 0x3a
    1a2c:	89 af       	std	Y+57, r24	; 0x39
	
	
	/*Set Direction*/
	DIO_ErrStateSetPinDirection(lcd->Rs_Group,lcd->Rs_Pin,DIO_Output);
    1a2e:	e9 ad       	ldd	r30, Y+57	; 0x39
    1a30:	fa ad       	ldd	r31, Y+58	; 0x3a
    1a32:	80 81       	ld	r24, Z
    1a34:	e9 ad       	ldd	r30, Y+57	; 0x39
    1a36:	fa ad       	ldd	r31, Y+58	; 0x3a
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	69 2f       	mov	r22, r25
    1a3c:	41 e0       	ldi	r20, 0x01	; 1
    1a3e:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->Rw_Group,lcd->Rw_Pin,DIO_Output);
    1a42:	e9 ad       	ldd	r30, Y+57	; 0x39
    1a44:	fa ad       	ldd	r31, Y+58	; 0x3a
    1a46:	82 81       	ldd	r24, Z+2	; 0x02
    1a48:	e9 ad       	ldd	r30, Y+57	; 0x39
    1a4a:	fa ad       	ldd	r31, Y+58	; 0x3a
    1a4c:	93 81       	ldd	r25, Z+3	; 0x03
    1a4e:	69 2f       	mov	r22, r25
    1a50:	41 e0       	ldi	r20, 0x01	; 1
    1a52:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->E_Group,lcd->E_Pin,DIO_Output);
    1a56:	e9 ad       	ldd	r30, Y+57	; 0x39
    1a58:	fa ad       	ldd	r31, Y+58	; 0x3a
    1a5a:	84 81       	ldd	r24, Z+4	; 0x04
    1a5c:	e9 ad       	ldd	r30, Y+57	; 0x39
    1a5e:	fa ad       	ldd	r31, Y+58	; 0x3a
    1a60:	95 81       	ldd	r25, Z+5	; 0x05
    1a62:	69 2f       	mov	r22, r25
    1a64:	41 e0       	ldi	r20, 0x01	; 1
    1a66:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetGroupDirection(lcd->Data_Group,0xff);
    1a6a:	e9 ad       	ldd	r30, Y+57	; 0x39
    1a6c:	fa ad       	ldd	r31, Y+58	; 0x3a
    1a6e:	86 81       	ldd	r24, Z+6	; 0x06
    1a70:	6f ef       	ldi	r22, 0xFF	; 255
    1a72:	0e 94 02 09 	call	0x1204	; 0x1204 <DIO_ErrStateSetGroupDirection>
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	a0 e2       	ldi	r26, 0x20	; 32
    1a7c:	b2 e4       	ldi	r27, 0x42	; 66
    1a7e:	8d ab       	std	Y+53, r24	; 0x35
    1a80:	9e ab       	std	Y+54, r25	; 0x36
    1a82:	af ab       	std	Y+55, r26	; 0x37
    1a84:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a86:	6d a9       	ldd	r22, Y+53	; 0x35
    1a88:	7e a9       	ldd	r23, Y+54	; 0x36
    1a8a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a8c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	4a ef       	ldi	r20, 0xFA	; 250
    1a94:	54 e4       	ldi	r21, 0x44	; 68
    1a96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	89 ab       	std	Y+49, r24	; 0x31
    1aa0:	9a ab       	std	Y+50, r25	; 0x32
    1aa2:	ab ab       	std	Y+51, r26	; 0x33
    1aa4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1aa6:	69 a9       	ldd	r22, Y+49	; 0x31
    1aa8:	7a a9       	ldd	r23, Y+50	; 0x32
    1aaa:	8b a9       	ldd	r24, Y+51	; 0x33
    1aac:	9c a9       	ldd	r25, Y+52	; 0x34
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e8       	ldi	r20, 0x80	; 128
    1ab4:	5f e3       	ldi	r21, 0x3F	; 63
    1ab6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1aba:	88 23       	and	r24, r24
    1abc:	2c f4       	brge	.+10     	; 0x1ac8 <LCD_VoidInit+0xb2>
		__ticks = 1;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	98 ab       	std	Y+48, r25	; 0x30
    1ac4:	8f a7       	std	Y+47, r24	; 0x2f
    1ac6:	3f c0       	rjmp	.+126    	; 0x1b46 <LCD_VoidInit+0x130>
	else if (__tmp > 65535)
    1ac8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aca:	7a a9       	ldd	r23, Y+50	; 0x32
    1acc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ace:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	3f ef       	ldi	r19, 0xFF	; 255
    1ad4:	4f e7       	ldi	r20, 0x7F	; 127
    1ad6:	57 e4       	ldi	r21, 0x47	; 71
    1ad8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1adc:	18 16       	cp	r1, r24
    1ade:	4c f5       	brge	.+82     	; 0x1b32 <LCD_VoidInit+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ae2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ae4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ae6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e2       	ldi	r20, 0x20	; 32
    1aee:	51 e4       	ldi	r21, 0x41	; 65
    1af0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	98 ab       	std	Y+48, r25	; 0x30
    1b06:	8f a7       	std	Y+47, r24	; 0x2f
    1b08:	0f c0       	rjmp	.+30     	; 0x1b28 <LCD_VoidInit+0x112>
    1b0a:	88 ec       	ldi	r24, 0xC8	; 200
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9e a7       	std	Y+46, r25	; 0x2e
    1b10:	8d a7       	std	Y+45, r24	; 0x2d
    1b12:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b14:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <LCD_VoidInit+0x100>
    1b1a:	9e a7       	std	Y+46, r25	; 0x2e
    1b1c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b20:	98 a9       	ldd	r25, Y+48	; 0x30
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	98 ab       	std	Y+48, r25	; 0x30
    1b26:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	69 f7       	brne	.-38     	; 0x1b0a <LCD_VoidInit+0xf4>
    1b30:	14 c0       	rjmp	.+40     	; 0x1b5a <LCD_VoidInit+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b32:	69 a9       	ldd	r22, Y+49	; 0x31
    1b34:	7a a9       	ldd	r23, Y+50	; 0x32
    1b36:	8b a9       	ldd	r24, Y+51	; 0x33
    1b38:	9c a9       	ldd	r25, Y+52	; 0x34
    1b3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	98 ab       	std	Y+48, r25	; 0x30
    1b44:	8f a7       	std	Y+47, r24	; 0x2f
    1b46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b48:	98 a9       	ldd	r25, Y+48	; 0x30
    1b4a:	9c a7       	std	Y+44, r25	; 0x2c
    1b4c:	8b a7       	std	Y+43, r24	; 0x2b
    1b4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b50:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <LCD_VoidInit+0x13c>
    1b56:	9c a7       	std	Y+44, r25	; 0x2c
    1b58:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);


	// Function set
	LCD_VoidSendCommand(LCD_Set8Bit2Line5x8,lcd);
    1b5a:	29 ad       	ldd	r18, Y+57	; 0x39
    1b5c:	3a ad       	ldd	r19, Y+58	; 0x3a
    1b5e:	88 e3       	ldi	r24, 0x38	; 56
    1b60:	b9 01       	movw	r22, r18
    1b62:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_VoidSendCommand>
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	a0 e8       	ldi	r26, 0x80	; 128
    1b6c:	bf e3       	ldi	r27, 0x3F	; 63
    1b6e:	8f a3       	std	Y+39, r24	; 0x27
    1b70:	98 a7       	std	Y+40, r25	; 0x28
    1b72:	a9 a7       	std	Y+41, r26	; 0x29
    1b74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b76:	6f a1       	ldd	r22, Y+39	; 0x27
    1b78:	78 a5       	ldd	r23, Y+40	; 0x28
    1b7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	4a ef       	ldi	r20, 0xFA	; 250
    1b84:	54 e4       	ldi	r21, 0x44	; 68
    1b86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	8b a3       	std	Y+35, r24	; 0x23
    1b90:	9c a3       	std	Y+36, r25	; 0x24
    1b92:	ad a3       	std	Y+37, r26	; 0x25
    1b94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b96:	6b a1       	ldd	r22, Y+35	; 0x23
    1b98:	7c a1       	ldd	r23, Y+36	; 0x24
    1b9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e8       	ldi	r20, 0x80	; 128
    1ba4:	5f e3       	ldi	r21, 0x3F	; 63
    1ba6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1baa:	88 23       	and	r24, r24
    1bac:	2c f4       	brge	.+10     	; 0x1bb8 <LCD_VoidInit+0x1a2>
		__ticks = 1;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	9a a3       	std	Y+34, r25	; 0x22
    1bb4:	89 a3       	std	Y+33, r24	; 0x21
    1bb6:	3f c0       	rjmp	.+126    	; 0x1c36 <LCD_VoidInit+0x220>
	else if (__tmp > 65535)
    1bb8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bba:	7c a1       	ldd	r23, Y+36	; 0x24
    1bbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bbe:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	3f ef       	ldi	r19, 0xFF	; 255
    1bc4:	4f e7       	ldi	r20, 0x7F	; 127
    1bc6:	57 e4       	ldi	r21, 0x47	; 71
    1bc8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bcc:	18 16       	cp	r1, r24
    1bce:	4c f5       	brge	.+82     	; 0x1c22 <LCD_VoidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd0:	6f a1       	ldd	r22, Y+39	; 0x27
    1bd2:	78 a5       	ldd	r23, Y+40	; 0x28
    1bd4:	89 a5       	ldd	r24, Y+41	; 0x29
    1bd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e2       	ldi	r20, 0x20	; 32
    1bde:	51 e4       	ldi	r21, 0x41	; 65
    1be0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	bc 01       	movw	r22, r24
    1bea:	cd 01       	movw	r24, r26
    1bec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	9a a3       	std	Y+34, r25	; 0x22
    1bf6:	89 a3       	std	Y+33, r24	; 0x21
    1bf8:	0f c0       	rjmp	.+30     	; 0x1c18 <LCD_VoidInit+0x202>
    1bfa:	88 ec       	ldi	r24, 0xC8	; 200
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	98 a3       	std	Y+32, r25	; 0x20
    1c00:	8f 8f       	std	Y+31, r24	; 0x1f
    1c02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c04:	98 a1       	ldd	r25, Y+32	; 0x20
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <LCD_VoidInit+0x1f0>
    1c0a:	98 a3       	std	Y+32, r25	; 0x20
    1c0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c10:	9a a1       	ldd	r25, Y+34	; 0x22
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	9a a3       	std	Y+34, r25	; 0x22
    1c16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c18:	89 a1       	ldd	r24, Y+33	; 0x21
    1c1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	69 f7       	brne	.-38     	; 0x1bfa <LCD_VoidInit+0x1e4>
    1c20:	14 c0       	rjmp	.+40     	; 0x1c4a <LCD_VoidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c22:	6b a1       	ldd	r22, Y+35	; 0x23
    1c24:	7c a1       	ldd	r23, Y+36	; 0x24
    1c26:	8d a1       	ldd	r24, Y+37	; 0x25
    1c28:	9e a1       	ldd	r25, Y+38	; 0x26
    1c2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9a a3       	std	Y+34, r25	; 0x22
    1c34:	89 a3       	std	Y+33, r24	; 0x21
    1c36:	89 a1       	ldd	r24, Y+33	; 0x21
    1c38:	9a a1       	ldd	r25, Y+34	; 0x22
    1c3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <LCD_VoidInit+0x22c>
    1c46:	9e 8f       	std	Y+30, r25	; 0x1e
    1c48:	8d 8f       	std	Y+29, r24	; 0x1d
	//_delay_us(40);
	_delay_ms(1);
	// Display ON/OFF control
	LCD_VoidSendCommand(LCD_CursorON,lcd);
    1c4a:	29 ad       	ldd	r18, Y+57	; 0x39
    1c4c:	3a ad       	ldd	r19, Y+58	; 0x3a
    1c4e:	8e e0       	ldi	r24, 0x0E	; 14
    1c50:	b9 01       	movw	r22, r18
    1c52:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_VoidSendCommand>
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	a0 e8       	ldi	r26, 0x80	; 128
    1c5c:	bf e3       	ldi	r27, 0x3F	; 63
    1c5e:	89 8f       	std	Y+25, r24	; 0x19
    1c60:	9a 8f       	std	Y+26, r25	; 0x1a
    1c62:	ab 8f       	std	Y+27, r26	; 0x1b
    1c64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c66:	69 8d       	ldd	r22, Y+25	; 0x19
    1c68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	4a ef       	ldi	r20, 0xFA	; 250
    1c74:	54 e4       	ldi	r21, 0x44	; 68
    1c76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	8d 8b       	std	Y+21, r24	; 0x15
    1c80:	9e 8b       	std	Y+22, r25	; 0x16
    1c82:	af 8b       	std	Y+23, r26	; 0x17
    1c84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c86:	6d 89       	ldd	r22, Y+21	; 0x15
    1c88:	7e 89       	ldd	r23, Y+22	; 0x16
    1c8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e8       	ldi	r20, 0x80	; 128
    1c94:	5f e3       	ldi	r21, 0x3F	; 63
    1c96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c9a:	88 23       	and	r24, r24
    1c9c:	2c f4       	brge	.+10     	; 0x1ca8 <LCD_VoidInit+0x292>
		__ticks = 1;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	9c 8b       	std	Y+20, r25	; 0x14
    1ca4:	8b 8b       	std	Y+19, r24	; 0x13
    1ca6:	3f c0       	rjmp	.+126    	; 0x1d26 <LCD_VoidInit+0x310>
	else if (__tmp > 65535)
    1ca8:	6d 89       	ldd	r22, Y+21	; 0x15
    1caa:	7e 89       	ldd	r23, Y+22	; 0x16
    1cac:	8f 89       	ldd	r24, Y+23	; 0x17
    1cae:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	3f ef       	ldi	r19, 0xFF	; 255
    1cb4:	4f e7       	ldi	r20, 0x7F	; 127
    1cb6:	57 e4       	ldi	r21, 0x47	; 71
    1cb8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cbc:	18 16       	cp	r1, r24
    1cbe:	4c f5       	brge	.+82     	; 0x1d12 <LCD_VoidInit+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc0:	69 8d       	ldd	r22, Y+25	; 0x19
    1cc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e2       	ldi	r20, 0x20	; 32
    1cce:	51 e4       	ldi	r21, 0x41	; 65
    1cd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	9c 8b       	std	Y+20, r25	; 0x14
    1ce6:	8b 8b       	std	Y+19, r24	; 0x13
    1ce8:	0f c0       	rjmp	.+30     	; 0x1d08 <LCD_VoidInit+0x2f2>
    1cea:	88 ec       	ldi	r24, 0xC8	; 200
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9a 8b       	std	Y+18, r25	; 0x12
    1cf0:	89 8b       	std	Y+17, r24	; 0x11
    1cf2:	89 89       	ldd	r24, Y+17	; 0x11
    1cf4:	9a 89       	ldd	r25, Y+18	; 0x12
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <LCD_VoidInit+0x2e0>
    1cfa:	9a 8b       	std	Y+18, r25	; 0x12
    1cfc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfe:	8b 89       	ldd	r24, Y+19	; 0x13
    1d00:	9c 89       	ldd	r25, Y+20	; 0x14
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	9c 8b       	std	Y+20, r25	; 0x14
    1d06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d08:	8b 89       	ldd	r24, Y+19	; 0x13
    1d0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	69 f7       	brne	.-38     	; 0x1cea <LCD_VoidInit+0x2d4>
    1d10:	14 c0       	rjmp	.+40     	; 0x1d3a <LCD_VoidInit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d12:	6d 89       	ldd	r22, Y+21	; 0x15
    1d14:	7e 89       	ldd	r23, Y+22	; 0x16
    1d16:	8f 89       	ldd	r24, Y+23	; 0x17
    1d18:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9c 8b       	std	Y+20, r25	; 0x14
    1d24:	8b 8b       	std	Y+19, r24	; 0x13
    1d26:	8b 89       	ldd	r24, Y+19	; 0x13
    1d28:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2a:	98 8b       	std	Y+16, r25	; 0x10
    1d2c:	8f 87       	std	Y+15, r24	; 0x0f
    1d2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d30:	98 89       	ldd	r25, Y+16	; 0x10
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <LCD_VoidInit+0x31c>
    1d36:	98 8b       	std	Y+16, r25	; 0x10
    1d38:	8f 87       	std	Y+15, r24	; 0x0f
	//_delay_us(40);
	_delay_ms(1);
	// Display Clear
	LCD_VoidSendCommand(LCD_ClearDisplay,lcd);
    1d3a:	29 ad       	ldd	r18, Y+57	; 0x39
    1d3c:	3a ad       	ldd	r19, Y+58	; 0x3a
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	b9 01       	movw	r22, r18
    1d42:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_VoidSendCommand>
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	a0 e0       	ldi	r26, 0x00	; 0
    1d4c:	b0 e4       	ldi	r27, 0x40	; 64
    1d4e:	8b 87       	std	Y+11, r24	; 0x0b
    1d50:	9c 87       	std	Y+12, r25	; 0x0c
    1d52:	ad 87       	std	Y+13, r26	; 0x0d
    1d54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	4a ef       	ldi	r20, 0xFA	; 250
    1d64:	54 e4       	ldi	r21, 0x44	; 68
    1d66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	8f 83       	std	Y+7, r24	; 0x07
    1d70:	98 87       	std	Y+8, r25	; 0x08
    1d72:	a9 87       	std	Y+9, r26	; 0x09
    1d74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d76:	6f 81       	ldd	r22, Y+7	; 0x07
    1d78:	78 85       	ldd	r23, Y+8	; 0x08
    1d7a:	89 85       	ldd	r24, Y+9	; 0x09
    1d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e8       	ldi	r20, 0x80	; 128
    1d84:	5f e3       	ldi	r21, 0x3F	; 63
    1d86:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d8a:	88 23       	and	r24, r24
    1d8c:	2c f4       	brge	.+10     	; 0x1d98 <LCD_VoidInit+0x382>
		__ticks = 1;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	8d 83       	std	Y+5, r24	; 0x05
    1d96:	3f c0       	rjmp	.+126    	; 0x1e16 <LCD_VoidInit+0x400>
	else if (__tmp > 65535)
    1d98:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9a:	78 85       	ldd	r23, Y+8	; 0x08
    1d9c:	89 85       	ldd	r24, Y+9	; 0x09
    1d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	3f ef       	ldi	r19, 0xFF	; 255
    1da4:	4f e7       	ldi	r20, 0x7F	; 127
    1da6:	57 e4       	ldi	r21, 0x47	; 71
    1da8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dac:	18 16       	cp	r1, r24
    1dae:	4c f5       	brge	.+82     	; 0x1e02 <LCD_VoidInit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e2       	ldi	r20, 0x20	; 32
    1dbe:	51 e4       	ldi	r21, 0x41	; 65
    1dc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	bc 01       	movw	r22, r24
    1dca:	cd 01       	movw	r24, r26
    1dcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	9e 83       	std	Y+6, r25	; 0x06
    1dd6:	8d 83       	std	Y+5, r24	; 0x05
    1dd8:	0f c0       	rjmp	.+30     	; 0x1df8 <LCD_VoidInit+0x3e2>
    1dda:	88 ec       	ldi	r24, 0xC8	; 200
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9c 83       	std	Y+4, r25	; 0x04
    1de0:	8b 83       	std	Y+3, r24	; 0x03
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	9c 81       	ldd	r25, Y+4	; 0x04
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <LCD_VoidInit+0x3d0>
    1dea:	9c 83       	std	Y+4, r25	; 0x04
    1dec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dee:	8d 81       	ldd	r24, Y+5	; 0x05
    1df0:	9e 81       	ldd	r25, Y+6	; 0x06
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	9e 83       	std	Y+6, r25	; 0x06
    1df6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	69 f7       	brne	.-38     	; 0x1dda <LCD_VoidInit+0x3c4>
    1e00:	14 c0       	rjmp	.+40     	; 0x1e2a <LCD_VoidInit+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e02:	6f 81       	ldd	r22, Y+7	; 0x07
    1e04:	78 85       	ldd	r23, Y+8	; 0x08
    1e06:	89 85       	ldd	r24, Y+9	; 0x09
    1e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	9e 83       	std	Y+6, r25	; 0x06
    1e14:	8d 83       	std	Y+5, r24	; 0x05
    1e16:	8d 81       	ldd	r24, Y+5	; 0x05
    1e18:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1a:	9a 83       	std	Y+2, r25	; 0x02
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	9a 81       	ldd	r25, Y+2	; 0x02
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <LCD_VoidInit+0x40c>
    1e26:	9a 83       	std	Y+2, r25	; 0x02
    1e28:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);


}	
    1e2a:	ea 96       	adiw	r28, 0x3a	; 58
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	de bf       	out	0x3e, r29	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	cd bf       	out	0x3d, r28	; 61
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <LCD_VoidGoToXY>:


void LCD_VoidGoToXY(u8 Local_XPosition,u8 Local_YPosition, Lcd_info* lcd)
{
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <LCD_VoidGoToXY+0x6>
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <LCD_VoidGoToXY+0x8>
    1e44:	0f 92       	push	r0
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	8a 83       	std	Y+2, r24	; 0x02
    1e4c:	6b 83       	std	Y+3, r22	; 0x03
    1e4e:	5d 83       	std	Y+5, r21	; 0x05
    1e50:	4c 83       	std	Y+4, r20	; 0x04
	// x_pos from 0 to 1
	// y_pos from 0 to 15
	u8 Adress = 0 ;
    1e52:	19 82       	std	Y+1, r1	; 0x01
	if (0 == Local_XPosition)
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	88 23       	and	r24, r24
    1e58:	19 f4       	brne	.+6      	; 0x1e60 <LCD_VoidGoToXY+0x24>
	{
		Adress = LCD_FirstLine + LCD_SetAddressDDRAM;
    1e5a:	80 e8       	ldi	r24, 0x80	; 128
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	05 c0       	rjmp	.+10     	; 0x1e6a <LCD_VoidGoToXY+0x2e>
	}
	else if (1 == Local_XPosition)
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	81 30       	cpi	r24, 0x01	; 1
    1e64:	11 f4       	brne	.+4      	; 0x1e6a <LCD_VoidGoToXY+0x2e>
	{
		Adress = LCD_SecoundLine + LCD_SetAddressDDRAM;
    1e66:	80 ec       	ldi	r24, 0xC0	; 192
    1e68:	89 83       	std	Y+1, r24	; 0x01
	}
	if (Local_YPosition < 16)
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	80 31       	cpi	r24, 0x10	; 16
    1e6e:	20 f4       	brcc	.+8      	; 0x1e78 <LCD_VoidGoToXY+0x3c>
	{
		Adress += Local_YPosition ;
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	9b 81       	ldd	r25, Y+3	; 0x03
    1e74:	89 0f       	add	r24, r25
    1e76:	89 83       	std	Y+1, r24	; 0x01
	}
	else{/*error*/}

	LCD_VoidSendCommand(Adress,lcd) ;
    1e78:	2c 81       	ldd	r18, Y+4	; 0x04
    1e7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	b9 01       	movw	r22, r18
    1e80:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_VoidSendCommand>

}
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <LCD_VoidSendString>:


void LCD_VoidSendString(u8 *Address_String, Lcd_info* lcd)
{
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	00 d0       	rcall	.+0      	; 0x1e9a <LCD_VoidSendString+0x6>
    1e9a:	00 d0       	rcall	.+0      	; 0x1e9c <LCD_VoidSendString+0x8>
    1e9c:	0f 92       	push	r0
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	9b 83       	std	Y+3, r25	; 0x03
    1ea4:	8a 83       	std	Y+2, r24	; 0x02
    1ea6:	7d 83       	std	Y+5, r23	; 0x05
    1ea8:	6c 83       	std	Y+4, r22	; 0x04
	u8 stringCounter=0;
    1eaa:	19 82       	std	Y+1, r1	; 0x01
    1eac:	11 c0       	rjmp	.+34     	; 0x1ed0 <LCD_VoidSendString+0x3c>
	for(;Address_String[stringCounter] != '\0'; stringCounter++ )
	{
		LCD_VoidSendChar(Address_String[stringCounter],lcd);
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb8:	fc 01       	movw	r30, r24
    1eba:	e2 0f       	add	r30, r18
    1ebc:	f3 1f       	adc	r31, r19
    1ebe:	80 81       	ld	r24, Z
    1ec0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ec2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec4:	b9 01       	movw	r22, r18
    1ec6:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_VoidSendChar>


void LCD_VoidSendString(u8 *Address_String, Lcd_info* lcd)
{
	u8 stringCounter=0;
	for(;Address_String[stringCounter] != '\0'; stringCounter++ )
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	8f 5f       	subi	r24, 0xFF	; 255
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eda:	fc 01       	movw	r30, r24
    1edc:	e2 0f       	add	r30, r18
    1ede:	f3 1f       	adc	r31, r19
    1ee0:	80 81       	ld	r24, Z
    1ee2:	88 23       	and	r24, r24
    1ee4:	21 f7       	brne	.-56     	; 0x1eae <LCD_VoidSendString+0x1a>
	{
		LCD_VoidSendChar(Address_String[stringCounter],lcd);
	}
}
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <LCD_VoidSendNum>:


void LCD_VoidSendNum(s16 Copy_Num, Lcd_info* lcd)
 {
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	69 97       	sbiw	r28, 0x19	; 25
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	f8 94       	cli
    1f04:	de bf       	out	0x3e, r29	; 62
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	cd bf       	out	0x3d, r28	; 61
    1f0a:	9f 8b       	std	Y+23, r25	; 0x17
    1f0c:	8e 8b       	std	Y+22, r24	; 0x16
    1f0e:	79 8f       	std	Y+25, r23	; 0x19
    1f10:	68 8f       	std	Y+24, r22	; 0x18
    u8 i,j,c,ArrCount,s[15];
	s16 sign;
	i = 0;
    1f12:	1e 82       	std	Y+6, r1	; 0x06
	ArrCount = 0;
    1f14:	1b 82       	std	Y+3, r1	; 0x03
	sign = Copy_Num;
    1f16:	8e 89       	ldd	r24, Y+22	; 0x16
    1f18:	9f 89       	ldd	r25, Y+23	; 0x17
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
	if (sign < 0)  /* record sign */
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	9a 81       	ldd	r25, Y+2	; 0x02
    1f22:	99 23       	and	r25, r25
    1f24:	3c f4       	brge	.+14     	; 0x1f34 <LCD_VoidSendNum+0x3e>
	{
	 Copy_Num = -Copy_Num;          /* make the NUM positive */
    1f26:	8e 89       	ldd	r24, Y+22	; 0x16
    1f28:	9f 89       	ldd	r25, Y+23	; 0x17
    1f2a:	90 95       	com	r25
    1f2c:	81 95       	neg	r24
    1f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f30:	9f 8b       	std	Y+23, r25	; 0x17
    1f32:	8e 8b       	std	Y+22, r24	; 0x16
	}

	do {                       /* Convert NUM to ASCII in reverse order */

	 s[i] = (Copy_Num % 10) + '0';
    1f34:	8e 81       	ldd	r24, Y+6	; 0x06
    1f36:	e8 2f       	mov	r30, r24
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	8e 89       	ldd	r24, Y+22	; 0x16
    1f3c:	9f 89       	ldd	r25, Y+23	; 0x17
    1f3e:	2a e0       	ldi	r18, 0x0A	; 10
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	b9 01       	movw	r22, r18
    1f44:	0e 94 c3 14 	call	0x2986	; 0x2986 <__divmodhi4>
    1f48:	28 2f       	mov	r18, r24
    1f4a:	20 5d       	subi	r18, 0xD0	; 208
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	07 96       	adiw	r24, 0x07	; 7
    1f50:	e8 0f       	add	r30, r24
    1f52:	f9 1f       	adc	r31, r25
    1f54:	20 83       	st	Z, r18
	 i++;
    1f56:	8e 81       	ldd	r24, Y+6	; 0x06
    1f58:	8f 5f       	subi	r24, 0xFF	; 255
    1f5a:	8e 83       	std	Y+6, r24	; 0x06

	 } while ((Copy_Num /= 10) > 0);
    1f5c:	8e 89       	ldd	r24, Y+22	; 0x16
    1f5e:	9f 89       	ldd	r25, Y+23	; 0x17
    1f60:	2a e0       	ldi	r18, 0x0A	; 10
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	b9 01       	movw	r22, r18
    1f66:	0e 94 c3 14 	call	0x2986	; 0x2986 <__divmodhi4>
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	9f 8b       	std	Y+23, r25	; 0x17
    1f6e:	8e 8b       	std	Y+22, r24	; 0x16
    1f70:	8e 89       	ldd	r24, Y+22	; 0x16
    1f72:	9f 89       	ldd	r25, Y+23	; 0x17
    1f74:	18 16       	cp	r1, r24
    1f76:	19 06       	cpc	r1, r25
    1f78:	ec f2       	brlt	.-70     	; 0x1f34 <LCD_VoidSendNum+0x3e>

	if (sign < 0)      /* putting sign */
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7e:	99 23       	and	r25, r25
    1f80:	6c f4       	brge	.+26     	; 0x1f9c <LCD_VoidSendNum+0xa6>
	{
		s[i++] = '-';
    1f82:	8e 81       	ldd	r24, Y+6	; 0x06
    1f84:	28 2f       	mov	r18, r24
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	ce 01       	movw	r24, r28
    1f8a:	07 96       	adiw	r24, 0x07	; 7
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	e2 0f       	add	r30, r18
    1f90:	f3 1f       	adc	r31, r19
    1f92:	8d e2       	ldi	r24, 0x2D	; 45
    1f94:	80 83       	st	Z, r24
    1f96:	8e 81       	ldd	r24, Y+6	; 0x06
    1f98:	8f 5f       	subi	r24, 0xFF	; 255
    1f9a:	8e 83       	std	Y+6, r24	; 0x06
	}

	ArrCount=i;
    1f9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f9e:	8b 83       	std	Y+3, r24	; 0x03
	j=ArrCount-1;
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	81 50       	subi	r24, 0x01	; 1
    1fa4:	8d 83       	std	Y+5, r24	; 0x05
	for (i = 0; i<j; i++, j--) /* reversing the array to make the NUM in order */
    1fa6:	1e 82       	std	Y+6, r1	; 0x06
    1fa8:	2c c0       	rjmp	.+88     	; 0x2002 <LCD_VoidSendNum+0x10c>
	{
	  c = s[i];
    1faa:	8e 81       	ldd	r24, Y+6	; 0x06
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	07 96       	adiw	r24, 0x07	; 7
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	e2 0f       	add	r30, r18
    1fb8:	f3 1f       	adc	r31, r19
    1fba:	80 81       	ld	r24, Z
    1fbc:	8c 83       	std	Y+4, r24	; 0x04
	  s[i] = s[j];
    1fbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc0:	48 2f       	mov	r20, r24
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc6:	28 2f       	mov	r18, r24
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	ce 01       	movw	r24, r28
    1fcc:	07 96       	adiw	r24, 0x07	; 7
    1fce:	fc 01       	movw	r30, r24
    1fd0:	e2 0f       	add	r30, r18
    1fd2:	f3 1f       	adc	r31, r19
    1fd4:	20 81       	ld	r18, Z
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	07 96       	adiw	r24, 0x07	; 7
    1fda:	fc 01       	movw	r30, r24
    1fdc:	e4 0f       	add	r30, r20
    1fde:	f5 1f       	adc	r31, r21
    1fe0:	20 83       	st	Z, r18
	  s[j] = c;
    1fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	ce 01       	movw	r24, r28
    1fea:	07 96       	adiw	r24, 0x07	; 7
    1fec:	fc 01       	movw	r30, r24
    1fee:	e2 0f       	add	r30, r18
    1ff0:	f3 1f       	adc	r31, r19
    1ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff4:	80 83       	st	Z, r24
		s[i++] = '-';
	}

	ArrCount=i;
	j=ArrCount-1;
	for (i = 0; i<j; i++, j--) /* reversing the array to make the NUM in order */
    1ff6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff8:	8f 5f       	subi	r24, 0xFF	; 255
    1ffa:	8e 83       	std	Y+6, r24	; 0x06
    1ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffe:	81 50       	subi	r24, 0x01	; 1
    2000:	8d 83       	std	Y+5, r24	; 0x05
    2002:	9e 81       	ldd	r25, Y+6	; 0x06
    2004:	8d 81       	ldd	r24, Y+5	; 0x05
    2006:	98 17       	cp	r25, r24
    2008:	80 f2       	brcs	.-96     	; 0x1faa <LCD_VoidSendNum+0xb4>
	  c = s[i];
	  s[i] = s[j];
	  s[j] = c;
	}

	for (i = 0; i<ArrCount; i++) /* PRINTNIG the NUM */
    200a:	1e 82       	std	Y+6, r1	; 0x06
    200c:	11 c0       	rjmp	.+34     	; 0x2030 <LCD_VoidSendNum+0x13a>
	{
		LCD_VoidSendChar (s[i],lcd);
    200e:	8e 81       	ldd	r24, Y+6	; 0x06
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	ce 01       	movw	r24, r28
    2016:	07 96       	adiw	r24, 0x07	; 7
    2018:	fc 01       	movw	r30, r24
    201a:	e2 0f       	add	r30, r18
    201c:	f3 1f       	adc	r31, r19
    201e:	80 81       	ld	r24, Z
    2020:	28 8d       	ldd	r18, Y+24	; 0x18
    2022:	39 8d       	ldd	r19, Y+25	; 0x19
    2024:	b9 01       	movw	r22, r18
    2026:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_VoidSendChar>
	  c = s[i];
	  s[i] = s[j];
	  s[j] = c;
	}

	for (i = 0; i<ArrCount; i++) /* PRINTNIG the NUM */
    202a:	8e 81       	ldd	r24, Y+6	; 0x06
    202c:	8f 5f       	subi	r24, 0xFF	; 255
    202e:	8e 83       	std	Y+6, r24	; 0x06
    2030:	9e 81       	ldd	r25, Y+6	; 0x06
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	98 17       	cp	r25, r24
    2036:	58 f3       	brcs	.-42     	; 0x200e <LCD_VoidSendNum+0x118>
	{
		LCD_VoidSendChar (s[i],lcd);
	}


 }
    2038:	69 96       	adiw	r28, 0x19	; 25
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	de bf       	out	0x3e, r29	; 62
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	cd bf       	out	0x3d, r28	; 61
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <LCD_VoidSendFloat>:

void LCD_VoidSendFloat(f32 Copy_fNum, Lcd_info* lcd)
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	2c 97       	sbiw	r28, 0x0c	; 12
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	de bf       	out	0x3e, r29	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	cd bf       	out	0x3d, r28	; 61
    205e:	6f 83       	std	Y+7, r22	; 0x07
    2060:	78 87       	std	Y+8, r23	; 0x08
    2062:	89 87       	std	Y+9, r24	; 0x09
    2064:	9a 87       	std	Y+10, r25	; 0x0a
    2066:	5c 87       	std	Y+12, r21	; 0x0c
    2068:	4b 87       	std	Y+11, r20	; 0x0b
	// Extract integer part
	s16 INTpart = (s16)Copy_fNum;
    206a:	6f 81       	ldd	r22, Y+7	; 0x07
    206c:	78 85       	ldd	r23, Y+8	; 0x08
    206e:	89 85       	ldd	r24, Y+9	; 0x09
    2070:	9a 85       	ldd	r25, Y+10	; 0x0a
    2072:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05

	// Extract floating part
	f32 fpart = Copy_fNum - (f32)INTpart;
    207e:	8d 81       	ldd	r24, Y+5	; 0x05
    2080:	9e 81       	ldd	r25, Y+6	; 0x06
    2082:	aa 27       	eor	r26, r26
    2084:	97 fd       	sbrc	r25, 7
    2086:	a0 95       	com	r26
    2088:	ba 2f       	mov	r27, r26
    208a:	bc 01       	movw	r22, r24
    208c:	cd 01       	movw	r24, r26
    208e:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    2092:	9b 01       	movw	r18, r22
    2094:	ac 01       	movw	r20, r24
    2096:	6f 81       	ldd	r22, Y+7	; 0x07
    2098:	78 85       	ldd	r23, Y+8	; 0x08
    209a:	89 85       	ldd	r24, Y+9	; 0x09
    209c:	9a 85       	ldd	r25, Y+10	; 0x0a
    209e:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	89 83       	std	Y+1, r24	; 0x01
    20a8:	9a 83       	std	Y+2, r25	; 0x02
    20aa:	ab 83       	std	Y+3, r26	; 0x03
    20ac:	bc 83       	std	Y+4, r27	; 0x04

	//Exception for negative number
	if(fpart<0){fpart*=-1;}
    20ae:	69 81       	ldd	r22, Y+1	; 0x01
    20b0:	7a 81       	ldd	r23, Y+2	; 0x02
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	9c 81       	ldd	r25, Y+4	; 0x04
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	50 e0       	ldi	r21, 0x00	; 0
    20be:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20c2:	88 23       	and	r24, r24
    20c4:	4c f4       	brge	.+18     	; 0x20d8 <LCD_VoidSendFloat+0x8e>
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ca:	ab 81       	ldd	r26, Y+3	; 0x03
    20cc:	bc 81       	ldd	r27, Y+4	; 0x04
    20ce:	b0 58       	subi	r27, 0x80	; 128
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	9a 83       	std	Y+2, r25	; 0x02
    20d4:	ab 83       	std	Y+3, r26	; 0x03
    20d6:	bc 83       	std	Y+4, r27	; 0x04

	// convert integer part to string
	LCD_VoidSendNum(INTpart, lcd);
    20d8:	8d 81       	ldd	r24, Y+5	; 0x05
    20da:	9e 81       	ldd	r25, Y+6	; 0x06
    20dc:	2b 85       	ldd	r18, Y+11	; 0x0b
    20de:	3c 85       	ldd	r19, Y+12	; 0x0c
    20e0:	b9 01       	movw	r22, r18
    20e2:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_VoidSendNum>

	// add dot
	LCD_VoidSendString(".", lcd);
    20e6:	80 e6       	ldi	r24, 0x60	; 96
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	2b 85       	ldd	r18, Y+11	; 0x0b
    20ec:	3c 85       	ldd	r19, Y+12	; 0x0c
    20ee:	b9 01       	movw	r22, r18
    20f0:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <LCD_VoidSendString>
	// Get the value of fraction part upto 4 digits of points after dot
	fpart = fpart * 10000;
    20f4:	69 81       	ldd	r22, Y+1	; 0x01
    20f6:	7a 81       	ldd	r23, Y+2	; 0x02
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	9c 81       	ldd	r25, Y+4	; 0x04
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e4       	ldi	r19, 0x40	; 64
    2100:	4c e1       	ldi	r20, 0x1C	; 28
    2102:	56 e4       	ldi	r21, 0x46	; 70
    2104:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	89 83       	std	Y+1, r24	; 0x01
    210e:	9a 83       	std	Y+2, r25	; 0x02
    2110:	ab 83       	std	Y+3, r26	; 0x03
    2112:	bc 83       	std	Y+4, r27	; 0x04

	LCD_VoidSendNum(fpart, lcd);
    2114:	69 81       	ldd	r22, Y+1	; 0x01
    2116:	7a 81       	ldd	r23, Y+2	; 0x02
    2118:	8b 81       	ldd	r24, Y+3	; 0x03
    211a:	9c 81       	ldd	r25, Y+4	; 0x04
    211c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	2b 85       	ldd	r18, Y+11	; 0x0b
    2126:	3c 85       	ldd	r19, Y+12	; 0x0c
    2128:	b9 01       	movw	r22, r18
    212a:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_VoidSendNum>

}
    212e:	2c 96       	adiw	r28, 0x0c	; 12
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <LCD_VoidWriteOnCGRAM>:

void LCD_VoidWriteOnCGRAM(u8 CGRAMmemoryLocation, u8 *ArrChar, Lcd_info* lcd)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	00 d0       	rcall	.+0      	; 0x2146 <LCD_VoidWriteOnCGRAM+0x6>
    2146:	00 d0       	rcall	.+0      	; 0x2148 <LCD_VoidWriteOnCGRAM+0x8>
    2148:	00 d0       	rcall	.+0      	; 0x214a <LCD_VoidWriteOnCGRAM+0xa>
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	8a 83       	std	Y+2, r24	; 0x02
    2150:	7c 83       	std	Y+4, r23	; 0x04
    2152:	6b 83       	std	Y+3, r22	; 0x03
    2154:	5e 83       	std	Y+6, r21	; 0x06
    2156:	4d 83       	std	Y+5, r20	; 0x05
	u8 counter;
	if(CGRAMmemoryLocation<MAX_CHAR_SIZE_CGRAM) //If valid address
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	88 30       	cpi	r24, 0x08	; 8
    215c:	58 f5       	brcc	.+86     	; 0x21b4 <LCD_VoidWriteOnCGRAM+0x74>
	{
		LCD_VoidSendCommand((LCD_SetAddressCGRAM+(CGRAMmemoryLocation*MAX_CHAR_SIZE_CGRAM)),lcd); //Write to CGRAM
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	08 96       	adiw	r24, 0x08	; 8
    2166:	88 0f       	add	r24, r24
    2168:	99 1f       	adc	r25, r25
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	2d 81       	ldd	r18, Y+5	; 0x05
    2174:	3e 81       	ldd	r19, Y+6	; 0x06
    2176:	b9 01       	movw	r22, r18
    2178:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_VoidSendCommand>
		for(counter=0; counter<MAX_CHAR_SIZE_CGRAM; counter++)
    217c:	19 82       	std	Y+1, r1	; 0x01
    217e:	11 c0       	rjmp	.+34     	; 0x21a2 <LCD_VoidWriteOnCGRAM+0x62>
		{
			LCD_VoidSendChar(ArrChar[counter],lcd); //Write the character pattern to CGRAM
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	28 2f       	mov	r18, r24
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	9c 81       	ldd	r25, Y+4	; 0x04
    218a:	fc 01       	movw	r30, r24
    218c:	e2 0f       	add	r30, r18
    218e:	f3 1f       	adc	r31, r19
    2190:	80 81       	ld	r24, Z
    2192:	2d 81       	ldd	r18, Y+5	; 0x05
    2194:	3e 81       	ldd	r19, Y+6	; 0x06
    2196:	b9 01       	movw	r22, r18
    2198:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_VoidSendChar>
{
	u8 counter;
	if(CGRAMmemoryLocation<MAX_CHAR_SIZE_CGRAM) //If valid address
	{
		LCD_VoidSendCommand((LCD_SetAddressCGRAM+(CGRAMmemoryLocation*MAX_CHAR_SIZE_CGRAM)),lcd); //Write to CGRAM
		for(counter=0; counter<MAX_CHAR_SIZE_CGRAM; counter++)
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	8f 5f       	subi	r24, 0xFF	; 255
    21a0:	89 83       	std	Y+1, r24	; 0x01
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	88 30       	cpi	r24, 0x08	; 8
    21a6:	60 f3       	brcs	.-40     	; 0x2180 <LCD_VoidWriteOnCGRAM+0x40>
		{
			LCD_VoidSendChar(ArrChar[counter],lcd); //Write the character pattern to CGRAM
		}
		LCD_VoidSendCommand(LCD_SetAddressDDRAM,lcd); //back to DDRAM location 0
    21a8:	2d 81       	ldd	r18, Y+5	; 0x05
    21aa:	3e 81       	ldd	r19, Y+6	; 0x06
    21ac:	80 e8       	ldi	r24, 0x80	; 128
    21ae:	b9 01       	movw	r22, r18
    21b0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_VoidSendCommand>
	else
	{
		/*Error*/
	}

}
    21b4:	26 96       	adiw	r28, 0x06	; 6
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	cd bf       	out	0x3d, r28	; 61
    21c0:	cf 91       	pop	r28
    21c2:	df 91       	pop	r29
    21c4:	08 95       	ret

000021c6 <LCD_VoidDispCharCGRAM>:

void LCD_VoidDispCharCGRAM(u8 CGRAMmemoryLocation, Lcd_info* lcd)
{
    21c6:	df 93       	push	r29
    21c8:	cf 93       	push	r28
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <LCD_VoidDispCharCGRAM+0x6>
    21cc:	0f 92       	push	r0
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	7b 83       	std	Y+3, r23	; 0x03
    21d6:	6a 83       	std	Y+2, r22	; 0x02
	LCD_VoidSendChar(CGRAMmemoryLocation,lcd);
    21d8:	2a 81       	ldd	r18, Y+2	; 0x02
    21da:	3b 81       	ldd	r19, Y+3	; 0x03
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	b9 01       	movw	r22, r18
    21e0:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_VoidSendChar>
}
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <LCD_VoidSendCommand>:

void LCD_VoidSendCommand(u8 Copy_Command, Lcd_info* lcd)
{
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	6f 97       	sbiw	r28, 0x1f	; 31
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61
    2204:	8d 8f       	std	Y+29, r24	; 0x1d
    2206:	7f 8f       	std	Y+31, r23	; 0x1f
    2208:	6e 8f       	std	Y+30, r22	; 0x1e
	
	// RS=0 to send a Command and RS=1 to send Instraction
	DIO_ErrStateSetPinValue (lcd->Rs_Group,lcd->Rs_Pin,DIO_Low);
    220a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    220c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    220e:	80 81       	ld	r24, Z
    2210:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2212:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2214:	91 81       	ldd	r25, Z+1	; 0x01
    2216:	69 2f       	mov	r22, r25
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_ErrStateSetPinValue>
	// RW=0 to Write and RW=1 to Read
	DIO_ErrStateSetPinValue (lcd->Rw_Group,lcd->Rw_Pin,DIO_Low);
    221e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2220:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2226:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2228:	93 81       	ldd	r25, Z+3	; 0x03
    222a:	69 2f       	mov	r22, r25
    222c:	40 e0       	ldi	r20, 0x00	; 0
    222e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_ErrStateSetPinValue>
	// Write Command
	DIO_ErrStateSetGroupValue(lcd->Data_Group,Copy_Command);
    2232:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2234:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2236:	86 81       	ldd	r24, Z+6	; 0x06
    2238:	6d 8d       	ldd	r22, Y+29	; 0x1d
    223a:	0e 94 4b 09 	call	0x1296	; 0x1296 <DIO_ErrStateSetGroupValue>
	// Enable=1 for 230 nano secounds 
	DIO_ErrStateSetPinValue (lcd->E_Group,lcd->E_Pin,DIO_High);
    223e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2240:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2242:	84 81       	ldd	r24, Z+4	; 0x04
    2244:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2246:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2248:	95 81       	ldd	r25, Z+5	; 0x05
    224a:	69 2f       	mov	r22, r25
    224c:	41 e0       	ldi	r20, 0x01	; 1
    224e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_ErrStateSetPinValue>
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	a0 e8       	ldi	r26, 0x80	; 128
    2258:	bf e3       	ldi	r27, 0x3F	; 63
    225a:	89 8f       	std	Y+25, r24	; 0x19
    225c:	9a 8f       	std	Y+26, r25	; 0x1a
    225e:	ab 8f       	std	Y+27, r26	; 0x1b
    2260:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2262:	69 8d       	ldd	r22, Y+25	; 0x19
    2264:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2266:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2268:	9c 8d       	ldd	r25, Y+28	; 0x1c
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	4a ef       	ldi	r20, 0xFA	; 250
    2270:	54 e4       	ldi	r21, 0x44	; 68
    2272:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	8d 8b       	std	Y+21, r24	; 0x15
    227c:	9e 8b       	std	Y+22, r25	; 0x16
    227e:	af 8b       	std	Y+23, r26	; 0x17
    2280:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2282:	6d 89       	ldd	r22, Y+21	; 0x15
    2284:	7e 89       	ldd	r23, Y+22	; 0x16
    2286:	8f 89       	ldd	r24, Y+23	; 0x17
    2288:	98 8d       	ldd	r25, Y+24	; 0x18
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e8       	ldi	r20, 0x80	; 128
    2290:	5f e3       	ldi	r21, 0x3F	; 63
    2292:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2296:	88 23       	and	r24, r24
    2298:	2c f4       	brge	.+10     	; 0x22a4 <LCD_VoidSendCommand+0xb4>
		__ticks = 1;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	9c 8b       	std	Y+20, r25	; 0x14
    22a0:	8b 8b       	std	Y+19, r24	; 0x13
    22a2:	3f c0       	rjmp	.+126    	; 0x2322 <LCD_VoidSendCommand+0x132>
	else if (__tmp > 65535)
    22a4:	6d 89       	ldd	r22, Y+21	; 0x15
    22a6:	7e 89       	ldd	r23, Y+22	; 0x16
    22a8:	8f 89       	ldd	r24, Y+23	; 0x17
    22aa:	98 8d       	ldd	r25, Y+24	; 0x18
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	3f ef       	ldi	r19, 0xFF	; 255
    22b0:	4f e7       	ldi	r20, 0x7F	; 127
    22b2:	57 e4       	ldi	r21, 0x47	; 71
    22b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22b8:	18 16       	cp	r1, r24
    22ba:	4c f5       	brge	.+82     	; 0x230e <LCD_VoidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22bc:	69 8d       	ldd	r22, Y+25	; 0x19
    22be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e2       	ldi	r20, 0x20	; 32
    22ca:	51 e4       	ldi	r21, 0x41	; 65
    22cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	bc 01       	movw	r22, r24
    22d6:	cd 01       	movw	r24, r26
    22d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	9c 8b       	std	Y+20, r25	; 0x14
    22e2:	8b 8b       	std	Y+19, r24	; 0x13
    22e4:	0f c0       	rjmp	.+30     	; 0x2304 <LCD_VoidSendCommand+0x114>
    22e6:	88 ec       	ldi	r24, 0xC8	; 200
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	9a 8b       	std	Y+18, r25	; 0x12
    22ec:	89 8b       	std	Y+17, r24	; 0x11
    22ee:	89 89       	ldd	r24, Y+17	; 0x11
    22f0:	9a 89       	ldd	r25, Y+18	; 0x12
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <LCD_VoidSendCommand+0x102>
    22f6:	9a 8b       	std	Y+18, r25	; 0x12
    22f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fa:	8b 89       	ldd	r24, Y+19	; 0x13
    22fc:	9c 89       	ldd	r25, Y+20	; 0x14
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	9c 8b       	std	Y+20, r25	; 0x14
    2302:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2304:	8b 89       	ldd	r24, Y+19	; 0x13
    2306:	9c 89       	ldd	r25, Y+20	; 0x14
    2308:	00 97       	sbiw	r24, 0x00	; 0
    230a:	69 f7       	brne	.-38     	; 0x22e6 <LCD_VoidSendCommand+0xf6>
    230c:	14 c0       	rjmp	.+40     	; 0x2336 <LCD_VoidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230e:	6d 89       	ldd	r22, Y+21	; 0x15
    2310:	7e 89       	ldd	r23, Y+22	; 0x16
    2312:	8f 89       	ldd	r24, Y+23	; 0x17
    2314:	98 8d       	ldd	r25, Y+24	; 0x18
    2316:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	9c 8b       	std	Y+20, r25	; 0x14
    2320:	8b 8b       	std	Y+19, r24	; 0x13
    2322:	8b 89       	ldd	r24, Y+19	; 0x13
    2324:	9c 89       	ldd	r25, Y+20	; 0x14
    2326:	98 8b       	std	Y+16, r25	; 0x10
    2328:	8f 87       	std	Y+15, r24	; 0x0f
    232a:	8f 85       	ldd	r24, Y+15	; 0x0f
    232c:	98 89       	ldd	r25, Y+16	; 0x10
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	f1 f7       	brne	.-4      	; 0x232e <LCD_VoidSendCommand+0x13e>
    2332:	98 8b       	std	Y+16, r25	; 0x10
    2334:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ErrStateSetPinValue (lcd->E_Group,lcd->E_Pin,DIO_Low);
    2336:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2338:	ff 8d       	ldd	r31, Y+31	; 0x1f
    233a:	84 81       	ldd	r24, Z+4	; 0x04
    233c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    233e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2340:	95 81       	ldd	r25, Z+5	; 0x05
    2342:	69 2f       	mov	r22, r25
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_ErrStateSetPinValue>
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	a0 e8       	ldi	r26, 0x80	; 128
    2350:	bf e3       	ldi	r27, 0x3F	; 63
    2352:	8b 87       	std	Y+11, r24	; 0x0b
    2354:	9c 87       	std	Y+12, r25	; 0x0c
    2356:	ad 87       	std	Y+13, r26	; 0x0d
    2358:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235a:	6b 85       	ldd	r22, Y+11	; 0x0b
    235c:	7c 85       	ldd	r23, Y+12	; 0x0c
    235e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2360:	9e 85       	ldd	r25, Y+14	; 0x0e
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	4a ef       	ldi	r20, 0xFA	; 250
    2368:	54 e4       	ldi	r21, 0x44	; 68
    236a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	8f 83       	std	Y+7, r24	; 0x07
    2374:	98 87       	std	Y+8, r25	; 0x08
    2376:	a9 87       	std	Y+9, r26	; 0x09
    2378:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    237a:	6f 81       	ldd	r22, Y+7	; 0x07
    237c:	78 85       	ldd	r23, Y+8	; 0x08
    237e:	89 85       	ldd	r24, Y+9	; 0x09
    2380:	9a 85       	ldd	r25, Y+10	; 0x0a
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e8       	ldi	r20, 0x80	; 128
    2388:	5f e3       	ldi	r21, 0x3F	; 63
    238a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    238e:	88 23       	and	r24, r24
    2390:	2c f4       	brge	.+10     	; 0x239c <LCD_VoidSendCommand+0x1ac>
		__ticks = 1;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	9e 83       	std	Y+6, r25	; 0x06
    2398:	8d 83       	std	Y+5, r24	; 0x05
    239a:	3f c0       	rjmp	.+126    	; 0x241a <LCD_VoidSendCommand+0x22a>
	else if (__tmp > 65535)
    239c:	6f 81       	ldd	r22, Y+7	; 0x07
    239e:	78 85       	ldd	r23, Y+8	; 0x08
    23a0:	89 85       	ldd	r24, Y+9	; 0x09
    23a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	3f ef       	ldi	r19, 0xFF	; 255
    23a8:	4f e7       	ldi	r20, 0x7F	; 127
    23aa:	57 e4       	ldi	r21, 0x47	; 71
    23ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23b0:	18 16       	cp	r1, r24
    23b2:	4c f5       	brge	.+82     	; 0x2406 <LCD_VoidSendCommand+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e2       	ldi	r20, 0x20	; 32
    23c2:	51 e4       	ldi	r21, 0x41	; 65
    23c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	9e 83       	std	Y+6, r25	; 0x06
    23da:	8d 83       	std	Y+5, r24	; 0x05
    23dc:	0f c0       	rjmp	.+30     	; 0x23fc <LCD_VoidSendCommand+0x20c>
    23de:	88 ec       	ldi	r24, 0xC8	; 200
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	9c 83       	std	Y+4, r25	; 0x04
    23e4:	8b 83       	std	Y+3, r24	; 0x03
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <LCD_VoidSendCommand+0x1fa>
    23ee:	9c 83       	std	Y+4, r25	; 0x04
    23f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	9e 83       	std	Y+6, r25	; 0x06
    23fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fc:	8d 81       	ldd	r24, Y+5	; 0x05
    23fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	69 f7       	brne	.-38     	; 0x23de <LCD_VoidSendCommand+0x1ee>
    2404:	14 c0       	rjmp	.+40     	; 0x242e <LCD_VoidSendCommand+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2406:	6f 81       	ldd	r22, Y+7	; 0x07
    2408:	78 85       	ldd	r23, Y+8	; 0x08
    240a:	89 85       	ldd	r24, Y+9	; 0x09
    240c:	9a 85       	ldd	r25, Y+10	; 0x0a
    240e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	9e 83       	std	Y+6, r25	; 0x06
    2418:	8d 83       	std	Y+5, r24	; 0x05
    241a:	8d 81       	ldd	r24, Y+5	; 0x05
    241c:	9e 81       	ldd	r25, Y+6	; 0x06
    241e:	9a 83       	std	Y+2, r25	; 0x02
    2420:	89 83       	std	Y+1, r24	; 0x01
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	9a 81       	ldd	r25, Y+2	; 0x02
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <LCD_VoidSendCommand+0x236>
    242a:	9a 83       	std	Y+2, r25	; 0x02
    242c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
}
    242e:	6f 96       	adiw	r28, 0x1f	; 31
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <LCD_VoidSendChar>:

void LCD_VoidSendChar(u8 Copy_Char, Lcd_info* lcd)
{
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	6f 97       	sbiw	r28, 0x1f	; 31
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	8d 8f       	std	Y+29, r24	; 0x1d
    2456:	7f 8f       	std	Y+31, r23	; 0x1f
    2458:	6e 8f       	std	Y+30, r22	; 0x1e
	
	// RS=0 to send a Command and RS=1 to send Data
	DIO_ErrStateSetPinValue (lcd->Rs_Group,lcd->Rs_Pin,DIO_High);
    245a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    245c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    245e:	80 81       	ld	r24, Z
    2460:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2462:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2464:	91 81       	ldd	r25, Z+1	; 0x01
    2466:	69 2f       	mov	r22, r25
    2468:	41 e0       	ldi	r20, 0x01	; 1
    246a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_ErrStateSetPinValue>
	// RW=0 to Write and RW=1 to Read
	DIO_ErrStateSetPinValue (lcd->Rw_Group,lcd->Rw_Pin,DIO_Low);
    246e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2470:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2472:	82 81       	ldd	r24, Z+2	; 0x02
    2474:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2476:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2478:	93 81       	ldd	r25, Z+3	; 0x03
    247a:	69 2f       	mov	r22, r25
    247c:	40 e0       	ldi	r20, 0x00	; 0
    247e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_ErrStateSetPinValue>
	// Write Data
	DIO_ErrStateSetGroupValue(lcd->Data_Group,Copy_Char);
    2482:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2484:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2486:	86 81       	ldd	r24, Z+6	; 0x06
    2488:	6d 8d       	ldd	r22, Y+29	; 0x1d
    248a:	0e 94 4b 09 	call	0x1296	; 0x1296 <DIO_ErrStateSetGroupValue>
	// Enable=1 for 230 nano secounds 
	DIO_ErrStateSetPinValue (lcd->E_Group,lcd->E_Pin,DIO_High);
    248e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2490:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2492:	84 81       	ldd	r24, Z+4	; 0x04
    2494:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2496:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2498:	95 81       	ldd	r25, Z+5	; 0x05
    249a:	69 2f       	mov	r22, r25
    249c:	41 e0       	ldi	r20, 0x01	; 1
    249e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_ErrStateSetPinValue>
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	a0 e8       	ldi	r26, 0x80	; 128
    24a8:	bf e3       	ldi	r27, 0x3F	; 63
    24aa:	89 8f       	std	Y+25, r24	; 0x19
    24ac:	9a 8f       	std	Y+26, r25	; 0x1a
    24ae:	ab 8f       	std	Y+27, r26	; 0x1b
    24b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b2:	69 8d       	ldd	r22, Y+25	; 0x19
    24b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	4a ef       	ldi	r20, 0xFA	; 250
    24c0:	54 e4       	ldi	r21, 0x44	; 68
    24c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	8d 8b       	std	Y+21, r24	; 0x15
    24cc:	9e 8b       	std	Y+22, r25	; 0x16
    24ce:	af 8b       	std	Y+23, r26	; 0x17
    24d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24d2:	6d 89       	ldd	r22, Y+21	; 0x15
    24d4:	7e 89       	ldd	r23, Y+22	; 0x16
    24d6:	8f 89       	ldd	r24, Y+23	; 0x17
    24d8:	98 8d       	ldd	r25, Y+24	; 0x18
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e8       	ldi	r20, 0x80	; 128
    24e0:	5f e3       	ldi	r21, 0x3F	; 63
    24e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24e6:	88 23       	and	r24, r24
    24e8:	2c f4       	brge	.+10     	; 0x24f4 <LCD_VoidSendChar+0xb4>
		__ticks = 1;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	9c 8b       	std	Y+20, r25	; 0x14
    24f0:	8b 8b       	std	Y+19, r24	; 0x13
    24f2:	3f c0       	rjmp	.+126    	; 0x2572 <LCD_VoidSendChar+0x132>
	else if (__tmp > 65535)
    24f4:	6d 89       	ldd	r22, Y+21	; 0x15
    24f6:	7e 89       	ldd	r23, Y+22	; 0x16
    24f8:	8f 89       	ldd	r24, Y+23	; 0x17
    24fa:	98 8d       	ldd	r25, Y+24	; 0x18
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	3f ef       	ldi	r19, 0xFF	; 255
    2500:	4f e7       	ldi	r20, 0x7F	; 127
    2502:	57 e4       	ldi	r21, 0x47	; 71
    2504:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2508:	18 16       	cp	r1, r24
    250a:	4c f5       	brge	.+82     	; 0x255e <LCD_VoidSendChar+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250c:	69 8d       	ldd	r22, Y+25	; 0x19
    250e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2510:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2512:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e2       	ldi	r20, 0x20	; 32
    251a:	51 e4       	ldi	r21, 0x41	; 65
    251c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	bc 01       	movw	r22, r24
    2526:	cd 01       	movw	r24, r26
    2528:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	9c 8b       	std	Y+20, r25	; 0x14
    2532:	8b 8b       	std	Y+19, r24	; 0x13
    2534:	0f c0       	rjmp	.+30     	; 0x2554 <LCD_VoidSendChar+0x114>
    2536:	88 ec       	ldi	r24, 0xC8	; 200
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	9a 8b       	std	Y+18, r25	; 0x12
    253c:	89 8b       	std	Y+17, r24	; 0x11
    253e:	89 89       	ldd	r24, Y+17	; 0x11
    2540:	9a 89       	ldd	r25, Y+18	; 0x12
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <LCD_VoidSendChar+0x102>
    2546:	9a 8b       	std	Y+18, r25	; 0x12
    2548:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254a:	8b 89       	ldd	r24, Y+19	; 0x13
    254c:	9c 89       	ldd	r25, Y+20	; 0x14
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	9c 8b       	std	Y+20, r25	; 0x14
    2552:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2554:	8b 89       	ldd	r24, Y+19	; 0x13
    2556:	9c 89       	ldd	r25, Y+20	; 0x14
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	69 f7       	brne	.-38     	; 0x2536 <LCD_VoidSendChar+0xf6>
    255c:	14 c0       	rjmp	.+40     	; 0x2586 <LCD_VoidSendChar+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255e:	6d 89       	ldd	r22, Y+21	; 0x15
    2560:	7e 89       	ldd	r23, Y+22	; 0x16
    2562:	8f 89       	ldd	r24, Y+23	; 0x17
    2564:	98 8d       	ldd	r25, Y+24	; 0x18
    2566:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	9c 8b       	std	Y+20, r25	; 0x14
    2570:	8b 8b       	std	Y+19, r24	; 0x13
    2572:	8b 89       	ldd	r24, Y+19	; 0x13
    2574:	9c 89       	ldd	r25, Y+20	; 0x14
    2576:	98 8b       	std	Y+16, r25	; 0x10
    2578:	8f 87       	std	Y+15, r24	; 0x0f
    257a:	8f 85       	ldd	r24, Y+15	; 0x0f
    257c:	98 89       	ldd	r25, Y+16	; 0x10
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <LCD_VoidSendChar+0x13e>
    2582:	98 8b       	std	Y+16, r25	; 0x10
    2584:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ErrStateSetPinValue (lcd->E_Group,lcd->E_Pin,DIO_Low);
    2586:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2588:	ff 8d       	ldd	r31, Y+31	; 0x1f
    258a:	84 81       	ldd	r24, Z+4	; 0x04
    258c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    258e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2590:	95 81       	ldd	r25, Z+5	; 0x05
    2592:	69 2f       	mov	r22, r25
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_ErrStateSetPinValue>
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	a0 e8       	ldi	r26, 0x80	; 128
    25a0:	bf e3       	ldi	r27, 0x3F	; 63
    25a2:	8b 87       	std	Y+11, r24	; 0x0b
    25a4:	9c 87       	std	Y+12, r25	; 0x0c
    25a6:	ad 87       	std	Y+13, r26	; 0x0d
    25a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	4a ef       	ldi	r20, 0xFA	; 250
    25b8:	54 e4       	ldi	r21, 0x44	; 68
    25ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	8f 83       	std	Y+7, r24	; 0x07
    25c4:	98 87       	std	Y+8, r25	; 0x08
    25c6:	a9 87       	std	Y+9, r26	; 0x09
    25c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ca:	6f 81       	ldd	r22, Y+7	; 0x07
    25cc:	78 85       	ldd	r23, Y+8	; 0x08
    25ce:	89 85       	ldd	r24, Y+9	; 0x09
    25d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e8       	ldi	r20, 0x80	; 128
    25d8:	5f e3       	ldi	r21, 0x3F	; 63
    25da:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25de:	88 23       	and	r24, r24
    25e0:	2c f4       	brge	.+10     	; 0x25ec <LCD_VoidSendChar+0x1ac>
		__ticks = 1;
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	9e 83       	std	Y+6, r25	; 0x06
    25e8:	8d 83       	std	Y+5, r24	; 0x05
    25ea:	3f c0       	rjmp	.+126    	; 0x266a <LCD_VoidSendChar+0x22a>
	else if (__tmp > 65535)
    25ec:	6f 81       	ldd	r22, Y+7	; 0x07
    25ee:	78 85       	ldd	r23, Y+8	; 0x08
    25f0:	89 85       	ldd	r24, Y+9	; 0x09
    25f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	3f ef       	ldi	r19, 0xFF	; 255
    25f8:	4f e7       	ldi	r20, 0x7F	; 127
    25fa:	57 e4       	ldi	r21, 0x47	; 71
    25fc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2600:	18 16       	cp	r1, r24
    2602:	4c f5       	brge	.+82     	; 0x2656 <LCD_VoidSendChar+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2604:	6b 85       	ldd	r22, Y+11	; 0x0b
    2606:	7c 85       	ldd	r23, Y+12	; 0x0c
    2608:	8d 85       	ldd	r24, Y+13	; 0x0d
    260a:	9e 85       	ldd	r25, Y+14	; 0x0e
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e2       	ldi	r20, 0x20	; 32
    2612:	51 e4       	ldi	r21, 0x41	; 65
    2614:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	bc 01       	movw	r22, r24
    261e:	cd 01       	movw	r24, r26
    2620:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	9e 83       	std	Y+6, r25	; 0x06
    262a:	8d 83       	std	Y+5, r24	; 0x05
    262c:	0f c0       	rjmp	.+30     	; 0x264c <LCD_VoidSendChar+0x20c>
    262e:	88 ec       	ldi	r24, 0xC8	; 200
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9c 83       	std	Y+4, r25	; 0x04
    2634:	8b 83       	std	Y+3, r24	; 0x03
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	9c 81       	ldd	r25, Y+4	; 0x04
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	f1 f7       	brne	.-4      	; 0x263a <LCD_VoidSendChar+0x1fa>
    263e:	9c 83       	std	Y+4, r25	; 0x04
    2640:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2642:	8d 81       	ldd	r24, Y+5	; 0x05
    2644:	9e 81       	ldd	r25, Y+6	; 0x06
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	9e 83       	std	Y+6, r25	; 0x06
    264a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264c:	8d 81       	ldd	r24, Y+5	; 0x05
    264e:	9e 81       	ldd	r25, Y+6	; 0x06
    2650:	00 97       	sbiw	r24, 0x00	; 0
    2652:	69 f7       	brne	.-38     	; 0x262e <LCD_VoidSendChar+0x1ee>
    2654:	14 c0       	rjmp	.+40     	; 0x267e <LCD_VoidSendChar+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2656:	6f 81       	ldd	r22, Y+7	; 0x07
    2658:	78 85       	ldd	r23, Y+8	; 0x08
    265a:	89 85       	ldd	r24, Y+9	; 0x09
    265c:	9a 85       	ldd	r25, Y+10	; 0x0a
    265e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	9e 83       	std	Y+6, r25	; 0x06
    2668:	8d 83       	std	Y+5, r24	; 0x05
    266a:	8d 81       	ldd	r24, Y+5	; 0x05
    266c:	9e 81       	ldd	r25, Y+6	; 0x06
    266e:	9a 83       	std	Y+2, r25	; 0x02
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	9a 81       	ldd	r25, Y+2	; 0x02
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <LCD_VoidSendChar+0x236>
    267a:	9a 83       	std	Y+2, r25	; 0x02
    267c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
}		
    267e:	6f 96       	adiw	r28, 0x1f	; 31
    2680:	0f b6       	in	r0, 0x3f	; 63
    2682:	f8 94       	cli
    2684:	de bf       	out	0x3e, r29	; 62
    2686:	0f be       	out	0x3f, r0	; 63
    2688:	cd bf       	out	0x3d, r28	; 61
    268a:	cf 91       	pop	r28
    268c:	df 91       	pop	r29
    268e:	08 95       	ret

00002690 <KPD_voidInit>:
const u8 KPD_u8SwitchVal[4][4] = KPD_KEYS;

const u8 KPD_u8RowsPins[4] = { ROW1, ROW2, ROW3, ROW4 };
const u8 KPD_u8ColsPins[4] = { COL1, COL2, COL3, COL4 };

void KPD_voidInit(void) {
    2690:	df 93       	push	r29
    2692:	cf 93       	push	r28
    2694:	cd b7       	in	r28, 0x3d	; 61
    2696:	de b7       	in	r29, 0x3e	; 62

	DIO_ErrStateSetPinDirection(KPD_PORT, ROW1, DIO_Output);
    2698:	82 e0       	ldi	r24, 0x02	; 2
    269a:	60 e0       	ldi	r22, 0x00	; 0
    269c:	41 e0       	ldi	r20, 0x01	; 1
    269e:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KPD_PORT, ROW2, DIO_Output);
    26a2:	82 e0       	ldi	r24, 0x02	; 2
    26a4:	61 e0       	ldi	r22, 0x01	; 1
    26a6:	41 e0       	ldi	r20, 0x01	; 1
    26a8:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KPD_PORT, ROW3, DIO_Output);
    26ac:	82 e0       	ldi	r24, 0x02	; 2
    26ae:	62 e0       	ldi	r22, 0x02	; 2
    26b0:	41 e0       	ldi	r20, 0x01	; 1
    26b2:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KPD_PORT, ROW4, DIO_Output);
    26b6:	82 e0       	ldi	r24, 0x02	; 2
    26b8:	63 e0       	ldi	r22, 0x03	; 3
    26ba:	41 e0       	ldi	r20, 0x01	; 1
    26bc:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_ErrStateSetPinDirection>

	DIO_ErrStateSetPinDirection(KPD_PORT, COL1, DIO_Input);
    26c0:	82 e0       	ldi	r24, 0x02	; 2
    26c2:	64 e0       	ldi	r22, 0x04	; 4
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KPD_PORT, COL2, DIO_Input);
    26ca:	82 e0       	ldi	r24, 0x02	; 2
    26cc:	65 e0       	ldi	r22, 0x05	; 5
    26ce:	40 e0       	ldi	r20, 0x00	; 0
    26d0:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KPD_PORT, COL3, DIO_Input);
    26d4:	82 e0       	ldi	r24, 0x02	; 2
    26d6:	66 e0       	ldi	r22, 0x06	; 6
    26d8:	40 e0       	ldi	r20, 0x00	; 0
    26da:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KPD_PORT, COL4, DIO_Input);
    26de:	82 e0       	ldi	r24, 0x02	; 2
    26e0:	67 e0       	ldi	r22, 0x07	; 7
    26e2:	40 e0       	ldi	r20, 0x00	; 0
    26e4:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_ErrStateSetPinDirection>
	
	// setting the Rows to HIGH and activate the columns internal Pull Up resistors
	PORTC_ITI = 0xff ;
    26e8:	e5 e3       	ldi	r30, 0x35	; 53
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	8f ef       	ldi	r24, 0xFF	; 255
    26ee:	80 83       	st	Z, r24

}
    26f0:	cf 91       	pop	r28
    26f2:	df 91       	pop	r29
    26f4:	08 95       	ret

000026f6 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void) {
    26f6:	df 93       	push	r29
    26f8:	cf 93       	push	r28
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
    26fe:	63 97       	sbiw	r28, 0x13	; 19
    2700:	0f b6       	in	r0, 0x3f	; 63
    2702:	f8 94       	cli
    2704:	de bf       	out	0x3e, r29	; 62
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8Col, Local_u8Row;
	u8 Local_u8Sw = KPD_u8KEY_NOT_PRESSED;
    270a:	8f ef       	ldi	r24, 0xFF	; 255
    270c:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8Flag = 0;
    270e:	1f 86       	std	Y+15, r1	; 0x0f
	u8 val = 0;
    2710:	1b 8a       	std	Y+19, r1	; 0x13

	for (Local_u8Row = 0; Local_u8Row <= 3; Local_u8Row++) {
    2712:	19 8a       	std	Y+17, r1	; 0x11
    2714:	d4 c0       	rjmp	.+424    	; 0x28be <KPD_u8GetPressedKey+0x1c8>

		DIO_ErrStateSetPinValue(KPD_PORT, KPD_u8RowsPins[Local_u8Row], DIO_Low);
    2716:	89 89       	ldd	r24, Y+17	; 0x11
    2718:	88 2f       	mov	r24, r24
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	fc 01       	movw	r30, r24
    271e:	e6 57       	subi	r30, 0x76	; 118
    2720:	fe 4f       	sbci	r31, 0xFE	; 254
    2722:	90 81       	ld	r25, Z
    2724:	82 e0       	ldi	r24, 0x02	; 2
    2726:	69 2f       	mov	r22, r25
    2728:	40 e0       	ldi	r20, 0x00	; 0
    272a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_ErrStateSetPinValue>

		for (Local_u8Col = 0; Local_u8Col <= 3; Local_u8Col++) {
    272e:	1a 8a       	std	Y+18, r1	; 0x12
    2730:	b0 c0       	rjmp	.+352    	; 0x2892 <KPD_u8GetPressedKey+0x19c>

			// Key pressed
			DIO_ErrStateReadPinValue(KPD_PORT, KPD_u8ColsPins[Local_u8Col],&val);
    2732:	8a 89       	ldd	r24, Y+18	; 0x12
    2734:	88 2f       	mov	r24, r24
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	fc 01       	movw	r30, r24
    273a:	e2 57       	subi	r30, 0x72	; 114
    273c:	fe 4f       	sbci	r31, 0xFE	; 254
    273e:	90 81       	ld	r25, Z
    2740:	9e 01       	movw	r18, r28
    2742:	2d 5e       	subi	r18, 0xED	; 237
    2744:	3f 4f       	sbci	r19, 0xFF	; 255
    2746:	82 e0       	ldi	r24, 0x02	; 2
    2748:	69 2f       	mov	r22, r25
    274a:	a9 01       	movw	r20, r18
    274c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_ErrStateReadPinValue>
			if (DIO_Low == val)
    2750:	8b 89       	ldd	r24, Y+19	; 0x13
    2752:	88 23       	and	r24, r24
    2754:	09 f0       	breq	.+2      	; 0x2758 <KPD_u8GetPressedKey+0x62>
    2756:	9a c0       	rjmp	.+308    	; 0x288c <KPD_u8GetPressedKey+0x196>
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	a0 ee       	ldi	r26, 0xE0	; 224
    275e:	b0 e4       	ldi	r27, 0x40	; 64
    2760:	8b 87       	std	Y+11, r24	; 0x0b
    2762:	9c 87       	std	Y+12, r25	; 0x0c
    2764:	ad 87       	std	Y+13, r26	; 0x0d
    2766:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2768:	6b 85       	ldd	r22, Y+11	; 0x0b
    276a:	7c 85       	ldd	r23, Y+12	; 0x0c
    276c:	8d 85       	ldd	r24, Y+13	; 0x0d
    276e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	4a ef       	ldi	r20, 0xFA	; 250
    2776:	54 e4       	ldi	r21, 0x44	; 68
    2778:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	8f 83       	std	Y+7, r24	; 0x07
    2782:	98 87       	std	Y+8, r25	; 0x08
    2784:	a9 87       	std	Y+9, r26	; 0x09
    2786:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2788:	6f 81       	ldd	r22, Y+7	; 0x07
    278a:	78 85       	ldd	r23, Y+8	; 0x08
    278c:	89 85       	ldd	r24, Y+9	; 0x09
    278e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e8       	ldi	r20, 0x80	; 128
    2796:	5f e3       	ldi	r21, 0x3F	; 63
    2798:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    279c:	88 23       	and	r24, r24
    279e:	2c f4       	brge	.+10     	; 0x27aa <KPD_u8GetPressedKey+0xb4>
		__ticks = 1;
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	9e 83       	std	Y+6, r25	; 0x06
    27a6:	8d 83       	std	Y+5, r24	; 0x05
    27a8:	3f c0       	rjmp	.+126    	; 0x2828 <KPD_u8GetPressedKey+0x132>
	else if (__tmp > 65535)
    27aa:	6f 81       	ldd	r22, Y+7	; 0x07
    27ac:	78 85       	ldd	r23, Y+8	; 0x08
    27ae:	89 85       	ldd	r24, Y+9	; 0x09
    27b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	3f ef       	ldi	r19, 0xFF	; 255
    27b6:	4f e7       	ldi	r20, 0x7F	; 127
    27b8:	57 e4       	ldi	r21, 0x47	; 71
    27ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27be:	18 16       	cp	r1, r24
    27c0:	4c f5       	brge	.+82     	; 0x2814 <KPD_u8GetPressedKey+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e2       	ldi	r20, 0x20	; 32
    27d0:	51 e4       	ldi	r21, 0x41	; 65
    27d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	bc 01       	movw	r22, r24
    27dc:	cd 01       	movw	r24, r26
    27de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	9e 83       	std	Y+6, r25	; 0x06
    27e8:	8d 83       	std	Y+5, r24	; 0x05
    27ea:	0f c0       	rjmp	.+30     	; 0x280a <KPD_u8GetPressedKey+0x114>
    27ec:	88 ec       	ldi	r24, 0xC8	; 200
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	9c 83       	std	Y+4, r25	; 0x04
    27f2:	8b 83       	std	Y+3, r24	; 0x03
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	9c 81       	ldd	r25, Y+4	; 0x04
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <KPD_u8GetPressedKey+0x102>
    27fc:	9c 83       	std	Y+4, r25	; 0x04
    27fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2800:	8d 81       	ldd	r24, Y+5	; 0x05
    2802:	9e 81       	ldd	r25, Y+6	; 0x06
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	9e 83       	std	Y+6, r25	; 0x06
    2808:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280a:	8d 81       	ldd	r24, Y+5	; 0x05
    280c:	9e 81       	ldd	r25, Y+6	; 0x06
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	69 f7       	brne	.-38     	; 0x27ec <KPD_u8GetPressedKey+0xf6>
    2812:	24 c0       	rjmp	.+72     	; 0x285c <KPD_u8GetPressedKey+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2814:	6f 81       	ldd	r22, Y+7	; 0x07
    2816:	78 85       	ldd	r23, Y+8	; 0x08
    2818:	89 85       	ldd	r24, Y+9	; 0x09
    281a:	9a 85       	ldd	r25, Y+10	; 0x0a
    281c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	9e 83       	std	Y+6, r25	; 0x06
    2826:	8d 83       	std	Y+5, r24	; 0x05
    2828:	8d 81       	ldd	r24, Y+5	; 0x05
    282a:	9e 81       	ldd	r25, Y+6	; 0x06
    282c:	9a 83       	std	Y+2, r25	; 0x02
    282e:	89 83       	std	Y+1, r24	; 0x01
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	9a 81       	ldd	r25, Y+2	; 0x02
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	f1 f7       	brne	.-4      	; 0x2834 <KPD_u8GetPressedKey+0x13e>
    2838:	9a 83       	std	Y+2, r25	; 0x02
    283a:	89 83       	std	Y+1, r24	; 0x01
    283c:	0f c0       	rjmp	.+30     	; 0x285c <KPD_u8GetPressedKey+0x166>
				_delay_ms(7);

				// to delay till pressing is over
				while (DIO_Low == val)
				{
					DIO_ErrStateReadPinValue(KPD_PORT,KPD_u8ColsPins[Local_u8Col], &val);
    283e:	8a 89       	ldd	r24, Y+18	; 0x12
    2840:	88 2f       	mov	r24, r24
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	fc 01       	movw	r30, r24
    2846:	e2 57       	subi	r30, 0x72	; 114
    2848:	fe 4f       	sbci	r31, 0xFE	; 254
    284a:	90 81       	ld	r25, Z
    284c:	9e 01       	movw	r18, r28
    284e:	2d 5e       	subi	r18, 0xED	; 237
    2850:	3f 4f       	sbci	r19, 0xFF	; 255
    2852:	82 e0       	ldi	r24, 0x02	; 2
    2854:	69 2f       	mov	r22, r25
    2856:	a9 01       	movw	r20, r18
    2858:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_ErrStateReadPinValue>
			{
				// bouncing 
				_delay_ms(7);

				// to delay till pressing is over
				while (DIO_Low == val)
    285c:	8b 89       	ldd	r24, Y+19	; 0x13
    285e:	88 23       	and	r24, r24
    2860:	71 f3       	breq	.-36     	; 0x283e <KPD_u8GetPressedKey+0x148>
				{
					DIO_ErrStateReadPinValue(KPD_PORT,KPD_u8ColsPins[Local_u8Col], &val);
				}

				Local_u8Sw = KPD_u8SwitchVal[Local_u8Row][Local_u8Col];
    2862:	89 89       	ldd	r24, Y+17	; 0x11
    2864:	48 2f       	mov	r20, r24
    2866:	50 e0       	ldi	r21, 0x00	; 0
    2868:	8a 89       	ldd	r24, Y+18	; 0x12
    286a:	28 2f       	mov	r18, r24
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	ca 01       	movw	r24, r20
    2870:	88 0f       	add	r24, r24
    2872:	99 1f       	adc	r25, r25
    2874:	88 0f       	add	r24, r24
    2876:	99 1f       	adc	r25, r25
    2878:	82 0f       	add	r24, r18
    287a:	93 1f       	adc	r25, r19
    287c:	fc 01       	movw	r30, r24
    287e:	e6 58       	subi	r30, 0x86	; 134
    2880:	fe 4f       	sbci	r31, 0xFE	; 254
    2882:	80 81       	ld	r24, Z
    2884:	88 8b       	std	Y+16, r24	; 0x10

				Local_u8Flag = 1;
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	8f 87       	std	Y+15, r24	; 0x0f
    288a:	07 c0       	rjmp	.+14     	; 0x289a <KPD_u8GetPressedKey+0x1a4>

	for (Local_u8Row = 0; Local_u8Row <= 3; Local_u8Row++) {

		DIO_ErrStateSetPinValue(KPD_PORT, KPD_u8RowsPins[Local_u8Row], DIO_Low);

		for (Local_u8Col = 0; Local_u8Col <= 3; Local_u8Col++) {
    288c:	8a 89       	ldd	r24, Y+18	; 0x12
    288e:	8f 5f       	subi	r24, 0xFF	; 255
    2890:	8a 8b       	std	Y+18, r24	; 0x12
    2892:	8a 89       	ldd	r24, Y+18	; 0x12
    2894:	84 30       	cpi	r24, 0x04	; 4
    2896:	08 f4       	brcc	.+2      	; 0x289a <KPD_u8GetPressedKey+0x1a4>
    2898:	4c cf       	rjmp	.-360    	; 0x2732 <KPD_u8GetPressedKey+0x3c>

			}
		}

		// Reseting the previous Row
		DIO_ErrStateSetPinValue(KPD_PORT, KPD_u8RowsPins[Local_u8Row],DIO_High);
    289a:	89 89       	ldd	r24, Y+17	; 0x11
    289c:	88 2f       	mov	r24, r24
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	fc 01       	movw	r30, r24
    28a2:	e6 57       	subi	r30, 0x76	; 118
    28a4:	fe 4f       	sbci	r31, 0xFE	; 254
    28a6:	90 81       	ld	r25, Z
    28a8:	82 e0       	ldi	r24, 0x02	; 2
    28aa:	69 2f       	mov	r22, r25
    28ac:	41 e0       	ldi	r20, 0x01	; 1
    28ae:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_ErrStateSetPinValue>

		// if we found the pressed sw will get out the function
		if (1 == Local_u8Flag) {
    28b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28b4:	81 30       	cpi	r24, 0x01	; 1
    28b6:	39 f0       	breq	.+14     	; 0x28c6 <KPD_u8GetPressedKey+0x1d0>
	u8 Local_u8Col, Local_u8Row;
	u8 Local_u8Sw = KPD_u8KEY_NOT_PRESSED;
	u8 Local_u8Flag = 0;
	u8 val = 0;

	for (Local_u8Row = 0; Local_u8Row <= 3; Local_u8Row++) {
    28b8:	89 89       	ldd	r24, Y+17	; 0x11
    28ba:	8f 5f       	subi	r24, 0xFF	; 255
    28bc:	89 8b       	std	Y+17, r24	; 0x11
    28be:	89 89       	ldd	r24, Y+17	; 0x11
    28c0:	84 30       	cpi	r24, 0x04	; 4
    28c2:	08 f4       	brcc	.+2      	; 0x28c6 <KPD_u8GetPressedKey+0x1d0>
    28c4:	28 cf       	rjmp	.-432    	; 0x2716 <KPD_u8GetPressedKey+0x20>
		if (1 == Local_u8Flag) {
			break;
		}

	}
	return (Local_u8Sw);
    28c6:	88 89       	ldd	r24, Y+16	; 0x10
}	
    28c8:	63 96       	adiw	r28, 0x13	; 19
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	f8 94       	cli
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	0f be       	out	0x3f, r0	; 63
    28d2:	cd bf       	out	0x3d, r28	; 61
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <main>:
#include "HAL/Keypad/KPD_interface.h"
#include "HAL/Switch_Comp/Switch_Interface.h"


void main()
{
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	2e 97       	sbiw	r28, 0x0e	; 14
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	de bf       	out	0x3e, r29	; 62
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	cd bf       	out	0x3d, r28	; 61
	Pin0,
	DIO_GroupB,
	Pin1,
	DIO_GroupB,
	Pin2,
	DIO_GroupA};
    28ee:	ce 01       	movw	r24, r28
    28f0:	03 96       	adiw	r24, 0x03	; 3
    28f2:	9b 87       	std	Y+11, r25	; 0x0b
    28f4:	8a 87       	std	Y+10, r24	; 0x0a
    28f6:	e2 e9       	ldi	r30, 0x92	; 146
    28f8:	f1 e0       	ldi	r31, 0x01	; 1
    28fa:	fd 87       	std	Y+13, r31	; 0x0d
    28fc:	ec 87       	std	Y+12, r30	; 0x0c
    28fe:	f7 e0       	ldi	r31, 0x07	; 7
    2900:	fe 87       	std	Y+14, r31	; 0x0e
    2902:	ec 85       	ldd	r30, Y+12	; 0x0c
    2904:	fd 85       	ldd	r31, Y+13	; 0x0d
    2906:	00 80       	ld	r0, Z
    2908:	8c 85       	ldd	r24, Y+12	; 0x0c
    290a:	9d 85       	ldd	r25, Y+13	; 0x0d
    290c:	01 96       	adiw	r24, 0x01	; 1
    290e:	9d 87       	std	Y+13, r25	; 0x0d
    2910:	8c 87       	std	Y+12, r24	; 0x0c
    2912:	ea 85       	ldd	r30, Y+10	; 0x0a
    2914:	fb 85       	ldd	r31, Y+11	; 0x0b
    2916:	00 82       	st	Z, r0
    2918:	8a 85       	ldd	r24, Y+10	; 0x0a
    291a:	9b 85       	ldd	r25, Y+11	; 0x0b
    291c:	01 96       	adiw	r24, 0x01	; 1
    291e:	9b 87       	std	Y+11, r25	; 0x0b
    2920:	8a 87       	std	Y+10, r24	; 0x0a
    2922:	9e 85       	ldd	r25, Y+14	; 0x0e
    2924:	91 50       	subi	r25, 0x01	; 1
    2926:	9e 87       	std	Y+14, r25	; 0x0e
    2928:	ee 85       	ldd	r30, Y+14	; 0x0e
    292a:	ee 23       	and	r30, r30
    292c:	51 f7       	brne	.-44     	; 0x2902 <main+0x28>
	KPD_voidInit();
    292e:	0e 94 48 13 	call	0x2690	; 0x2690 <KPD_voidInit>
	u8 swval ;
	u8 oldval ;
	LCD_VoidInit(&lcdd);
    2932:	ce 01       	movw	r24, r28
    2934:	03 96       	adiw	r24, 0x03	; 3
    2936:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_VoidInit>
	LCD_VoidGoToXY(0,5,&lcdd);
    293a:	9e 01       	movw	r18, r28
    293c:	2d 5f       	subi	r18, 0xFD	; 253
    293e:	3f 4f       	sbci	r19, 0xFF	; 255
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	65 e0       	ldi	r22, 0x05	; 5
    2944:	a9 01       	movw	r20, r18
    2946:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_VoidGoToXY>
	LCD_VoidSendString("Samir",&lcdd);
    294a:	82 e6       	ldi	r24, 0x62	; 98
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	9e 01       	movw	r18, r28
    2950:	2d 5f       	subi	r18, 0xFD	; 253
    2952:	3f 4f       	sbci	r19, 0xFF	; 255
    2954:	b9 01       	movw	r22, r18
    2956:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <LCD_VoidSendString>
	LCD_VoidGoToXY(1,0,&lcdd);
    295a:	9e 01       	movw	r18, r28
    295c:	2d 5f       	subi	r18, 0xFD	; 253
    295e:	3f 4f       	sbci	r19, 0xFF	; 255
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	60 e0       	ldi	r22, 0x00	; 0
    2964:	a9 01       	movw	r20, r18
    2966:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_VoidGoToXY>

	while(1)
	{
		swval = KPD_u8GetPressedKey();
    296a:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <KPD_u8GetPressedKey>
    296e:	8a 83       	std	Y+2, r24	; 0x02
		if (swval != 0xff)
    2970:	8a 81       	ldd	r24, Y+2	; 0x02
    2972:	8f 3f       	cpi	r24, 0xFF	; 255
    2974:	d1 f3       	breq	.-12     	; 0x296a <main+0x90>
			LCD_VoidSendChar(swval,&lcdd);
    2976:	9e 01       	movw	r18, r28
    2978:	2d 5f       	subi	r18, 0xFD	; 253
    297a:	3f 4f       	sbci	r19, 0xFF	; 255
    297c:	8a 81       	ldd	r24, Y+2	; 0x02
    297e:	b9 01       	movw	r22, r18
    2980:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_VoidSendChar>
    2984:	f2 cf       	rjmp	.-28     	; 0x296a <main+0x90>

00002986 <__divmodhi4>:
    2986:	97 fb       	bst	r25, 7
    2988:	09 2e       	mov	r0, r25
    298a:	07 26       	eor	r0, r23
    298c:	0a d0       	rcall	.+20     	; 0x29a2 <__divmodhi4_neg1>
    298e:	77 fd       	sbrc	r23, 7
    2990:	04 d0       	rcall	.+8      	; 0x299a <__divmodhi4_neg2>
    2992:	0c d0       	rcall	.+24     	; 0x29ac <__udivmodhi4>
    2994:	06 d0       	rcall	.+12     	; 0x29a2 <__divmodhi4_neg1>
    2996:	00 20       	and	r0, r0
    2998:	1a f4       	brpl	.+6      	; 0x29a0 <__divmodhi4_exit>

0000299a <__divmodhi4_neg2>:
    299a:	70 95       	com	r23
    299c:	61 95       	neg	r22
    299e:	7f 4f       	sbci	r23, 0xFF	; 255

000029a0 <__divmodhi4_exit>:
    29a0:	08 95       	ret

000029a2 <__divmodhi4_neg1>:
    29a2:	f6 f7       	brtc	.-4      	; 0x29a0 <__divmodhi4_exit>
    29a4:	90 95       	com	r25
    29a6:	81 95       	neg	r24
    29a8:	9f 4f       	sbci	r25, 0xFF	; 255
    29aa:	08 95       	ret

000029ac <__udivmodhi4>:
    29ac:	aa 1b       	sub	r26, r26
    29ae:	bb 1b       	sub	r27, r27
    29b0:	51 e1       	ldi	r21, 0x11	; 17
    29b2:	07 c0       	rjmp	.+14     	; 0x29c2 <__udivmodhi4_ep>

000029b4 <__udivmodhi4_loop>:
    29b4:	aa 1f       	adc	r26, r26
    29b6:	bb 1f       	adc	r27, r27
    29b8:	a6 17       	cp	r26, r22
    29ba:	b7 07       	cpc	r27, r23
    29bc:	10 f0       	brcs	.+4      	; 0x29c2 <__udivmodhi4_ep>
    29be:	a6 1b       	sub	r26, r22
    29c0:	b7 0b       	sbc	r27, r23

000029c2 <__udivmodhi4_ep>:
    29c2:	88 1f       	adc	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	5a 95       	dec	r21
    29c8:	a9 f7       	brne	.-22     	; 0x29b4 <__udivmodhi4_loop>
    29ca:	80 95       	com	r24
    29cc:	90 95       	com	r25
    29ce:	bc 01       	movw	r22, r24
    29d0:	cd 01       	movw	r24, r26
    29d2:	08 95       	ret

000029d4 <__prologue_saves__>:
    29d4:	2f 92       	push	r2
    29d6:	3f 92       	push	r3
    29d8:	4f 92       	push	r4
    29da:	5f 92       	push	r5
    29dc:	6f 92       	push	r6
    29de:	7f 92       	push	r7
    29e0:	8f 92       	push	r8
    29e2:	9f 92       	push	r9
    29e4:	af 92       	push	r10
    29e6:	bf 92       	push	r11
    29e8:	cf 92       	push	r12
    29ea:	df 92       	push	r13
    29ec:	ef 92       	push	r14
    29ee:	ff 92       	push	r15
    29f0:	0f 93       	push	r16
    29f2:	1f 93       	push	r17
    29f4:	cf 93       	push	r28
    29f6:	df 93       	push	r29
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
    29fc:	ca 1b       	sub	r28, r26
    29fe:	db 0b       	sbc	r29, r27
    2a00:	0f b6       	in	r0, 0x3f	; 63
    2a02:	f8 94       	cli
    2a04:	de bf       	out	0x3e, r29	; 62
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	cd bf       	out	0x3d, r28	; 61
    2a0a:	09 94       	ijmp

00002a0c <__epilogue_restores__>:
    2a0c:	2a 88       	ldd	r2, Y+18	; 0x12
    2a0e:	39 88       	ldd	r3, Y+17	; 0x11
    2a10:	48 88       	ldd	r4, Y+16	; 0x10
    2a12:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a14:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a16:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a18:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a1a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a1c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a1e:	b9 84       	ldd	r11, Y+9	; 0x09
    2a20:	c8 84       	ldd	r12, Y+8	; 0x08
    2a22:	df 80       	ldd	r13, Y+7	; 0x07
    2a24:	ee 80       	ldd	r14, Y+6	; 0x06
    2a26:	fd 80       	ldd	r15, Y+5	; 0x05
    2a28:	0c 81       	ldd	r16, Y+4	; 0x04
    2a2a:	1b 81       	ldd	r17, Y+3	; 0x03
    2a2c:	aa 81       	ldd	r26, Y+2	; 0x02
    2a2e:	b9 81       	ldd	r27, Y+1	; 0x01
    2a30:	ce 0f       	add	r28, r30
    2a32:	d1 1d       	adc	r29, r1
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	ed 01       	movw	r28, r26
    2a40:	08 95       	ret

00002a42 <_exit>:
    2a42:	f8 94       	cli

00002a44 <__stop_program>:
    2a44:	ff cf       	rjmp	.-2      	; 0x2a44 <__stop_program>
