
Ext_inturrpt_D.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000069c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  000069c0  00006a54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080018c  0080018c  00006b80  2**0
                  ALLOC
  3 .stab         00006d44  00000000  00000000  00006b80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000035a8  00000000  00000000  0000d8c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00010e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0001102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00011240  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00013852  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00014d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001602c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0001620c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00016513  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00016f2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <__vector_1>
       8:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__vector_2>
       c:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__vector_3>
      10:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__vector_4>
      14:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <__vector_10>
      2c:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f9 e6       	ldi	r31, 0x69	; 105
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 77 34 	call	0x68ee	; 0x68ee <main>
      8a:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a7 34 	jmp	0x694e	; 0x694e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e6       	ldi	r26, 0x62	; 98
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c3 34 	jmp	0x6986	; 0x6986 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b3 34 	jmp	0x6966	; 0x6966 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cf 34 	jmp	0x699e	; 0x699e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b3 34 	jmp	0x6966	; 0x6966 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cf 34 	jmp	0x699e	; 0x699e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a7 34 	jmp	0x694e	; 0x694e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e6       	ldi	r24, 0x62	; 98
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c3 34 	jmp	0x6986	; 0x6986 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 af 34 	jmp	0x695e	; 0x695e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e6       	ldi	r22, 0x62	; 98
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 cb 34 	jmp	0x6996	; 0x6996 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b3 34 	jmp	0x6966	; 0x6966 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 cf 34 	jmp	0x699e	; 0x699e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b3 34 	jmp	0x6966	; 0x6966 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 cf 34 	jmp	0x699e	; 0x699e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b3 34 	jmp	0x6966	; 0x6966 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 cf 34 	jmp	0x699e	; 0x699e <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b0 34 	jmp	0x6960	; 0x6960 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 cc 34 	jmp	0x6998	; 0x6998 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 b7 34 	jmp	0x696e	; 0x696e <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 d3 34 	jmp	0x69a6	; 0x69a6 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 af 34 	jmp	0x695e	; 0x695e <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 cb 34 	jmp	0x6996	; 0x6996 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e6 59       	subi	r30, 0x96	; 150
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <WDT_voidSleep>:
#include "WDT_pcfg.h"


#if WDT_USAGE == WDT_USE

void WDT_voidSleep   ( u8 Copy_u8SleepTime ){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	0f 92       	push	r0
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	89 83       	std	Y+1, r24	; 0x01

	WDTCR_REG = 0b00011000 ;//disable first
     ef6:	e1 e4       	ldi	r30, 0x41	; 65
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	88 e1       	ldi	r24, 0x18	; 24
     efc:	80 83       	st	Z, r24
	WDTCR_REG = 0 ;
     efe:	e1 e4       	ldi	r30, 0x41	; 65
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	10 82       	st	Z, r1
	WDTCR_REG = ( 0b1000 ) | ( Copy_u8SleepTime ) ;
     f04:	e1 e4       	ldi	r30, 0x41	; 65
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	88 60       	ori	r24, 0x08	; 8
     f0c:	80 83       	st	Z, r24

}
     f0e:	0f 90       	pop	r0
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <WDT_voidDisable>:
void WDT_voidDisable (void){
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62

	WDTCR_REG = 0b00011000 ;
     f1e:	e1 e4       	ldi	r30, 0x41	; 65
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	88 e1       	ldi	r24, 0x18	; 24
     f24:	80 83       	st	Z, r24
	WDTCR_REG = 0 ;
     f26:	e1 e4       	ldi	r30, 0x41	; 65
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	10 82       	st	Z, r1

}
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <WDT_voidRefresh>:
void WDT_voidRefresh (void){
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62

	asm("WDR");
     f3a:	a8 95       	wdr

}
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <Timer2_voidInit>:

static void(*ISR_Timer2_OVF)(void) = Null;
static void(*ISR_Timer2_CTC)(void) = Null;

void Timer2_voidInit (void)
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
#if TIMER2_MODE_SELECT==TIMER2_NORMAL_MODE
	CLR_BIT(TCCR2,WGM20);
	CLR_BIT(TCCR2,WGM21);

#elif TIMER2_MODE_SELECT == TIMER2_PWM_FAST_MODE
	SET_BIT(TCCR2,WGM20);
     f4a:	a5 e4       	ldi	r26, 0x45	; 69
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e5 e4       	ldi	r30, 0x45	; 69
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	80 64       	ori	r24, 0x40	; 64
     f56:	8c 93       	st	X, r24
	SET_BIT(TCCR2,WGM21);
     f58:	a5 e4       	ldi	r26, 0x45	; 69
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e5 e4       	ldi	r30, 0x45	; 69
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	88 60       	ori	r24, 0x08	; 8
     f64:	8c 93       	st	X, r24

	#if TIMER2_PWM_FAST_MODE_SELECT == NON_INVERTING
	CLR_BIT(TCCR2,COM20);
     f66:	a5 e4       	ldi	r26, 0x45	; 69
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e5 e4       	ldi	r30, 0x45	; 69
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	8f 7e       	andi	r24, 0xEF	; 239
     f72:	8c 93       	st	X, r24
	SET_BIT(TCCR2,COM21);
     f74:	a5 e4       	ldi	r26, 0x45	; 69
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e5 e4       	ldi	r30, 0x45	; 69
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	80 62       	ori	r24, 0x20	; 32
     f80:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS21);
	CLR_BIT(TCCR2,CS22);

#elif TIMER2_PRESCALER == PRESCALER_8
	// set prescaler to FCPU/8
	CLR_BIT(TCCR2,CS20);
     f82:	a5 e4       	ldi	r26, 0x45	; 69
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e5 e4       	ldi	r30, 0x45	; 69
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8e 7f       	andi	r24, 0xFE	; 254
     f8e:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS21);
     f90:	a5 e4       	ldi	r26, 0x45	; 69
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e5 e4       	ldi	r30, 0x45	; 69
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	82 60       	ori	r24, 0x02	; 2
     f9c:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS22);
     f9e:	a5 e4       	ldi	r26, 0x45	; 69
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e5 e4       	ldi	r30, 0x45	; 69
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	8b 7f       	andi	r24, 0xFB	; 251
     faa:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS22);

#endif


}
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <Timer2_voidSetPin_softPWM>:


// PWM Software for any DIO Pin Functions
void Timer2_voidSetPin_softPWM(DIO_GroupNumber port,DIO_PinNumber pin)
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <Timer2_voidSetPin_softPWM+0x6>
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	89 83       	std	Y+1, r24	; 0x01
     fbe:	6a 83       	std	Y+2, r22	; 0x02
	// Initialize DIO Pin
	DIO_ErrStateSetPinDirection(port,pin,DIO_Output);
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	6a 81       	ldd	r22, Y+2	; 0x02
     fc4:	41 e0       	ldi	r20, 0x01	; 1
     fc6:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
	// Normal Mode
	CLR_BIT(TCCR2,WGM20);
     fca:	a5 e4       	ldi	r26, 0x45	; 69
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e5 e4       	ldi	r30, 0x45	; 69
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	8f 7b       	andi	r24, 0xBF	; 191
     fd6:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, WGM21);
     fd8:	a5 e4       	ldi	r26, 0x45	; 69
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e5 e4       	ldi	r30, 0x45	; 69
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	87 7f       	andi	r24, 0xF7	; 247
     fe4:	8c 93       	st	X, r24
	//Enable interrupt
	SET_BIT(SREG, 7);
     fe6:	af e5       	ldi	r26, 0x5F	; 95
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	ef e5       	ldi	r30, 0x5F	; 95
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	80 68       	ori	r24, 0x80	; 128
     ff2:	8c 93       	st	X, r24
	SET_BIT(TIMSK, TOIE2);
     ff4:	a9 e5       	ldi	r26, 0x59	; 89
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e9 e5       	ldi	r30, 0x59	; 89
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	80 64       	ori	r24, 0x40	; 64
    1000:	8c 93       	st	X, r24
	SET_BIT(TIMSK, OCIE2);
    1002:	a9 e5       	ldi	r26, 0x59	; 89
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e9 e5       	ldi	r30, 0x59	; 89
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	80 68       	ori	r24, 0x80	; 128
    100e:	8c 93       	st	X, r24
	// 64 prescaler
	SET_BIT(TCCR2,CS20);
    1010:	a5 e4       	ldi	r26, 0x45	; 69
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e5 e4       	ldi	r30, 0x45	; 69
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	81 60       	ori	r24, 0x01	; 1
    101c:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS21);
    101e:	a5 e4       	ldi	r26, 0x45	; 69
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e5 e4       	ldi	r30, 0x45	; 69
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	82 60       	ori	r24, 0x02	; 2
    102a:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS22);
    102c:	a5 e4       	ldi	r26, 0x45	; 69
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e5 e4       	ldi	r30, 0x45	; 69
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	8b 7f       	andi	r24, 0xFB	; 251
    1038:	8c 93       	st	X, r24

	pwm_pin = pin;
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	80 93 90 01 	sts	0x0190, r24
	pwm_port = port;
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	80 93 91 01 	sts	0x0191, r24
	ISR_Timer2_OVF = ISR_soft_pwm_OVF;
    1046:	88 e6       	ldi	r24, 0x68	; 104
    1048:	98 e0       	ldi	r25, 0x08	; 8
    104a:	90 93 8d 01 	sts	0x018D, r25
    104e:	80 93 8c 01 	sts	0x018C, r24
	ISR_Timer2_CTC = ISR_soft_pwm_CTC;
    1052:	87 e7       	ldi	r24, 0x77	; 119
    1054:	98 e0       	ldi	r25, 0x08	; 8
    1056:	90 93 8f 01 	sts	0x018F, r25
    105a:	80 93 8e 01 	sts	0x018E, r24
}
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <Timer2_voidSetDuty_percentage>:
void Timer2_voidSetDuty_percentage (u8 OcrVal)
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	0f 92       	push	r0
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	89 83       	std	Y+1, r24	; 0x01
	OcrVal = ((f32)OcrVal/100)*TIMER2_TCNT2_TICKS;
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	a0 e0       	ldi	r26, 0x00	; 0
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	bc 01       	movw	r22, r24
    1080:	cd 01       	movw	r24, r26
    1082:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	bc 01       	movw	r22, r24
    108c:	cd 01       	movw	r24, r26
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	48 ec       	ldi	r20, 0xC8	; 200
    1094:	52 e4       	ldi	r21, 0x42	; 66
    1096:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	bc 01       	movw	r22, r24
    10a0:	cd 01       	movw	r24, r26
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e8       	ldi	r20, 0x80	; 128
    10a8:	53 e4       	ldi	r21, 0x43	; 67
    10aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	bc 01       	movw	r22, r24
    10b4:	cd 01       	movw	r24, r26
    10b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = OcrVal;
    10c0:	e3 e4       	ldi	r30, 0x43	; 67
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	80 83       	st	Z, r24
}
    10c8:	0f 90       	pop	r0
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <ISR_soft_pwm_OVF>:
void ISR_soft_pwm_OVF(void)
{
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
	DIO_ErrStateSetPinValue(pwm_port,pwm_pin,DIO_High);
    10d8:	80 91 91 01 	lds	r24, 0x0191
    10dc:	90 91 90 01 	lds	r25, 0x0190
    10e0:	69 2f       	mov	r22, r25
    10e2:	41 e0       	ldi	r20, 0x01	; 1
    10e4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>

}
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <ISR_soft_pwm_CTC>:
void ISR_soft_pwm_CTC(void)
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
	DIO_ErrStateSetPinValue(pwm_port,pwm_pin,DIO_Low);
    10f6:	80 91 91 01 	lds	r24, 0x0191
    10fa:	90 91 90 01 	lds	r25, 0x0190
    10fe:	69 2f       	mov	r22, r25
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
}
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <Timer2_voidFastPWM_percentage>:

// Fast PWM mode
void Timer2_voidFastPWM_percentage(u8 DutyCycle)
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	0f 92       	push	r0
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	89 83       	std	Y+1, r24	; 0x01
#if TIMER2_PWM_FAST_MODE_SELECT == INVERTING
	DutyCycle = (((f32)DutyCycle/100)*TIMER2_TCNT0_TICKS)+TIMER2_TCNT2_TICKS;
	OCR2 = DutyCycle;
#elif TIMER2_PWM_FAST_MODE_SELECT == NON_INVERTING
	DutyCycle = ((f32)DutyCycle/100)*TIMER2_TCNT2_TICKS;
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	88 2f       	mov	r24, r24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	a0 e0       	ldi	r26, 0x00	; 0
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	bc 01       	movw	r22, r24
    1124:	cd 01       	movw	r24, r26
    1126:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	bc 01       	movw	r22, r24
    1130:	cd 01       	movw	r24, r26
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	48 ec       	ldi	r20, 0xC8	; 200
    1138:	52 e4       	ldi	r21, 0x42	; 66
    113a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	bc 01       	movw	r22, r24
    1144:	cd 01       	movw	r24, r26
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	40 e8       	ldi	r20, 0x80	; 128
    114c:	53 e4       	ldi	r21, 0x43	; 67
    114e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	bc 01       	movw	r22, r24
    1158:	cd 01       	movw	r24, r26
    115a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = DutyCycle;
    1164:	e3 e4       	ldi	r30, 0x43	; 67
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	80 83       	st	Z, r24
#endif
}
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <Timer2_voidDelay_ms>:

void Timer2_voidDelay_ms(f32 Tdelay)
{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	00 d0       	rcall	.+0      	; 0x117a <Timer2_voidDelay_ms+0x6>
    117a:	00 d0       	rcall	.+0      	; 0x117c <Timer2_voidDelay_ms+0x8>
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	69 83       	std	Y+1, r22	; 0x01
    1182:	7a 83       	std	Y+2, r23	; 0x02
    1184:	8b 83       	std	Y+3, r24	; 0x03
    1186:	9c 83       	std	Y+4, r25	; 0x04
		SET_BIT(TIFR,TOV2);
		TCNT2 = 0 ;
		TCCR2 = 0;
	}
#endif
}
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <Timer2_OVF_setCallbackFunc>:


void Timer2_OVF_setCallbackFunc(void(*Timer2_Fptr)(void))
{
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <Timer2_OVF_setCallbackFunc+0x6>
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	9a 83       	std	Y+2, r25	; 0x02
    11a2:	89 83       	std	Y+1, r24	; 0x01
	ISR_Timer2_OVF = Timer2_Fptr ;
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	90 93 8d 01 	sts	0x018D, r25
    11ac:	80 93 8c 01 	sts	0x018C, r24
}
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <Timer2_CTC_setCallbackFunc>:
void Timer2_CTC_setCallbackFunc(void(*Timer2_Fptr)(void))
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <Timer2_CTC_setCallbackFunc+0x6>
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	9a 83       	std	Y+2, r25	; 0x02
    11c6:	89 83       	std	Y+1, r24	; 0x01
	ISR_Timer2_CTC = Timer2_Fptr ;
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	9a 81       	ldd	r25, Y+2	; 0x02
    11cc:	90 93 8f 01 	sts	0x018F, r25
    11d0:	80 93 8e 01 	sts	0x018E, r24
}
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <__vector_5>:
void __vector_5(void)
{
    11de:	1f 92       	push	r1
    11e0:	0f 92       	push	r0
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	0f 92       	push	r0
    11e6:	11 24       	eor	r1, r1
    11e8:	2f 93       	push	r18
    11ea:	3f 93       	push	r19
    11ec:	4f 93       	push	r20
    11ee:	5f 93       	push	r21
    11f0:	6f 93       	push	r22
    11f2:	7f 93       	push	r23
    11f4:	8f 93       	push	r24
    11f6:	9f 93       	push	r25
    11f8:	af 93       	push	r26
    11fa:	bf 93       	push	r27
    11fc:	ef 93       	push	r30
    11fe:	ff 93       	push	r31
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
	if (ISR_Timer2_OVF != Null)
    1208:	80 91 8c 01 	lds	r24, 0x018C
    120c:	90 91 8d 01 	lds	r25, 0x018D
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	29 f0       	breq	.+10     	; 0x121e <__vector_5+0x40>
	{
		ISR_Timer2_OVF();
    1214:	e0 91 8c 01 	lds	r30, 0x018C
    1218:	f0 91 8d 01 	lds	r31, 0x018D
    121c:	09 95       	icall
	}
}
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	ff 91       	pop	r31
    1224:	ef 91       	pop	r30
    1226:	bf 91       	pop	r27
    1228:	af 91       	pop	r26
    122a:	9f 91       	pop	r25
    122c:	8f 91       	pop	r24
    122e:	7f 91       	pop	r23
    1230:	6f 91       	pop	r22
    1232:	5f 91       	pop	r21
    1234:	4f 91       	pop	r20
    1236:	3f 91       	pop	r19
    1238:	2f 91       	pop	r18
    123a:	0f 90       	pop	r0
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	0f 90       	pop	r0
    1240:	1f 90       	pop	r1
    1242:	18 95       	reti

00001244 <__vector_4>:
void __vector_4(void)
{
    1244:	1f 92       	push	r1
    1246:	0f 92       	push	r0
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	0f 92       	push	r0
    124c:	11 24       	eor	r1, r1
    124e:	2f 93       	push	r18
    1250:	3f 93       	push	r19
    1252:	4f 93       	push	r20
    1254:	5f 93       	push	r21
    1256:	6f 93       	push	r22
    1258:	7f 93       	push	r23
    125a:	8f 93       	push	r24
    125c:	9f 93       	push	r25
    125e:	af 93       	push	r26
    1260:	bf 93       	push	r27
    1262:	ef 93       	push	r30
    1264:	ff 93       	push	r31
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
	if (ISR_Timer2_CTC != Null)
    126e:	80 91 8e 01 	lds	r24, 0x018E
    1272:	90 91 8f 01 	lds	r25, 0x018F
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	29 f0       	breq	.+10     	; 0x1284 <__vector_4+0x40>
	{

		ISR_Timer2_CTC();
    127a:	e0 91 8e 01 	lds	r30, 0x018E
    127e:	f0 91 8f 01 	lds	r31, 0x018F
    1282:	09 95       	icall
	}
}
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	ff 91       	pop	r31
    128a:	ef 91       	pop	r30
    128c:	bf 91       	pop	r27
    128e:	af 91       	pop	r26
    1290:	9f 91       	pop	r25
    1292:	8f 91       	pop	r24
    1294:	7f 91       	pop	r23
    1296:	6f 91       	pop	r22
    1298:	5f 91       	pop	r21
    129a:	4f 91       	pop	r20
    129c:	3f 91       	pop	r19
    129e:	2f 91       	pop	r18
    12a0:	0f 90       	pop	r0
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	0f 90       	pop	r0
    12a6:	1f 90       	pop	r1
    12a8:	18 95       	reti

000012aa <Timer1_init>:
static void(*ISR_Timer1_CTC_A)(void) = Null;
static void(*ISR_Timer1_CTC_B)(void) = Null;
*/

void Timer1_init (void)
{
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62

#endif
#if (TIMER1_MODE_SELECT == TIMER1_PWM_FAST_OCA_MODE)

	#if (TIMER1_FAST_PWM_MODE_SELECT == NON_INVERTING)
	CLR_BIT(TCCR1A,COM1A0);
    12b2:	af e4       	ldi	r26, 0x4F	; 79
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	ef e4       	ldi	r30, 0x4F	; 79
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	8f 7b       	andi	r24, 0xBF	; 191
    12be:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    12c0:	af e4       	ldi	r26, 0x4F	; 79
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	ef e4       	ldi	r30, 0x4F	; 79
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	80 68       	ori	r24, 0x80	; 128
    12cc:	8c 93       	st	X, r24
	#endif

	#if	(TIMER1_PWM_FAST_A_MODE_TOP_SELECT == TOP_ICR)
	CLR_BIT(TCCR1A,WGM10);
    12ce:	af e4       	ldi	r26, 0x4F	; 79
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	ef e4       	ldi	r30, 0x4F	; 79
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	8e 7f       	andi	r24, 0xFE	; 254
    12da:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    12dc:	af e4       	ldi	r26, 0x4F	; 79
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	ef e4       	ldi	r30, 0x4F	; 79
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	82 60       	ori	r24, 0x02	; 2
    12e8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    12ea:	ae e4       	ldi	r26, 0x4E	; 78
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	ee e4       	ldi	r30, 0x4E	; 78
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	88 60       	ori	r24, 0x08	; 8
    12f6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    12f8:	ae e4       	ldi	r26, 0x4E	; 78
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	ee e4       	ldi	r30, 0x4E	; 78
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	80 61       	ori	r24, 0x10	; 16
    1304:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
	CLR_BIT(TCCR1B,CS12);

#elif TIMER1_PRESCALER == PRESCALER_256
	// set prescaler to FCPU/256
	CLR_BIT(TCCR1B,CS10);
    1306:	ae e4       	ldi	r26, 0x4E	; 78
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	ee e4       	ldi	r30, 0x4E	; 78
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	8e 7f       	andi	r24, 0xFE	; 254
    1312:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS11);
    1314:	ae e4       	ldi	r26, 0x4E	; 78
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	ee e4       	ldi	r30, 0x4E	; 78
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	8d 7f       	andi	r24, 0xFD	; 253
    1320:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS12);
    1322:	ae e4       	ldi	r26, 0x4E	; 78
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	ee e4       	ldi	r30, 0x4E	; 78
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	84 60       	ori	r24, 0x04	; 4
    132e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS12);

#endif


}
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <Timer0_voidInit>:

static void(*ISR_Timer0_OVF)(void) = Null;
static void(*ISR_Timer0_CTC)(void) = Null;

void Timer0_voidInit (void)
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_MODE_SELECT==TIMER0_NORMAL_MODE
	CLR_BIT(TCCR0,WGM00);
	CLR_BIT(TCCR0,WGM01);

#elif TIMER0_MODE_SELECT == TIMER0_PWM_FAST_MODE
	SET_BIT(TCCR0,WGM00);
    133e:	a3 e5       	ldi	r26, 0x53	; 83
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e3 e5       	ldi	r30, 0x53	; 83
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	80 64       	ori	r24, 0x40	; 64
    134a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    134c:	a3 e5       	ldi	r26, 0x53	; 83
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e3 e5       	ldi	r30, 0x53	; 83
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	88 60       	ori	r24, 0x08	; 8
    1358:	8c 93       	st	X, r24

	#if TIMER0_PWM_FAST_MODE_SELECT == NON_INVERTING
	CLR_BIT(TCCR0,COM00);
    135a:	a3 e5       	ldi	r26, 0x53	; 83
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e3 e5       	ldi	r30, 0x53	; 83
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	8f 7e       	andi	r24, 0xEF	; 239
    1366:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    1368:	a3 e5       	ldi	r26, 0x53	; 83
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e3 e5       	ldi	r30, 0x53	; 83
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	80 62       	ori	r24, 0x20	; 32
    1374:	8c 93       	st	X, r24
	#endif

#endif

#if	TIMER0_INTERRUPT == ENABLE
	SET_BIT(SREG, 7);
    1376:	af e5       	ldi	r26, 0x5F	; 95
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	ef e5       	ldi	r30, 0x5F	; 95
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	80 68       	ori	r24, 0x80	; 128
    1382:	8c 93       	st	X, r24
	#if TIMER0_TCNT_INTERRUPT == ENABLE
	SET_BIT(TIMSK, TOIE0);
	#endif

	#if TIMER0_OCR_INTERRUPT == ENABLE
	SET_BIT(TIMSK, OCIE0);
    1384:	a9 e5       	ldi	r26, 0x59	; 89
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e9 e5       	ldi	r30, 0x59	; 89
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	82 60       	ori	r24, 0x02	; 2
    1390:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS01);
	CLR_BIT(TCCR0,CS02);

#elif TIMER0_PRESCALER == PRESCALER_8
	// set prescaler to FCPU/8
	CLR_BIT(TCCR0,CS00);
    1392:	a3 e5       	ldi	r26, 0x53	; 83
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e3 e5       	ldi	r30, 0x53	; 83
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	8e 7f       	andi	r24, 0xFE	; 254
    139e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    13a0:	a3 e5       	ldi	r26, 0x53	; 83
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e3 e5       	ldi	r30, 0x53	; 83
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	82 60       	ori	r24, 0x02	; 2
    13ac:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
    13ae:	a3 e5       	ldi	r26, 0x53	; 83
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e3 e5       	ldi	r30, 0x53	; 83
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	8b 7f       	andi	r24, 0xFB	; 251
    13ba:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS02);

#endif

}
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	08 95       	ret

000013c2 <Timer0_voidInterruptDisable>:

void Timer0_voidInterruptDisable(void)
{
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, TOIE0);
    13ca:	a9 e5       	ldi	r26, 0x59	; 89
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e9 e5       	ldi	r30, 0x59	; 89
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	8e 7f       	andi	r24, 0xFE	; 254
    13d6:	8c 93       	st	X, r24
	CLR_BIT(TIMSK, OCIE0);
    13d8:	a9 e5       	ldi	r26, 0x59	; 89
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e9 e5       	ldi	r30, 0x59	; 89
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	8d 7f       	andi	r24, 0xFD	; 253
    13e4:	8c 93       	st	X, r24

}
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <Timer0_voidInterruptEnable>:
void Timer0_voidInterruptEnable(void)
{
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
#if	TIMER0_INTERRUPT == ENABLE
	SET_BIT(SREG, 7);
    13f4:	af e5       	ldi	r26, 0x5F	; 95
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	ef e5       	ldi	r30, 0x5F	; 95
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	80 68       	ori	r24, 0x80	; 128
    1400:	8c 93       	st	X, r24
	#if TIMER0_TCNT_INTERRUPT == ENABLE
	SET_BIT(TIMSK, TOIE0);
	#endif

	#if TIMER0_OCR_INTERRUPT == ENABLE
	SET_BIT(TIMSK, OCIE0);
    1402:	a9 e5       	ldi	r26, 0x59	; 89
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e9 e5       	ldi	r30, 0x59	; 89
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	82 60       	ori	r24, 0x02	; 2
    140e:	8c 93       	st	X, r24
	#endif

#endif
}
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <Timer0_voidSetPin_softPWM>:

// PWM Software for any DIO Pin Functions
void Timer0_voidSetPin_softPWM(DIO_GroupNumber port,DIO_PinNumber pin)
{
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	00 d0       	rcall	.+0      	; 0x141c <Timer0_voidSetPin_softPWM+0x6>
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	6a 83       	std	Y+2, r22	; 0x02
	// Initialize DIO Pin
	DIO_ErrStateSetPinDirection(port,pin,DIO_Output);
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	6a 81       	ldd	r22, Y+2	; 0x02
    1428:	41 e0       	ldi	r20, 0x01	; 1
    142a:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
	// Normal Mode
	CLR_BIT(TCCR0,WGM00);
    142e:	a3 e5       	ldi	r26, 0x53	; 83
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e3 e5       	ldi	r30, 0x53	; 83
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	8f 7b       	andi	r24, 0xBF	; 191
    143a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    143c:	a3 e5       	ldi	r26, 0x53	; 83
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e3 e5       	ldi	r30, 0x53	; 83
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	87 7f       	andi	r24, 0xF7	; 247
    1448:	8c 93       	st	X, r24
	//Enable interrupt
	SET_BIT(SREG, 7);
    144a:	af e5       	ldi	r26, 0x5F	; 95
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	ef e5       	ldi	r30, 0x5F	; 95
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	80 68       	ori	r24, 0x80	; 128
    1456:	8c 93       	st	X, r24
	SET_BIT(TIMSK, TOIE0);
    1458:	a9 e5       	ldi	r26, 0x59	; 89
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e9 e5       	ldi	r30, 0x59	; 89
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	81 60       	ori	r24, 0x01	; 1
    1464:	8c 93       	st	X, r24
	SET_BIT(TIMSK, OCIE0);
    1466:	a9 e5       	ldi	r26, 0x59	; 89
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e9 e5       	ldi	r30, 0x59	; 89
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	82 60       	ori	r24, 0x02	; 2
    1472:	8c 93       	st	X, r24
	// 64 prescaler
	SET_BIT(TCCR0,CS00);
    1474:	a3 e5       	ldi	r26, 0x53	; 83
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e3 e5       	ldi	r30, 0x53	; 83
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	81 60       	ori	r24, 0x01	; 1
    1480:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    1482:	a3 e5       	ldi	r26, 0x53	; 83
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e3 e5       	ldi	r30, 0x53	; 83
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	82 60       	ori	r24, 0x02	; 2
    148e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
    1490:	a3 e5       	ldi	r26, 0x53	; 83
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e3 e5       	ldi	r30, 0x53	; 83
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	8b 7f       	andi	r24, 0xFB	; 251
    149c:	8c 93       	st	X, r24


	ISR_Timer0_OVF = ISR_soft_pwm_OVF;
    149e:	8f e9       	ldi	r24, 0x9F	; 159
    14a0:	9a e0       	ldi	r25, 0x0A	; 10
    14a2:	90 93 93 01 	sts	0x0193, r25
    14a6:	80 93 92 01 	sts	0x0192, r24
	ISR_Timer0_CTC = ISR_soft_pwm_CTC;
    14aa:	8e ea       	ldi	r24, 0xAE	; 174
    14ac:	9a e0       	ldi	r25, 0x0A	; 10
    14ae:	90 93 95 01 	sts	0x0195, r25
    14b2:	80 93 94 01 	sts	0x0194, r24
}
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <Timer0_voidSetDuty_percentage>:
void Timer0_voidSetDuty_percentage (u8 OcrVal,DIO_GroupNumber port,DIO_PinNumber pin)
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <Timer0_voidSetDuty_percentage+0x6>
    14c6:	0f 92       	push	r0
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	6a 83       	std	Y+2, r22	; 0x02
    14d0:	4b 83       	std	Y+3, r20	; 0x03
	pwm_pin = pin;
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	80 93 96 01 	sts	0x0196, r24
	pwm_port = port;
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	80 93 97 01 	sts	0x0197, r24
	OcrVal = ((f32)OcrVal/100)*TIMER0_TCNT0_TICKS;
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a0 e0       	ldi	r26, 0x00	; 0
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	bc 01       	movw	r22, r24
    14ea:	cd 01       	movw	r24, r26
    14ec:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	48 ec       	ldi	r20, 0xC8	; 200
    14fe:	52 e4       	ldi	r21, 0x42	; 66
    1500:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	bc 01       	movw	r22, r24
    150a:	cd 01       	movw	r24, r26
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e8       	ldi	r20, 0x80	; 128
    1512:	53 e4       	ldi	r21, 0x43	; 67
    1514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	bc 01       	movw	r22, r24
    151e:	cd 01       	movw	r24, r26
    1520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = OcrVal;
    152a:	ec e5       	ldi	r30, 0x5C	; 92
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	80 83       	st	Z, r24
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <ISR_soft_pwm_OVF>:
void ISR_soft_pwm_OVF(void)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
	DIO_ErrStateSetPinValue(pwm_port,pwm_pin,DIO_High);
    1546:	80 91 97 01 	lds	r24, 0x0197
    154a:	90 91 96 01 	lds	r25, 0x0196
    154e:	69 2f       	mov	r22, r25
    1550:	41 e0       	ldi	r20, 0x01	; 1
    1552:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>

}
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <ISR_soft_pwm_CTC>:
void ISR_soft_pwm_CTC(void)
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
	DIO_ErrStateSetPinValue(pwm_port,pwm_pin,DIO_Low);
    1564:	80 91 97 01 	lds	r24, 0x0197
    1568:	90 91 96 01 	lds	r25, 0x0196
    156c:	69 2f       	mov	r22, r25
    156e:	40 e0       	ldi	r20, 0x00	; 0
    1570:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
}
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <Timer0_voidFastPWM_percentage>:

// Fast PWM mode
void Timer0_voidFastPWM_percentage(u8 DutyCycle)
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	0f 92       	push	r0
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	89 83       	std	Y+1, r24	; 0x01
#if TIMER0_PWM_FAST_MODE_SELECT == INVERTING
	DutyCycle = (((f32)DutyCycle/100)*TIMER0_TCNT0_TICKS)+TIMER0_TCNT0_TICKS;
	OCR0 = DutyCycle;
#elif TIMER0_PWM_FAST_MODE_SELECT == NON_INVERTING
	DutyCycle = ((f32)DutyCycle/100)*TIMER0_TCNT0_TICKS;
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	a0 e0       	ldi	r26, 0x00	; 0
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	bc 01       	movw	r22, r24
    1592:	cd 01       	movw	r24, r26
    1594:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	bc 01       	movw	r22, r24
    159e:	cd 01       	movw	r24, r26
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	48 ec       	ldi	r20, 0xC8	; 200
    15a6:	52 e4       	ldi	r21, 0x42	; 66
    15a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	bc 01       	movw	r22, r24
    15b2:	cd 01       	movw	r24, r26
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e8       	ldi	r20, 0x80	; 128
    15ba:	53 e4       	ldi	r21, 0x43	; 67
    15bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	bc 01       	movw	r22, r24
    15c6:	cd 01       	movw	r24, r26
    15c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = DutyCycle;
    15d2:	ec e5       	ldi	r30, 0x5C	; 92
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	80 83       	st	Z, r24
#endif
}
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <Timer0_voidDelay_ms>:

// Timer Delay in milli sec using Polling
void Timer0_voidDelay_ms(f32 Tdelay)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <Timer0_voidDelay_ms+0x6>
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <Timer0_voidDelay_ms+0x8>
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	69 83       	std	Y+1, r22	; 0x01
    15f0:	7a 83       	std	Y+2, r23	; 0x02
    15f2:	8b 83       	std	Y+3, r24	; 0x03
    15f4:	9c 83       	std	Y+4, r25	; 0x04
		while ((GET_BIT(TIFR,TOV0)) == 0);
		TCCR0 = 0;
	}*/
#endif

}
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <Timer0_OVF_setCallbackFunc>:


void Timer0_OVF_setCallbackFunc(void(*Timer0_Fptr)(void))
{
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	00 d0       	rcall	.+0      	; 0x160a <Timer0_OVF_setCallbackFunc+0x6>
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	9a 83       	std	Y+2, r25	; 0x02
    1610:	89 83       	std	Y+1, r24	; 0x01
	ISR_Timer0_OVF = Timer0_Fptr ;
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	9a 81       	ldd	r25, Y+2	; 0x02
    1616:	90 93 93 01 	sts	0x0193, r25
    161a:	80 93 92 01 	sts	0x0192, r24
}
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <Timer0_CTC_setCallbackFunc>:
void Timer0_CTC_setCallbackFunc(void(*Timer0_Fptr)(void))
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	00 d0       	rcall	.+0      	; 0x162e <Timer0_CTC_setCallbackFunc+0x6>
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	9a 83       	std	Y+2, r25	; 0x02
    1634:	89 83       	std	Y+1, r24	; 0x01
	ISR_Timer0_CTC = Timer0_Fptr ;
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	9a 81       	ldd	r25, Y+2	; 0x02
    163a:	90 93 95 01 	sts	0x0195, r25
    163e:	80 93 94 01 	sts	0x0194, r24
}
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <__vector_11>:
void __vector_11(void)
{
    164c:	1f 92       	push	r1
    164e:	0f 92       	push	r0
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	0f 92       	push	r0
    1654:	11 24       	eor	r1, r1
    1656:	2f 93       	push	r18
    1658:	3f 93       	push	r19
    165a:	4f 93       	push	r20
    165c:	5f 93       	push	r21
    165e:	6f 93       	push	r22
    1660:	7f 93       	push	r23
    1662:	8f 93       	push	r24
    1664:	9f 93       	push	r25
    1666:	af 93       	push	r26
    1668:	bf 93       	push	r27
    166a:	ef 93       	push	r30
    166c:	ff 93       	push	r31
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
	if (ISR_Timer0_OVF != Null)
    1676:	80 91 92 01 	lds	r24, 0x0192
    167a:	90 91 93 01 	lds	r25, 0x0193
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	29 f0       	breq	.+10     	; 0x168c <__vector_11+0x40>
	{
		ISR_Timer0_OVF();
    1682:	e0 91 92 01 	lds	r30, 0x0192
    1686:	f0 91 93 01 	lds	r31, 0x0193
    168a:	09 95       	icall
	}
}
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	ff 91       	pop	r31
    1692:	ef 91       	pop	r30
    1694:	bf 91       	pop	r27
    1696:	af 91       	pop	r26
    1698:	9f 91       	pop	r25
    169a:	8f 91       	pop	r24
    169c:	7f 91       	pop	r23
    169e:	6f 91       	pop	r22
    16a0:	5f 91       	pop	r21
    16a2:	4f 91       	pop	r20
    16a4:	3f 91       	pop	r19
    16a6:	2f 91       	pop	r18
    16a8:	0f 90       	pop	r0
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	0f 90       	pop	r0
    16ae:	1f 90       	pop	r1
    16b0:	18 95       	reti

000016b2 <__vector_10>:
void __vector_10(void)
{
    16b2:	1f 92       	push	r1
    16b4:	0f 92       	push	r0
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	0f 92       	push	r0
    16ba:	11 24       	eor	r1, r1
    16bc:	2f 93       	push	r18
    16be:	3f 93       	push	r19
    16c0:	4f 93       	push	r20
    16c2:	5f 93       	push	r21
    16c4:	6f 93       	push	r22
    16c6:	7f 93       	push	r23
    16c8:	8f 93       	push	r24
    16ca:	9f 93       	push	r25
    16cc:	af 93       	push	r26
    16ce:	bf 93       	push	r27
    16d0:	ef 93       	push	r30
    16d2:	ff 93       	push	r31
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
	if (ISR_Timer0_CTC != Null)
    16dc:	80 91 94 01 	lds	r24, 0x0194
    16e0:	90 91 95 01 	lds	r25, 0x0195
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	29 f0       	breq	.+10     	; 0x16f2 <__vector_10+0x40>
	{

		ISR_Timer0_CTC();
    16e8:	e0 91 94 01 	lds	r30, 0x0194
    16ec:	f0 91 95 01 	lds	r31, 0x0195
    16f0:	09 95       	icall
	}
}
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	ff 91       	pop	r31
    16f8:	ef 91       	pop	r30
    16fa:	bf 91       	pop	r27
    16fc:	af 91       	pop	r26
    16fe:	9f 91       	pop	r25
    1700:	8f 91       	pop	r24
    1702:	7f 91       	pop	r23
    1704:	6f 91       	pop	r22
    1706:	5f 91       	pop	r21
    1708:	4f 91       	pop	r20
    170a:	3f 91       	pop	r19
    170c:	2f 91       	pop	r18
    170e:	0f 90       	pop	r0
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	0f 90       	pop	r0
    1714:	1f 90       	pop	r1
    1716:	18 95       	reti

00001718 <SPI_SlaveInit>:
#endif

#if SPI_MODE == SPI_SLAVE

void SPI_SlaveInit(void)
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,SPE);
    1720:	ad e2       	ldi	r26, 0x2D	; 45
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	ed e2       	ldi	r30, 0x2D	; 45
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	80 64       	ori	r24, 0x40	; 64
    172c:	8c 93       	st	X, r24
	//SET_BIT(SPCR,DORD);
	SET_BIT(SPCR,CPOL);
    172e:	ad e2       	ldi	r26, 0x2D	; 45
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	ed e2       	ldi	r30, 0x2D	; 45
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	88 60       	ori	r24, 0x08	; 8
    173a:	8c 93       	st	X, r24
	SET_BIT(SPCR,CPHA);
    173c:	ad e2       	ldi	r26, 0x2D	; 45
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	ed e2       	ldi	r30, 0x2D	; 45
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	84 60       	ori	r24, 0x04	; 4
    1748:	8c 93       	st	X, r24

}
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <SPI_TransRecieve>:
#endif
u8 SPI_TransRecieve(u8 val)
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	00 d0       	rcall	.+0      	; 0x1756 <SPI_TransRecieve+0x6>
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for reception complete */
	SPDR=val;
    175c:	ef e2       	ldi	r30, 0x2F	; 47
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,7)==0);
    1764:	ee e2       	ldi	r30, 0x2E	; 46
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
	/* Return data register */
	return SPDR;
    176a:	ef e2       	ldi	r30, 0x2F	; 47
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
}
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <EXTI_init>:
void (*INT0_ptr)(void) = Null;
void (*INT1_ptr)(void) = Null;
void (*INT2_ptr)(void) = Null;

void EXTI_init()
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62


// Interrupt 0
	#if EXT_INT0_MODE == ENABLE
		EXTI_Enable(EXTI0);
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <EXTI_Enable>
			CLR_BIT(MCUCR_REG,ISC01);
		#elif INT0_SENSE_MODE	== ONCHANGE
			SET_BIT(MCUCR_REG,ISC00);
			CLR_BIT(MCUCR_REG,ISC01);
		#elif INT0_SENSE_MODE	== FALLING_EDGE_TRIG
			CLR_BIT(MCUCR_REG,ISC00);
    1788:	a5 e5       	ldi	r26, 0x55	; 85
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e5 e5       	ldi	r30, 0x55	; 85
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	8e 7f       	andi	r24, 0xFE	; 254
    1794:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,ISC01);
    1796:	a5 e5       	ldi	r26, 0x55	; 85
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e5 e5       	ldi	r30, 0x55	; 85
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	82 60       	ori	r24, 0x02	; 2
    17a2:	8c 93       	st	X, r24
			#elif INT1_SENSE_MODE	== RAISING_EDGE_TRIG
				SET_BIT(MCUCSR_REG,ISC2);
			#endif
		EXTI_Enable(EXTI2);
	#endif
}
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <EXTI_Enable>:
void EXTI_Enable(EXT_type interrupt)
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <EXTI_Enable+0x6>
    17b0:	0f 92       	push	r0
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	89 83       	std	Y+1, r24	; 0x01
#if EXTI0_USAGE == EXTI0_INTERRUPT
	SET_BIT(SREG_REG,7);//enable GIE
    17b8:	af e5       	ldi	r26, 0x5F	; 95
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	ef e5       	ldi	r30, 0x5F	; 95
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	80 68       	ori	r24, 0x80	; 128
    17c4:	8c 93       	st	X, r24
#endif
	switch (interrupt)
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	3b 83       	std	Y+3, r19	; 0x03
    17ce:	2a 83       	std	Y+2, r18	; 0x02
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	9b 81       	ldd	r25, Y+3	; 0x03
    17d4:	81 30       	cpi	r24, 0x01	; 1
    17d6:	91 05       	cpc	r25, r1
    17d8:	01 f1       	breq	.+64     	; 0x181a <EXTI_Enable+0x70>
    17da:	2a 81       	ldd	r18, Y+2	; 0x02
    17dc:	3b 81       	ldd	r19, Y+3	; 0x03
    17de:	22 30       	cpi	r18, 0x02	; 2
    17e0:	31 05       	cpc	r19, r1
    17e2:	89 f1       	breq	.+98     	; 0x1846 <EXTI_Enable+0x9c>
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	9b 81       	ldd	r25, Y+3	; 0x03
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	09 f0       	breq	.+2      	; 0x17ee <EXTI_Enable+0x44>
    17ec:	41 c0       	rjmp	.+130    	; 0x1870 <EXTI_Enable+0xc6>
	{
		case EXTI0:
			SET_BIT(GICR_REG,INT0);
    17ee:	ab e5       	ldi	r26, 0x5B	; 91
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	eb e5       	ldi	r30, 0x5B	; 91
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	80 64       	ori	r24, 0x40	; 64
    17fa:	8c 93       	st	X, r24
			CLR_BIT(DDRD_ITI,2);
    17fc:	a1 e3       	ldi	r26, 0x31	; 49
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e1 e3       	ldi	r30, 0x31	; 49
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	8b 7f       	andi	r24, 0xFB	; 251
    1808:	8c 93       	st	X, r24
			SET_BIT(PORTD_ITI,2);
    180a:	a2 e3       	ldi	r26, 0x32	; 50
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e2 e3       	ldi	r30, 0x32	; 50
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	84 60       	ori	r24, 0x04	; 4
    1816:	8c 93       	st	X, r24
    1818:	2b c0       	rjmp	.+86     	; 0x1870 <EXTI_Enable+0xc6>
			break;
		case EXTI1:
			SET_BIT(GICR_REG,INT1);
    181a:	ab e5       	ldi	r26, 0x5B	; 91
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	eb e5       	ldi	r30, 0x5B	; 91
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	80 68       	ori	r24, 0x80	; 128
    1826:	8c 93       	st	X, r24
			CLR_BIT(DDRD_ITI,3);
    1828:	a1 e3       	ldi	r26, 0x31	; 49
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e1 e3       	ldi	r30, 0x31	; 49
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	87 7f       	andi	r24, 0xF7	; 247
    1834:	8c 93       	st	X, r24
			SET_BIT(PORTD_ITI,3);
    1836:	a2 e3       	ldi	r26, 0x32	; 50
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e2 e3       	ldi	r30, 0x32	; 50
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	88 60       	ori	r24, 0x08	; 8
    1842:	8c 93       	st	X, r24
    1844:	15 c0       	rjmp	.+42     	; 0x1870 <EXTI_Enable+0xc6>
			break;
		case EXTI2:
			SET_BIT(GICR_REG,INT2);
    1846:	ab e5       	ldi	r26, 0x5B	; 91
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	eb e5       	ldi	r30, 0x5B	; 91
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	80 62       	ori	r24, 0x20	; 32
    1852:	8c 93       	st	X, r24
			CLR_BIT(DDRB_ITI,2);
    1854:	a7 e3       	ldi	r26, 0x37	; 55
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e7 e3       	ldi	r30, 0x37	; 55
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	8b 7f       	andi	r24, 0xFB	; 251
    1860:	8c 93       	st	X, r24
			SET_BIT(PORTB_ITI,2);
    1862:	a8 e3       	ldi	r26, 0x38	; 56
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e8 e3       	ldi	r30, 0x38	; 56
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	84 60       	ori	r24, 0x04	; 4
    186e:	8c 93       	st	X, r24
			break;
		default : break;
	}
}
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <EXTI_Disable>:
void EXTI_Disable(EXT_type interrupt)
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	00 d0       	rcall	.+0      	; 0x1882 <EXTI_Disable+0x6>
    1882:	0f 92       	push	r0
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	89 83       	std	Y+1, r24	; 0x01
	switch (interrupt)
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	3b 83       	std	Y+3, r19	; 0x03
    1892:	2a 83       	std	Y+2, r18	; 0x02
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	9b 81       	ldd	r25, Y+3	; 0x03
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	91 05       	cpc	r25, r1
    189c:	89 f0       	breq	.+34     	; 0x18c0 <EXTI_Disable+0x44>
    189e:	2a 81       	ldd	r18, Y+2	; 0x02
    18a0:	3b 81       	ldd	r19, Y+3	; 0x03
    18a2:	22 30       	cpi	r18, 0x02	; 2
    18a4:	31 05       	cpc	r19, r1
    18a6:	a1 f0       	breq	.+40     	; 0x18d0 <EXTI_Disable+0x54>
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	9b 81       	ldd	r25, Y+3	; 0x03
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	b9 f4       	brne	.+46     	; 0x18de <EXTI_Disable+0x62>
	{
		case EXTI0:
			CLR_BIT(GICR_REG,INT0);
    18b0:	ab e5       	ldi	r26, 0x5B	; 91
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	eb e5       	ldi	r30, 0x5B	; 91
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	8f 7b       	andi	r24, 0xBF	; 191
    18bc:	8c 93       	st	X, r24
    18be:	0f c0       	rjmp	.+30     	; 0x18de <EXTI_Disable+0x62>
			break;
		case EXTI1:
			CLR_BIT(GICR_REG,INT1);
    18c0:	ab e5       	ldi	r26, 0x5B	; 91
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	eb e5       	ldi	r30, 0x5B	; 91
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	8f 77       	andi	r24, 0x7F	; 127
    18cc:	8c 93       	st	X, r24
    18ce:	07 c0       	rjmp	.+14     	; 0x18de <EXTI_Disable+0x62>
			break;
		case EXTI2:
			CLR_BIT(GICR_REG,INT2);
    18d0:	ab e5       	ldi	r26, 0x5B	; 91
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	eb e5       	ldi	r30, 0x5B	; 91
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	8f 7d       	andi	r24, 0xDF	; 223
    18dc:	8c 93       	st	X, r24
			break;
		default : break;
	}

}
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <setCallback_INT0>:

// Callback Functions
#if EXTI0_USAGE == EXTI0_INTERRUPT

void setCallback_INT0(void (*Fptr)())
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <setCallback_INT0+0x6>
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	9a 83       	std	Y+2, r25	; 0x02
    18f6:	89 83       	std	Y+1, r24	; 0x01

	INT0_ptr = Fptr;
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	90 93 99 01 	sts	0x0199, r25
    1900:	80 93 98 01 	sts	0x0198, r24

}
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <setCallback_INT1>:
#endif

#if EXTI1_USAGE == EXTI1_INTERRUPT

void setCallback_INT1(void (*Fptr)())
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	00 d0       	rcall	.+0      	; 0x1914 <setCallback_INT1+0x6>
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	9a 83       	std	Y+2, r25	; 0x02
    191a:	89 83       	std	Y+1, r24	; 0x01
	INT1_ptr = Fptr;
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	9a 81       	ldd	r25, Y+2	; 0x02
    1920:	90 93 9b 01 	sts	0x019B, r25
    1924:	80 93 9a 01 	sts	0x019A, r24

}
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <setCallback_INT2>:
#endif

#if EXTI2_USAGE == EXTI2_INTERRUPT

void setCallback_INT2(void (*Fptr)())
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	00 d0       	rcall	.+0      	; 0x1938 <setCallback_INT2+0x6>
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	9a 83       	std	Y+2, r25	; 0x02
    193e:	89 83       	std	Y+1, r24	; 0x01
	INT2_ptr = Fptr;
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	90 93 9d 01 	sts	0x019D, r25
    1948:	80 93 9c 01 	sts	0x019C, r24
}
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <__vector_1>:

// ISR Functions
#if EXTI0_USAGE == EXTI0_INTERRUPT
/*ISR(INT0_vect)*/
void __vector_1 (void)
{
    1956:	1f 92       	push	r1
    1958:	0f 92       	push	r0
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	0f 92       	push	r0
    195e:	11 24       	eor	r1, r1
    1960:	2f 93       	push	r18
    1962:	3f 93       	push	r19
    1964:	4f 93       	push	r20
    1966:	5f 93       	push	r21
    1968:	6f 93       	push	r22
    196a:	7f 93       	push	r23
    196c:	8f 93       	push	r24
    196e:	9f 93       	push	r25
    1970:	af 93       	push	r26
    1972:	bf 93       	push	r27
    1974:	ef 93       	push	r30
    1976:	ff 93       	push	r31
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
	if (INT0_ptr != Null){
    1980:	80 91 98 01 	lds	r24, 0x0198
    1984:	90 91 99 01 	lds	r25, 0x0199
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	29 f0       	breq	.+10     	; 0x1996 <__vector_1+0x40>
		INT0_ptr();
    198c:	e0 91 98 01 	lds	r30, 0x0198
    1990:	f0 91 99 01 	lds	r31, 0x0199
    1994:	09 95       	icall
	}
}
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	ff 91       	pop	r31
    199c:	ef 91       	pop	r30
    199e:	bf 91       	pop	r27
    19a0:	af 91       	pop	r26
    19a2:	9f 91       	pop	r25
    19a4:	8f 91       	pop	r24
    19a6:	7f 91       	pop	r23
    19a8:	6f 91       	pop	r22
    19aa:	5f 91       	pop	r21
    19ac:	4f 91       	pop	r20
    19ae:	3f 91       	pop	r19
    19b0:	2f 91       	pop	r18
    19b2:	0f 90       	pop	r0
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	0f 90       	pop	r0
    19b8:	1f 90       	pop	r1
    19ba:	18 95       	reti

000019bc <__vector_2>:
#endif

#if EXTI1_USAGE == EXTI1_INTERRUPT
/*ISR(INT1_vect)*/
void __vector_2 (void)
{
    19bc:	1f 92       	push	r1
    19be:	0f 92       	push	r0
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	0f 92       	push	r0
    19c4:	11 24       	eor	r1, r1
    19c6:	2f 93       	push	r18
    19c8:	3f 93       	push	r19
    19ca:	4f 93       	push	r20
    19cc:	5f 93       	push	r21
    19ce:	6f 93       	push	r22
    19d0:	7f 93       	push	r23
    19d2:	8f 93       	push	r24
    19d4:	9f 93       	push	r25
    19d6:	af 93       	push	r26
    19d8:	bf 93       	push	r27
    19da:	ef 93       	push	r30
    19dc:	ff 93       	push	r31
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
	if (INT1_ptr != Null){
    19e6:	80 91 9a 01 	lds	r24, 0x019A
    19ea:	90 91 9b 01 	lds	r25, 0x019B
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	29 f0       	breq	.+10     	; 0x19fc <__vector_2+0x40>
		INT1_ptr();
    19f2:	e0 91 9a 01 	lds	r30, 0x019A
    19f6:	f0 91 9b 01 	lds	r31, 0x019B
    19fa:	09 95       	icall
	}
}
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	ff 91       	pop	r31
    1a02:	ef 91       	pop	r30
    1a04:	bf 91       	pop	r27
    1a06:	af 91       	pop	r26
    1a08:	9f 91       	pop	r25
    1a0a:	8f 91       	pop	r24
    1a0c:	7f 91       	pop	r23
    1a0e:	6f 91       	pop	r22
    1a10:	5f 91       	pop	r21
    1a12:	4f 91       	pop	r20
    1a14:	3f 91       	pop	r19
    1a16:	2f 91       	pop	r18
    1a18:	0f 90       	pop	r0
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	0f 90       	pop	r0
    1a1e:	1f 90       	pop	r1
    1a20:	18 95       	reti

00001a22 <__vector_3>:
#endif

#if EXTI2_USAGE == EXTI2_INTERRUPT
/*ISR(INT2_vect)*/
void __vector_3 (void)
{
    1a22:	1f 92       	push	r1
    1a24:	0f 92       	push	r0
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	0f 92       	push	r0
    1a2a:	11 24       	eor	r1, r1
    1a2c:	2f 93       	push	r18
    1a2e:	3f 93       	push	r19
    1a30:	4f 93       	push	r20
    1a32:	5f 93       	push	r21
    1a34:	6f 93       	push	r22
    1a36:	7f 93       	push	r23
    1a38:	8f 93       	push	r24
    1a3a:	9f 93       	push	r25
    1a3c:	af 93       	push	r26
    1a3e:	bf 93       	push	r27
    1a40:	ef 93       	push	r30
    1a42:	ff 93       	push	r31
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
	if (INT2_ptr != Null){
    1a4c:	80 91 9c 01 	lds	r24, 0x019C
    1a50:	90 91 9d 01 	lds	r25, 0x019D
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	29 f0       	breq	.+10     	; 0x1a62 <__vector_3+0x40>
		INT2_ptr();
    1a58:	e0 91 9c 01 	lds	r30, 0x019C
    1a5c:	f0 91 9d 01 	lds	r31, 0x019D
    1a60:	09 95       	icall
	}
}
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	ff 91       	pop	r31
    1a68:	ef 91       	pop	r30
    1a6a:	bf 91       	pop	r27
    1a6c:	af 91       	pop	r26
    1a6e:	9f 91       	pop	r25
    1a70:	8f 91       	pop	r24
    1a72:	7f 91       	pop	r23
    1a74:	6f 91       	pop	r22
    1a76:	5f 91       	pop	r21
    1a78:	4f 91       	pop	r20
    1a7a:	3f 91       	pop	r19
    1a7c:	2f 91       	pop	r18
    1a7e:	0f 90       	pop	r0
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	0f 90       	pop	r0
    1a84:	1f 90       	pop	r1
    1a86:	18 95       	reti

00001a88 <DIO_ErrStateSetPinDirection>:
/* Date   : 24 MAR 2023                            */
/***************************************************/
#include "DIO_Interface.h"

ErrState  DIO_ErrStateSetPinDirection(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber,DIO_DirectionState Copy_DirectionState)
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	28 97       	sbiw	r28, 0x08	; 8
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	cd bf       	out	0x3d, r28	; 61
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	6a 83       	std	Y+2, r22	; 0x02
    1aa0:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_PinNumber<=Pin7 && Copy_PinNumber>=Pin0)
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	88 30       	cpi	r24, 0x08	; 8
    1aa6:	08 f0       	brcs	.+2      	; 0x1aaa <DIO_ErrStateSetPinDirection+0x22>
    1aa8:	f6 c0       	rjmp	.+492    	; 0x1c96 <DIO_ErrStateSetPinDirection+0x20e>
	{
		/*Input-> write Zero DDR (CLR) */
		if (Copy_DirectionState == DIO_Input )
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	88 23       	and	r24, r24
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <DIO_ErrStateSetPinDirection+0x2a>
    1ab0:	77 c0       	rjmp	.+238    	; 0x1ba0 <DIO_ErrStateSetPinDirection+0x118>
		{
			switch(Copy_GroupNumber){
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	38 87       	std	Y+8, r19	; 0x08
    1aba:	2f 83       	std	Y+7, r18	; 0x07
    1abc:	8f 81       	ldd	r24, Y+7	; 0x07
    1abe:	98 85       	ldd	r25, Y+8	; 0x08
    1ac0:	81 30       	cpi	r24, 0x01	; 1
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	59 f1       	breq	.+86     	; 0x1b1c <DIO_ErrStateSetPinDirection+0x94>
    1ac6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ac8:	38 85       	ldd	r19, Y+8	; 0x08
    1aca:	22 30       	cpi	r18, 0x02	; 2
    1acc:	31 05       	cpc	r19, r1
    1ace:	2c f4       	brge	.+10     	; 0x1ada <DIO_ErrStateSetPinDirection+0x52>
    1ad0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ad2:	98 85       	ldd	r25, Y+8	; 0x08
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	69 f0       	breq	.+26     	; 0x1af2 <DIO_ErrStateSetPinDirection+0x6a>
    1ad8:	60 c0       	rjmp	.+192    	; 0x1b9a <DIO_ErrStateSetPinDirection+0x112>
    1ada:	2f 81       	ldd	r18, Y+7	; 0x07
    1adc:	38 85       	ldd	r19, Y+8	; 0x08
    1ade:	22 30       	cpi	r18, 0x02	; 2
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	89 f1       	breq	.+98     	; 0x1b46 <DIO_ErrStateSetPinDirection+0xbe>
    1ae4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae6:	98 85       	ldd	r25, Y+8	; 0x08
    1ae8:	83 30       	cpi	r24, 0x03	; 3
    1aea:	91 05       	cpc	r25, r1
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <DIO_ErrStateSetPinDirection+0x68>
    1aee:	40 c0       	rjmp	.+128    	; 0x1b70 <DIO_ErrStateSetPinDirection+0xe8>
    1af0:	54 c0       	rjmp	.+168    	; 0x1b9a <DIO_ErrStateSetPinDirection+0x112>
			/*Group A*/
			case DIO_GroupA : CLR_BIT(DDRA_ITI , Copy_PinNumber ) ;
    1af2:	aa e3       	ldi	r26, 0x3A	; 58
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	ea e3       	ldi	r30, 0x3A	; 58
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	48 2f       	mov	r20, r24
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	28 2f       	mov	r18, r24
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	02 2e       	mov	r0, r18
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <DIO_ErrStateSetPinDirection+0x88>
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	0a 94       	dec	r0
    1b12:	e2 f7       	brpl	.-8      	; 0x1b0c <DIO_ErrStateSetPinDirection+0x84>
    1b14:	80 95       	com	r24
    1b16:	84 23       	and	r24, r20
    1b18:	8c 93       	st	X, r24
    1b1a:	bb c0       	rjmp	.+374    	; 0x1c92 <DIO_ErrStateSetPinDirection+0x20a>
			break ;
			/*Group B*/
			case DIO_GroupB : CLR_BIT(DDRB_ITI , Copy_PinNumber ) ;
    1b1c:	a7 e3       	ldi	r26, 0x37	; 55
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e7 e3       	ldi	r30, 0x37	; 55
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	48 2f       	mov	r20, r24
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	02 2e       	mov	r0, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <DIO_ErrStateSetPinDirection+0xb2>
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	0a 94       	dec	r0
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <DIO_ErrStateSetPinDirection+0xae>
    1b3e:	80 95       	com	r24
    1b40:	84 23       	and	r24, r20
    1b42:	8c 93       	st	X, r24
    1b44:	a6 c0       	rjmp	.+332    	; 0x1c92 <DIO_ErrStateSetPinDirection+0x20a>
			break ;
			/*Group C*/
			case DIO_GroupC : CLR_BIT(DDRC_ITI , Copy_PinNumber ) ;
    1b46:	a4 e3       	ldi	r26, 0x34	; 52
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e4 e3       	ldi	r30, 0x34	; 52
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	48 2f       	mov	r20, r24
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	02 2e       	mov	r0, r18
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <DIO_ErrStateSetPinDirection+0xdc>
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	0a 94       	dec	r0
    1b66:	e2 f7       	brpl	.-8      	; 0x1b60 <DIO_ErrStateSetPinDirection+0xd8>
    1b68:	80 95       	com	r24
    1b6a:	84 23       	and	r24, r20
    1b6c:	8c 93       	st	X, r24
    1b6e:	91 c0       	rjmp	.+290    	; 0x1c92 <DIO_ErrStateSetPinDirection+0x20a>
			break ;
			/*Group D*/
			case DIO_GroupD : CLR_BIT(DDRD_ITI , Copy_PinNumber ) ;
    1b70:	a1 e3       	ldi	r26, 0x31	; 49
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	e1 e3       	ldi	r30, 0x31	; 49
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	48 2f       	mov	r20, r24
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	02 2e       	mov	r0, r18
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <DIO_ErrStateSetPinDirection+0x106>
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	0a 94       	dec	r0
    1b90:	e2 f7       	brpl	.-8      	; 0x1b8a <DIO_ErrStateSetPinDirection+0x102>
    1b92:	80 95       	com	r24
    1b94:	84 23       	and	r24, r20
    1b96:	8c 93       	st	X, r24
    1b98:	7c c0       	rjmp	.+248    	; 0x1c92 <DIO_ErrStateSetPinDirection+0x20a>
			break ;
			/*Wrong*/
			default:
				return GroupError ;
    1b9a:	91 e0       	ldi	r25, 0x01	; 1
    1b9c:	9e 83       	std	Y+6, r25	; 0x06
    1b9e:	7d c0       	rjmp	.+250    	; 0x1c9a <DIO_ErrStateSetPinDirection+0x212>


		}

		/*Output -> write DDR = one */
		else if (Copy_DirectionState == DIO_Output )
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	81 30       	cpi	r24, 0x01	; 1
    1ba4:	09 f0       	breq	.+2      	; 0x1ba8 <DIO_ErrStateSetPinDirection+0x120>
    1ba6:	72 c0       	rjmp	.+228    	; 0x1c8c <DIO_ErrStateSetPinDirection+0x204>
		{
			switch(Copy_GroupNumber){
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	3d 83       	std	Y+5, r19	; 0x05
    1bb0:	2c 83       	std	Y+4, r18	; 0x04
    1bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	91 05       	cpc	r25, r1
    1bba:	49 f1       	breq	.+82     	; 0x1c0e <DIO_ErrStateSetPinDirection+0x186>
    1bbc:	2c 81       	ldd	r18, Y+4	; 0x04
    1bbe:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc0:	22 30       	cpi	r18, 0x02	; 2
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <DIO_ErrStateSetPinDirection+0x148>
    1bc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	61 f0       	breq	.+24     	; 0x1be6 <DIO_ErrStateSetPinDirection+0x15e>
    1bce:	5b c0       	rjmp	.+182    	; 0x1c86 <DIO_ErrStateSetPinDirection+0x1fe>
    1bd0:	2c 81       	ldd	r18, Y+4	; 0x04
    1bd2:	3d 81       	ldd	r19, Y+5	; 0x05
    1bd4:	22 30       	cpi	r18, 0x02	; 2
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	71 f1       	breq	.+92     	; 0x1c36 <DIO_ErrStateSetPinDirection+0x1ae>
    1bda:	8c 81       	ldd	r24, Y+4	; 0x04
    1bdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bde:	83 30       	cpi	r24, 0x03	; 3
    1be0:	91 05       	cpc	r25, r1
    1be2:	e9 f1       	breq	.+122    	; 0x1c5e <DIO_ErrStateSetPinDirection+0x1d6>
    1be4:	50 c0       	rjmp	.+160    	; 0x1c86 <DIO_ErrStateSetPinDirection+0x1fe>
			/*Group A*/
			case DIO_GroupA : SET_BIT(DDRA_ITI,Copy_PinNumber);break;
    1be6:	aa e3       	ldi	r26, 0x3A	; 58
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	ea e3       	ldi	r30, 0x3A	; 58
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	48 2f       	mov	r20, r24
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	02 2e       	mov	r0, r18
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <DIO_ErrStateSetPinDirection+0x17c>
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	0a 94       	dec	r0
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <DIO_ErrStateSetPinDirection+0x178>
    1c08:	84 2b       	or	r24, r20
    1c0a:	8c 93       	st	X, r24
    1c0c:	42 c0       	rjmp	.+132    	; 0x1c92 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group B*/
			case DIO_GroupB : SET_BIT(DDRB_ITI,Copy_PinNumber);break;
    1c0e:	a7 e3       	ldi	r26, 0x37	; 55
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e7 e3       	ldi	r30, 0x37	; 55
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	48 2f       	mov	r20, r24
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	02 2e       	mov	r0, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <DIO_ErrStateSetPinDirection+0x1a4>
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	0a 94       	dec	r0
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <DIO_ErrStateSetPinDirection+0x1a0>
    1c30:	84 2b       	or	r24, r20
    1c32:	8c 93       	st	X, r24
    1c34:	2e c0       	rjmp	.+92     	; 0x1c92 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group C*/
			case DIO_GroupC : SET_BIT(DDRC_ITI,Copy_PinNumber);break;
    1c36:	a4 e3       	ldi	r26, 0x34	; 52
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e4 e3       	ldi	r30, 0x34	; 52
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	48 2f       	mov	r20, r24
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	02 2e       	mov	r0, r18
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <DIO_ErrStateSetPinDirection+0x1cc>
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	0a 94       	dec	r0
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <DIO_ErrStateSetPinDirection+0x1c8>
    1c58:	84 2b       	or	r24, r20
    1c5a:	8c 93       	st	X, r24
    1c5c:	1a c0       	rjmp	.+52     	; 0x1c92 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group D*/
			case DIO_GroupD : SET_BIT(DDRD_ITI,Copy_PinNumber);break;
    1c5e:	a1 e3       	ldi	r26, 0x31	; 49
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e1 e3       	ldi	r30, 0x31	; 49
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	48 2f       	mov	r20, r24
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	02 2e       	mov	r0, r18
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <DIO_ErrStateSetPinDirection+0x1f4>
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	0a 94       	dec	r0
    1c7e:	e2 f7       	brpl	.-8      	; 0x1c78 <DIO_ErrStateSetPinDirection+0x1f0>
    1c80:	84 2b       	or	r24, r20
    1c82:	8c 93       	st	X, r24
    1c84:	06 c0       	rjmp	.+12     	; 0x1c92 <DIO_ErrStateSetPinDirection+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
    1c86:	91 e0       	ldi	r25, 0x01	; 1
    1c88:	9e 83       	std	Y+6, r25	; 0x06
    1c8a:	07 c0       	rjmp	.+14     	; 0x1c9a <DIO_ErrStateSetPinDirection+0x212>
			}
		}

		else
		{
			return DirectionError ;
    1c8c:	23 e0       	ldi	r18, 0x03	; 3
    1c8e:	2e 83       	std	Y+6, r18	; 0x06
    1c90:	04 c0       	rjmp	.+8      	; 0x1c9a <DIO_ErrStateSetPinDirection+0x212>
		}

		return NoError ;
    1c92:	1e 82       	std	Y+6, r1	; 0x06
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <DIO_ErrStateSetPinDirection+0x212>
	}
	else
	{
		return PinNumberError ;
    1c96:	32 e0       	ldi	r19, 0x02	; 2
    1c98:	3e 83       	std	Y+6, r19	; 0x06
    1c9a:	8e 81       	ldd	r24, Y+6	; 0x06
	}
}
    1c9c:	28 96       	adiw	r28, 0x08	; 8
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <DIO_ErrStateSetPinValue>:

ErrState  DIO_ErrStateSetPinValue(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber,DIO_ValueState Copy_ValueState)
{
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	28 97       	sbiw	r28, 0x08	; 8
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	de bf       	out	0x3e, r29	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	cd bf       	out	0x3d, r28	; 61
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	6a 83       	std	Y+2, r22	; 0x02
    1cc6:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_PinNumber<=Pin7 && Copy_PinNumber>=Pin0)
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	88 30       	cpi	r24, 0x08	; 8
    1ccc:	08 f0       	brcs	.+2      	; 0x1cd0 <DIO_ErrStateSetPinValue+0x22>
    1cce:	f6 c0       	rjmp	.+492    	; 0x1ebc <DIO_ErrStateSetPinValue+0x20e>
	{
		/*Low-> write Zero Port (CLR) */
		if (Copy_ValueState == DIO_Low )
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	88 23       	and	r24, r24
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <DIO_ErrStateSetPinValue+0x2a>
    1cd6:	77 c0       	rjmp	.+238    	; 0x1dc6 <DIO_ErrStateSetPinValue+0x118>
		{
			switch(Copy_GroupNumber){
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	38 87       	std	Y+8, r19	; 0x08
    1ce0:	2f 83       	std	Y+7, r18	; 0x07
    1ce2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce4:	98 85       	ldd	r25, Y+8	; 0x08
    1ce6:	81 30       	cpi	r24, 0x01	; 1
    1ce8:	91 05       	cpc	r25, r1
    1cea:	59 f1       	breq	.+86     	; 0x1d42 <DIO_ErrStateSetPinValue+0x94>
    1cec:	2f 81       	ldd	r18, Y+7	; 0x07
    1cee:	38 85       	ldd	r19, Y+8	; 0x08
    1cf0:	22 30       	cpi	r18, 0x02	; 2
    1cf2:	31 05       	cpc	r19, r1
    1cf4:	2c f4       	brge	.+10     	; 0x1d00 <DIO_ErrStateSetPinValue+0x52>
    1cf6:	8f 81       	ldd	r24, Y+7	; 0x07
    1cf8:	98 85       	ldd	r25, Y+8	; 0x08
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	69 f0       	breq	.+26     	; 0x1d18 <DIO_ErrStateSetPinValue+0x6a>
    1cfe:	60 c0       	rjmp	.+192    	; 0x1dc0 <DIO_ErrStateSetPinValue+0x112>
    1d00:	2f 81       	ldd	r18, Y+7	; 0x07
    1d02:	38 85       	ldd	r19, Y+8	; 0x08
    1d04:	22 30       	cpi	r18, 0x02	; 2
    1d06:	31 05       	cpc	r19, r1
    1d08:	89 f1       	breq	.+98     	; 0x1d6c <DIO_ErrStateSetPinValue+0xbe>
    1d0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d0c:	98 85       	ldd	r25, Y+8	; 0x08
    1d0e:	83 30       	cpi	r24, 0x03	; 3
    1d10:	91 05       	cpc	r25, r1
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <DIO_ErrStateSetPinValue+0x68>
    1d14:	40 c0       	rjmp	.+128    	; 0x1d96 <DIO_ErrStateSetPinValue+0xe8>
    1d16:	54 c0       	rjmp	.+168    	; 0x1dc0 <DIO_ErrStateSetPinValue+0x112>
			/*Group A*/
			case DIO_GroupA : CLR_BIT(PORTA_ITI , Copy_PinNumber ) ;break ;
    1d18:	ab e3       	ldi	r26, 0x3B	; 59
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	eb e3       	ldi	r30, 0x3B	; 59
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	48 2f       	mov	r20, r24
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	28 2f       	mov	r18, r24
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	02 2e       	mov	r0, r18
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <DIO_ErrStateSetPinValue+0x88>
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	0a 94       	dec	r0
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <DIO_ErrStateSetPinValue+0x84>
    1d3a:	80 95       	com	r24
    1d3c:	84 23       	and	r24, r20
    1d3e:	8c 93       	st	X, r24
    1d40:	bb c0       	rjmp	.+374    	; 0x1eb8 <DIO_ErrStateSetPinValue+0x20a>
			/*Group B*/
			case DIO_GroupB : CLR_BIT(PORTB_ITI , Copy_PinNumber ) ;break ;
    1d42:	a8 e3       	ldi	r26, 0x38	; 56
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	e8 e3       	ldi	r30, 0x38	; 56
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	48 2f       	mov	r20, r24
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	02 2e       	mov	r0, r18
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <DIO_ErrStateSetPinValue+0xb2>
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	0a 94       	dec	r0
    1d62:	e2 f7       	brpl	.-8      	; 0x1d5c <DIO_ErrStateSetPinValue+0xae>
    1d64:	80 95       	com	r24
    1d66:	84 23       	and	r24, r20
    1d68:	8c 93       	st	X, r24
    1d6a:	a6 c0       	rjmp	.+332    	; 0x1eb8 <DIO_ErrStateSetPinValue+0x20a>
			/*Group C*/
			case DIO_GroupC : CLR_BIT(PORTC_ITI , Copy_PinNumber ) ;break ;
    1d6c:	a5 e3       	ldi	r26, 0x35	; 53
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e5 e3       	ldi	r30, 0x35	; 53
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	48 2f       	mov	r20, r24
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	02 2e       	mov	r0, r18
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <DIO_ErrStateSetPinValue+0xdc>
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	0a 94       	dec	r0
    1d8c:	e2 f7       	brpl	.-8      	; 0x1d86 <DIO_ErrStateSetPinValue+0xd8>
    1d8e:	80 95       	com	r24
    1d90:	84 23       	and	r24, r20
    1d92:	8c 93       	st	X, r24
    1d94:	91 c0       	rjmp	.+290    	; 0x1eb8 <DIO_ErrStateSetPinValue+0x20a>
			/*Group D*/
			case DIO_GroupD : CLR_BIT(PORTD_ITI , Copy_PinNumber ) ;break ;
    1d96:	a2 e3       	ldi	r26, 0x32	; 50
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e2 e3       	ldi	r30, 0x32	; 50
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	48 2f       	mov	r20, r24
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	02 2e       	mov	r0, r18
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <DIO_ErrStateSetPinValue+0x106>
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	0a 94       	dec	r0
    1db6:	e2 f7       	brpl	.-8      	; 0x1db0 <DIO_ErrStateSetPinValue+0x102>
    1db8:	80 95       	com	r24
    1dba:	84 23       	and	r24, r20
    1dbc:	8c 93       	st	X, r24
    1dbe:	7c c0       	rjmp	.+248    	; 0x1eb8 <DIO_ErrStateSetPinValue+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
    1dc0:	91 e0       	ldi	r25, 0x01	; 1
    1dc2:	9e 83       	std	Y+6, r25	; 0x06
    1dc4:	7d c0       	rjmp	.+250    	; 0x1ec0 <DIO_ErrStateSetPinValue+0x212>
			}
		}

		/*High -> write port = one */
		else if (Copy_ValueState == DIO_High )
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	81 30       	cpi	r24, 0x01	; 1
    1dca:	09 f0       	breq	.+2      	; 0x1dce <DIO_ErrStateSetPinValue+0x120>
    1dcc:	72 c0       	rjmp	.+228    	; 0x1eb2 <DIO_ErrStateSetPinValue+0x204>
		{
			switch(Copy_GroupNumber){
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	3d 83       	std	Y+5, r19	; 0x05
    1dd6:	2c 83       	std	Y+4, r18	; 0x04
    1dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dda:	9d 81       	ldd	r25, Y+5	; 0x05
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	91 05       	cpc	r25, r1
    1de0:	49 f1       	breq	.+82     	; 0x1e34 <DIO_ErrStateSetPinValue+0x186>
    1de2:	2c 81       	ldd	r18, Y+4	; 0x04
    1de4:	3d 81       	ldd	r19, Y+5	; 0x05
    1de6:	22 30       	cpi	r18, 0x02	; 2
    1de8:	31 05       	cpc	r19, r1
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <DIO_ErrStateSetPinValue+0x148>
    1dec:	8c 81       	ldd	r24, Y+4	; 0x04
    1dee:	9d 81       	ldd	r25, Y+5	; 0x05
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	61 f0       	breq	.+24     	; 0x1e0c <DIO_ErrStateSetPinValue+0x15e>
    1df4:	5b c0       	rjmp	.+182    	; 0x1eac <DIO_ErrStateSetPinValue+0x1fe>
    1df6:	2c 81       	ldd	r18, Y+4	; 0x04
    1df8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dfa:	22 30       	cpi	r18, 0x02	; 2
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	71 f1       	breq	.+92     	; 0x1e5c <DIO_ErrStateSetPinValue+0x1ae>
    1e00:	8c 81       	ldd	r24, Y+4	; 0x04
    1e02:	9d 81       	ldd	r25, Y+5	; 0x05
    1e04:	83 30       	cpi	r24, 0x03	; 3
    1e06:	91 05       	cpc	r25, r1
    1e08:	e9 f1       	breq	.+122    	; 0x1e84 <DIO_ErrStateSetPinValue+0x1d6>
    1e0a:	50 c0       	rjmp	.+160    	; 0x1eac <DIO_ErrStateSetPinValue+0x1fe>
			/*Group A*/
			case DIO_GroupA : SET_BIT(PORTA_ITI,Copy_PinNumber);break;
    1e0c:	ab e3       	ldi	r26, 0x3B	; 59
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	eb e3       	ldi	r30, 0x3B	; 59
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	48 2f       	mov	r20, r24
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	02 2e       	mov	r0, r18
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <DIO_ErrStateSetPinValue+0x17c>
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	0a 94       	dec	r0
    1e2c:	e2 f7       	brpl	.-8      	; 0x1e26 <DIO_ErrStateSetPinValue+0x178>
    1e2e:	84 2b       	or	r24, r20
    1e30:	8c 93       	st	X, r24
    1e32:	42 c0       	rjmp	.+132    	; 0x1eb8 <DIO_ErrStateSetPinValue+0x20a>
			/*Group B*/
			case DIO_GroupB : SET_BIT(PORTB_ITI,Copy_PinNumber);break;
    1e34:	a8 e3       	ldi	r26, 0x38	; 56
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e8 e3       	ldi	r30, 0x38	; 56
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	48 2f       	mov	r20, r24
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	02 2e       	mov	r0, r18
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <DIO_ErrStateSetPinValue+0x1a4>
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	0a 94       	dec	r0
    1e54:	e2 f7       	brpl	.-8      	; 0x1e4e <DIO_ErrStateSetPinValue+0x1a0>
    1e56:	84 2b       	or	r24, r20
    1e58:	8c 93       	st	X, r24
    1e5a:	2e c0       	rjmp	.+92     	; 0x1eb8 <DIO_ErrStateSetPinValue+0x20a>
			/*Group C*/
			case DIO_GroupC : SET_BIT(PORTC_ITI,Copy_PinNumber);break;
    1e5c:	a5 e3       	ldi	r26, 0x35	; 53
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e5 e3       	ldi	r30, 0x35	; 53
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	48 2f       	mov	r20, r24
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	02 2e       	mov	r0, r18
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <DIO_ErrStateSetPinValue+0x1cc>
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	0a 94       	dec	r0
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <DIO_ErrStateSetPinValue+0x1c8>
    1e7e:	84 2b       	or	r24, r20
    1e80:	8c 93       	st	X, r24
    1e82:	1a c0       	rjmp	.+52     	; 0x1eb8 <DIO_ErrStateSetPinValue+0x20a>
			/*Group D*/
			case DIO_GroupD : SET_BIT(PORTD_ITI,Copy_PinNumber);break;
    1e84:	a2 e3       	ldi	r26, 0x32	; 50
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e2 e3       	ldi	r30, 0x32	; 50
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	48 2f       	mov	r20, r24
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	02 2e       	mov	r0, r18
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <DIO_ErrStateSetPinValue+0x1f4>
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	0a 94       	dec	r0
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <DIO_ErrStateSetPinValue+0x1f0>
    1ea6:	84 2b       	or	r24, r20
    1ea8:	8c 93       	st	X, r24
    1eaa:	06 c0       	rjmp	.+12     	; 0x1eb8 <DIO_ErrStateSetPinValue+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
    1eac:	91 e0       	ldi	r25, 0x01	; 1
    1eae:	9e 83       	std	Y+6, r25	; 0x06
    1eb0:	07 c0       	rjmp	.+14     	; 0x1ec0 <DIO_ErrStateSetPinValue+0x212>
			}
		}

		else
		{
			return DirectionError ;
    1eb2:	23 e0       	ldi	r18, 0x03	; 3
    1eb4:	2e 83       	std	Y+6, r18	; 0x06
    1eb6:	04 c0       	rjmp	.+8      	; 0x1ec0 <DIO_ErrStateSetPinValue+0x212>
		}

		return NoError ;
    1eb8:	1e 82       	std	Y+6, r1	; 0x06
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <DIO_ErrStateSetPinValue+0x212>
	}
	else
	{
		return PinNumberError ;
    1ebc:	32 e0       	ldi	r19, 0x02	; 2
    1ebe:	3e 83       	std	Y+6, r19	; 0x06
    1ec0:	8e 81       	ldd	r24, Y+6	; 0x06
	}

}
    1ec2:	28 96       	adiw	r28, 0x08	; 8
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <DIO_ErrStateReadPinValue>:

ErrState  DIO_ErrStateReadPinValue(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber ,u8 *Result)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	27 97       	sbiw	r28, 0x07	; 7
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	6a 83       	std	Y+2, r22	; 0x02
    1eec:	5c 83       	std	Y+4, r21	; 0x04
    1eee:	4b 83       	std	Y+3, r20	; 0x03
	/*check on pin range from 0 to 7 */
	if (Copy_PinNumber>= Pin0 && Copy_PinNumber <=Pin7)
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	88 30       	cpi	r24, 0x08	; 8
    1ef4:	08 f0       	brcs	.+2      	; 0x1ef8 <DIO_ErrStateReadPinValue+0x24>
    1ef6:	76 c0       	rjmp	.+236    	; 0x1fe4 <DIO_ErrStateReadPinValue+0x110>
	{
		switch(Copy_GroupNumber)
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	3f 83       	std	Y+7, r19	; 0x07
    1f00:	2e 83       	std	Y+6, r18	; 0x06
    1f02:	4e 81       	ldd	r20, Y+6	; 0x06
    1f04:	5f 81       	ldd	r21, Y+7	; 0x07
    1f06:	41 30       	cpi	r20, 0x01	; 1
    1f08:	51 05       	cpc	r21, r1
    1f0a:	59 f1       	breq	.+86     	; 0x1f62 <DIO_ErrStateReadPinValue+0x8e>
    1f0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f10:	82 30       	cpi	r24, 0x02	; 2
    1f12:	91 05       	cpc	r25, r1
    1f14:	34 f4       	brge	.+12     	; 0x1f22 <DIO_ErrStateReadPinValue+0x4e>
    1f16:	2e 81       	ldd	r18, Y+6	; 0x06
    1f18:	3f 81       	ldd	r19, Y+7	; 0x07
    1f1a:	21 15       	cp	r18, r1
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	69 f0       	breq	.+26     	; 0x1f3a <DIO_ErrStateReadPinValue+0x66>
    1f20:	5c c0       	rjmp	.+184    	; 0x1fda <DIO_ErrStateReadPinValue+0x106>
    1f22:	4e 81       	ldd	r20, Y+6	; 0x06
    1f24:	5f 81       	ldd	r21, Y+7	; 0x07
    1f26:	42 30       	cpi	r20, 0x02	; 2
    1f28:	51 05       	cpc	r21, r1
    1f2a:	79 f1       	breq	.+94     	; 0x1f8a <DIO_ErrStateReadPinValue+0xb6>
    1f2c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f2e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f30:	83 30       	cpi	r24, 0x03	; 3
    1f32:	91 05       	cpc	r25, r1
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <DIO_ErrStateReadPinValue+0x64>
    1f36:	3d c0       	rjmp	.+122    	; 0x1fb2 <DIO_ErrStateReadPinValue+0xde>
    1f38:	50 c0       	rjmp	.+160    	; 0x1fda <DIO_ErrStateReadPinValue+0x106>
		{
		case DIO_GroupA: *Result=GET_BIT(PINA_ITI,Copy_PinNumber); break ;
    1f3a:	e9 e3       	ldi	r30, 0x39	; 57
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	88 2f       	mov	r24, r24
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	a9 01       	movw	r20, r18
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <DIO_ErrStateReadPinValue+0x7e>
    1f4e:	55 95       	asr	r21
    1f50:	47 95       	ror	r20
    1f52:	8a 95       	dec	r24
    1f54:	e2 f7       	brpl	.-8      	; 0x1f4e <DIO_ErrStateReadPinValue+0x7a>
    1f56:	ca 01       	movw	r24, r20
    1f58:	81 70       	andi	r24, 0x01	; 1
    1f5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f5e:	80 83       	st	Z, r24
    1f60:	3f c0       	rjmp	.+126    	; 0x1fe0 <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupB: *Result=GET_BIT(PINB_ITI,Copy_PinNumber); break ;
    1f62:	e6 e3       	ldi	r30, 0x36	; 54
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	88 2f       	mov	r24, r24
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	a9 01       	movw	r20, r18
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <DIO_ErrStateReadPinValue+0xa6>
    1f76:	55 95       	asr	r21
    1f78:	47 95       	ror	r20
    1f7a:	8a 95       	dec	r24
    1f7c:	e2 f7       	brpl	.-8      	; 0x1f76 <DIO_ErrStateReadPinValue+0xa2>
    1f7e:	ca 01       	movw	r24, r20
    1f80:	81 70       	andi	r24, 0x01	; 1
    1f82:	eb 81       	ldd	r30, Y+3	; 0x03
    1f84:	fc 81       	ldd	r31, Y+4	; 0x04
    1f86:	80 83       	st	Z, r24
    1f88:	2b c0       	rjmp	.+86     	; 0x1fe0 <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupC: *Result=GET_BIT(PINC_ITI,Copy_PinNumber); break ;
    1f8a:	e3 e3       	ldi	r30, 0x33	; 51
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	88 2f       	mov	r24, r24
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	a9 01       	movw	r20, r18
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <DIO_ErrStateReadPinValue+0xce>
    1f9e:	55 95       	asr	r21
    1fa0:	47 95       	ror	r20
    1fa2:	8a 95       	dec	r24
    1fa4:	e2 f7       	brpl	.-8      	; 0x1f9e <DIO_ErrStateReadPinValue+0xca>
    1fa6:	ca 01       	movw	r24, r20
    1fa8:	81 70       	andi	r24, 0x01	; 1
    1faa:	eb 81       	ldd	r30, Y+3	; 0x03
    1fac:	fc 81       	ldd	r31, Y+4	; 0x04
    1fae:	80 83       	st	Z, r24
    1fb0:	17 c0       	rjmp	.+46     	; 0x1fe0 <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupD: *Result=GET_BIT(PIND_ITI,Copy_PinNumber); break ;
    1fb2:	e0 e3       	ldi	r30, 0x30	; 48
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	88 2f       	mov	r24, r24
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	a9 01       	movw	r20, r18
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <DIO_ErrStateReadPinValue+0xf6>
    1fc6:	55 95       	asr	r21
    1fc8:	47 95       	ror	r20
    1fca:	8a 95       	dec	r24
    1fcc:	e2 f7       	brpl	.-8      	; 0x1fc6 <DIO_ErrStateReadPinValue+0xf2>
    1fce:	ca 01       	movw	r24, r20
    1fd0:	81 70       	andi	r24, 0x01	; 1
    1fd2:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd4:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd6:	80 83       	st	Z, r24
    1fd8:	03 c0       	rjmp	.+6      	; 0x1fe0 <DIO_ErrStateReadPinValue+0x10c>
		default:
			return GroupError ;
    1fda:	51 e0       	ldi	r21, 0x01	; 1
    1fdc:	5d 83       	std	Y+5, r21	; 0x05
    1fde:	04 c0       	rjmp	.+8      	; 0x1fe8 <DIO_ErrStateReadPinValue+0x114>
		}
		return NoError ;
    1fe0:	1d 82       	std	Y+5, r1	; 0x05
    1fe2:	02 c0       	rjmp	.+4      	; 0x1fe8 <DIO_ErrStateReadPinValue+0x114>
	}
	else
	{
		return PinNumberError ;
    1fe4:	82 e0       	ldi	r24, 0x02	; 2
    1fe6:	8d 83       	std	Y+5, r24	; 0x05
    1fe8:	8d 81       	ldd	r24, Y+5	; 0x05
	}

}
    1fea:	27 96       	adiw	r28, 0x07	; 7
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <DIO_ErrStateSetGroupDirection>:



//
ErrState  DIO_ErrStateSetGroupDirection(DIO_GroupNumber Copy_GroupNumber ,u8 Copy_DirectionState)
{
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	00 d0       	rcall	.+0      	; 0x2002 <DIO_ErrStateSetGroupDirection+0x6>
    2002:	00 d0       	rcall	.+0      	; 0x2004 <DIO_ErrStateSetGroupDirection+0x8>
    2004:	0f 92       	push	r0
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_DirectionState <= 0xff && Copy_DirectionState>=0x00)
	{
		switch(Copy_GroupNumber)
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	3d 83       	std	Y+5, r19	; 0x05
    2016:	2c 83       	std	Y+4, r18	; 0x04
    2018:	8c 81       	ldd	r24, Y+4	; 0x04
    201a:	9d 81       	ldd	r25, Y+5	; 0x05
    201c:	81 30       	cpi	r24, 0x01	; 1
    201e:	91 05       	cpc	r25, r1
    2020:	d1 f0       	breq	.+52     	; 0x2056 <DIO_ErrStateSetGroupDirection+0x5a>
    2022:	2c 81       	ldd	r18, Y+4	; 0x04
    2024:	3d 81       	ldd	r19, Y+5	; 0x05
    2026:	22 30       	cpi	r18, 0x02	; 2
    2028:	31 05       	cpc	r19, r1
    202a:	2c f4       	brge	.+10     	; 0x2036 <DIO_ErrStateSetGroupDirection+0x3a>
    202c:	8c 81       	ldd	r24, Y+4	; 0x04
    202e:	9d 81       	ldd	r25, Y+5	; 0x05
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	61 f0       	breq	.+24     	; 0x204c <DIO_ErrStateSetGroupDirection+0x50>
    2034:	1f c0       	rjmp	.+62     	; 0x2074 <DIO_ErrStateSetGroupDirection+0x78>
    2036:	2c 81       	ldd	r18, Y+4	; 0x04
    2038:	3d 81       	ldd	r19, Y+5	; 0x05
    203a:	22 30       	cpi	r18, 0x02	; 2
    203c:	31 05       	cpc	r19, r1
    203e:	81 f0       	breq	.+32     	; 0x2060 <DIO_ErrStateSetGroupDirection+0x64>
    2040:	8c 81       	ldd	r24, Y+4	; 0x04
    2042:	9d 81       	ldd	r25, Y+5	; 0x05
    2044:	83 30       	cpi	r24, 0x03	; 3
    2046:	91 05       	cpc	r25, r1
    2048:	81 f0       	breq	.+32     	; 0x206a <DIO_ErrStateSetGroupDirection+0x6e>
    204a:	14 c0       	rjmp	.+40     	; 0x2074 <DIO_ErrStateSetGroupDirection+0x78>
		{
		case DIO_GroupA: DDRA_ITI =  Copy_DirectionState ;break ;
    204c:	ea e3       	ldi	r30, 0x3A	; 58
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	80 83       	st	Z, r24
    2054:	12 c0       	rjmp	.+36     	; 0x207a <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupB: DDRB_ITI =  Copy_DirectionState ;break ;
    2056:	e7 e3       	ldi	r30, 0x37	; 55
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	80 83       	st	Z, r24
    205e:	0d c0       	rjmp	.+26     	; 0x207a <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupC: DDRC_ITI =  Copy_DirectionState ;break ;
    2060:	e4 e3       	ldi	r30, 0x34	; 52
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	80 83       	st	Z, r24
    2068:	08 c0       	rjmp	.+16     	; 0x207a <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupD: DDRD_ITI =  Copy_DirectionState ;break ;
    206a:	e1 e3       	ldi	r30, 0x31	; 49
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	80 83       	st	Z, r24
    2072:	03 c0       	rjmp	.+6      	; 0x207a <DIO_ErrStateSetGroupDirection+0x7e>
		default :
			return GroupError ;
    2074:	91 e0       	ldi	r25, 0x01	; 1
    2076:	9b 83       	std	Y+3, r25	; 0x03
    2078:	01 c0       	rjmp	.+2      	; 0x207c <DIO_ErrStateSetGroupDirection+0x80>
		}
		return NoError ;
    207a:	1b 82       	std	Y+3, r1	; 0x03
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	else
	{
		return DirectionRangError;
	}
}
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <DIO_ErrStateSetGroupValue>:
ErrState  DIO_ErrStateSetGroupValue(DIO_GroupNumber Copy_GroupNumber ,u8 Copy_ValueState)
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	00 d0       	rcall	.+0      	; 0x2094 <DIO_ErrStateSetGroupValue+0x6>
    2094:	00 d0       	rcall	.+0      	; 0x2096 <DIO_ErrStateSetGroupValue+0x8>
    2096:	0f 92       	push	r0
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_ValueState <= 0xff && Copy_ValueState>=0x00)
	{
		switch(Copy_GroupNumber)
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	3d 83       	std	Y+5, r19	; 0x05
    20a8:	2c 83       	std	Y+4, r18	; 0x04
    20aa:	8c 81       	ldd	r24, Y+4	; 0x04
    20ac:	9d 81       	ldd	r25, Y+5	; 0x05
    20ae:	81 30       	cpi	r24, 0x01	; 1
    20b0:	91 05       	cpc	r25, r1
    20b2:	d1 f0       	breq	.+52     	; 0x20e8 <DIO_ErrStateSetGroupValue+0x5a>
    20b4:	2c 81       	ldd	r18, Y+4	; 0x04
    20b6:	3d 81       	ldd	r19, Y+5	; 0x05
    20b8:	22 30       	cpi	r18, 0x02	; 2
    20ba:	31 05       	cpc	r19, r1
    20bc:	2c f4       	brge	.+10     	; 0x20c8 <DIO_ErrStateSetGroupValue+0x3a>
    20be:	8c 81       	ldd	r24, Y+4	; 0x04
    20c0:	9d 81       	ldd	r25, Y+5	; 0x05
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	61 f0       	breq	.+24     	; 0x20de <DIO_ErrStateSetGroupValue+0x50>
    20c6:	1f c0       	rjmp	.+62     	; 0x2106 <DIO_ErrStateSetGroupValue+0x78>
    20c8:	2c 81       	ldd	r18, Y+4	; 0x04
    20ca:	3d 81       	ldd	r19, Y+5	; 0x05
    20cc:	22 30       	cpi	r18, 0x02	; 2
    20ce:	31 05       	cpc	r19, r1
    20d0:	81 f0       	breq	.+32     	; 0x20f2 <DIO_ErrStateSetGroupValue+0x64>
    20d2:	8c 81       	ldd	r24, Y+4	; 0x04
    20d4:	9d 81       	ldd	r25, Y+5	; 0x05
    20d6:	83 30       	cpi	r24, 0x03	; 3
    20d8:	91 05       	cpc	r25, r1
    20da:	81 f0       	breq	.+32     	; 0x20fc <DIO_ErrStateSetGroupValue+0x6e>
    20dc:	14 c0       	rjmp	.+40     	; 0x2106 <DIO_ErrStateSetGroupValue+0x78>
		{
		case DIO_GroupA: PORTA_ITI =  Copy_ValueState ;break ;
    20de:	eb e3       	ldi	r30, 0x3B	; 59
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	80 83       	st	Z, r24
    20e6:	12 c0       	rjmp	.+36     	; 0x210c <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupB: PORTB_ITI =  Copy_ValueState ;break ;
    20e8:	e8 e3       	ldi	r30, 0x38	; 56
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	80 83       	st	Z, r24
    20f0:	0d c0       	rjmp	.+26     	; 0x210c <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupC: PORTC_ITI =  Copy_ValueState ;break ;
    20f2:	e5 e3       	ldi	r30, 0x35	; 53
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	80 83       	st	Z, r24
    20fa:	08 c0       	rjmp	.+16     	; 0x210c <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupD: PORTD_ITI =  Copy_ValueState ;break ;
    20fc:	e2 e3       	ldi	r30, 0x32	; 50
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	8a 81       	ldd	r24, Y+2	; 0x02
    2102:	80 83       	st	Z, r24
    2104:	03 c0       	rjmp	.+6      	; 0x210c <DIO_ErrStateSetGroupValue+0x7e>
		default :
			return GroupError ;
    2106:	91 e0       	ldi	r25, 0x01	; 1
    2108:	9b 83       	std	Y+3, r25	; 0x03
    210a:	01 c0       	rjmp	.+2      	; 0x210e <DIO_ErrStateSetGroupValue+0x80>
		}
		return NoError ;
    210c:	1b 82       	std	Y+3, r1	; 0x03
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
	else
	{
		return ValueRangError;
	}

}
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <DIO_ErrStateReadGroupValue>:
ErrState  DIO_ErrStateReadGroupValue(DIO_GroupNumber Copy_GroupNumber ,u8 *Result)
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	00 d0       	rcall	.+0      	; 0x2126 <DIO_ErrStateReadGroupValue+0x6>
    2126:	00 d0       	rcall	.+0      	; 0x2128 <DIO_ErrStateReadGroupValue+0x8>
    2128:	00 d0       	rcall	.+0      	; 0x212a <DIO_ErrStateReadGroupValue+0xa>
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	7b 83       	std	Y+3, r23	; 0x03
    2132:	6a 83       	std	Y+2, r22	; 0x02
	if(Result!=Null)
    2134:	8a 81       	ldd	r24, Y+2	; 0x02
    2136:	9b 81       	ldd	r25, Y+3	; 0x03
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	09 f4       	brne	.+2      	; 0x213e <DIO_ErrStateReadGroupValue+0x1e>
    213c:	40 c0       	rjmp	.+128    	; 0x21be <DIO_ErrStateReadGroupValue+0x9e>
	{
		switch(Copy_GroupNumber)
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	3e 83       	std	Y+6, r19	; 0x06
    2146:	2d 83       	std	Y+5, r18	; 0x05
    2148:	8d 81       	ldd	r24, Y+5	; 0x05
    214a:	9e 81       	ldd	r25, Y+6	; 0x06
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	91 05       	cpc	r25, r1
    2150:	e1 f0       	breq	.+56     	; 0x218a <DIO_ErrStateReadGroupValue+0x6a>
    2152:	2d 81       	ldd	r18, Y+5	; 0x05
    2154:	3e 81       	ldd	r19, Y+6	; 0x06
    2156:	22 30       	cpi	r18, 0x02	; 2
    2158:	31 05       	cpc	r19, r1
    215a:	2c f4       	brge	.+10     	; 0x2166 <DIO_ErrStateReadGroupValue+0x46>
    215c:	8d 81       	ldd	r24, Y+5	; 0x05
    215e:	9e 81       	ldd	r25, Y+6	; 0x06
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	61 f0       	breq	.+24     	; 0x217c <DIO_ErrStateReadGroupValue+0x5c>
    2164:	27 c0       	rjmp	.+78     	; 0x21b4 <DIO_ErrStateReadGroupValue+0x94>
    2166:	2d 81       	ldd	r18, Y+5	; 0x05
    2168:	3e 81       	ldd	r19, Y+6	; 0x06
    216a:	22 30       	cpi	r18, 0x02	; 2
    216c:	31 05       	cpc	r19, r1
    216e:	a1 f0       	breq	.+40     	; 0x2198 <DIO_ErrStateReadGroupValue+0x78>
    2170:	8d 81       	ldd	r24, Y+5	; 0x05
    2172:	9e 81       	ldd	r25, Y+6	; 0x06
    2174:	83 30       	cpi	r24, 0x03	; 3
    2176:	91 05       	cpc	r25, r1
    2178:	b1 f0       	breq	.+44     	; 0x21a6 <DIO_ErrStateReadGroupValue+0x86>
    217a:	1c c0       	rjmp	.+56     	; 0x21b4 <DIO_ErrStateReadGroupValue+0x94>
		{
		case DIO_GroupA: *Result = PINA_ITI ; break ;
    217c:	e9 e3       	ldi	r30, 0x39	; 57
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	ea 81       	ldd	r30, Y+2	; 0x02
    2184:	fb 81       	ldd	r31, Y+3	; 0x03
    2186:	80 83       	st	Z, r24
    2188:	18 c0       	rjmp	.+48     	; 0x21ba <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupB: *Result = PINB_ITI ; break ;
    218a:	e6 e3       	ldi	r30, 0x36	; 54
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	ea 81       	ldd	r30, Y+2	; 0x02
    2192:	fb 81       	ldd	r31, Y+3	; 0x03
    2194:	80 83       	st	Z, r24
    2196:	11 c0       	rjmp	.+34     	; 0x21ba <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupC: *Result = PINC_ITI ; break ;
    2198:	e3 e3       	ldi	r30, 0x33	; 51
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	ea 81       	ldd	r30, Y+2	; 0x02
    21a0:	fb 81       	ldd	r31, Y+3	; 0x03
    21a2:	80 83       	st	Z, r24
    21a4:	0a c0       	rjmp	.+20     	; 0x21ba <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupD: *Result = PIND_ITI ; break ;
    21a6:	e0 e3       	ldi	r30, 0x30	; 48
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	ea 81       	ldd	r30, Y+2	; 0x02
    21ae:	fb 81       	ldd	r31, Y+3	; 0x03
    21b0:	80 83       	st	Z, r24
    21b2:	03 c0       	rjmp	.+6      	; 0x21ba <DIO_ErrStateReadGroupValue+0x9a>
		default :
			return GroupError ;
    21b4:	91 e0       	ldi	r25, 0x01	; 1
    21b6:	9c 83       	std	Y+4, r25	; 0x04
    21b8:	04 c0       	rjmp	.+8      	; 0x21c2 <DIO_ErrStateReadGroupValue+0xa2>
		}
		return NoError ;
    21ba:	1c 82       	std	Y+4, r1	; 0x04
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <DIO_ErrStateReadGroupValue+0xa2>
	}
	else
	{
		return AddressError;
    21be:	25 e0       	ldi	r18, 0x05	; 5
    21c0:	2c 83       	std	Y+4, r18	; 0x04
    21c2:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    21c4:	26 96       	adiw	r28, 0x06	; 6
    21c6:	0f b6       	in	r0, 0x3f	; 63
    21c8:	f8 94       	cli
    21ca:	de bf       	out	0x3e, r29	; 62
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	cd bf       	out	0x3d, r28	; 61
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <ADC_init>:
#include "ADC_Interface.h"

void(*ISR_ptr)(void) = Null;

void ADC_init()
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
#if ADC_ENABLE
	// ADC Enable
	SET_BIT(ADCSRA,ADEN);
    21de:	a6 e2       	ldi	r26, 0x26	; 38
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e6 e2       	ldi	r30, 0x26	; 38
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	80 68       	ori	r24, 0x80	; 128
    21ea:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
	CLR_BIT(ADCSRA,ADPS1);
	SET_BIT(ADCSRA,ADPS0);
#elif ADC_PRESCALER == ADC_PRESCALER_64
	// Prescaler Configuration as 64 (8MHz / 64 = 125 KHz)
	SET_BIT(ADCSRA,ADPS2);
    21ec:	a6 e2       	ldi	r26, 0x26	; 38
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	e6 e2       	ldi	r30, 0x26	; 38
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	84 60       	ori	r24, 0x04	; 4
    21f8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
    21fa:	a6 e2       	ldi	r26, 0x26	; 38
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e6 e2       	ldi	r30, 0x26	; 38
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	82 60       	ori	r24, 0x02	; 2
    2206:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADPS0);
    2208:	a6 e2       	ldi	r26, 0x26	; 38
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e6 e2       	ldi	r30, 0x26	; 38
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	8e 7f       	andi	r24, 0xFE	; 254
    2214:	8c 93       	st	X, r24
	// Referance Voltage as Internal (2.56v)
	SET_BIT(ADMUX,REFS1);
	SET_BIT(ADMUX,REFS0);
#elif ADC_SOURCE == ADC_SOURCE_AVCC
	// Referance Voltage as AVCC with external capacitor at AREF pin
	CLR_BIT(ADMUX,REFS1);
    2216:	a7 e2       	ldi	r26, 0x27	; 39
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e7 e2       	ldi	r30, 0x27	; 39
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	8f 77       	andi	r24, 0x7F	; 127
    2222:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS0);
    2224:	a7 e2       	ldi	r26, 0x27	; 39
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e7 e2       	ldi	r30, 0x27	; 39
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	80 64       	ori	r24, 0x40	; 64
    2230:	8c 93       	st	X, r24
	// Referance Voltage as AREF, Internal Vref turned off
	CLR_BIT(ADMUX,REFS1);
	CLR_BIT(ADMUX,REFS0);
#endif
#endif
}
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <ADC_startConvertion>:

void ADC_startConvertion(adc_channel_type channel)
{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	00 d0       	rcall	.+0      	; 0x223e <ADC_startConvertion+0x6>
    223e:	0f 92       	push	r0
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	89 83       	std	Y+1, r24	; 0x01
	// start Conversation
	//ADCSRA |= (1<<ADSC);
	SET_BIT(ADCSRA,ADSC);
    2246:	a6 e2       	ldi	r26, 0x26	; 38
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e6 e2       	ldi	r30, 0x26	; 38
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	80 64       	ori	r24, 0x40	; 64
    2252:	8c 93       	st	X, r24
	// Enable Auto Trigger mode
	//SET_BIT(ADCSRA,ADATE);
	switch (channel) {
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	28 2f       	mov	r18, r24
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	3b 83       	std	Y+3, r19	; 0x03
    225c:	2a 83       	std	Y+2, r18	; 0x02
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	9b 81       	ldd	r25, Y+3	; 0x03
    2262:	83 30       	cpi	r24, 0x03	; 3
    2264:	91 05       	cpc	r25, r1
    2266:	09 f4       	brne	.+2      	; 0x226a <ADC_startConvertion+0x32>
    2268:	9b c0       	rjmp	.+310    	; 0x23a0 <ADC_startConvertion+0x168>
    226a:	2a 81       	ldd	r18, Y+2	; 0x02
    226c:	3b 81       	ldd	r19, Y+3	; 0x03
    226e:	24 30       	cpi	r18, 0x04	; 4
    2270:	31 05       	cpc	r19, r1
    2272:	8c f4       	brge	.+34     	; 0x2296 <ADC_startConvertion+0x5e>
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	9b 81       	ldd	r25, Y+3	; 0x03
    2278:	81 30       	cpi	r24, 0x01	; 1
    227a:	91 05       	cpc	r25, r1
    227c:	09 f4       	brne	.+2      	; 0x2280 <ADC_startConvertion+0x48>
    227e:	48 c0       	rjmp	.+144    	; 0x2310 <ADC_startConvertion+0xd8>
    2280:	2a 81       	ldd	r18, Y+2	; 0x02
    2282:	3b 81       	ldd	r19, Y+3	; 0x03
    2284:	22 30       	cpi	r18, 0x02	; 2
    2286:	31 05       	cpc	r19, r1
    2288:	0c f0       	brlt	.+2      	; 0x228c <ADC_startConvertion+0x54>
    228a:	66 c0       	rjmp	.+204    	; 0x2358 <ADC_startConvertion+0x120>
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	9b 81       	ldd	r25, Y+3	; 0x03
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	d1 f0       	breq	.+52     	; 0x22c8 <ADC_startConvertion+0x90>
    2294:	38 c1       	rjmp	.+624    	; 0x2506 <ADC_startConvertion+0x2ce>
    2296:	2a 81       	ldd	r18, Y+2	; 0x02
    2298:	3b 81       	ldd	r19, Y+3	; 0x03
    229a:	25 30       	cpi	r18, 0x05	; 5
    229c:	31 05       	cpc	r19, r1
    229e:	09 f4       	brne	.+2      	; 0x22a2 <ADC_startConvertion+0x6a>
    22a0:	c7 c0       	rjmp	.+398    	; 0x2430 <ADC_startConvertion+0x1f8>
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	9b 81       	ldd	r25, Y+3	; 0x03
    22a6:	85 30       	cpi	r24, 0x05	; 5
    22a8:	91 05       	cpc	r25, r1
    22aa:	0c f4       	brge	.+2      	; 0x22ae <ADC_startConvertion+0x76>
    22ac:	9d c0       	rjmp	.+314    	; 0x23e8 <ADC_startConvertion+0x1b0>
    22ae:	2a 81       	ldd	r18, Y+2	; 0x02
    22b0:	3b 81       	ldd	r19, Y+3	; 0x03
    22b2:	26 30       	cpi	r18, 0x06	; 6
    22b4:	31 05       	cpc	r19, r1
    22b6:	09 f4       	brne	.+2      	; 0x22ba <ADC_startConvertion+0x82>
    22b8:	df c0       	rjmp	.+446    	; 0x2478 <ADC_startConvertion+0x240>
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	9b 81       	ldd	r25, Y+3	; 0x03
    22be:	87 30       	cpi	r24, 0x07	; 7
    22c0:	91 05       	cpc	r25, r1
    22c2:	09 f4       	brne	.+2      	; 0x22c6 <ADC_startConvertion+0x8e>
    22c4:	fd c0       	rjmp	.+506    	; 0x24c0 <ADC_startConvertion+0x288>
    22c6:	1f c1       	rjmp	.+574    	; 0x2506 <ADC_startConvertion+0x2ce>
		case 0:
			// bits from 0 to 4 at ADMUX_Reg by default = 00000 refer to channel 0
			CLR_BIT(ADMUX, MUX0);
    22c8:	a7 e2       	ldi	r26, 0x27	; 39
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	e7 e2       	ldi	r30, 0x27	; 39
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	8e 7f       	andi	r24, 0xFE	; 254
    22d4:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX1);
    22d6:	a7 e2       	ldi	r26, 0x27	; 39
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e7 e2       	ldi	r30, 0x27	; 39
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	8d 7f       	andi	r24, 0xFD	; 253
    22e2:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX2);
    22e4:	a7 e2       	ldi	r26, 0x27	; 39
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e7 e2       	ldi	r30, 0x27	; 39
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	8b 7f       	andi	r24, 0xFB	; 251
    22f0:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX3);
    22f2:	a7 e2       	ldi	r26, 0x27	; 39
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e7 e2       	ldi	r30, 0x27	; 39
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	87 7f       	andi	r24, 0xF7	; 247
    22fe:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX4);
    2300:	a7 e2       	ldi	r26, 0x27	; 39
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	e7 e2       	ldi	r30, 0x27	; 39
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	8f 7e       	andi	r24, 0xEF	; 239
    230c:	8c 93       	st	X, r24
    230e:	fb c0       	rjmp	.+502    	; 0x2506 <ADC_startConvertion+0x2ce>
			break;
		case 1:
			// bits from 0 to 4 at ADMUX_Reg by default = 00001 refer to channel 1
			SET_BIT(ADMUX, MUX0);
    2310:	a7 e2       	ldi	r26, 0x27	; 39
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	e7 e2       	ldi	r30, 0x27	; 39
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	81 60       	ori	r24, 0x01	; 1
    231c:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX1);
    231e:	a7 e2       	ldi	r26, 0x27	; 39
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	e7 e2       	ldi	r30, 0x27	; 39
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	8d 7f       	andi	r24, 0xFD	; 253
    232a:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX2);
    232c:	a7 e2       	ldi	r26, 0x27	; 39
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	e7 e2       	ldi	r30, 0x27	; 39
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	8b 7f       	andi	r24, 0xFB	; 251
    2338:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX3);
    233a:	a7 e2       	ldi	r26, 0x27	; 39
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	e7 e2       	ldi	r30, 0x27	; 39
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	87 7f       	andi	r24, 0xF7	; 247
    2346:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX4);
    2348:	a7 e2       	ldi	r26, 0x27	; 39
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	e7 e2       	ldi	r30, 0x27	; 39
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	8f 7e       	andi	r24, 0xEF	; 239
    2354:	8c 93       	st	X, r24
    2356:	d7 c0       	rjmp	.+430    	; 0x2506 <ADC_startConvertion+0x2ce>
			break;
		case 2:
			// bits from 0 to 4 at ADMUX_Reg by default = 00010 refer to channel 2
			SET_BIT(ADMUX, MUX0);
    2358:	a7 e2       	ldi	r26, 0x27	; 39
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e7 e2       	ldi	r30, 0x27	; 39
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	81 60       	ori	r24, 0x01	; 1
    2364:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX1);
    2366:	a7 e2       	ldi	r26, 0x27	; 39
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	e7 e2       	ldi	r30, 0x27	; 39
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	8d 7f       	andi	r24, 0xFD	; 253
    2372:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX2);
    2374:	a7 e2       	ldi	r26, 0x27	; 39
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	e7 e2       	ldi	r30, 0x27	; 39
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	8b 7f       	andi	r24, 0xFB	; 251
    2380:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX3);
    2382:	a7 e2       	ldi	r26, 0x27	; 39
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	e7 e2       	ldi	r30, 0x27	; 39
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	87 7f       	andi	r24, 0xF7	; 247
    238e:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX4);
    2390:	a7 e2       	ldi	r26, 0x27	; 39
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	e7 e2       	ldi	r30, 0x27	; 39
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	8f 7e       	andi	r24, 0xEF	; 239
    239c:	8c 93       	st	X, r24
    239e:	b3 c0       	rjmp	.+358    	; 0x2506 <ADC_startConvertion+0x2ce>
			break;
		case 3:
			// bits from 0 to 4 at ADMUX_Reg by default = 00011 refer to channel 3
			SET_BIT(ADMUX, MUX0);
    23a0:	a7 e2       	ldi	r26, 0x27	; 39
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	e7 e2       	ldi	r30, 0x27	; 39
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	81 60       	ori	r24, 0x01	; 1
    23ac:	8c 93       	st	X, r24
			SET_BIT(ADMUX, MUX1);
    23ae:	a7 e2       	ldi	r26, 0x27	; 39
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	e7 e2       	ldi	r30, 0x27	; 39
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	82 60       	ori	r24, 0x02	; 2
    23ba:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX2);
    23bc:	a7 e2       	ldi	r26, 0x27	; 39
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	e7 e2       	ldi	r30, 0x27	; 39
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	8b 7f       	andi	r24, 0xFB	; 251
    23c8:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX3);
    23ca:	a7 e2       	ldi	r26, 0x27	; 39
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	e7 e2       	ldi	r30, 0x27	; 39
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	87 7f       	andi	r24, 0xF7	; 247
    23d6:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX4);
    23d8:	a7 e2       	ldi	r26, 0x27	; 39
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	e7 e2       	ldi	r30, 0x27	; 39
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	8f 7e       	andi	r24, 0xEF	; 239
    23e4:	8c 93       	st	X, r24
    23e6:	8f c0       	rjmp	.+286    	; 0x2506 <ADC_startConvertion+0x2ce>
			break;
		case 4:
			// bits from 0 to 4 at ADMUX_Reg by default = 00100 refer to channel 4
			CLR_BIT(ADMUX, MUX0);
    23e8:	a7 e2       	ldi	r26, 0x27	; 39
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e7 e2       	ldi	r30, 0x27	; 39
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	8e 7f       	andi	r24, 0xFE	; 254
    23f4:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX1);
    23f6:	a7 e2       	ldi	r26, 0x27	; 39
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e7 e2       	ldi	r30, 0x27	; 39
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	8d 7f       	andi	r24, 0xFD	; 253
    2402:	8c 93       	st	X, r24
			SET_BIT(ADMUX, MUX2);
    2404:	a7 e2       	ldi	r26, 0x27	; 39
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e7 e2       	ldi	r30, 0x27	; 39
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	84 60       	ori	r24, 0x04	; 4
    2410:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX3);
    2412:	a7 e2       	ldi	r26, 0x27	; 39
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e7 e2       	ldi	r30, 0x27	; 39
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	87 7f       	andi	r24, 0xF7	; 247
    241e:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX4);
    2420:	a7 e2       	ldi	r26, 0x27	; 39
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e7 e2       	ldi	r30, 0x27	; 39
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	8f 7e       	andi	r24, 0xEF	; 239
    242c:	8c 93       	st	X, r24
    242e:	6b c0       	rjmp	.+214    	; 0x2506 <ADC_startConvertion+0x2ce>
			break;
		case 5:
			// bits from 0 to 4 at ADMUX_Reg by default = 00101 refer to channel 5
			SET_BIT(ADMUX, MUX0);
    2430:	a7 e2       	ldi	r26, 0x27	; 39
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e7 e2       	ldi	r30, 0x27	; 39
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	81 60       	ori	r24, 0x01	; 1
    243c:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX1);
    243e:	a7 e2       	ldi	r26, 0x27	; 39
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e7 e2       	ldi	r30, 0x27	; 39
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	8d 7f       	andi	r24, 0xFD	; 253
    244a:	8c 93       	st	X, r24
			SET_BIT(ADMUX, MUX2);
    244c:	a7 e2       	ldi	r26, 0x27	; 39
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	e7 e2       	ldi	r30, 0x27	; 39
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	80 81       	ld	r24, Z
    2456:	84 60       	ori	r24, 0x04	; 4
    2458:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX3);
    245a:	a7 e2       	ldi	r26, 0x27	; 39
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e7 e2       	ldi	r30, 0x27	; 39
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	87 7f       	andi	r24, 0xF7	; 247
    2466:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX4);
    2468:	a7 e2       	ldi	r26, 0x27	; 39
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	e7 e2       	ldi	r30, 0x27	; 39
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	8f 7e       	andi	r24, 0xEF	; 239
    2474:	8c 93       	st	X, r24
    2476:	47 c0       	rjmp	.+142    	; 0x2506 <ADC_startConvertion+0x2ce>
			break;
		case 6:
			// bits from 0 to 4 at ADMUX_Reg by default = 00110 refer to channel 6
			CLR_BIT(ADMUX, MUX0);
    2478:	a7 e2       	ldi	r26, 0x27	; 39
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e7 e2       	ldi	r30, 0x27	; 39
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	8e 7f       	andi	r24, 0xFE	; 254
    2484:	8c 93       	st	X, r24
			SET_BIT(ADMUX, MUX1);
    2486:	a7 e2       	ldi	r26, 0x27	; 39
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	e7 e2       	ldi	r30, 0x27	; 39
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	82 60       	ori	r24, 0x02	; 2
    2492:	8c 93       	st	X, r24
			SET_BIT(ADMUX, MUX2);
    2494:	a7 e2       	ldi	r26, 0x27	; 39
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e7 e2       	ldi	r30, 0x27	; 39
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	84 60       	ori	r24, 0x04	; 4
    24a0:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX3);
    24a2:	a7 e2       	ldi	r26, 0x27	; 39
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e7 e2       	ldi	r30, 0x27	; 39
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	87 7f       	andi	r24, 0xF7	; 247
    24ae:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX4);
    24b0:	a7 e2       	ldi	r26, 0x27	; 39
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	e7 e2       	ldi	r30, 0x27	; 39
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	8f 7e       	andi	r24, 0xEF	; 239
    24bc:	8c 93       	st	X, r24
    24be:	23 c0       	rjmp	.+70     	; 0x2506 <ADC_startConvertion+0x2ce>
			break;
		case 7:
			// bits from 0 to 4 at ADMUX_Reg by default = 00111 refer to channel 7
			SET_BIT(ADMUX, MUX0);
    24c0:	a7 e2       	ldi	r26, 0x27	; 39
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e7 e2       	ldi	r30, 0x27	; 39
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	81 60       	ori	r24, 0x01	; 1
    24cc:	8c 93       	st	X, r24
			SET_BIT(ADMUX, MUX1);
    24ce:	a7 e2       	ldi	r26, 0x27	; 39
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	e7 e2       	ldi	r30, 0x27	; 39
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	82 60       	ori	r24, 0x02	; 2
    24da:	8c 93       	st	X, r24
			SET_BIT(ADMUX, MUX2);
    24dc:	a7 e2       	ldi	r26, 0x27	; 39
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	e7 e2       	ldi	r30, 0x27	; 39
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	84 60       	ori	r24, 0x04	; 4
    24e8:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX3);
    24ea:	a7 e2       	ldi	r26, 0x27	; 39
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e7 e2       	ldi	r30, 0x27	; 39
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	87 7f       	andi	r24, 0xF7	; 247
    24f6:	8c 93       	st	X, r24
			CLR_BIT(ADMUX, MUX4);
    24f8:	a7 e2       	ldi	r26, 0x27	; 39
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	e7 e2       	ldi	r30, 0x27	; 39
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	8f 7e       	andi	r24, 0xEF	; 239
    2504:	8c 93       	st	X, r24
			break;

		default : break;
	}

}
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <ADC_read_Polling>:
u16 ADC_read_Polling(void)
{
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	00 d0       	rcall	.+0      	; 0x2518 <ADC_read_Polling+0x6>
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62


	while( (GET_BIT(ADCSRA,ADIF)) == 0);
    251c:	e6 e2       	ldi	r30, 0x26	; 38
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	82 95       	swap	r24
    2524:	8f 70       	andi	r24, 0x0F	; 15
    2526:	88 2f       	mov	r24, r24
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	81 70       	andi	r24, 0x01	; 1
    252c:	90 70       	andi	r25, 0x00	; 0
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	a9 f3       	breq	.-22     	; 0x251c <ADC_read_Polling+0xa>
	SET_BIT(ADCSRA,ADIF);
    2532:	a6 e2       	ldi	r26, 0x26	; 38
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	e6 e2       	ldi	r30, 0x26	; 38
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	80 61       	ori	r24, 0x10	; 16
    253e:	8c 93       	st	X, r24
	//u16 result = ADCL ;
	u16 adc_result = ADCL; /* Read the low byte */
    2540:	e4 e2       	ldi	r30, 0x24	; 36
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	88 2f       	mov	r24, r24
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	9a 83       	std	Y+2, r25	; 0x02
    254c:	89 83       	std	Y+1, r24	; 0x01
	adc_result += (ADCH<<8); /* Read and add the high byte */
    254e:	e5 e2       	ldi	r30, 0x25	; 37
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	88 2f       	mov	r24, r24
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	98 2f       	mov	r25, r24
    255a:	88 27       	eor	r24, r24
    255c:	9c 01       	movw	r18, r24
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	9a 81       	ldd	r25, Y+2	; 0x02
    2562:	82 0f       	add	r24, r18
    2564:	93 1f       	adc	r25, r19
    2566:	9a 83       	std	Y+2, r25	; 0x02
    2568:	89 83       	std	Y+1, r24	; 0x01
	return adc_result;
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	08 95       	ret

00002578 <ADC_read>:
u16 ADC_read(void)
{
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
	return ADCL;
    2580:	e4 e2       	ldi	r30, 0x24	; 36
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	88 2f       	mov	r24, r24
    2588:	90 e0       	ldi	r25, 0x00	; 0
}
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <ADC_interruptEnable>:
void ADC_interruptEnable(void)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);
    2598:	a6 e2       	ldi	r26, 0x26	; 38
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e6 e2       	ldi	r30, 0x26	; 38
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	88 60       	ori	r24, 0x08	; 8
    25a4:	8c 93       	st	X, r24
	SET_BIT(SREG,7);
    25a6:	af e5       	ldi	r26, 0x5F	; 95
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	ef e5       	ldi	r30, 0x5F	; 95
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	80 68       	ori	r24, 0x80	; 128
    25b2:	8c 93       	st	X, r24
}
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <ADC_setCallbackFunc>:
void ADC_setCallbackFunc(void(*Fptr)(void))
{
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	00 d0       	rcall	.+0      	; 0x25c0 <ADC_setCallbackFunc+0x6>
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	9a 83       	std	Y+2, r25	; 0x02
    25c6:	89 83       	std	Y+1, r24	; 0x01

	ISR_ptr = Fptr;
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	9a 81       	ldd	r25, Y+2	; 0x02
    25cc:	90 93 9f 01 	sts	0x019F, r25
    25d0:	80 93 9e 01 	sts	0x019E, r24

}
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	08 95       	ret

000025de <__vector_16>:

void __vector_16(void)
{
    25de:	1f 92       	push	r1
    25e0:	0f 92       	push	r0
    25e2:	0f b6       	in	r0, 0x3f	; 63
    25e4:	0f 92       	push	r0
    25e6:	11 24       	eor	r1, r1
    25e8:	2f 93       	push	r18
    25ea:	3f 93       	push	r19
    25ec:	4f 93       	push	r20
    25ee:	5f 93       	push	r21
    25f0:	6f 93       	push	r22
    25f2:	7f 93       	push	r23
    25f4:	8f 93       	push	r24
    25f6:	9f 93       	push	r25
    25f8:	af 93       	push	r26
    25fa:	bf 93       	push	r27
    25fc:	ef 93       	push	r30
    25fe:	ff 93       	push	r31
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
	if(ISR_ptr != Null)
    2608:	80 91 9e 01 	lds	r24, 0x019E
    260c:	90 91 9f 01 	lds	r25, 0x019F
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	29 f0       	breq	.+10     	; 0x261e <__vector_16+0x40>
	{
		ISR_ptr();
    2614:	e0 91 9e 01 	lds	r30, 0x019E
    2618:	f0 91 9f 01 	lds	r31, 0x019F
    261c:	09 95       	icall
	}
}
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	ff 91       	pop	r31
    2624:	ef 91       	pop	r30
    2626:	bf 91       	pop	r27
    2628:	af 91       	pop	r26
    262a:	9f 91       	pop	r25
    262c:	8f 91       	pop	r24
    262e:	7f 91       	pop	r23
    2630:	6f 91       	pop	r22
    2632:	5f 91       	pop	r21
    2634:	4f 91       	pop	r20
    2636:	3f 91       	pop	r19
    2638:	2f 91       	pop	r18
    263a:	0f 90       	pop	r0
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	0f 90       	pop	r0
    2640:	1f 90       	pop	r1
    2642:	18 95       	reti

00002644 <SW_SwitchErrStateInit>:

#include "Switch_Interface.h"


SwitchErrState  SW_SwitchErrStateInit(Switch_Info * Switch)
{
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	00 d0       	rcall	.+0      	; 0x264a <SW_SwitchErrStateInit+0x6>
    264a:	00 d0       	rcall	.+0      	; 0x264c <SW_SwitchErrStateInit+0x8>
    264c:	0f 92       	push	r0
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	9a 83       	std	Y+2, r25	; 0x02
    2654:	89 83       	std	Y+1, r24	; 0x01

	DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_Input);
    2656:	e9 81       	ldd	r30, Y+1	; 0x01
    2658:	fa 81       	ldd	r31, Y+2	; 0x02
    265a:	80 81       	ld	r24, Z
    265c:	e9 81       	ldd	r30, Y+1	; 0x01
    265e:	fa 81       	ldd	r31, Y+2	; 0x02
    2660:	91 81       	ldd	r25, Z+1	; 0x01
    2662:	69 2f       	mov	r22, r25
    2664:	40 e0       	ldi	r20, 0x00	; 0
    2666:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
	if(Switch->ConnectionType == InternalPullUp)
    266a:	e9 81       	ldd	r30, Y+1	; 0x01
    266c:	fa 81       	ldd	r31, Y+2	; 0x02
    266e:	82 81       	ldd	r24, Z+2	; 0x02
    2670:	88 23       	and	r24, r24
    2672:	09 f0       	breq	.+2      	; 0x2676 <SW_SwitchErrStateInit+0x32>
    2674:	7d c0       	rjmp	.+250    	; 0x2770 <SW_SwitchErrStateInit+0x12c>
	{
		switch(Switch->SW_Group)
    2676:	e9 81       	ldd	r30, Y+1	; 0x01
    2678:	fa 81       	ldd	r31, Y+2	; 0x02
    267a:	80 81       	ld	r24, Z
    267c:	28 2f       	mov	r18, r24
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	3d 83       	std	Y+5, r19	; 0x05
    2682:	2c 83       	std	Y+4, r18	; 0x04
    2684:	8c 81       	ldd	r24, Y+4	; 0x04
    2686:	9d 81       	ldd	r25, Y+5	; 0x05
    2688:	81 30       	cpi	r24, 0x01	; 1
    268a:	91 05       	cpc	r25, r1
    268c:	61 f1       	breq	.+88     	; 0x26e6 <SW_SwitchErrStateInit+0xa2>
    268e:	2c 81       	ldd	r18, Y+4	; 0x04
    2690:	3d 81       	ldd	r19, Y+5	; 0x05
    2692:	22 30       	cpi	r18, 0x02	; 2
    2694:	31 05       	cpc	r19, r1
    2696:	2c f4       	brge	.+10     	; 0x26a2 <SW_SwitchErrStateInit+0x5e>
    2698:	8c 81       	ldd	r24, Y+4	; 0x04
    269a:	9d 81       	ldd	r25, Y+5	; 0x05
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	69 f0       	breq	.+26     	; 0x26ba <SW_SwitchErrStateInit+0x76>
    26a0:	64 c0       	rjmp	.+200    	; 0x276a <SW_SwitchErrStateInit+0x126>
    26a2:	2c 81       	ldd	r18, Y+4	; 0x04
    26a4:	3d 81       	ldd	r19, Y+5	; 0x05
    26a6:	22 30       	cpi	r18, 0x02	; 2
    26a8:	31 05       	cpc	r19, r1
    26aa:	99 f1       	breq	.+102    	; 0x2712 <SW_SwitchErrStateInit+0xce>
    26ac:	8c 81       	ldd	r24, Y+4	; 0x04
    26ae:	9d 81       	ldd	r25, Y+5	; 0x05
    26b0:	83 30       	cpi	r24, 0x03	; 3
    26b2:	91 05       	cpc	r25, r1
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <SW_SwitchErrStateInit+0x74>
    26b6:	43 c0       	rjmp	.+134    	; 0x273e <SW_SwitchErrStateInit+0xfa>
    26b8:	58 c0       	rjmp	.+176    	; 0x276a <SW_SwitchErrStateInit+0x126>
		{
			/*Group A*/
			case DIO_GroupA : SET_BIT(PORTA_ITI , Switch->SW_Pin ) ;
    26ba:	ab e3       	ldi	r26, 0x3B	; 59
    26bc:	b0 e0       	ldi	r27, 0x00	; 0
    26be:	eb e3       	ldi	r30, 0x3B	; 59
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 81       	ld	r24, Z
    26c4:	48 2f       	mov	r20, r24
    26c6:	e9 81       	ldd	r30, Y+1	; 0x01
    26c8:	fa 81       	ldd	r31, Y+2	; 0x02
    26ca:	81 81       	ldd	r24, Z+1	; 0x01
    26cc:	28 2f       	mov	r18, r24
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	02 2e       	mov	r0, r18
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <SW_SwitchErrStateInit+0x98>
    26d8:	88 0f       	add	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	0a 94       	dec	r0
    26de:	e2 f7       	brpl	.-8      	; 0x26d8 <SW_SwitchErrStateInit+0x94>
    26e0:	84 2b       	or	r24, r20
    26e2:	8c 93       	st	X, r24
    26e4:	45 c0       	rjmp	.+138    	; 0x2770 <SW_SwitchErrStateInit+0x12c>
			break ;
			/*Group B*/
			case DIO_GroupB : SET_BIT(PORTB_ITI , Switch->SW_Pin ) ;
    26e6:	a8 e3       	ldi	r26, 0x38	; 56
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	e8 e3       	ldi	r30, 0x38	; 56
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
    26f0:	48 2f       	mov	r20, r24
    26f2:	e9 81       	ldd	r30, Y+1	; 0x01
    26f4:	fa 81       	ldd	r31, Y+2	; 0x02
    26f6:	81 81       	ldd	r24, Z+1	; 0x01
    26f8:	28 2f       	mov	r18, r24
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	02 2e       	mov	r0, r18
    2702:	02 c0       	rjmp	.+4      	; 0x2708 <SW_SwitchErrStateInit+0xc4>
    2704:	88 0f       	add	r24, r24
    2706:	99 1f       	adc	r25, r25
    2708:	0a 94       	dec	r0
    270a:	e2 f7       	brpl	.-8      	; 0x2704 <SW_SwitchErrStateInit+0xc0>
    270c:	84 2b       	or	r24, r20
    270e:	8c 93       	st	X, r24
    2710:	2f c0       	rjmp	.+94     	; 0x2770 <SW_SwitchErrStateInit+0x12c>
			break ;
			/*Group C*/
			case DIO_GroupC : SET_BIT(PORTC_ITI , Switch->SW_Pin ) ;
    2712:	a5 e3       	ldi	r26, 0x35	; 53
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	e5 e3       	ldi	r30, 0x35	; 53
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
    271c:	48 2f       	mov	r20, r24
    271e:	e9 81       	ldd	r30, Y+1	; 0x01
    2720:	fa 81       	ldd	r31, Y+2	; 0x02
    2722:	81 81       	ldd	r24, Z+1	; 0x01
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	02 2e       	mov	r0, r18
    272e:	02 c0       	rjmp	.+4      	; 0x2734 <SW_SwitchErrStateInit+0xf0>
    2730:	88 0f       	add	r24, r24
    2732:	99 1f       	adc	r25, r25
    2734:	0a 94       	dec	r0
    2736:	e2 f7       	brpl	.-8      	; 0x2730 <SW_SwitchErrStateInit+0xec>
    2738:	84 2b       	or	r24, r20
    273a:	8c 93       	st	X, r24
    273c:	19 c0       	rjmp	.+50     	; 0x2770 <SW_SwitchErrStateInit+0x12c>
			break ;
			/*Group D*/
			case DIO_GroupD : SET_BIT(PORTD_ITI , Switch->SW_Pin ) ;
    273e:	a2 e3       	ldi	r26, 0x32	; 50
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	e2 e3       	ldi	r30, 0x32	; 50
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	48 2f       	mov	r20, r24
    274a:	e9 81       	ldd	r30, Y+1	; 0x01
    274c:	fa 81       	ldd	r31, Y+2	; 0x02
    274e:	81 81       	ldd	r24, Z+1	; 0x01
    2750:	28 2f       	mov	r18, r24
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	02 2e       	mov	r0, r18
    275a:	02 c0       	rjmp	.+4      	; 0x2760 <SW_SwitchErrStateInit+0x11c>
    275c:	88 0f       	add	r24, r24
    275e:	99 1f       	adc	r25, r25
    2760:	0a 94       	dec	r0
    2762:	e2 f7       	brpl	.-8      	; 0x275c <SW_SwitchErrStateInit+0x118>
    2764:	84 2b       	or	r24, r20
    2766:	8c 93       	st	X, r24
    2768:	03 c0       	rjmp	.+6      	; 0x2770 <SW_SwitchErrStateInit+0x12c>
			break ;
			/*Wrong*/
			default:
				return SwitchGroupNumError ;
    276a:	91 e0       	ldi	r25, 0x01	; 1
    276c:	9b 83       	std	Y+3, r25	; 0x03
    276e:	01 c0       	rjmp	.+2      	; 0x2772 <SW_SwitchErrStateInit+0x12e>
		}
	}
	return SwitchNoError;
    2770:	1b 82       	std	Y+3, r1	; 0x03
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	cf 91       	pop	r28
    2780:	df 91       	pop	r29
    2782:	08 95       	ret

00002784 <SW_SwitchErrStateGetState>:
SwitchErrState  SW_SwitchErrStateGetState(Switch_Info * Switch ,SwitchState * Result)
{
    2784:	df 93       	push	r29
    2786:	cf 93       	push	r28
    2788:	00 d0       	rcall	.+0      	; 0x278a <SW_SwitchErrStateGetState+0x6>
    278a:	00 d0       	rcall	.+0      	; 0x278c <SW_SwitchErrStateGetState+0x8>
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	9a 83       	std	Y+2, r25	; 0x02
    2792:	89 83       	std	Y+1, r24	; 0x01
    2794:	7c 83       	std	Y+4, r23	; 0x04
    2796:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,Result);
    2798:	e9 81       	ldd	r30, Y+1	; 0x01
    279a:	fa 81       	ldd	r31, Y+2	; 0x02
    279c:	80 81       	ld	r24, Z
    279e:	e9 81       	ldd	r30, Y+1	; 0x01
    27a0:	fa 81       	ldd	r31, Y+2	; 0x02
    27a2:	91 81       	ldd	r25, Z+1	; 0x01
    27a4:	2b 81       	ldd	r18, Y+3	; 0x03
    27a6:	3c 81       	ldd	r19, Y+4	; 0x04
    27a8:	69 2f       	mov	r22, r25
    27aa:	a9 01       	movw	r20, r18
    27ac:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <DIO_ErrStateReadPinValue>
	return SwitchNoError;
    27b0:	80 e0       	ldi	r24, 0x00	; 0
}
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	cf 91       	pop	r28
    27bc:	df 91       	pop	r29
    27be:	08 95       	ret

000027c0 <Stepper_StErrStateInit>:
#include "../../MCAL/DIO/DIO_Interface.h"

#include "Stepper_Interface.h"

StErrState  Stepper_StErrStateInit(Stper_info * Motor1)
{
    27c0:	df 93       	push	r29
    27c2:	cf 93       	push	r28
    27c4:	00 d0       	rcall	.+0      	; 0x27c6 <Stepper_StErrStateInit+0x6>
    27c6:	00 d0       	rcall	.+0      	; 0x27c8 <Stepper_StErrStateInit+0x8>
    27c8:	0f 92       	push	r0
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	9c 83       	std	Y+4, r25	; 0x04
    27d0:	8b 83       	std	Y+3, r24	; 0x03
	u8 flag = 0 ;
    27d2:	1a 82       	std	Y+2, r1	; 0x02
	ErrState  Res ;
	Res = DIO_ErrStateSetPinDirection(Motor1->Stper_Group ,Motor1->Stper_Blue ,DIO_Output );
    27d4:	eb 81       	ldd	r30, Y+3	; 0x03
    27d6:	fc 81       	ldd	r31, Y+4	; 0x04
    27d8:	80 81       	ld	r24, Z
    27da:	eb 81       	ldd	r30, Y+3	; 0x03
    27dc:	fc 81       	ldd	r31, Y+4	; 0x04
    27de:	91 81       	ldd	r25, Z+1	; 0x01
    27e0:	69 2f       	mov	r22, r25
    27e2:	41 e0       	ldi	r20, 0x01	; 1
    27e4:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
    27e8:	89 83       	std	Y+1, r24	; 0x01
	if(Res!=NoError){flag =1;}
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	88 23       	and	r24, r24
    27ee:	11 f0       	breq	.+4      	; 0x27f4 <Stepper_StErrStateInit+0x34>
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	8a 83       	std	Y+2, r24	; 0x02
	Res =DIO_ErrStateSetPinDirection(Motor1->Stper_Group ,Motor1->Stper_Pink ,DIO_Output );
    27f4:	eb 81       	ldd	r30, Y+3	; 0x03
    27f6:	fc 81       	ldd	r31, Y+4	; 0x04
    27f8:	80 81       	ld	r24, Z
    27fa:	eb 81       	ldd	r30, Y+3	; 0x03
    27fc:	fc 81       	ldd	r31, Y+4	; 0x04
    27fe:	92 81       	ldd	r25, Z+2	; 0x02
    2800:	69 2f       	mov	r22, r25
    2802:	41 e0       	ldi	r20, 0x01	; 1
    2804:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
    2808:	89 83       	std	Y+1, r24	; 0x01
	if(Res!=NoError){flag =1;}
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	88 23       	and	r24, r24
    280e:	11 f0       	breq	.+4      	; 0x2814 <Stepper_StErrStateInit+0x54>
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	8a 83       	std	Y+2, r24	; 0x02
	Res =DIO_ErrStateSetPinDirection(Motor1->Stper_Group ,Motor1->Stper_Yellow ,DIO_Output );
    2814:	eb 81       	ldd	r30, Y+3	; 0x03
    2816:	fc 81       	ldd	r31, Y+4	; 0x04
    2818:	80 81       	ld	r24, Z
    281a:	eb 81       	ldd	r30, Y+3	; 0x03
    281c:	fc 81       	ldd	r31, Y+4	; 0x04
    281e:	93 81       	ldd	r25, Z+3	; 0x03
    2820:	69 2f       	mov	r22, r25
    2822:	41 e0       	ldi	r20, 0x01	; 1
    2824:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
    2828:	89 83       	std	Y+1, r24	; 0x01
	if(Res!=NoError){flag =1;}
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	88 23       	and	r24, r24
    282e:	11 f0       	breq	.+4      	; 0x2834 <Stepper_StErrStateInit+0x74>
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	8a 83       	std	Y+2, r24	; 0x02
	Res =DIO_ErrStateSetPinDirection(Motor1->Stper_Group ,Motor1->Stper_Orange ,DIO_Output );
    2834:	eb 81       	ldd	r30, Y+3	; 0x03
    2836:	fc 81       	ldd	r31, Y+4	; 0x04
    2838:	80 81       	ld	r24, Z
    283a:	eb 81       	ldd	r30, Y+3	; 0x03
    283c:	fc 81       	ldd	r31, Y+4	; 0x04
    283e:	94 81       	ldd	r25, Z+4	; 0x04
    2840:	69 2f       	mov	r22, r25
    2842:	41 e0       	ldi	r20, 0x01	; 1
    2844:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
    2848:	89 83       	std	Y+1, r24	; 0x01
	if(Res!=NoError){flag =1;}
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	88 23       	and	r24, r24
    284e:	11 f0       	breq	.+4      	; 0x2854 <Stepper_StErrStateInit+0x94>
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	8a 83       	std	Y+2, r24	; 0x02
	if (flag == 1 )
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	81 30       	cpi	r24, 0x01	; 1
    2858:	19 f4       	brne	.+6      	; 0x2860 <Stepper_StErrStateInit+0xa0>
	{
		return SteperDirectionpinError ;
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	8d 83       	std	Y+5, r24	; 0x05
    285e:	01 c0       	rjmp	.+2      	; 0x2862 <Stepper_StErrStateInit+0xa2>
	}
	else
	{
		return SteperNoError ;
    2860:	1d 82       	std	Y+5, r1	; 0x05
    2862:	8d 81       	ldd	r24, Y+5	; 0x05
	}

}
    2864:	0f 90       	pop	r0
    2866:	0f 90       	pop	r0
    2868:	0f 90       	pop	r0
    286a:	0f 90       	pop	r0
    286c:	0f 90       	pop	r0
    286e:	cf 91       	pop	r28
    2870:	df 91       	pop	r29
    2872:	08 95       	ret

00002874 <Stepper_StErrStateControlMotorRotate>:

StErrState Stepper_StErrStateControlMotorRotate (Stper_info * Motor1 , u16 Copy_Degree)
{
    2874:	df 93       	push	r29
    2876:	cf 93       	push	r28
    2878:	cd b7       	in	r28, 0x3d	; 61
    287a:	de b7       	in	r29, 0x3e	; 62
    287c:	2b 97       	sbiw	r28, 0x0b	; 11
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	f8 94       	cli
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	0f be       	out	0x3f, r0	; 63
    2886:	cd bf       	out	0x3d, r28	; 61
    2888:	98 87       	std	Y+8, r25	; 0x08
    288a:	8f 83       	std	Y+7, r24	; 0x07
    288c:	7a 87       	std	Y+10, r23	; 0x0a
    288e:	69 87       	std	Y+9, r22	; 0x09
	u16 Local_NumberofSteps ;
	u16 Local_NumberofIterations ;
	u16 Local_counter ;
	if(Motor1->Direction_type == CW)
    2890:	ef 81       	ldd	r30, Y+7	; 0x07
    2892:	f8 85       	ldd	r31, Y+8	; 0x08
    2894:	86 81       	ldd	r24, Z+6	; 0x06
    2896:	88 23       	and	r24, r24
    2898:	09 f0       	breq	.+2      	; 0x289c <Stepper_StErrStateControlMotorRotate+0x28>
    289a:	97 c0       	rjmp	.+302    	; 0x29ca <Stepper_StErrStateControlMotorRotate+0x156>
	{
		if (Motor1->TypesOfStpe == FullStep)
    289c:	ef 81       	ldd	r30, Y+7	; 0x07
    289e:	f8 85       	ldd	r31, Y+8	; 0x08
    28a0:	85 81       	ldd	r24, Z+5	; 0x05
    28a2:	84 30       	cpi	r24, 0x04	; 4
    28a4:	09 f0       	breq	.+2      	; 0x28a8 <Stepper_StErrStateControlMotorRotate+0x34>
    28a6:	43 c0       	rjmp	.+134    	; 0x292e <Stepper_StErrStateControlMotorRotate+0xba>
		{
			Local_NumberofSteps = (Copy_Degree / DegreeforfullStep)+1 ;
    28a8:	89 85       	ldd	r24, Y+9	; 0x09
    28aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ac:	cc 01       	movw	r24, r24
    28ae:	a0 e0       	ldi	r26, 0x00	; 0
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	bc 01       	movw	r22, r24
    28b4:	cd 01       	movw	r24, r26
    28b6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	bc 01       	movw	r22, r24
    28c0:	cd 01       	movw	r24, r26
    28c2:	23 eb       	ldi	r18, 0xB3	; 179
    28c4:	3a ee       	ldi	r19, 0xEA	; 234
    28c6:	43 e3       	ldi	r20, 0x33	; 51
    28c8:	5e e3       	ldi	r21, 0x3E	; 62
    28ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	bc 01       	movw	r22, r24
    28d4:	cd 01       	movw	r24, r26
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	40 e8       	ldi	r20, 0x80	; 128
    28dc:	5f e3       	ldi	r21, 0x3F	; 63
    28de:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	bc 01       	movw	r22, r24
    28e8:	cd 01       	movw	r24, r26
    28ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	9e 83       	std	Y+6, r25	; 0x06
    28f4:	8d 83       	std	Y+5, r24	; 0x05
			Local_NumberofIterations = Local_NumberofSteps / FullStep ;
    28f6:	8d 81       	ldd	r24, Y+5	; 0x05
    28f8:	9e 81       	ldd	r25, Y+6	; 0x06
    28fa:	96 95       	lsr	r25
    28fc:	87 95       	ror	r24
    28fe:	96 95       	lsr	r25
    2900:	87 95       	ror	r24
    2902:	9c 83       	std	Y+4, r25	; 0x04
    2904:	8b 83       	std	Y+3, r24	; 0x03
			for (Local_counter =  0 ; Local_counter < Local_NumberofIterations ; Local_counter++)
    2906:	1a 82       	std	Y+2, r1	; 0x02
    2908:	19 82       	std	Y+1, r1	; 0x01
    290a:	09 c0       	rjmp	.+18     	; 0x291e <Stepper_StErrStateControlMotorRotate+0xaa>
			{
				Stepper_voidCWFullSteps(Motor1);
    290c:	8f 81       	ldd	r24, Y+7	; 0x07
    290e:	98 85       	ldd	r25, Y+8	; 0x08
    2910:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Stepper_voidCWFullSteps>
	{
		if (Motor1->TypesOfStpe == FullStep)
		{
			Local_NumberofSteps = (Copy_Degree / DegreeforfullStep)+1 ;
			Local_NumberofIterations = Local_NumberofSteps / FullStep ;
			for (Local_counter =  0 ; Local_counter < Local_NumberofIterations ; Local_counter++)
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	9a 81       	ldd	r25, Y+2	; 0x02
    2918:	01 96       	adiw	r24, 0x01	; 1
    291a:	9a 83       	std	Y+2, r25	; 0x02
    291c:	89 83       	std	Y+1, r24	; 0x01
    291e:	29 81       	ldd	r18, Y+1	; 0x01
    2920:	3a 81       	ldd	r19, Y+2	; 0x02
    2922:	8b 81       	ldd	r24, Y+3	; 0x03
    2924:	9c 81       	ldd	r25, Y+4	; 0x04
    2926:	28 17       	cp	r18, r24
    2928:	39 07       	cpc	r19, r25
    292a:	80 f3       	brcs	.-32     	; 0x290c <Stepper_StErrStateControlMotorRotate+0x98>
    292c:	ee c0       	rjmp	.+476    	; 0x2b0a <Stepper_StErrStateControlMotorRotate+0x296>
			{
				Stepper_voidCWFullSteps(Motor1);
			}

		}
		else if (Motor1->TypesOfStpe == HalfStep)
    292e:	ef 81       	ldd	r30, Y+7	; 0x07
    2930:	f8 85       	ldd	r31, Y+8	; 0x08
    2932:	85 81       	ldd	r24, Z+5	; 0x05
    2934:	88 30       	cpi	r24, 0x08	; 8
    2936:	09 f0       	breq	.+2      	; 0x293a <Stepper_StErrStateControlMotorRotate+0xc6>
    2938:	45 c0       	rjmp	.+138    	; 0x29c4 <Stepper_StErrStateControlMotorRotate+0x150>
		{
			Local_NumberofSteps = (Copy_Degree / DegreeforHalfStep)+1 ;
    293a:	89 85       	ldd	r24, Y+9	; 0x09
    293c:	9a 85       	ldd	r25, Y+10	; 0x0a
    293e:	cc 01       	movw	r24, r24
    2940:	a0 e0       	ldi	r26, 0x00	; 0
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	bc 01       	movw	r22, r24
    2946:	cd 01       	movw	r24, r26
    2948:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	bc 01       	movw	r22, r24
    2952:	cd 01       	movw	r24, r26
    2954:	2c ea       	ldi	r18, 0xAC	; 172
    2956:	3f ef       	ldi	r19, 0xFF	; 255
    2958:	43 eb       	ldi	r20, 0xB3	; 179
    295a:	5d e3       	ldi	r21, 0x3D	; 61
    295c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	bc 01       	movw	r22, r24
    2966:	cd 01       	movw	r24, r26
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	40 e8       	ldi	r20, 0x80	; 128
    296e:	5f e3       	ldi	r21, 0x3F	; 63
    2970:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	bc 01       	movw	r22, r24
    297a:	cd 01       	movw	r24, r26
    297c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	9e 83       	std	Y+6, r25	; 0x06
    2986:	8d 83       	std	Y+5, r24	; 0x05
			Local_NumberofIterations = Local_NumberofSteps / HalfStep ;
    2988:	8d 81       	ldd	r24, Y+5	; 0x05
    298a:	9e 81       	ldd	r25, Y+6	; 0x06
    298c:	96 95       	lsr	r25
    298e:	87 95       	ror	r24
    2990:	96 95       	lsr	r25
    2992:	87 95       	ror	r24
    2994:	96 95       	lsr	r25
    2996:	87 95       	ror	r24
    2998:	9c 83       	std	Y+4, r25	; 0x04
    299a:	8b 83       	std	Y+3, r24	; 0x03
			for (Local_counter =  0 ; Local_counter < Local_NumberofIterations ; Local_counter++)
    299c:	1a 82       	std	Y+2, r1	; 0x02
    299e:	19 82       	std	Y+1, r1	; 0x01
    29a0:	09 c0       	rjmp	.+18     	; 0x29b4 <Stepper_StErrStateControlMotorRotate+0x140>
			{

				Stepper_voidCWHalfSteps(Motor1);
    29a2:	8f 81       	ldd	r24, Y+7	; 0x07
    29a4:	98 85       	ldd	r25, Y+8	; 0x08
    29a6:	0e 94 8a 1a 	call	0x3514	; 0x3514 <Stepper_voidCWHalfSteps>
		}
		else if (Motor1->TypesOfStpe == HalfStep)
		{
			Local_NumberofSteps = (Copy_Degree / DegreeforHalfStep)+1 ;
			Local_NumberofIterations = Local_NumberofSteps / HalfStep ;
			for (Local_counter =  0 ; Local_counter < Local_NumberofIterations ; Local_counter++)
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	9a 81       	ldd	r25, Y+2	; 0x02
    29ae:	01 96       	adiw	r24, 0x01	; 1
    29b0:	9a 83       	std	Y+2, r25	; 0x02
    29b2:	89 83       	std	Y+1, r24	; 0x01
    29b4:	29 81       	ldd	r18, Y+1	; 0x01
    29b6:	3a 81       	ldd	r19, Y+2	; 0x02
    29b8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ba:	9c 81       	ldd	r25, Y+4	; 0x04
    29bc:	28 17       	cp	r18, r24
    29be:	39 07       	cpc	r19, r25
    29c0:	80 f3       	brcs	.-32     	; 0x29a2 <Stepper_StErrStateControlMotorRotate+0x12e>
    29c2:	a3 c0       	rjmp	.+326    	; 0x2b0a <Stepper_StErrStateControlMotorRotate+0x296>
				Stepper_voidCWHalfSteps(Motor1);
			}
		}
		else
		{
			return SteperTypeStepError ;
    29c4:	83 e0       	ldi	r24, 0x03	; 3
    29c6:	8b 87       	std	Y+11, r24	; 0x0b
    29c8:	a1 c0       	rjmp	.+322    	; 0x2b0c <Stepper_StErrStateControlMotorRotate+0x298>
		}

	}
	else if (Motor1->Direction_type == CCW)
    29ca:	ef 81       	ldd	r30, Y+7	; 0x07
    29cc:	f8 85       	ldd	r31, Y+8	; 0x08
    29ce:	86 81       	ldd	r24, Z+6	; 0x06
    29d0:	81 30       	cpi	r24, 0x01	; 1
    29d2:	09 f0       	breq	.+2      	; 0x29d6 <Stepper_StErrStateControlMotorRotate+0x162>
    29d4:	97 c0       	rjmp	.+302    	; 0x2b04 <Stepper_StErrStateControlMotorRotate+0x290>
	{
		if (Motor1->TypesOfStpe == FullStep)
    29d6:	ef 81       	ldd	r30, Y+7	; 0x07
    29d8:	f8 85       	ldd	r31, Y+8	; 0x08
    29da:	85 81       	ldd	r24, Z+5	; 0x05
    29dc:	84 30       	cpi	r24, 0x04	; 4
    29de:	09 f0       	breq	.+2      	; 0x29e2 <Stepper_StErrStateControlMotorRotate+0x16e>
    29e0:	43 c0       	rjmp	.+134    	; 0x2a68 <Stepper_StErrStateControlMotorRotate+0x1f4>
		{
			Local_NumberofSteps = (Copy_Degree / DegreeforfullStep)+1 ;
    29e2:	89 85       	ldd	r24, Y+9	; 0x09
    29e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e6:	cc 01       	movw	r24, r24
    29e8:	a0 e0       	ldi	r26, 0x00	; 0
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	bc 01       	movw	r22, r24
    29ee:	cd 01       	movw	r24, r26
    29f0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	bc 01       	movw	r22, r24
    29fa:	cd 01       	movw	r24, r26
    29fc:	23 eb       	ldi	r18, 0xB3	; 179
    29fe:	3a ee       	ldi	r19, 0xEA	; 234
    2a00:	43 e3       	ldi	r20, 0x33	; 51
    2a02:	5e e3       	ldi	r21, 0x3E	; 62
    2a04:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	bc 01       	movw	r22, r24
    2a0e:	cd 01       	movw	r24, r26
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	40 e8       	ldi	r20, 0x80	; 128
    2a16:	5f e3       	ldi	r21, 0x3F	; 63
    2a18:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	bc 01       	movw	r22, r24
    2a22:	cd 01       	movw	r24, r26
    2a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	9e 83       	std	Y+6, r25	; 0x06
    2a2e:	8d 83       	std	Y+5, r24	; 0x05
			Local_NumberofIterations = Local_NumberofSteps / FullStep ;
    2a30:	8d 81       	ldd	r24, Y+5	; 0x05
    2a32:	9e 81       	ldd	r25, Y+6	; 0x06
    2a34:	96 95       	lsr	r25
    2a36:	87 95       	ror	r24
    2a38:	96 95       	lsr	r25
    2a3a:	87 95       	ror	r24
    2a3c:	9c 83       	std	Y+4, r25	; 0x04
    2a3e:	8b 83       	std	Y+3, r24	; 0x03
			for (Local_counter =  0 ; Local_counter < Local_NumberofIterations ; Local_counter++)
    2a40:	1a 82       	std	Y+2, r1	; 0x02
    2a42:	19 82       	std	Y+1, r1	; 0x01
    2a44:	09 c0       	rjmp	.+18     	; 0x2a58 <Stepper_StErrStateControlMotorRotate+0x1e4>
			{

				Stepper_voidCCWFullSteps(Motor1);
    2a46:	8f 81       	ldd	r24, Y+7	; 0x07
    2a48:	98 85       	ldd	r25, Y+8	; 0x08
    2a4a:	0e 94 0d 18 	call	0x301a	; 0x301a <Stepper_voidCCWFullSteps>
	{
		if (Motor1->TypesOfStpe == FullStep)
		{
			Local_NumberofSteps = (Copy_Degree / DegreeforfullStep)+1 ;
			Local_NumberofIterations = Local_NumberofSteps / FullStep ;
			for (Local_counter =  0 ; Local_counter < Local_NumberofIterations ; Local_counter++)
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	9a 81       	ldd	r25, Y+2	; 0x02
    2a52:	01 96       	adiw	r24, 0x01	; 1
    2a54:	9a 83       	std	Y+2, r25	; 0x02
    2a56:	89 83       	std	Y+1, r24	; 0x01
    2a58:	29 81       	ldd	r18, Y+1	; 0x01
    2a5a:	3a 81       	ldd	r19, Y+2	; 0x02
    2a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a60:	28 17       	cp	r18, r24
    2a62:	39 07       	cpc	r19, r25
    2a64:	80 f3       	brcs	.-32     	; 0x2a46 <Stepper_StErrStateControlMotorRotate+0x1d2>
    2a66:	51 c0       	rjmp	.+162    	; 0x2b0a <Stepper_StErrStateControlMotorRotate+0x296>

				Stepper_voidCCWFullSteps(Motor1);
			}

		}
		else if (Motor1->TypesOfStpe == HalfStep)
    2a68:	ef 81       	ldd	r30, Y+7	; 0x07
    2a6a:	f8 85       	ldd	r31, Y+8	; 0x08
    2a6c:	85 81       	ldd	r24, Z+5	; 0x05
    2a6e:	88 30       	cpi	r24, 0x08	; 8
    2a70:	09 f0       	breq	.+2      	; 0x2a74 <Stepper_StErrStateControlMotorRotate+0x200>
    2a72:	45 c0       	rjmp	.+138    	; 0x2afe <Stepper_StErrStateControlMotorRotate+0x28a>
		{
			Local_NumberofSteps = (Copy_Degree / DegreeforHalfStep)+1 ;
    2a74:	89 85       	ldd	r24, Y+9	; 0x09
    2a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a78:	cc 01       	movw	r24, r24
    2a7a:	a0 e0       	ldi	r26, 0x00	; 0
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	bc 01       	movw	r22, r24
    2a80:	cd 01       	movw	r24, r26
    2a82:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	bc 01       	movw	r22, r24
    2a8c:	cd 01       	movw	r24, r26
    2a8e:	2c ea       	ldi	r18, 0xAC	; 172
    2a90:	3f ef       	ldi	r19, 0xFF	; 255
    2a92:	43 eb       	ldi	r20, 0xB3	; 179
    2a94:	5d e3       	ldi	r21, 0x3D	; 61
    2a96:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	bc 01       	movw	r22, r24
    2aa0:	cd 01       	movw	r24, r26
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e8       	ldi	r20, 0x80	; 128
    2aa8:	5f e3       	ldi	r21, 0x3F	; 63
    2aaa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	bc 01       	movw	r22, r24
    2ab4:	cd 01       	movw	r24, r26
    2ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	9e 83       	std	Y+6, r25	; 0x06
    2ac0:	8d 83       	std	Y+5, r24	; 0x05
			Local_NumberofIterations = Local_NumberofSteps / HalfStep ;
    2ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac6:	96 95       	lsr	r25
    2ac8:	87 95       	ror	r24
    2aca:	96 95       	lsr	r25
    2acc:	87 95       	ror	r24
    2ace:	96 95       	lsr	r25
    2ad0:	87 95       	ror	r24
    2ad2:	9c 83       	std	Y+4, r25	; 0x04
    2ad4:	8b 83       	std	Y+3, r24	; 0x03
			for (Local_counter =  0 ; Local_counter < Local_NumberofIterations ; Local_counter++)
    2ad6:	1a 82       	std	Y+2, r1	; 0x02
    2ad8:	19 82       	std	Y+1, r1	; 0x01
    2ada:	09 c0       	rjmp	.+18     	; 0x2aee <Stepper_StErrStateControlMotorRotate+0x27a>
			{

				Stepper_voidCCWHalfSteps(Motor1);
    2adc:	8f 81       	ldd	r24, Y+7	; 0x07
    2ade:	98 85       	ldd	r25, Y+8	; 0x08
    2ae0:	0e 94 4e 21 	call	0x429c	; 0x429c <Stepper_voidCCWHalfSteps>
		}
		else if (Motor1->TypesOfStpe == HalfStep)
		{
			Local_NumberofSteps = (Copy_Degree / DegreeforHalfStep)+1 ;
			Local_NumberofIterations = Local_NumberofSteps / HalfStep ;
			for (Local_counter =  0 ; Local_counter < Local_NumberofIterations ; Local_counter++)
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae8:	01 96       	adiw	r24, 0x01	; 1
    2aea:	9a 83       	std	Y+2, r25	; 0x02
    2aec:	89 83       	std	Y+1, r24	; 0x01
    2aee:	29 81       	ldd	r18, Y+1	; 0x01
    2af0:	3a 81       	ldd	r19, Y+2	; 0x02
    2af2:	8b 81       	ldd	r24, Y+3	; 0x03
    2af4:	9c 81       	ldd	r25, Y+4	; 0x04
    2af6:	28 17       	cp	r18, r24
    2af8:	39 07       	cpc	r19, r25
    2afa:	80 f3       	brcs	.-32     	; 0x2adc <Stepper_StErrStateControlMotorRotate+0x268>
    2afc:	06 c0       	rjmp	.+12     	; 0x2b0a <Stepper_StErrStateControlMotorRotate+0x296>
				Stepper_voidCCWHalfSteps(Motor1);
			}
		}
		else
		{
			return SteperTypeStepError ;
    2afe:	83 e0       	ldi	r24, 0x03	; 3
    2b00:	8b 87       	std	Y+11, r24	; 0x0b
    2b02:	04 c0       	rjmp	.+8      	; 0x2b0c <Stepper_StErrStateControlMotorRotate+0x298>
		}

	}
	else
	{
		return SteperDirectionTypeError ;
    2b04:	82 e0       	ldi	r24, 0x02	; 2
    2b06:	8b 87       	std	Y+11, r24	; 0x0b
    2b08:	01 c0       	rjmp	.+2      	; 0x2b0c <Stepper_StErrStateControlMotorRotate+0x298>
	}
	return SteperNoError ;
    2b0a:	1b 86       	std	Y+11, r1	; 0x0b
    2b0c:	8b 85       	ldd	r24, Y+11	; 0x0b

}
    2b0e:	2b 96       	adiw	r28, 0x0b	; 11
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	f8 94       	cli
    2b14:	de bf       	out	0x3e, r29	; 62
    2b16:	0f be       	out	0x3f, r0	; 63
    2b18:	cd bf       	out	0x3d, r28	; 61
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	08 95       	ret

00002b20 <Stepper_voidCWFullSteps>:


static void  Stepper_voidCWFullSteps(Stper_info * Motor1)
{
    2b20:	df 93       	push	r29
    2b22:	cf 93       	push	r28
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
    2b28:	ea 97       	sbiw	r28, 0x3a	; 58
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	f8 94       	cli
    2b2e:	de bf       	out	0x3e, r29	; 62
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	cd bf       	out	0x3d, r28	; 61
    2b34:	9a af       	std	Y+58, r25	; 0x3a
    2b36:	89 af       	std	Y+57, r24	; 0x39
	/*the Blue is Low  and all pin is high */
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_Low);
    2b38:	e9 ad       	ldd	r30, Y+57	; 0x39
    2b3a:	fa ad       	ldd	r31, Y+58	; 0x3a
    2b3c:	80 81       	ld	r24, Z
    2b3e:	e9 ad       	ldd	r30, Y+57	; 0x39
    2b40:	fa ad       	ldd	r31, Y+58	; 0x3a
    2b42:	91 81       	ldd	r25, Z+1	; 0x01
    2b44:	69 2f       	mov	r22, r25
    2b46:	40 e0       	ldi	r20, 0x00	; 0
    2b48:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_High);
    2b4c:	e9 ad       	ldd	r30, Y+57	; 0x39
    2b4e:	fa ad       	ldd	r31, Y+58	; 0x3a
    2b50:	80 81       	ld	r24, Z
    2b52:	e9 ad       	ldd	r30, Y+57	; 0x39
    2b54:	fa ad       	ldd	r31, Y+58	; 0x3a
    2b56:	92 81       	ldd	r25, Z+2	; 0x02
    2b58:	69 2f       	mov	r22, r25
    2b5a:	41 e0       	ldi	r20, 0x01	; 1
    2b5c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_High);
    2b60:	e9 ad       	ldd	r30, Y+57	; 0x39
    2b62:	fa ad       	ldd	r31, Y+58	; 0x3a
    2b64:	80 81       	ld	r24, Z
    2b66:	e9 ad       	ldd	r30, Y+57	; 0x39
    2b68:	fa ad       	ldd	r31, Y+58	; 0x3a
    2b6a:	93 81       	ldd	r25, Z+3	; 0x03
    2b6c:	69 2f       	mov	r22, r25
    2b6e:	41 e0       	ldi	r20, 0x01	; 1
    2b70:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_High);
    2b74:	e9 ad       	ldd	r30, Y+57	; 0x39
    2b76:	fa ad       	ldd	r31, Y+58	; 0x3a
    2b78:	80 81       	ld	r24, Z
    2b7a:	e9 ad       	ldd	r30, Y+57	; 0x39
    2b7c:	fa ad       	ldd	r31, Y+58	; 0x3a
    2b7e:	94 81       	ldd	r25, Z+4	; 0x04
    2b80:	69 2f       	mov	r22, r25
    2b82:	41 e0       	ldi	r20, 0x01	; 1
    2b84:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	a0 e0       	ldi	r26, 0x00	; 0
    2b8e:	b0 e4       	ldi	r27, 0x40	; 64
    2b90:	8d ab       	std	Y+53, r24	; 0x35
    2b92:	9e ab       	std	Y+54, r25	; 0x36
    2b94:	af ab       	std	Y+55, r26	; 0x37
    2b96:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b98:	6d a9       	ldd	r22, Y+53	; 0x35
    2b9a:	7e a9       	ldd	r23, Y+54	; 0x36
    2b9c:	8f a9       	ldd	r24, Y+55	; 0x37
    2b9e:	98 ad       	ldd	r25, Y+56	; 0x38
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	4a ef       	ldi	r20, 0xFA	; 250
    2ba6:	54 e4       	ldi	r21, 0x44	; 68
    2ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	89 ab       	std	Y+49, r24	; 0x31
    2bb2:	9a ab       	std	Y+50, r25	; 0x32
    2bb4:	ab ab       	std	Y+51, r26	; 0x33
    2bb6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bb8:	69 a9       	ldd	r22, Y+49	; 0x31
    2bba:	7a a9       	ldd	r23, Y+50	; 0x32
    2bbc:	8b a9       	ldd	r24, Y+51	; 0x33
    2bbe:	9c a9       	ldd	r25, Y+52	; 0x34
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	40 e8       	ldi	r20, 0x80	; 128
    2bc6:	5f e3       	ldi	r21, 0x3F	; 63
    2bc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bcc:	88 23       	and	r24, r24
    2bce:	2c f4       	brge	.+10     	; 0x2bda <Stepper_voidCWFullSteps+0xba>
		__ticks = 1;
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	98 ab       	std	Y+48, r25	; 0x30
    2bd6:	8f a7       	std	Y+47, r24	; 0x2f
    2bd8:	3f c0       	rjmp	.+126    	; 0x2c58 <Stepper_voidCWFullSteps+0x138>
	else if (__tmp > 65535)
    2bda:	69 a9       	ldd	r22, Y+49	; 0x31
    2bdc:	7a a9       	ldd	r23, Y+50	; 0x32
    2bde:	8b a9       	ldd	r24, Y+51	; 0x33
    2be0:	9c a9       	ldd	r25, Y+52	; 0x34
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	3f ef       	ldi	r19, 0xFF	; 255
    2be6:	4f e7       	ldi	r20, 0x7F	; 127
    2be8:	57 e4       	ldi	r21, 0x47	; 71
    2bea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bee:	18 16       	cp	r1, r24
    2bf0:	4c f5       	brge	.+82     	; 0x2c44 <Stepper_voidCWFullSteps+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf2:	6d a9       	ldd	r22, Y+53	; 0x35
    2bf4:	7e a9       	ldd	r23, Y+54	; 0x36
    2bf6:	8f a9       	ldd	r24, Y+55	; 0x37
    2bf8:	98 ad       	ldd	r25, Y+56	; 0x38
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	40 e2       	ldi	r20, 0x20	; 32
    2c00:	51 e4       	ldi	r21, 0x41	; 65
    2c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	bc 01       	movw	r22, r24
    2c0c:	cd 01       	movw	r24, r26
    2c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	98 ab       	std	Y+48, r25	; 0x30
    2c18:	8f a7       	std	Y+47, r24	; 0x2f
    2c1a:	0f c0       	rjmp	.+30     	; 0x2c3a <Stepper_voidCWFullSteps+0x11a>
    2c1c:	88 ec       	ldi	r24, 0xC8	; 200
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	9e a7       	std	Y+46, r25	; 0x2e
    2c22:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c24:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c26:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	f1 f7       	brne	.-4      	; 0x2c28 <Stepper_voidCWFullSteps+0x108>
    2c2c:	9e a7       	std	Y+46, r25	; 0x2e
    2c2e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c30:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c32:	98 a9       	ldd	r25, Y+48	; 0x30
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	98 ab       	std	Y+48, r25	; 0x30
    2c38:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c3e:	00 97       	sbiw	r24, 0x00	; 0
    2c40:	69 f7       	brne	.-38     	; 0x2c1c <Stepper_voidCWFullSteps+0xfc>
    2c42:	14 c0       	rjmp	.+40     	; 0x2c6c <Stepper_voidCWFullSteps+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c44:	69 a9       	ldd	r22, Y+49	; 0x31
    2c46:	7a a9       	ldd	r23, Y+50	; 0x32
    2c48:	8b a9       	ldd	r24, Y+51	; 0x33
    2c4a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	98 ab       	std	Y+48, r25	; 0x30
    2c56:	8f a7       	std	Y+47, r24	; 0x2f
    2c58:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c5a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c5c:	9c a7       	std	Y+44, r25	; 0x2c
    2c5e:	8b a7       	std	Y+43, r24	; 0x2b
    2c60:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c62:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c64:	01 97       	sbiw	r24, 0x01	; 1
    2c66:	f1 f7       	brne	.-4      	; 0x2c64 <Stepper_voidCWFullSteps+0x144>
    2c68:	9c a7       	std	Y+44, r25	; 0x2c
    2c6a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	/*the Pink is Low  and all pin is high*/
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_High);
    2c6c:	e9 ad       	ldd	r30, Y+57	; 0x39
    2c6e:	fa ad       	ldd	r31, Y+58	; 0x3a
    2c70:	80 81       	ld	r24, Z
    2c72:	e9 ad       	ldd	r30, Y+57	; 0x39
    2c74:	fa ad       	ldd	r31, Y+58	; 0x3a
    2c76:	91 81       	ldd	r25, Z+1	; 0x01
    2c78:	69 2f       	mov	r22, r25
    2c7a:	41 e0       	ldi	r20, 0x01	; 1
    2c7c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_Low);
    2c80:	e9 ad       	ldd	r30, Y+57	; 0x39
    2c82:	fa ad       	ldd	r31, Y+58	; 0x3a
    2c84:	80 81       	ld	r24, Z
    2c86:	e9 ad       	ldd	r30, Y+57	; 0x39
    2c88:	fa ad       	ldd	r31, Y+58	; 0x3a
    2c8a:	92 81       	ldd	r25, Z+2	; 0x02
    2c8c:	69 2f       	mov	r22, r25
    2c8e:	40 e0       	ldi	r20, 0x00	; 0
    2c90:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_High);
    2c94:	e9 ad       	ldd	r30, Y+57	; 0x39
    2c96:	fa ad       	ldd	r31, Y+58	; 0x3a
    2c98:	80 81       	ld	r24, Z
    2c9a:	e9 ad       	ldd	r30, Y+57	; 0x39
    2c9c:	fa ad       	ldd	r31, Y+58	; 0x3a
    2c9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ca0:	69 2f       	mov	r22, r25
    2ca2:	41 e0       	ldi	r20, 0x01	; 1
    2ca4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_High);
    2ca8:	e9 ad       	ldd	r30, Y+57	; 0x39
    2caa:	fa ad       	ldd	r31, Y+58	; 0x3a
    2cac:	80 81       	ld	r24, Z
    2cae:	e9 ad       	ldd	r30, Y+57	; 0x39
    2cb0:	fa ad       	ldd	r31, Y+58	; 0x3a
    2cb2:	94 81       	ldd	r25, Z+4	; 0x04
    2cb4:	69 2f       	mov	r22, r25
    2cb6:	41 e0       	ldi	r20, 0x01	; 1
    2cb8:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	a0 e0       	ldi	r26, 0x00	; 0
    2cc2:	b0 e4       	ldi	r27, 0x40	; 64
    2cc4:	8f a3       	std	Y+39, r24	; 0x27
    2cc6:	98 a7       	std	Y+40, r25	; 0x28
    2cc8:	a9 a7       	std	Y+41, r26	; 0x29
    2cca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ccc:	6f a1       	ldd	r22, Y+39	; 0x27
    2cce:	78 a5       	ldd	r23, Y+40	; 0x28
    2cd0:	89 a5       	ldd	r24, Y+41	; 0x29
    2cd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	4a ef       	ldi	r20, 0xFA	; 250
    2cda:	54 e4       	ldi	r21, 0x44	; 68
    2cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	8b a3       	std	Y+35, r24	; 0x23
    2ce6:	9c a3       	std	Y+36, r25	; 0x24
    2ce8:	ad a3       	std	Y+37, r26	; 0x25
    2cea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cec:	6b a1       	ldd	r22, Y+35	; 0x23
    2cee:	7c a1       	ldd	r23, Y+36	; 0x24
    2cf0:	8d a1       	ldd	r24, Y+37	; 0x25
    2cf2:	9e a1       	ldd	r25, Y+38	; 0x26
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	40 e8       	ldi	r20, 0x80	; 128
    2cfa:	5f e3       	ldi	r21, 0x3F	; 63
    2cfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d00:	88 23       	and	r24, r24
    2d02:	2c f4       	brge	.+10     	; 0x2d0e <Stepper_voidCWFullSteps+0x1ee>
		__ticks = 1;
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	9a a3       	std	Y+34, r25	; 0x22
    2d0a:	89 a3       	std	Y+33, r24	; 0x21
    2d0c:	3f c0       	rjmp	.+126    	; 0x2d8c <Stepper_voidCWFullSteps+0x26c>
	else if (__tmp > 65535)
    2d0e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d10:	7c a1       	ldd	r23, Y+36	; 0x24
    2d12:	8d a1       	ldd	r24, Y+37	; 0x25
    2d14:	9e a1       	ldd	r25, Y+38	; 0x26
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	3f ef       	ldi	r19, 0xFF	; 255
    2d1a:	4f e7       	ldi	r20, 0x7F	; 127
    2d1c:	57 e4       	ldi	r21, 0x47	; 71
    2d1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d22:	18 16       	cp	r1, r24
    2d24:	4c f5       	brge	.+82     	; 0x2d78 <Stepper_voidCWFullSteps+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d26:	6f a1       	ldd	r22, Y+39	; 0x27
    2d28:	78 a5       	ldd	r23, Y+40	; 0x28
    2d2a:	89 a5       	ldd	r24, Y+41	; 0x29
    2d2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e2       	ldi	r20, 0x20	; 32
    2d34:	51 e4       	ldi	r21, 0x41	; 65
    2d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	bc 01       	movw	r22, r24
    2d40:	cd 01       	movw	r24, r26
    2d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22
    2d4a:	9a a3       	std	Y+34, r25	; 0x22
    2d4c:	89 a3       	std	Y+33, r24	; 0x21
    2d4e:	0f c0       	rjmp	.+30     	; 0x2d6e <Stepper_voidCWFullSteps+0x24e>
    2d50:	88 ec       	ldi	r24, 0xC8	; 200
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	98 a3       	std	Y+32, r25	; 0x20
    2d56:	8f 8f       	std	Y+31, r24	; 0x1f
    2d58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d5a:	98 a1       	ldd	r25, Y+32	; 0x20
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	f1 f7       	brne	.-4      	; 0x2d5c <Stepper_voidCWFullSteps+0x23c>
    2d60:	98 a3       	std	Y+32, r25	; 0x20
    2d62:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d64:	89 a1       	ldd	r24, Y+33	; 0x21
    2d66:	9a a1       	ldd	r25, Y+34	; 0x22
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	9a a3       	std	Y+34, r25	; 0x22
    2d6c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d6e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d70:	9a a1       	ldd	r25, Y+34	; 0x22
    2d72:	00 97       	sbiw	r24, 0x00	; 0
    2d74:	69 f7       	brne	.-38     	; 0x2d50 <Stepper_voidCWFullSteps+0x230>
    2d76:	14 c0       	rjmp	.+40     	; 0x2da0 <Stepper_voidCWFullSteps+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d78:	6b a1       	ldd	r22, Y+35	; 0x23
    2d7a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d7c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d7e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	9a a3       	std	Y+34, r25	; 0x22
    2d8a:	89 a3       	std	Y+33, r24	; 0x21
    2d8c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d8e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d90:	9e 8f       	std	Y+30, r25	; 0x1e
    2d92:	8d 8f       	std	Y+29, r24	; 0x1d
    2d94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	f1 f7       	brne	.-4      	; 0x2d98 <Stepper_voidCWFullSteps+0x278>
    2d9c:	9e 8f       	std	Y+30, r25	; 0x1e
    2d9e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	/*the Yellow is Low  and all pin is high*/
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_High);
    2da0:	e9 ad       	ldd	r30, Y+57	; 0x39
    2da2:	fa ad       	ldd	r31, Y+58	; 0x3a
    2da4:	80 81       	ld	r24, Z
    2da6:	e9 ad       	ldd	r30, Y+57	; 0x39
    2da8:	fa ad       	ldd	r31, Y+58	; 0x3a
    2daa:	91 81       	ldd	r25, Z+1	; 0x01
    2dac:	69 2f       	mov	r22, r25
    2dae:	41 e0       	ldi	r20, 0x01	; 1
    2db0:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_High);
    2db4:	e9 ad       	ldd	r30, Y+57	; 0x39
    2db6:	fa ad       	ldd	r31, Y+58	; 0x3a
    2db8:	80 81       	ld	r24, Z
    2dba:	e9 ad       	ldd	r30, Y+57	; 0x39
    2dbc:	fa ad       	ldd	r31, Y+58	; 0x3a
    2dbe:	92 81       	ldd	r25, Z+2	; 0x02
    2dc0:	69 2f       	mov	r22, r25
    2dc2:	41 e0       	ldi	r20, 0x01	; 1
    2dc4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_Low);
    2dc8:	e9 ad       	ldd	r30, Y+57	; 0x39
    2dca:	fa ad       	ldd	r31, Y+58	; 0x3a
    2dcc:	80 81       	ld	r24, Z
    2dce:	e9 ad       	ldd	r30, Y+57	; 0x39
    2dd0:	fa ad       	ldd	r31, Y+58	; 0x3a
    2dd2:	93 81       	ldd	r25, Z+3	; 0x03
    2dd4:	69 2f       	mov	r22, r25
    2dd6:	40 e0       	ldi	r20, 0x00	; 0
    2dd8:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_High);
    2ddc:	e9 ad       	ldd	r30, Y+57	; 0x39
    2dde:	fa ad       	ldd	r31, Y+58	; 0x3a
    2de0:	80 81       	ld	r24, Z
    2de2:	e9 ad       	ldd	r30, Y+57	; 0x39
    2de4:	fa ad       	ldd	r31, Y+58	; 0x3a
    2de6:	94 81       	ldd	r25, Z+4	; 0x04
    2de8:	69 2f       	mov	r22, r25
    2dea:	41 e0       	ldi	r20, 0x01	; 1
    2dec:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    2df0:	80 e0       	ldi	r24, 0x00	; 0
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	a0 e0       	ldi	r26, 0x00	; 0
    2df6:	b0 e4       	ldi	r27, 0x40	; 64
    2df8:	89 8f       	std	Y+25, r24	; 0x19
    2dfa:	9a 8f       	std	Y+26, r25	; 0x1a
    2dfc:	ab 8f       	std	Y+27, r26	; 0x1b
    2dfe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e00:	69 8d       	ldd	r22, Y+25	; 0x19
    2e02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	4a ef       	ldi	r20, 0xFA	; 250
    2e0e:	54 e4       	ldi	r21, 0x44	; 68
    2e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	8d 8b       	std	Y+21, r24	; 0x15
    2e1a:	9e 8b       	std	Y+22, r25	; 0x16
    2e1c:	af 8b       	std	Y+23, r26	; 0x17
    2e1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e20:	6d 89       	ldd	r22, Y+21	; 0x15
    2e22:	7e 89       	ldd	r23, Y+22	; 0x16
    2e24:	8f 89       	ldd	r24, Y+23	; 0x17
    2e26:	98 8d       	ldd	r25, Y+24	; 0x18
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	40 e8       	ldi	r20, 0x80	; 128
    2e2e:	5f e3       	ldi	r21, 0x3F	; 63
    2e30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e34:	88 23       	and	r24, r24
    2e36:	2c f4       	brge	.+10     	; 0x2e42 <Stepper_voidCWFullSteps+0x322>
		__ticks = 1;
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	9c 8b       	std	Y+20, r25	; 0x14
    2e3e:	8b 8b       	std	Y+19, r24	; 0x13
    2e40:	3f c0       	rjmp	.+126    	; 0x2ec0 <Stepper_voidCWFullSteps+0x3a0>
	else if (__tmp > 65535)
    2e42:	6d 89       	ldd	r22, Y+21	; 0x15
    2e44:	7e 89       	ldd	r23, Y+22	; 0x16
    2e46:	8f 89       	ldd	r24, Y+23	; 0x17
    2e48:	98 8d       	ldd	r25, Y+24	; 0x18
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	3f ef       	ldi	r19, 0xFF	; 255
    2e4e:	4f e7       	ldi	r20, 0x7F	; 127
    2e50:	57 e4       	ldi	r21, 0x47	; 71
    2e52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e56:	18 16       	cp	r1, r24
    2e58:	4c f5       	brge	.+82     	; 0x2eac <Stepper_voidCWFullSteps+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e5a:	69 8d       	ldd	r22, Y+25	; 0x19
    2e5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	40 e2       	ldi	r20, 0x20	; 32
    2e68:	51 e4       	ldi	r21, 0x41	; 65
    2e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	bc 01       	movw	r22, r24
    2e74:	cd 01       	movw	r24, r26
    2e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	9c 8b       	std	Y+20, r25	; 0x14
    2e80:	8b 8b       	std	Y+19, r24	; 0x13
    2e82:	0f c0       	rjmp	.+30     	; 0x2ea2 <Stepper_voidCWFullSteps+0x382>
    2e84:	88 ec       	ldi	r24, 0xC8	; 200
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	9a 8b       	std	Y+18, r25	; 0x12
    2e8a:	89 8b       	std	Y+17, r24	; 0x11
    2e8c:	89 89       	ldd	r24, Y+17	; 0x11
    2e8e:	9a 89       	ldd	r25, Y+18	; 0x12
    2e90:	01 97       	sbiw	r24, 0x01	; 1
    2e92:	f1 f7       	brne	.-4      	; 0x2e90 <Stepper_voidCWFullSteps+0x370>
    2e94:	9a 8b       	std	Y+18, r25	; 0x12
    2e96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e98:	8b 89       	ldd	r24, Y+19	; 0x13
    2e9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e9c:	01 97       	sbiw	r24, 0x01	; 1
    2e9e:	9c 8b       	std	Y+20, r25	; 0x14
    2ea0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ea6:	00 97       	sbiw	r24, 0x00	; 0
    2ea8:	69 f7       	brne	.-38     	; 0x2e84 <Stepper_voidCWFullSteps+0x364>
    2eaa:	14 c0       	rjmp	.+40     	; 0x2ed4 <Stepper_voidCWFullSteps+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eac:	6d 89       	ldd	r22, Y+21	; 0x15
    2eae:	7e 89       	ldd	r23, Y+22	; 0x16
    2eb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	9c 8b       	std	Y+20, r25	; 0x14
    2ebe:	8b 8b       	std	Y+19, r24	; 0x13
    2ec0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec4:	98 8b       	std	Y+16, r25	; 0x10
    2ec6:	8f 87       	std	Y+15, r24	; 0x0f
    2ec8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eca:	98 89       	ldd	r25, Y+16	; 0x10
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	f1 f7       	brne	.-4      	; 0x2ecc <Stepper_voidCWFullSteps+0x3ac>
    2ed0:	98 8b       	std	Y+16, r25	; 0x10
    2ed2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	/*the Orange is Low  and all pin is high*/
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_High);
    2ed4:	e9 ad       	ldd	r30, Y+57	; 0x39
    2ed6:	fa ad       	ldd	r31, Y+58	; 0x3a
    2ed8:	80 81       	ld	r24, Z
    2eda:	e9 ad       	ldd	r30, Y+57	; 0x39
    2edc:	fa ad       	ldd	r31, Y+58	; 0x3a
    2ede:	91 81       	ldd	r25, Z+1	; 0x01
    2ee0:	69 2f       	mov	r22, r25
    2ee2:	41 e0       	ldi	r20, 0x01	; 1
    2ee4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_High);
    2ee8:	e9 ad       	ldd	r30, Y+57	; 0x39
    2eea:	fa ad       	ldd	r31, Y+58	; 0x3a
    2eec:	80 81       	ld	r24, Z
    2eee:	e9 ad       	ldd	r30, Y+57	; 0x39
    2ef0:	fa ad       	ldd	r31, Y+58	; 0x3a
    2ef2:	92 81       	ldd	r25, Z+2	; 0x02
    2ef4:	69 2f       	mov	r22, r25
    2ef6:	41 e0       	ldi	r20, 0x01	; 1
    2ef8:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_High);
    2efc:	e9 ad       	ldd	r30, Y+57	; 0x39
    2efe:	fa ad       	ldd	r31, Y+58	; 0x3a
    2f00:	80 81       	ld	r24, Z
    2f02:	e9 ad       	ldd	r30, Y+57	; 0x39
    2f04:	fa ad       	ldd	r31, Y+58	; 0x3a
    2f06:	93 81       	ldd	r25, Z+3	; 0x03
    2f08:	69 2f       	mov	r22, r25
    2f0a:	41 e0       	ldi	r20, 0x01	; 1
    2f0c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_Low);
    2f10:	e9 ad       	ldd	r30, Y+57	; 0x39
    2f12:	fa ad       	ldd	r31, Y+58	; 0x3a
    2f14:	80 81       	ld	r24, Z
    2f16:	e9 ad       	ldd	r30, Y+57	; 0x39
    2f18:	fa ad       	ldd	r31, Y+58	; 0x3a
    2f1a:	94 81       	ldd	r25, Z+4	; 0x04
    2f1c:	69 2f       	mov	r22, r25
    2f1e:	40 e0       	ldi	r20, 0x00	; 0
    2f20:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	a0 e0       	ldi	r26, 0x00	; 0
    2f2a:	b0 e4       	ldi	r27, 0x40	; 64
    2f2c:	8b 87       	std	Y+11, r24	; 0x0b
    2f2e:	9c 87       	std	Y+12, r25	; 0x0c
    2f30:	ad 87       	std	Y+13, r26	; 0x0d
    2f32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	4a ef       	ldi	r20, 0xFA	; 250
    2f42:	54 e4       	ldi	r21, 0x44	; 68
    2f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	8f 83       	std	Y+7, r24	; 0x07
    2f4e:	98 87       	std	Y+8, r25	; 0x08
    2f50:	a9 87       	std	Y+9, r26	; 0x09
    2f52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f54:	6f 81       	ldd	r22, Y+7	; 0x07
    2f56:	78 85       	ldd	r23, Y+8	; 0x08
    2f58:	89 85       	ldd	r24, Y+9	; 0x09
    2f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	40 e8       	ldi	r20, 0x80	; 128
    2f62:	5f e3       	ldi	r21, 0x3F	; 63
    2f64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f68:	88 23       	and	r24, r24
    2f6a:	2c f4       	brge	.+10     	; 0x2f76 <Stepper_voidCWFullSteps+0x456>
		__ticks = 1;
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	9e 83       	std	Y+6, r25	; 0x06
    2f72:	8d 83       	std	Y+5, r24	; 0x05
    2f74:	3f c0       	rjmp	.+126    	; 0x2ff4 <Stepper_voidCWFullSteps+0x4d4>
	else if (__tmp > 65535)
    2f76:	6f 81       	ldd	r22, Y+7	; 0x07
    2f78:	78 85       	ldd	r23, Y+8	; 0x08
    2f7a:	89 85       	ldd	r24, Y+9	; 0x09
    2f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	3f ef       	ldi	r19, 0xFF	; 255
    2f82:	4f e7       	ldi	r20, 0x7F	; 127
    2f84:	57 e4       	ldi	r21, 0x47	; 71
    2f86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f8a:	18 16       	cp	r1, r24
    2f8c:	4c f5       	brge	.+82     	; 0x2fe0 <Stepper_voidCWFullSteps+0x4c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e2       	ldi	r20, 0x20	; 32
    2f9c:	51 e4       	ldi	r21, 0x41	; 65
    2f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	bc 01       	movw	r22, r24
    2fa8:	cd 01       	movw	r24, r26
    2faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	9e 83       	std	Y+6, r25	; 0x06
    2fb4:	8d 83       	std	Y+5, r24	; 0x05
    2fb6:	0f c0       	rjmp	.+30     	; 0x2fd6 <Stepper_voidCWFullSteps+0x4b6>
    2fb8:	88 ec       	ldi	r24, 0xC8	; 200
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	9c 83       	std	Y+4, r25	; 0x04
    2fbe:	8b 83       	std	Y+3, r24	; 0x03
    2fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	f1 f7       	brne	.-4      	; 0x2fc4 <Stepper_voidCWFullSteps+0x4a4>
    2fc8:	9c 83       	std	Y+4, r25	; 0x04
    2fca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fce:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	9e 83       	std	Y+6, r25	; 0x06
    2fd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fda:	00 97       	sbiw	r24, 0x00	; 0
    2fdc:	69 f7       	brne	.-38     	; 0x2fb8 <Stepper_voidCWFullSteps+0x498>
    2fde:	14 c0       	rjmp	.+40     	; 0x3008 <Stepper_voidCWFullSteps+0x4e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe2:	78 85       	ldd	r23, Y+8	; 0x08
    2fe4:	89 85       	ldd	r24, Y+9	; 0x09
    2fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	9e 83       	std	Y+6, r25	; 0x06
    2ff2:	8d 83       	std	Y+5, r24	; 0x05
    2ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff8:	9a 83       	std	Y+2, r25	; 0x02
    2ffa:	89 83       	std	Y+1, r24	; 0x01
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <Stepper_voidCWFullSteps+0x4e0>
    3004:	9a 83       	std	Y+2, r25	; 0x02
    3006:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3008:	ea 96       	adiw	r28, 0x3a	; 58
    300a:	0f b6       	in	r0, 0x3f	; 63
    300c:	f8 94       	cli
    300e:	de bf       	out	0x3e, r29	; 62
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	cd bf       	out	0x3d, r28	; 61
    3014:	cf 91       	pop	r28
    3016:	df 91       	pop	r29
    3018:	08 95       	ret

0000301a <Stepper_voidCCWFullSteps>:
static void  Stepper_voidCCWFullSteps(Stper_info * Motor1)
{
    301a:	df 93       	push	r29
    301c:	cf 93       	push	r28
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
    3022:	ea 97       	sbiw	r28, 0x3a	; 58
    3024:	0f b6       	in	r0, 0x3f	; 63
    3026:	f8 94       	cli
    3028:	de bf       	out	0x3e, r29	; 62
    302a:	0f be       	out	0x3f, r0	; 63
    302c:	cd bf       	out	0x3d, r28	; 61
    302e:	9a af       	std	Y+58, r25	; 0x3a
    3030:	89 af       	std	Y+57, r24	; 0x39
	/*the Blue is Low  and all pin is high */
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_Low);
    3032:	e9 ad       	ldd	r30, Y+57	; 0x39
    3034:	fa ad       	ldd	r31, Y+58	; 0x3a
    3036:	80 81       	ld	r24, Z
    3038:	e9 ad       	ldd	r30, Y+57	; 0x39
    303a:	fa ad       	ldd	r31, Y+58	; 0x3a
    303c:	91 81       	ldd	r25, Z+1	; 0x01
    303e:	69 2f       	mov	r22, r25
    3040:	40 e0       	ldi	r20, 0x00	; 0
    3042:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_High);
    3046:	e9 ad       	ldd	r30, Y+57	; 0x39
    3048:	fa ad       	ldd	r31, Y+58	; 0x3a
    304a:	80 81       	ld	r24, Z
    304c:	e9 ad       	ldd	r30, Y+57	; 0x39
    304e:	fa ad       	ldd	r31, Y+58	; 0x3a
    3050:	94 81       	ldd	r25, Z+4	; 0x04
    3052:	69 2f       	mov	r22, r25
    3054:	41 e0       	ldi	r20, 0x01	; 1
    3056:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_High);
    305a:	e9 ad       	ldd	r30, Y+57	; 0x39
    305c:	fa ad       	ldd	r31, Y+58	; 0x3a
    305e:	80 81       	ld	r24, Z
    3060:	e9 ad       	ldd	r30, Y+57	; 0x39
    3062:	fa ad       	ldd	r31, Y+58	; 0x3a
    3064:	93 81       	ldd	r25, Z+3	; 0x03
    3066:	69 2f       	mov	r22, r25
    3068:	41 e0       	ldi	r20, 0x01	; 1
    306a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_High);
    306e:	e9 ad       	ldd	r30, Y+57	; 0x39
    3070:	fa ad       	ldd	r31, Y+58	; 0x3a
    3072:	80 81       	ld	r24, Z
    3074:	e9 ad       	ldd	r30, Y+57	; 0x39
    3076:	fa ad       	ldd	r31, Y+58	; 0x3a
    3078:	92 81       	ldd	r25, Z+2	; 0x02
    307a:	69 2f       	mov	r22, r25
    307c:	41 e0       	ldi	r20, 0x01	; 1
    307e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	a0 e0       	ldi	r26, 0x00	; 0
    3088:	b0 e4       	ldi	r27, 0x40	; 64
    308a:	8d ab       	std	Y+53, r24	; 0x35
    308c:	9e ab       	std	Y+54, r25	; 0x36
    308e:	af ab       	std	Y+55, r26	; 0x37
    3090:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3092:	6d a9       	ldd	r22, Y+53	; 0x35
    3094:	7e a9       	ldd	r23, Y+54	; 0x36
    3096:	8f a9       	ldd	r24, Y+55	; 0x37
    3098:	98 ad       	ldd	r25, Y+56	; 0x38
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	4a ef       	ldi	r20, 0xFA	; 250
    30a0:	54 e4       	ldi	r21, 0x44	; 68
    30a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a6:	dc 01       	movw	r26, r24
    30a8:	cb 01       	movw	r24, r22
    30aa:	89 ab       	std	Y+49, r24	; 0x31
    30ac:	9a ab       	std	Y+50, r25	; 0x32
    30ae:	ab ab       	std	Y+51, r26	; 0x33
    30b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    30b2:	69 a9       	ldd	r22, Y+49	; 0x31
    30b4:	7a a9       	ldd	r23, Y+50	; 0x32
    30b6:	8b a9       	ldd	r24, Y+51	; 0x33
    30b8:	9c a9       	ldd	r25, Y+52	; 0x34
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	40 e8       	ldi	r20, 0x80	; 128
    30c0:	5f e3       	ldi	r21, 0x3F	; 63
    30c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30c6:	88 23       	and	r24, r24
    30c8:	2c f4       	brge	.+10     	; 0x30d4 <Stepper_voidCCWFullSteps+0xba>
		__ticks = 1;
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	98 ab       	std	Y+48, r25	; 0x30
    30d0:	8f a7       	std	Y+47, r24	; 0x2f
    30d2:	3f c0       	rjmp	.+126    	; 0x3152 <Stepper_voidCCWFullSteps+0x138>
	else if (__tmp > 65535)
    30d4:	69 a9       	ldd	r22, Y+49	; 0x31
    30d6:	7a a9       	ldd	r23, Y+50	; 0x32
    30d8:	8b a9       	ldd	r24, Y+51	; 0x33
    30da:	9c a9       	ldd	r25, Y+52	; 0x34
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	3f ef       	ldi	r19, 0xFF	; 255
    30e0:	4f e7       	ldi	r20, 0x7F	; 127
    30e2:	57 e4       	ldi	r21, 0x47	; 71
    30e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30e8:	18 16       	cp	r1, r24
    30ea:	4c f5       	brge	.+82     	; 0x313e <Stepper_voidCCWFullSteps+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ec:	6d a9       	ldd	r22, Y+53	; 0x35
    30ee:	7e a9       	ldd	r23, Y+54	; 0x36
    30f0:	8f a9       	ldd	r24, Y+55	; 0x37
    30f2:	98 ad       	ldd	r25, Y+56	; 0x38
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	40 e2       	ldi	r20, 0x20	; 32
    30fa:	51 e4       	ldi	r21, 0x41	; 65
    30fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	bc 01       	movw	r22, r24
    3106:	cd 01       	movw	r24, r26
    3108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	98 ab       	std	Y+48, r25	; 0x30
    3112:	8f a7       	std	Y+47, r24	; 0x2f
    3114:	0f c0       	rjmp	.+30     	; 0x3134 <Stepper_voidCCWFullSteps+0x11a>
    3116:	88 ec       	ldi	r24, 0xC8	; 200
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	9e a7       	std	Y+46, r25	; 0x2e
    311c:	8d a7       	std	Y+45, r24	; 0x2d
    311e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3120:	9e a5       	ldd	r25, Y+46	; 0x2e
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	f1 f7       	brne	.-4      	; 0x3122 <Stepper_voidCCWFullSteps+0x108>
    3126:	9e a7       	std	Y+46, r25	; 0x2e
    3128:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    312a:	8f a5       	ldd	r24, Y+47	; 0x2f
    312c:	98 a9       	ldd	r25, Y+48	; 0x30
    312e:	01 97       	sbiw	r24, 0x01	; 1
    3130:	98 ab       	std	Y+48, r25	; 0x30
    3132:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3134:	8f a5       	ldd	r24, Y+47	; 0x2f
    3136:	98 a9       	ldd	r25, Y+48	; 0x30
    3138:	00 97       	sbiw	r24, 0x00	; 0
    313a:	69 f7       	brne	.-38     	; 0x3116 <Stepper_voidCCWFullSteps+0xfc>
    313c:	14 c0       	rjmp	.+40     	; 0x3166 <Stepper_voidCCWFullSteps+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    313e:	69 a9       	ldd	r22, Y+49	; 0x31
    3140:	7a a9       	ldd	r23, Y+50	; 0x32
    3142:	8b a9       	ldd	r24, Y+51	; 0x33
    3144:	9c a9       	ldd	r25, Y+52	; 0x34
    3146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	98 ab       	std	Y+48, r25	; 0x30
    3150:	8f a7       	std	Y+47, r24	; 0x2f
    3152:	8f a5       	ldd	r24, Y+47	; 0x2f
    3154:	98 a9       	ldd	r25, Y+48	; 0x30
    3156:	9c a7       	std	Y+44, r25	; 0x2c
    3158:	8b a7       	std	Y+43, r24	; 0x2b
    315a:	8b a5       	ldd	r24, Y+43	; 0x2b
    315c:	9c a5       	ldd	r25, Y+44	; 0x2c
    315e:	01 97       	sbiw	r24, 0x01	; 1
    3160:	f1 f7       	brne	.-4      	; 0x315e <Stepper_voidCCWFullSteps+0x144>
    3162:	9c a7       	std	Y+44, r25	; 0x2c
    3164:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	/*the Pink is Low  and all pin is high*/
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_High);
    3166:	e9 ad       	ldd	r30, Y+57	; 0x39
    3168:	fa ad       	ldd	r31, Y+58	; 0x3a
    316a:	80 81       	ld	r24, Z
    316c:	e9 ad       	ldd	r30, Y+57	; 0x39
    316e:	fa ad       	ldd	r31, Y+58	; 0x3a
    3170:	91 81       	ldd	r25, Z+1	; 0x01
    3172:	69 2f       	mov	r22, r25
    3174:	41 e0       	ldi	r20, 0x01	; 1
    3176:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_Low);
    317a:	e9 ad       	ldd	r30, Y+57	; 0x39
    317c:	fa ad       	ldd	r31, Y+58	; 0x3a
    317e:	80 81       	ld	r24, Z
    3180:	e9 ad       	ldd	r30, Y+57	; 0x39
    3182:	fa ad       	ldd	r31, Y+58	; 0x3a
    3184:	94 81       	ldd	r25, Z+4	; 0x04
    3186:	69 2f       	mov	r22, r25
    3188:	40 e0       	ldi	r20, 0x00	; 0
    318a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_High);
    318e:	e9 ad       	ldd	r30, Y+57	; 0x39
    3190:	fa ad       	ldd	r31, Y+58	; 0x3a
    3192:	80 81       	ld	r24, Z
    3194:	e9 ad       	ldd	r30, Y+57	; 0x39
    3196:	fa ad       	ldd	r31, Y+58	; 0x3a
    3198:	93 81       	ldd	r25, Z+3	; 0x03
    319a:	69 2f       	mov	r22, r25
    319c:	41 e0       	ldi	r20, 0x01	; 1
    319e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_High);
    31a2:	e9 ad       	ldd	r30, Y+57	; 0x39
    31a4:	fa ad       	ldd	r31, Y+58	; 0x3a
    31a6:	80 81       	ld	r24, Z
    31a8:	e9 ad       	ldd	r30, Y+57	; 0x39
    31aa:	fa ad       	ldd	r31, Y+58	; 0x3a
    31ac:	92 81       	ldd	r25, Z+2	; 0x02
    31ae:	69 2f       	mov	r22, r25
    31b0:	41 e0       	ldi	r20, 0x01	; 1
    31b2:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	a0 e0       	ldi	r26, 0x00	; 0
    31bc:	b0 e4       	ldi	r27, 0x40	; 64
    31be:	8f a3       	std	Y+39, r24	; 0x27
    31c0:	98 a7       	std	Y+40, r25	; 0x28
    31c2:	a9 a7       	std	Y+41, r26	; 0x29
    31c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c6:	6f a1       	ldd	r22, Y+39	; 0x27
    31c8:	78 a5       	ldd	r23, Y+40	; 0x28
    31ca:	89 a5       	ldd	r24, Y+41	; 0x29
    31cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	4a ef       	ldi	r20, 0xFA	; 250
    31d4:	54 e4       	ldi	r21, 0x44	; 68
    31d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	8b a3       	std	Y+35, r24	; 0x23
    31e0:	9c a3       	std	Y+36, r25	; 0x24
    31e2:	ad a3       	std	Y+37, r26	; 0x25
    31e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31e6:	6b a1       	ldd	r22, Y+35	; 0x23
    31e8:	7c a1       	ldd	r23, Y+36	; 0x24
    31ea:	8d a1       	ldd	r24, Y+37	; 0x25
    31ec:	9e a1       	ldd	r25, Y+38	; 0x26
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	40 e8       	ldi	r20, 0x80	; 128
    31f4:	5f e3       	ldi	r21, 0x3F	; 63
    31f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31fa:	88 23       	and	r24, r24
    31fc:	2c f4       	brge	.+10     	; 0x3208 <Stepper_voidCCWFullSteps+0x1ee>
		__ticks = 1;
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	9a a3       	std	Y+34, r25	; 0x22
    3204:	89 a3       	std	Y+33, r24	; 0x21
    3206:	3f c0       	rjmp	.+126    	; 0x3286 <Stepper_voidCCWFullSteps+0x26c>
	else if (__tmp > 65535)
    3208:	6b a1       	ldd	r22, Y+35	; 0x23
    320a:	7c a1       	ldd	r23, Y+36	; 0x24
    320c:	8d a1       	ldd	r24, Y+37	; 0x25
    320e:	9e a1       	ldd	r25, Y+38	; 0x26
    3210:	20 e0       	ldi	r18, 0x00	; 0
    3212:	3f ef       	ldi	r19, 0xFF	; 255
    3214:	4f e7       	ldi	r20, 0x7F	; 127
    3216:	57 e4       	ldi	r21, 0x47	; 71
    3218:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    321c:	18 16       	cp	r1, r24
    321e:	4c f5       	brge	.+82     	; 0x3272 <Stepper_voidCCWFullSteps+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3220:	6f a1       	ldd	r22, Y+39	; 0x27
    3222:	78 a5       	ldd	r23, Y+40	; 0x28
    3224:	89 a5       	ldd	r24, Y+41	; 0x29
    3226:	9a a5       	ldd	r25, Y+42	; 0x2a
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	40 e2       	ldi	r20, 0x20	; 32
    322e:	51 e4       	ldi	r21, 0x41	; 65
    3230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	bc 01       	movw	r22, r24
    323a:	cd 01       	movw	r24, r26
    323c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	9a a3       	std	Y+34, r25	; 0x22
    3246:	89 a3       	std	Y+33, r24	; 0x21
    3248:	0f c0       	rjmp	.+30     	; 0x3268 <Stepper_voidCCWFullSteps+0x24e>
    324a:	88 ec       	ldi	r24, 0xC8	; 200
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	98 a3       	std	Y+32, r25	; 0x20
    3250:	8f 8f       	std	Y+31, r24	; 0x1f
    3252:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3254:	98 a1       	ldd	r25, Y+32	; 0x20
    3256:	01 97       	sbiw	r24, 0x01	; 1
    3258:	f1 f7       	brne	.-4      	; 0x3256 <Stepper_voidCCWFullSteps+0x23c>
    325a:	98 a3       	std	Y+32, r25	; 0x20
    325c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325e:	89 a1       	ldd	r24, Y+33	; 0x21
    3260:	9a a1       	ldd	r25, Y+34	; 0x22
    3262:	01 97       	sbiw	r24, 0x01	; 1
    3264:	9a a3       	std	Y+34, r25	; 0x22
    3266:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3268:	89 a1       	ldd	r24, Y+33	; 0x21
    326a:	9a a1       	ldd	r25, Y+34	; 0x22
    326c:	00 97       	sbiw	r24, 0x00	; 0
    326e:	69 f7       	brne	.-38     	; 0x324a <Stepper_voidCCWFullSteps+0x230>
    3270:	14 c0       	rjmp	.+40     	; 0x329a <Stepper_voidCCWFullSteps+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3272:	6b a1       	ldd	r22, Y+35	; 0x23
    3274:	7c a1       	ldd	r23, Y+36	; 0x24
    3276:	8d a1       	ldd	r24, Y+37	; 0x25
    3278:	9e a1       	ldd	r25, Y+38	; 0x26
    327a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	9a a3       	std	Y+34, r25	; 0x22
    3284:	89 a3       	std	Y+33, r24	; 0x21
    3286:	89 a1       	ldd	r24, Y+33	; 0x21
    3288:	9a a1       	ldd	r25, Y+34	; 0x22
    328a:	9e 8f       	std	Y+30, r25	; 0x1e
    328c:	8d 8f       	std	Y+29, r24	; 0x1d
    328e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3290:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	f1 f7       	brne	.-4      	; 0x3292 <Stepper_voidCCWFullSteps+0x278>
    3296:	9e 8f       	std	Y+30, r25	; 0x1e
    3298:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	/*the Yellow is Low  and all pin is high*/
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_High);
    329a:	e9 ad       	ldd	r30, Y+57	; 0x39
    329c:	fa ad       	ldd	r31, Y+58	; 0x3a
    329e:	80 81       	ld	r24, Z
    32a0:	e9 ad       	ldd	r30, Y+57	; 0x39
    32a2:	fa ad       	ldd	r31, Y+58	; 0x3a
    32a4:	91 81       	ldd	r25, Z+1	; 0x01
    32a6:	69 2f       	mov	r22, r25
    32a8:	41 e0       	ldi	r20, 0x01	; 1
    32aa:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_High);
    32ae:	e9 ad       	ldd	r30, Y+57	; 0x39
    32b0:	fa ad       	ldd	r31, Y+58	; 0x3a
    32b2:	80 81       	ld	r24, Z
    32b4:	e9 ad       	ldd	r30, Y+57	; 0x39
    32b6:	fa ad       	ldd	r31, Y+58	; 0x3a
    32b8:	94 81       	ldd	r25, Z+4	; 0x04
    32ba:	69 2f       	mov	r22, r25
    32bc:	41 e0       	ldi	r20, 0x01	; 1
    32be:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_Low);
    32c2:	e9 ad       	ldd	r30, Y+57	; 0x39
    32c4:	fa ad       	ldd	r31, Y+58	; 0x3a
    32c6:	80 81       	ld	r24, Z
    32c8:	e9 ad       	ldd	r30, Y+57	; 0x39
    32ca:	fa ad       	ldd	r31, Y+58	; 0x3a
    32cc:	93 81       	ldd	r25, Z+3	; 0x03
    32ce:	69 2f       	mov	r22, r25
    32d0:	40 e0       	ldi	r20, 0x00	; 0
    32d2:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_High);
    32d6:	e9 ad       	ldd	r30, Y+57	; 0x39
    32d8:	fa ad       	ldd	r31, Y+58	; 0x3a
    32da:	80 81       	ld	r24, Z
    32dc:	e9 ad       	ldd	r30, Y+57	; 0x39
    32de:	fa ad       	ldd	r31, Y+58	; 0x3a
    32e0:	92 81       	ldd	r25, Z+2	; 0x02
    32e2:	69 2f       	mov	r22, r25
    32e4:	41 e0       	ldi	r20, 0x01	; 1
    32e6:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	a0 e0       	ldi	r26, 0x00	; 0
    32f0:	b0 e4       	ldi	r27, 0x40	; 64
    32f2:	89 8f       	std	Y+25, r24	; 0x19
    32f4:	9a 8f       	std	Y+26, r25	; 0x1a
    32f6:	ab 8f       	std	Y+27, r26	; 0x1b
    32f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fa:	69 8d       	ldd	r22, Y+25	; 0x19
    32fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3300:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	4a ef       	ldi	r20, 0xFA	; 250
    3308:	54 e4       	ldi	r21, 0x44	; 68
    330a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	8d 8b       	std	Y+21, r24	; 0x15
    3314:	9e 8b       	std	Y+22, r25	; 0x16
    3316:	af 8b       	std	Y+23, r26	; 0x17
    3318:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    331a:	6d 89       	ldd	r22, Y+21	; 0x15
    331c:	7e 89       	ldd	r23, Y+22	; 0x16
    331e:	8f 89       	ldd	r24, Y+23	; 0x17
    3320:	98 8d       	ldd	r25, Y+24	; 0x18
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	40 e8       	ldi	r20, 0x80	; 128
    3328:	5f e3       	ldi	r21, 0x3F	; 63
    332a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    332e:	88 23       	and	r24, r24
    3330:	2c f4       	brge	.+10     	; 0x333c <Stepper_voidCCWFullSteps+0x322>
		__ticks = 1;
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	9c 8b       	std	Y+20, r25	; 0x14
    3338:	8b 8b       	std	Y+19, r24	; 0x13
    333a:	3f c0       	rjmp	.+126    	; 0x33ba <Stepper_voidCCWFullSteps+0x3a0>
	else if (__tmp > 65535)
    333c:	6d 89       	ldd	r22, Y+21	; 0x15
    333e:	7e 89       	ldd	r23, Y+22	; 0x16
    3340:	8f 89       	ldd	r24, Y+23	; 0x17
    3342:	98 8d       	ldd	r25, Y+24	; 0x18
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	3f ef       	ldi	r19, 0xFF	; 255
    3348:	4f e7       	ldi	r20, 0x7F	; 127
    334a:	57 e4       	ldi	r21, 0x47	; 71
    334c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3350:	18 16       	cp	r1, r24
    3352:	4c f5       	brge	.+82     	; 0x33a6 <Stepper_voidCCWFullSteps+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3354:	69 8d       	ldd	r22, Y+25	; 0x19
    3356:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3358:	8b 8d       	ldd	r24, Y+27	; 0x1b
    335a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	40 e2       	ldi	r20, 0x20	; 32
    3362:	51 e4       	ldi	r21, 0x41	; 65
    3364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	bc 01       	movw	r22, r24
    336e:	cd 01       	movw	r24, r26
    3370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	9c 8b       	std	Y+20, r25	; 0x14
    337a:	8b 8b       	std	Y+19, r24	; 0x13
    337c:	0f c0       	rjmp	.+30     	; 0x339c <Stepper_voidCCWFullSteps+0x382>
    337e:	88 ec       	ldi	r24, 0xC8	; 200
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	9a 8b       	std	Y+18, r25	; 0x12
    3384:	89 8b       	std	Y+17, r24	; 0x11
    3386:	89 89       	ldd	r24, Y+17	; 0x11
    3388:	9a 89       	ldd	r25, Y+18	; 0x12
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	f1 f7       	brne	.-4      	; 0x338a <Stepper_voidCCWFullSteps+0x370>
    338e:	9a 8b       	std	Y+18, r25	; 0x12
    3390:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3392:	8b 89       	ldd	r24, Y+19	; 0x13
    3394:	9c 89       	ldd	r25, Y+20	; 0x14
    3396:	01 97       	sbiw	r24, 0x01	; 1
    3398:	9c 8b       	std	Y+20, r25	; 0x14
    339a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339c:	8b 89       	ldd	r24, Y+19	; 0x13
    339e:	9c 89       	ldd	r25, Y+20	; 0x14
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	69 f7       	brne	.-38     	; 0x337e <Stepper_voidCCWFullSteps+0x364>
    33a4:	14 c0       	rjmp	.+40     	; 0x33ce <Stepper_voidCCWFullSteps+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a6:	6d 89       	ldd	r22, Y+21	; 0x15
    33a8:	7e 89       	ldd	r23, Y+22	; 0x16
    33aa:	8f 89       	ldd	r24, Y+23	; 0x17
    33ac:	98 8d       	ldd	r25, Y+24	; 0x18
    33ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	9c 8b       	std	Y+20, r25	; 0x14
    33b8:	8b 8b       	std	Y+19, r24	; 0x13
    33ba:	8b 89       	ldd	r24, Y+19	; 0x13
    33bc:	9c 89       	ldd	r25, Y+20	; 0x14
    33be:	98 8b       	std	Y+16, r25	; 0x10
    33c0:	8f 87       	std	Y+15, r24	; 0x0f
    33c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    33c4:	98 89       	ldd	r25, Y+16	; 0x10
    33c6:	01 97       	sbiw	r24, 0x01	; 1
    33c8:	f1 f7       	brne	.-4      	; 0x33c6 <Stepper_voidCCWFullSteps+0x3ac>
    33ca:	98 8b       	std	Y+16, r25	; 0x10
    33cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	/*the Orange is Low  and all pin is high*/
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_High);
    33ce:	e9 ad       	ldd	r30, Y+57	; 0x39
    33d0:	fa ad       	ldd	r31, Y+58	; 0x3a
    33d2:	80 81       	ld	r24, Z
    33d4:	e9 ad       	ldd	r30, Y+57	; 0x39
    33d6:	fa ad       	ldd	r31, Y+58	; 0x3a
    33d8:	91 81       	ldd	r25, Z+1	; 0x01
    33da:	69 2f       	mov	r22, r25
    33dc:	41 e0       	ldi	r20, 0x01	; 1
    33de:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_High);
    33e2:	e9 ad       	ldd	r30, Y+57	; 0x39
    33e4:	fa ad       	ldd	r31, Y+58	; 0x3a
    33e6:	80 81       	ld	r24, Z
    33e8:	e9 ad       	ldd	r30, Y+57	; 0x39
    33ea:	fa ad       	ldd	r31, Y+58	; 0x3a
    33ec:	94 81       	ldd	r25, Z+4	; 0x04
    33ee:	69 2f       	mov	r22, r25
    33f0:	41 e0       	ldi	r20, 0x01	; 1
    33f2:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_High);
    33f6:	e9 ad       	ldd	r30, Y+57	; 0x39
    33f8:	fa ad       	ldd	r31, Y+58	; 0x3a
    33fa:	80 81       	ld	r24, Z
    33fc:	e9 ad       	ldd	r30, Y+57	; 0x39
    33fe:	fa ad       	ldd	r31, Y+58	; 0x3a
    3400:	93 81       	ldd	r25, Z+3	; 0x03
    3402:	69 2f       	mov	r22, r25
    3404:	41 e0       	ldi	r20, 0x01	; 1
    3406:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_Low);
    340a:	e9 ad       	ldd	r30, Y+57	; 0x39
    340c:	fa ad       	ldd	r31, Y+58	; 0x3a
    340e:	80 81       	ld	r24, Z
    3410:	e9 ad       	ldd	r30, Y+57	; 0x39
    3412:	fa ad       	ldd	r31, Y+58	; 0x3a
    3414:	92 81       	ldd	r25, Z+2	; 0x02
    3416:	69 2f       	mov	r22, r25
    3418:	40 e0       	ldi	r20, 0x00	; 0
    341a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	a0 e0       	ldi	r26, 0x00	; 0
    3424:	b0 e4       	ldi	r27, 0x40	; 64
    3426:	8b 87       	std	Y+11, r24	; 0x0b
    3428:	9c 87       	std	Y+12, r25	; 0x0c
    342a:	ad 87       	std	Y+13, r26	; 0x0d
    342c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    342e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3430:	7c 85       	ldd	r23, Y+12	; 0x0c
    3432:	8d 85       	ldd	r24, Y+13	; 0x0d
    3434:	9e 85       	ldd	r25, Y+14	; 0x0e
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	4a ef       	ldi	r20, 0xFA	; 250
    343c:	54 e4       	ldi	r21, 0x44	; 68
    343e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	8f 83       	std	Y+7, r24	; 0x07
    3448:	98 87       	std	Y+8, r25	; 0x08
    344a:	a9 87       	std	Y+9, r26	; 0x09
    344c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    344e:	6f 81       	ldd	r22, Y+7	; 0x07
    3450:	78 85       	ldd	r23, Y+8	; 0x08
    3452:	89 85       	ldd	r24, Y+9	; 0x09
    3454:	9a 85       	ldd	r25, Y+10	; 0x0a
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	40 e8       	ldi	r20, 0x80	; 128
    345c:	5f e3       	ldi	r21, 0x3F	; 63
    345e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3462:	88 23       	and	r24, r24
    3464:	2c f4       	brge	.+10     	; 0x3470 <Stepper_voidCCWFullSteps+0x456>
		__ticks = 1;
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	9e 83       	std	Y+6, r25	; 0x06
    346c:	8d 83       	std	Y+5, r24	; 0x05
    346e:	3f c0       	rjmp	.+126    	; 0x34ee <Stepper_voidCCWFullSteps+0x4d4>
	else if (__tmp > 65535)
    3470:	6f 81       	ldd	r22, Y+7	; 0x07
    3472:	78 85       	ldd	r23, Y+8	; 0x08
    3474:	89 85       	ldd	r24, Y+9	; 0x09
    3476:	9a 85       	ldd	r25, Y+10	; 0x0a
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	3f ef       	ldi	r19, 0xFF	; 255
    347c:	4f e7       	ldi	r20, 0x7F	; 127
    347e:	57 e4       	ldi	r21, 0x47	; 71
    3480:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3484:	18 16       	cp	r1, r24
    3486:	4c f5       	brge	.+82     	; 0x34da <Stepper_voidCCWFullSteps+0x4c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3488:	6b 85       	ldd	r22, Y+11	; 0x0b
    348a:	7c 85       	ldd	r23, Y+12	; 0x0c
    348c:	8d 85       	ldd	r24, Y+13	; 0x0d
    348e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	40 e2       	ldi	r20, 0x20	; 32
    3496:	51 e4       	ldi	r21, 0x41	; 65
    3498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    349c:	dc 01       	movw	r26, r24
    349e:	cb 01       	movw	r24, r22
    34a0:	bc 01       	movw	r22, r24
    34a2:	cd 01       	movw	r24, r26
    34a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	9e 83       	std	Y+6, r25	; 0x06
    34ae:	8d 83       	std	Y+5, r24	; 0x05
    34b0:	0f c0       	rjmp	.+30     	; 0x34d0 <Stepper_voidCCWFullSteps+0x4b6>
    34b2:	88 ec       	ldi	r24, 0xC8	; 200
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	9c 83       	std	Y+4, r25	; 0x04
    34b8:	8b 83       	std	Y+3, r24	; 0x03
    34ba:	8b 81       	ldd	r24, Y+3	; 0x03
    34bc:	9c 81       	ldd	r25, Y+4	; 0x04
    34be:	01 97       	sbiw	r24, 0x01	; 1
    34c0:	f1 f7       	brne	.-4      	; 0x34be <Stepper_voidCCWFullSteps+0x4a4>
    34c2:	9c 83       	std	Y+4, r25	; 0x04
    34c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34c6:	8d 81       	ldd	r24, Y+5	; 0x05
    34c8:	9e 81       	ldd	r25, Y+6	; 0x06
    34ca:	01 97       	sbiw	r24, 0x01	; 1
    34cc:	9e 83       	std	Y+6, r25	; 0x06
    34ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34d0:	8d 81       	ldd	r24, Y+5	; 0x05
    34d2:	9e 81       	ldd	r25, Y+6	; 0x06
    34d4:	00 97       	sbiw	r24, 0x00	; 0
    34d6:	69 f7       	brne	.-38     	; 0x34b2 <Stepper_voidCCWFullSteps+0x498>
    34d8:	14 c0       	rjmp	.+40     	; 0x3502 <Stepper_voidCCWFullSteps+0x4e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34da:	6f 81       	ldd	r22, Y+7	; 0x07
    34dc:	78 85       	ldd	r23, Y+8	; 0x08
    34de:	89 85       	ldd	r24, Y+9	; 0x09
    34e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	9e 83       	std	Y+6, r25	; 0x06
    34ec:	8d 83       	std	Y+5, r24	; 0x05
    34ee:	8d 81       	ldd	r24, Y+5	; 0x05
    34f0:	9e 81       	ldd	r25, Y+6	; 0x06
    34f2:	9a 83       	std	Y+2, r25	; 0x02
    34f4:	89 83       	std	Y+1, r24	; 0x01
    34f6:	89 81       	ldd	r24, Y+1	; 0x01
    34f8:	9a 81       	ldd	r25, Y+2	; 0x02
    34fa:	01 97       	sbiw	r24, 0x01	; 1
    34fc:	f1 f7       	brne	.-4      	; 0x34fa <Stepper_voidCCWFullSteps+0x4e0>
    34fe:	9a 83       	std	Y+2, r25	; 0x02
    3500:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3502:	ea 96       	adiw	r28, 0x3a	; 58
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	f8 94       	cli
    3508:	de bf       	out	0x3e, r29	; 62
    350a:	0f be       	out	0x3f, r0	; 63
    350c:	cd bf       	out	0x3d, r28	; 61
    350e:	cf 91       	pop	r28
    3510:	df 91       	pop	r29
    3512:	08 95       	ret

00003514 <Stepper_voidCWHalfSteps>:

static void  Stepper_voidCWHalfSteps(Stper_info * Motor1)
{
    3514:	0f 93       	push	r16
    3516:	1f 93       	push	r17
    3518:	df 93       	push	r29
    351a:	cf 93       	push	r28
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
    3520:	c2 57       	subi	r28, 0x72	; 114
    3522:	d0 40       	sbci	r29, 0x00	; 0
    3524:	0f b6       	in	r0, 0x3f	; 63
    3526:	f8 94       	cli
    3528:	de bf       	out	0x3e, r29	; 62
    352a:	0f be       	out	0x3f, r0	; 63
    352c:	cd bf       	out	0x3d, r28	; 61
    352e:	fe 01       	movw	r30, r28
    3530:	ef 58       	subi	r30, 0x8F	; 143
    3532:	ff 4f       	sbci	r31, 0xFF	; 255
    3534:	91 83       	std	Z+1, r25	; 0x01
    3536:	80 83       	st	Z, r24
	/*the Blue is Low  and all pin is high */
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_Low);
    3538:	fe 01       	movw	r30, r28
    353a:	ef 58       	subi	r30, 0x8F	; 143
    353c:	ff 4f       	sbci	r31, 0xFF	; 255
    353e:	01 90       	ld	r0, Z+
    3540:	f0 81       	ld	r31, Z
    3542:	e0 2d       	mov	r30, r0
    3544:	80 81       	ld	r24, Z
    3546:	fe 01       	movw	r30, r28
    3548:	ef 58       	subi	r30, 0x8F	; 143
    354a:	ff 4f       	sbci	r31, 0xFF	; 255
    354c:	01 90       	ld	r0, Z+
    354e:	f0 81       	ld	r31, Z
    3550:	e0 2d       	mov	r30, r0
    3552:	91 81       	ldd	r25, Z+1	; 0x01
    3554:	69 2f       	mov	r22, r25
    3556:	40 e0       	ldi	r20, 0x00	; 0
    3558:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_High);
    355c:	fe 01       	movw	r30, r28
    355e:	ef 58       	subi	r30, 0x8F	; 143
    3560:	ff 4f       	sbci	r31, 0xFF	; 255
    3562:	01 90       	ld	r0, Z+
    3564:	f0 81       	ld	r31, Z
    3566:	e0 2d       	mov	r30, r0
    3568:	80 81       	ld	r24, Z
    356a:	fe 01       	movw	r30, r28
    356c:	ef 58       	subi	r30, 0x8F	; 143
    356e:	ff 4f       	sbci	r31, 0xFF	; 255
    3570:	01 90       	ld	r0, Z+
    3572:	f0 81       	ld	r31, Z
    3574:	e0 2d       	mov	r30, r0
    3576:	92 81       	ldd	r25, Z+2	; 0x02
    3578:	69 2f       	mov	r22, r25
    357a:	41 e0       	ldi	r20, 0x01	; 1
    357c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_High);
    3580:	fe 01       	movw	r30, r28
    3582:	ef 58       	subi	r30, 0x8F	; 143
    3584:	ff 4f       	sbci	r31, 0xFF	; 255
    3586:	01 90       	ld	r0, Z+
    3588:	f0 81       	ld	r31, Z
    358a:	e0 2d       	mov	r30, r0
    358c:	80 81       	ld	r24, Z
    358e:	fe 01       	movw	r30, r28
    3590:	ef 58       	subi	r30, 0x8F	; 143
    3592:	ff 4f       	sbci	r31, 0xFF	; 255
    3594:	01 90       	ld	r0, Z+
    3596:	f0 81       	ld	r31, Z
    3598:	e0 2d       	mov	r30, r0
    359a:	93 81       	ldd	r25, Z+3	; 0x03
    359c:	69 2f       	mov	r22, r25
    359e:	41 e0       	ldi	r20, 0x01	; 1
    35a0:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_High);
    35a4:	fe 01       	movw	r30, r28
    35a6:	ef 58       	subi	r30, 0x8F	; 143
    35a8:	ff 4f       	sbci	r31, 0xFF	; 255
    35aa:	01 90       	ld	r0, Z+
    35ac:	f0 81       	ld	r31, Z
    35ae:	e0 2d       	mov	r30, r0
    35b0:	80 81       	ld	r24, Z
    35b2:	fe 01       	movw	r30, r28
    35b4:	ef 58       	subi	r30, 0x8F	; 143
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	01 90       	ld	r0, Z+
    35ba:	f0 81       	ld	r31, Z
    35bc:	e0 2d       	mov	r30, r0
    35be:	94 81       	ldd	r25, Z+4	; 0x04
    35c0:	69 2f       	mov	r22, r25
    35c2:	41 e0       	ldi	r20, 0x01	; 1
    35c4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    35c8:	fe 01       	movw	r30, r28
    35ca:	e3 59       	subi	r30, 0x93	; 147
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	a0 e0       	ldi	r26, 0x00	; 0
    35d4:	b0 e4       	ldi	r27, 0x40	; 64
    35d6:	80 83       	st	Z, r24
    35d8:	91 83       	std	Z+1, r25	; 0x01
    35da:	a2 83       	std	Z+2, r26	; 0x02
    35dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35de:	8e 01       	movw	r16, r28
    35e0:	07 59       	subi	r16, 0x97	; 151
    35e2:	1f 4f       	sbci	r17, 0xFF	; 255
    35e4:	fe 01       	movw	r30, r28
    35e6:	e3 59       	subi	r30, 0x93	; 147
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	60 81       	ld	r22, Z
    35ec:	71 81       	ldd	r23, Z+1	; 0x01
    35ee:	82 81       	ldd	r24, Z+2	; 0x02
    35f0:	93 81       	ldd	r25, Z+3	; 0x03
    35f2:	20 e0       	ldi	r18, 0x00	; 0
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	4a ef       	ldi	r20, 0xFA	; 250
    35f8:	54 e4       	ldi	r21, 0x44	; 68
    35fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	f8 01       	movw	r30, r16
    3604:	80 83       	st	Z, r24
    3606:	91 83       	std	Z+1, r25	; 0x01
    3608:	a2 83       	std	Z+2, r26	; 0x02
    360a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    360c:	fe 01       	movw	r30, r28
    360e:	e7 59       	subi	r30, 0x97	; 151
    3610:	ff 4f       	sbci	r31, 0xFF	; 255
    3612:	60 81       	ld	r22, Z
    3614:	71 81       	ldd	r23, Z+1	; 0x01
    3616:	82 81       	ldd	r24, Z+2	; 0x02
    3618:	93 81       	ldd	r25, Z+3	; 0x03
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	40 e8       	ldi	r20, 0x80	; 128
    3620:	5f e3       	ldi	r21, 0x3F	; 63
    3622:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3626:	88 23       	and	r24, r24
    3628:	44 f4       	brge	.+16     	; 0x363a <Stepper_voidCWHalfSteps+0x126>
		__ticks = 1;
    362a:	fe 01       	movw	r30, r28
    362c:	e9 59       	subi	r30, 0x99	; 153
    362e:	ff 4f       	sbci	r31, 0xFF	; 255
    3630:	81 e0       	ldi	r24, 0x01	; 1
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	91 83       	std	Z+1, r25	; 0x01
    3636:	80 83       	st	Z, r24
    3638:	64 c0       	rjmp	.+200    	; 0x3702 <Stepper_voidCWHalfSteps+0x1ee>
	else if (__tmp > 65535)
    363a:	fe 01       	movw	r30, r28
    363c:	e7 59       	subi	r30, 0x97	; 151
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	60 81       	ld	r22, Z
    3642:	71 81       	ldd	r23, Z+1	; 0x01
    3644:	82 81       	ldd	r24, Z+2	; 0x02
    3646:	93 81       	ldd	r25, Z+3	; 0x03
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	3f ef       	ldi	r19, 0xFF	; 255
    364c:	4f e7       	ldi	r20, 0x7F	; 127
    364e:	57 e4       	ldi	r21, 0x47	; 71
    3650:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3654:	18 16       	cp	r1, r24
    3656:	0c f0       	brlt	.+2      	; 0x365a <Stepper_voidCWHalfSteps+0x146>
    3658:	43 c0       	rjmp	.+134    	; 0x36e0 <Stepper_voidCWHalfSteps+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    365a:	fe 01       	movw	r30, r28
    365c:	e3 59       	subi	r30, 0x93	; 147
    365e:	ff 4f       	sbci	r31, 0xFF	; 255
    3660:	60 81       	ld	r22, Z
    3662:	71 81       	ldd	r23, Z+1	; 0x01
    3664:	82 81       	ldd	r24, Z+2	; 0x02
    3666:	93 81       	ldd	r25, Z+3	; 0x03
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	40 e2       	ldi	r20, 0x20	; 32
    366e:	51 e4       	ldi	r21, 0x41	; 65
    3670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	8e 01       	movw	r16, r28
    367a:	09 59       	subi	r16, 0x99	; 153
    367c:	1f 4f       	sbci	r17, 0xFF	; 255
    367e:	bc 01       	movw	r22, r24
    3680:	cd 01       	movw	r24, r26
    3682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	f8 01       	movw	r30, r16
    368c:	91 83       	std	Z+1, r25	; 0x01
    368e:	80 83       	st	Z, r24
    3690:	1f c0       	rjmp	.+62     	; 0x36d0 <Stepper_voidCWHalfSteps+0x1bc>
    3692:	fe 01       	movw	r30, r28
    3694:	eb 59       	subi	r30, 0x9B	; 155
    3696:	ff 4f       	sbci	r31, 0xFF	; 255
    3698:	88 ec       	ldi	r24, 0xC8	; 200
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	91 83       	std	Z+1, r25	; 0x01
    369e:	80 83       	st	Z, r24
    36a0:	fe 01       	movw	r30, r28
    36a2:	eb 59       	subi	r30, 0x9B	; 155
    36a4:	ff 4f       	sbci	r31, 0xFF	; 255
    36a6:	80 81       	ld	r24, Z
    36a8:	91 81       	ldd	r25, Z+1	; 0x01
    36aa:	01 97       	sbiw	r24, 0x01	; 1
    36ac:	f1 f7       	brne	.-4      	; 0x36aa <Stepper_voidCWHalfSteps+0x196>
    36ae:	fe 01       	movw	r30, r28
    36b0:	eb 59       	subi	r30, 0x9B	; 155
    36b2:	ff 4f       	sbci	r31, 0xFF	; 255
    36b4:	91 83       	std	Z+1, r25	; 0x01
    36b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b8:	de 01       	movw	r26, r28
    36ba:	a9 59       	subi	r26, 0x99	; 153
    36bc:	bf 4f       	sbci	r27, 0xFF	; 255
    36be:	fe 01       	movw	r30, r28
    36c0:	e9 59       	subi	r30, 0x99	; 153
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	80 81       	ld	r24, Z
    36c6:	91 81       	ldd	r25, Z+1	; 0x01
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	11 96       	adiw	r26, 0x01	; 1
    36cc:	9c 93       	st	X, r25
    36ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36d0:	fe 01       	movw	r30, r28
    36d2:	e9 59       	subi	r30, 0x99	; 153
    36d4:	ff 4f       	sbci	r31, 0xFF	; 255
    36d6:	80 81       	ld	r24, Z
    36d8:	91 81       	ldd	r25, Z+1	; 0x01
    36da:	00 97       	sbiw	r24, 0x00	; 0
    36dc:	d1 f6       	brne	.-76     	; 0x3692 <Stepper_voidCWHalfSteps+0x17e>
    36de:	27 c0       	rjmp	.+78     	; 0x372e <Stepper_voidCWHalfSteps+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e0:	8e 01       	movw	r16, r28
    36e2:	09 59       	subi	r16, 0x99	; 153
    36e4:	1f 4f       	sbci	r17, 0xFF	; 255
    36e6:	fe 01       	movw	r30, r28
    36e8:	e7 59       	subi	r30, 0x97	; 151
    36ea:	ff 4f       	sbci	r31, 0xFF	; 255
    36ec:	60 81       	ld	r22, Z
    36ee:	71 81       	ldd	r23, Z+1	; 0x01
    36f0:	82 81       	ldd	r24, Z+2	; 0x02
    36f2:	93 81       	ldd	r25, Z+3	; 0x03
    36f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f8:	dc 01       	movw	r26, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	f8 01       	movw	r30, r16
    36fe:	91 83       	std	Z+1, r25	; 0x01
    3700:	80 83       	st	Z, r24
    3702:	de 01       	movw	r26, r28
    3704:	ad 59       	subi	r26, 0x9D	; 157
    3706:	bf 4f       	sbci	r27, 0xFF	; 255
    3708:	fe 01       	movw	r30, r28
    370a:	e9 59       	subi	r30, 0x99	; 153
    370c:	ff 4f       	sbci	r31, 0xFF	; 255
    370e:	80 81       	ld	r24, Z
    3710:	91 81       	ldd	r25, Z+1	; 0x01
    3712:	8d 93       	st	X+, r24
    3714:	9c 93       	st	X, r25
    3716:	fe 01       	movw	r30, r28
    3718:	ed 59       	subi	r30, 0x9D	; 157
    371a:	ff 4f       	sbci	r31, 0xFF	; 255
    371c:	80 81       	ld	r24, Z
    371e:	91 81       	ldd	r25, Z+1	; 0x01
    3720:	01 97       	sbiw	r24, 0x01	; 1
    3722:	f1 f7       	brne	.-4      	; 0x3720 <Stepper_voidCWHalfSteps+0x20c>
    3724:	fe 01       	movw	r30, r28
    3726:	ed 59       	subi	r30, 0x9D	; 157
    3728:	ff 4f       	sbci	r31, 0xFF	; 255
    372a:	91 83       	std	Z+1, r25	; 0x01
    372c:	80 83       	st	Z, r24
	_delay_ms(2);
	/*the Blue is Low  and Pink all pin is high */
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_Low);
    372e:	fe 01       	movw	r30, r28
    3730:	ef 58       	subi	r30, 0x8F	; 143
    3732:	ff 4f       	sbci	r31, 0xFF	; 255
    3734:	01 90       	ld	r0, Z+
    3736:	f0 81       	ld	r31, Z
    3738:	e0 2d       	mov	r30, r0
    373a:	80 81       	ld	r24, Z
    373c:	fe 01       	movw	r30, r28
    373e:	ef 58       	subi	r30, 0x8F	; 143
    3740:	ff 4f       	sbci	r31, 0xFF	; 255
    3742:	01 90       	ld	r0, Z+
    3744:	f0 81       	ld	r31, Z
    3746:	e0 2d       	mov	r30, r0
    3748:	91 81       	ldd	r25, Z+1	; 0x01
    374a:	69 2f       	mov	r22, r25
    374c:	40 e0       	ldi	r20, 0x00	; 0
    374e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_Low);
    3752:	fe 01       	movw	r30, r28
    3754:	ef 58       	subi	r30, 0x8F	; 143
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	01 90       	ld	r0, Z+
    375a:	f0 81       	ld	r31, Z
    375c:	e0 2d       	mov	r30, r0
    375e:	80 81       	ld	r24, Z
    3760:	fe 01       	movw	r30, r28
    3762:	ef 58       	subi	r30, 0x8F	; 143
    3764:	ff 4f       	sbci	r31, 0xFF	; 255
    3766:	01 90       	ld	r0, Z+
    3768:	f0 81       	ld	r31, Z
    376a:	e0 2d       	mov	r30, r0
    376c:	92 81       	ldd	r25, Z+2	; 0x02
    376e:	69 2f       	mov	r22, r25
    3770:	40 e0       	ldi	r20, 0x00	; 0
    3772:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_High);
    3776:	fe 01       	movw	r30, r28
    3778:	ef 58       	subi	r30, 0x8F	; 143
    377a:	ff 4f       	sbci	r31, 0xFF	; 255
    377c:	01 90       	ld	r0, Z+
    377e:	f0 81       	ld	r31, Z
    3780:	e0 2d       	mov	r30, r0
    3782:	80 81       	ld	r24, Z
    3784:	fe 01       	movw	r30, r28
    3786:	ef 58       	subi	r30, 0x8F	; 143
    3788:	ff 4f       	sbci	r31, 0xFF	; 255
    378a:	01 90       	ld	r0, Z+
    378c:	f0 81       	ld	r31, Z
    378e:	e0 2d       	mov	r30, r0
    3790:	93 81       	ldd	r25, Z+3	; 0x03
    3792:	69 2f       	mov	r22, r25
    3794:	41 e0       	ldi	r20, 0x01	; 1
    3796:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_High);
    379a:	fe 01       	movw	r30, r28
    379c:	ef 58       	subi	r30, 0x8F	; 143
    379e:	ff 4f       	sbci	r31, 0xFF	; 255
    37a0:	01 90       	ld	r0, Z+
    37a2:	f0 81       	ld	r31, Z
    37a4:	e0 2d       	mov	r30, r0
    37a6:	80 81       	ld	r24, Z
    37a8:	fe 01       	movw	r30, r28
    37aa:	ef 58       	subi	r30, 0x8F	; 143
    37ac:	ff 4f       	sbci	r31, 0xFF	; 255
    37ae:	01 90       	ld	r0, Z+
    37b0:	f0 81       	ld	r31, Z
    37b2:	e0 2d       	mov	r30, r0
    37b4:	94 81       	ldd	r25, Z+4	; 0x04
    37b6:	69 2f       	mov	r22, r25
    37b8:	41 e0       	ldi	r20, 0x01	; 1
    37ba:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    37be:	fe 01       	movw	r30, r28
    37c0:	e1 5a       	subi	r30, 0xA1	; 161
    37c2:	ff 4f       	sbci	r31, 0xFF	; 255
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	a0 e0       	ldi	r26, 0x00	; 0
    37ca:	b0 e4       	ldi	r27, 0x40	; 64
    37cc:	80 83       	st	Z, r24
    37ce:	91 83       	std	Z+1, r25	; 0x01
    37d0:	a2 83       	std	Z+2, r26	; 0x02
    37d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d4:	8e 01       	movw	r16, r28
    37d6:	05 5a       	subi	r16, 0xA5	; 165
    37d8:	1f 4f       	sbci	r17, 0xFF	; 255
    37da:	fe 01       	movw	r30, r28
    37dc:	e1 5a       	subi	r30, 0xA1	; 161
    37de:	ff 4f       	sbci	r31, 0xFF	; 255
    37e0:	60 81       	ld	r22, Z
    37e2:	71 81       	ldd	r23, Z+1	; 0x01
    37e4:	82 81       	ldd	r24, Z+2	; 0x02
    37e6:	93 81       	ldd	r25, Z+3	; 0x03
    37e8:	20 e0       	ldi	r18, 0x00	; 0
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	4a ef       	ldi	r20, 0xFA	; 250
    37ee:	54 e4       	ldi	r21, 0x44	; 68
    37f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f4:	dc 01       	movw	r26, r24
    37f6:	cb 01       	movw	r24, r22
    37f8:	f8 01       	movw	r30, r16
    37fa:	80 83       	st	Z, r24
    37fc:	91 83       	std	Z+1, r25	; 0x01
    37fe:	a2 83       	std	Z+2, r26	; 0x02
    3800:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3802:	fe 01       	movw	r30, r28
    3804:	e5 5a       	subi	r30, 0xA5	; 165
    3806:	ff 4f       	sbci	r31, 0xFF	; 255
    3808:	60 81       	ld	r22, Z
    380a:	71 81       	ldd	r23, Z+1	; 0x01
    380c:	82 81       	ldd	r24, Z+2	; 0x02
    380e:	93 81       	ldd	r25, Z+3	; 0x03
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	40 e8       	ldi	r20, 0x80	; 128
    3816:	5f e3       	ldi	r21, 0x3F	; 63
    3818:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    381c:	88 23       	and	r24, r24
    381e:	44 f4       	brge	.+16     	; 0x3830 <Stepper_voidCWHalfSteps+0x31c>
		__ticks = 1;
    3820:	fe 01       	movw	r30, r28
    3822:	e7 5a       	subi	r30, 0xA7	; 167
    3824:	ff 4f       	sbci	r31, 0xFF	; 255
    3826:	81 e0       	ldi	r24, 0x01	; 1
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	91 83       	std	Z+1, r25	; 0x01
    382c:	80 83       	st	Z, r24
    382e:	64 c0       	rjmp	.+200    	; 0x38f8 <Stepper_voidCWHalfSteps+0x3e4>
	else if (__tmp > 65535)
    3830:	fe 01       	movw	r30, r28
    3832:	e5 5a       	subi	r30, 0xA5	; 165
    3834:	ff 4f       	sbci	r31, 0xFF	; 255
    3836:	60 81       	ld	r22, Z
    3838:	71 81       	ldd	r23, Z+1	; 0x01
    383a:	82 81       	ldd	r24, Z+2	; 0x02
    383c:	93 81       	ldd	r25, Z+3	; 0x03
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	3f ef       	ldi	r19, 0xFF	; 255
    3842:	4f e7       	ldi	r20, 0x7F	; 127
    3844:	57 e4       	ldi	r21, 0x47	; 71
    3846:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    384a:	18 16       	cp	r1, r24
    384c:	0c f0       	brlt	.+2      	; 0x3850 <Stepper_voidCWHalfSteps+0x33c>
    384e:	43 c0       	rjmp	.+134    	; 0x38d6 <Stepper_voidCWHalfSteps+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3850:	fe 01       	movw	r30, r28
    3852:	e1 5a       	subi	r30, 0xA1	; 161
    3854:	ff 4f       	sbci	r31, 0xFF	; 255
    3856:	60 81       	ld	r22, Z
    3858:	71 81       	ldd	r23, Z+1	; 0x01
    385a:	82 81       	ldd	r24, Z+2	; 0x02
    385c:	93 81       	ldd	r25, Z+3	; 0x03
    385e:	20 e0       	ldi	r18, 0x00	; 0
    3860:	30 e0       	ldi	r19, 0x00	; 0
    3862:	40 e2       	ldi	r20, 0x20	; 32
    3864:	51 e4       	ldi	r21, 0x41	; 65
    3866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    386a:	dc 01       	movw	r26, r24
    386c:	cb 01       	movw	r24, r22
    386e:	8e 01       	movw	r16, r28
    3870:	07 5a       	subi	r16, 0xA7	; 167
    3872:	1f 4f       	sbci	r17, 0xFF	; 255
    3874:	bc 01       	movw	r22, r24
    3876:	cd 01       	movw	r24, r26
    3878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	f8 01       	movw	r30, r16
    3882:	91 83       	std	Z+1, r25	; 0x01
    3884:	80 83       	st	Z, r24
    3886:	1f c0       	rjmp	.+62     	; 0x38c6 <Stepper_voidCWHalfSteps+0x3b2>
    3888:	fe 01       	movw	r30, r28
    388a:	e9 5a       	subi	r30, 0xA9	; 169
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	88 ec       	ldi	r24, 0xC8	; 200
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	91 83       	std	Z+1, r25	; 0x01
    3894:	80 83       	st	Z, r24
    3896:	fe 01       	movw	r30, r28
    3898:	e9 5a       	subi	r30, 0xA9	; 169
    389a:	ff 4f       	sbci	r31, 0xFF	; 255
    389c:	80 81       	ld	r24, Z
    389e:	91 81       	ldd	r25, Z+1	; 0x01
    38a0:	01 97       	sbiw	r24, 0x01	; 1
    38a2:	f1 f7       	brne	.-4      	; 0x38a0 <Stepper_voidCWHalfSteps+0x38c>
    38a4:	fe 01       	movw	r30, r28
    38a6:	e9 5a       	subi	r30, 0xA9	; 169
    38a8:	ff 4f       	sbci	r31, 0xFF	; 255
    38aa:	91 83       	std	Z+1, r25	; 0x01
    38ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ae:	de 01       	movw	r26, r28
    38b0:	a7 5a       	subi	r26, 0xA7	; 167
    38b2:	bf 4f       	sbci	r27, 0xFF	; 255
    38b4:	fe 01       	movw	r30, r28
    38b6:	e7 5a       	subi	r30, 0xA7	; 167
    38b8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ba:	80 81       	ld	r24, Z
    38bc:	91 81       	ldd	r25, Z+1	; 0x01
    38be:	01 97       	sbiw	r24, 0x01	; 1
    38c0:	11 96       	adiw	r26, 0x01	; 1
    38c2:	9c 93       	st	X, r25
    38c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c6:	fe 01       	movw	r30, r28
    38c8:	e7 5a       	subi	r30, 0xA7	; 167
    38ca:	ff 4f       	sbci	r31, 0xFF	; 255
    38cc:	80 81       	ld	r24, Z
    38ce:	91 81       	ldd	r25, Z+1	; 0x01
    38d0:	00 97       	sbiw	r24, 0x00	; 0
    38d2:	d1 f6       	brne	.-76     	; 0x3888 <Stepper_voidCWHalfSteps+0x374>
    38d4:	27 c0       	rjmp	.+78     	; 0x3924 <Stepper_voidCWHalfSteps+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38d6:	8e 01       	movw	r16, r28
    38d8:	07 5a       	subi	r16, 0xA7	; 167
    38da:	1f 4f       	sbci	r17, 0xFF	; 255
    38dc:	fe 01       	movw	r30, r28
    38de:	e5 5a       	subi	r30, 0xA5	; 165
    38e0:	ff 4f       	sbci	r31, 0xFF	; 255
    38e2:	60 81       	ld	r22, Z
    38e4:	71 81       	ldd	r23, Z+1	; 0x01
    38e6:	82 81       	ldd	r24, Z+2	; 0x02
    38e8:	93 81       	ldd	r25, Z+3	; 0x03
    38ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ee:	dc 01       	movw	r26, r24
    38f0:	cb 01       	movw	r24, r22
    38f2:	f8 01       	movw	r30, r16
    38f4:	91 83       	std	Z+1, r25	; 0x01
    38f6:	80 83       	st	Z, r24
    38f8:	de 01       	movw	r26, r28
    38fa:	ab 5a       	subi	r26, 0xAB	; 171
    38fc:	bf 4f       	sbci	r27, 0xFF	; 255
    38fe:	fe 01       	movw	r30, r28
    3900:	e7 5a       	subi	r30, 0xA7	; 167
    3902:	ff 4f       	sbci	r31, 0xFF	; 255
    3904:	80 81       	ld	r24, Z
    3906:	91 81       	ldd	r25, Z+1	; 0x01
    3908:	8d 93       	st	X+, r24
    390a:	9c 93       	st	X, r25
    390c:	fe 01       	movw	r30, r28
    390e:	eb 5a       	subi	r30, 0xAB	; 171
    3910:	ff 4f       	sbci	r31, 0xFF	; 255
    3912:	80 81       	ld	r24, Z
    3914:	91 81       	ldd	r25, Z+1	; 0x01
    3916:	01 97       	sbiw	r24, 0x01	; 1
    3918:	f1 f7       	brne	.-4      	; 0x3916 <Stepper_voidCWHalfSteps+0x402>
    391a:	fe 01       	movw	r30, r28
    391c:	eb 5a       	subi	r30, 0xAB	; 171
    391e:	ff 4f       	sbci	r31, 0xFF	; 255
    3920:	91 83       	std	Z+1, r25	; 0x01
    3922:	80 83       	st	Z, r24
	_delay_ms(2);
	/*the Pink is Low  and all pin is high*/
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_High);
    3924:	fe 01       	movw	r30, r28
    3926:	ef 58       	subi	r30, 0x8F	; 143
    3928:	ff 4f       	sbci	r31, 0xFF	; 255
    392a:	01 90       	ld	r0, Z+
    392c:	f0 81       	ld	r31, Z
    392e:	e0 2d       	mov	r30, r0
    3930:	80 81       	ld	r24, Z
    3932:	fe 01       	movw	r30, r28
    3934:	ef 58       	subi	r30, 0x8F	; 143
    3936:	ff 4f       	sbci	r31, 0xFF	; 255
    3938:	01 90       	ld	r0, Z+
    393a:	f0 81       	ld	r31, Z
    393c:	e0 2d       	mov	r30, r0
    393e:	91 81       	ldd	r25, Z+1	; 0x01
    3940:	69 2f       	mov	r22, r25
    3942:	41 e0       	ldi	r20, 0x01	; 1
    3944:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_Low);
    3948:	fe 01       	movw	r30, r28
    394a:	ef 58       	subi	r30, 0x8F	; 143
    394c:	ff 4f       	sbci	r31, 0xFF	; 255
    394e:	01 90       	ld	r0, Z+
    3950:	f0 81       	ld	r31, Z
    3952:	e0 2d       	mov	r30, r0
    3954:	80 81       	ld	r24, Z
    3956:	fe 01       	movw	r30, r28
    3958:	ef 58       	subi	r30, 0x8F	; 143
    395a:	ff 4f       	sbci	r31, 0xFF	; 255
    395c:	01 90       	ld	r0, Z+
    395e:	f0 81       	ld	r31, Z
    3960:	e0 2d       	mov	r30, r0
    3962:	92 81       	ldd	r25, Z+2	; 0x02
    3964:	69 2f       	mov	r22, r25
    3966:	40 e0       	ldi	r20, 0x00	; 0
    3968:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_High);
    396c:	fe 01       	movw	r30, r28
    396e:	ef 58       	subi	r30, 0x8F	; 143
    3970:	ff 4f       	sbci	r31, 0xFF	; 255
    3972:	01 90       	ld	r0, Z+
    3974:	f0 81       	ld	r31, Z
    3976:	e0 2d       	mov	r30, r0
    3978:	80 81       	ld	r24, Z
    397a:	fe 01       	movw	r30, r28
    397c:	ef 58       	subi	r30, 0x8F	; 143
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	01 90       	ld	r0, Z+
    3982:	f0 81       	ld	r31, Z
    3984:	e0 2d       	mov	r30, r0
    3986:	93 81       	ldd	r25, Z+3	; 0x03
    3988:	69 2f       	mov	r22, r25
    398a:	41 e0       	ldi	r20, 0x01	; 1
    398c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_High);
    3990:	fe 01       	movw	r30, r28
    3992:	ef 58       	subi	r30, 0x8F	; 143
    3994:	ff 4f       	sbci	r31, 0xFF	; 255
    3996:	01 90       	ld	r0, Z+
    3998:	f0 81       	ld	r31, Z
    399a:	e0 2d       	mov	r30, r0
    399c:	80 81       	ld	r24, Z
    399e:	fe 01       	movw	r30, r28
    39a0:	ef 58       	subi	r30, 0x8F	; 143
    39a2:	ff 4f       	sbci	r31, 0xFF	; 255
    39a4:	01 90       	ld	r0, Z+
    39a6:	f0 81       	ld	r31, Z
    39a8:	e0 2d       	mov	r30, r0
    39aa:	94 81       	ldd	r25, Z+4	; 0x04
    39ac:	69 2f       	mov	r22, r25
    39ae:	41 e0       	ldi	r20, 0x01	; 1
    39b0:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    39b4:	fe 01       	movw	r30, r28
    39b6:	ef 5a       	subi	r30, 0xAF	; 175
    39b8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ba:	80 e0       	ldi	r24, 0x00	; 0
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	a0 e0       	ldi	r26, 0x00	; 0
    39c0:	b0 e4       	ldi	r27, 0x40	; 64
    39c2:	80 83       	st	Z, r24
    39c4:	91 83       	std	Z+1, r25	; 0x01
    39c6:	a2 83       	std	Z+2, r26	; 0x02
    39c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ca:	8e 01       	movw	r16, r28
    39cc:	03 5b       	subi	r16, 0xB3	; 179
    39ce:	1f 4f       	sbci	r17, 0xFF	; 255
    39d0:	fe 01       	movw	r30, r28
    39d2:	ef 5a       	subi	r30, 0xAF	; 175
    39d4:	ff 4f       	sbci	r31, 0xFF	; 255
    39d6:	60 81       	ld	r22, Z
    39d8:	71 81       	ldd	r23, Z+1	; 0x01
    39da:	82 81       	ldd	r24, Z+2	; 0x02
    39dc:	93 81       	ldd	r25, Z+3	; 0x03
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	30 e0       	ldi	r19, 0x00	; 0
    39e2:	4a ef       	ldi	r20, 0xFA	; 250
    39e4:	54 e4       	ldi	r21, 0x44	; 68
    39e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ea:	dc 01       	movw	r26, r24
    39ec:	cb 01       	movw	r24, r22
    39ee:	f8 01       	movw	r30, r16
    39f0:	80 83       	st	Z, r24
    39f2:	91 83       	std	Z+1, r25	; 0x01
    39f4:	a2 83       	std	Z+2, r26	; 0x02
    39f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39f8:	fe 01       	movw	r30, r28
    39fa:	e3 5b       	subi	r30, 0xB3	; 179
    39fc:	ff 4f       	sbci	r31, 0xFF	; 255
    39fe:	60 81       	ld	r22, Z
    3a00:	71 81       	ldd	r23, Z+1	; 0x01
    3a02:	82 81       	ldd	r24, Z+2	; 0x02
    3a04:	93 81       	ldd	r25, Z+3	; 0x03
    3a06:	20 e0       	ldi	r18, 0x00	; 0
    3a08:	30 e0       	ldi	r19, 0x00	; 0
    3a0a:	40 e8       	ldi	r20, 0x80	; 128
    3a0c:	5f e3       	ldi	r21, 0x3F	; 63
    3a0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a12:	88 23       	and	r24, r24
    3a14:	44 f4       	brge	.+16     	; 0x3a26 <Stepper_voidCWHalfSteps+0x512>
		__ticks = 1;
    3a16:	fe 01       	movw	r30, r28
    3a18:	e5 5b       	subi	r30, 0xB5	; 181
    3a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1c:	81 e0       	ldi	r24, 0x01	; 1
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	91 83       	std	Z+1, r25	; 0x01
    3a22:	80 83       	st	Z, r24
    3a24:	64 c0       	rjmp	.+200    	; 0x3aee <Stepper_voidCWHalfSteps+0x5da>
	else if (__tmp > 65535)
    3a26:	fe 01       	movw	r30, r28
    3a28:	e3 5b       	subi	r30, 0xB3	; 179
    3a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2c:	60 81       	ld	r22, Z
    3a2e:	71 81       	ldd	r23, Z+1	; 0x01
    3a30:	82 81       	ldd	r24, Z+2	; 0x02
    3a32:	93 81       	ldd	r25, Z+3	; 0x03
    3a34:	20 e0       	ldi	r18, 0x00	; 0
    3a36:	3f ef       	ldi	r19, 0xFF	; 255
    3a38:	4f e7       	ldi	r20, 0x7F	; 127
    3a3a:	57 e4       	ldi	r21, 0x47	; 71
    3a3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a40:	18 16       	cp	r1, r24
    3a42:	0c f0       	brlt	.+2      	; 0x3a46 <Stepper_voidCWHalfSteps+0x532>
    3a44:	43 c0       	rjmp	.+134    	; 0x3acc <Stepper_voidCWHalfSteps+0x5b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a46:	fe 01       	movw	r30, r28
    3a48:	ef 5a       	subi	r30, 0xAF	; 175
    3a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4c:	60 81       	ld	r22, Z
    3a4e:	71 81       	ldd	r23, Z+1	; 0x01
    3a50:	82 81       	ldd	r24, Z+2	; 0x02
    3a52:	93 81       	ldd	r25, Z+3	; 0x03
    3a54:	20 e0       	ldi	r18, 0x00	; 0
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	40 e2       	ldi	r20, 0x20	; 32
    3a5a:	51 e4       	ldi	r21, 0x41	; 65
    3a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a60:	dc 01       	movw	r26, r24
    3a62:	cb 01       	movw	r24, r22
    3a64:	8e 01       	movw	r16, r28
    3a66:	05 5b       	subi	r16, 0xB5	; 181
    3a68:	1f 4f       	sbci	r17, 0xFF	; 255
    3a6a:	bc 01       	movw	r22, r24
    3a6c:	cd 01       	movw	r24, r26
    3a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a72:	dc 01       	movw	r26, r24
    3a74:	cb 01       	movw	r24, r22
    3a76:	f8 01       	movw	r30, r16
    3a78:	91 83       	std	Z+1, r25	; 0x01
    3a7a:	80 83       	st	Z, r24
    3a7c:	1f c0       	rjmp	.+62     	; 0x3abc <Stepper_voidCWHalfSteps+0x5a8>
    3a7e:	fe 01       	movw	r30, r28
    3a80:	e7 5b       	subi	r30, 0xB7	; 183
    3a82:	ff 4f       	sbci	r31, 0xFF	; 255
    3a84:	88 ec       	ldi	r24, 0xC8	; 200
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	91 83       	std	Z+1, r25	; 0x01
    3a8a:	80 83       	st	Z, r24
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	e7 5b       	subi	r30, 0xB7	; 183
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	80 81       	ld	r24, Z
    3a94:	91 81       	ldd	r25, Z+1	; 0x01
    3a96:	01 97       	sbiw	r24, 0x01	; 1
    3a98:	f1 f7       	brne	.-4      	; 0x3a96 <Stepper_voidCWHalfSteps+0x582>
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	e7 5b       	subi	r30, 0xB7	; 183
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	91 83       	std	Z+1, r25	; 0x01
    3aa2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa4:	de 01       	movw	r26, r28
    3aa6:	a5 5b       	subi	r26, 0xB5	; 181
    3aa8:	bf 4f       	sbci	r27, 0xFF	; 255
    3aaa:	fe 01       	movw	r30, r28
    3aac:	e5 5b       	subi	r30, 0xB5	; 181
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	80 81       	ld	r24, Z
    3ab2:	91 81       	ldd	r25, Z+1	; 0x01
    3ab4:	01 97       	sbiw	r24, 0x01	; 1
    3ab6:	11 96       	adiw	r26, 0x01	; 1
    3ab8:	9c 93       	st	X, r25
    3aba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3abc:	fe 01       	movw	r30, r28
    3abe:	e5 5b       	subi	r30, 0xB5	; 181
    3ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac2:	80 81       	ld	r24, Z
    3ac4:	91 81       	ldd	r25, Z+1	; 0x01
    3ac6:	00 97       	sbiw	r24, 0x00	; 0
    3ac8:	d1 f6       	brne	.-76     	; 0x3a7e <Stepper_voidCWHalfSteps+0x56a>
    3aca:	27 c0       	rjmp	.+78     	; 0x3b1a <Stepper_voidCWHalfSteps+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3acc:	8e 01       	movw	r16, r28
    3ace:	05 5b       	subi	r16, 0xB5	; 181
    3ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	e3 5b       	subi	r30, 0xB3	; 179
    3ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad8:	60 81       	ld	r22, Z
    3ada:	71 81       	ldd	r23, Z+1	; 0x01
    3adc:	82 81       	ldd	r24, Z+2	; 0x02
    3ade:	93 81       	ldd	r25, Z+3	; 0x03
    3ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae4:	dc 01       	movw	r26, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	f8 01       	movw	r30, r16
    3aea:	91 83       	std	Z+1, r25	; 0x01
    3aec:	80 83       	st	Z, r24
    3aee:	de 01       	movw	r26, r28
    3af0:	a9 5b       	subi	r26, 0xB9	; 185
    3af2:	bf 4f       	sbci	r27, 0xFF	; 255
    3af4:	fe 01       	movw	r30, r28
    3af6:	e5 5b       	subi	r30, 0xB5	; 181
    3af8:	ff 4f       	sbci	r31, 0xFF	; 255
    3afa:	80 81       	ld	r24, Z
    3afc:	91 81       	ldd	r25, Z+1	; 0x01
    3afe:	8d 93       	st	X+, r24
    3b00:	9c 93       	st	X, r25
    3b02:	fe 01       	movw	r30, r28
    3b04:	e9 5b       	subi	r30, 0xB9	; 185
    3b06:	ff 4f       	sbci	r31, 0xFF	; 255
    3b08:	80 81       	ld	r24, Z
    3b0a:	91 81       	ldd	r25, Z+1	; 0x01
    3b0c:	01 97       	sbiw	r24, 0x01	; 1
    3b0e:	f1 f7       	brne	.-4      	; 0x3b0c <Stepper_voidCWHalfSteps+0x5f8>
    3b10:	fe 01       	movw	r30, r28
    3b12:	e9 5b       	subi	r30, 0xB9	; 185
    3b14:	ff 4f       	sbci	r31, 0xFF	; 255
    3b16:	91 83       	std	Z+1, r25	; 0x01
    3b18:	80 83       	st	Z, r24
	_delay_ms(2);
	/*the Pink is Low  and all pin is high*/
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_High);
    3b1a:	fe 01       	movw	r30, r28
    3b1c:	ef 58       	subi	r30, 0x8F	; 143
    3b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b20:	01 90       	ld	r0, Z+
    3b22:	f0 81       	ld	r31, Z
    3b24:	e0 2d       	mov	r30, r0
    3b26:	80 81       	ld	r24, Z
    3b28:	fe 01       	movw	r30, r28
    3b2a:	ef 58       	subi	r30, 0x8F	; 143
    3b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2e:	01 90       	ld	r0, Z+
    3b30:	f0 81       	ld	r31, Z
    3b32:	e0 2d       	mov	r30, r0
    3b34:	91 81       	ldd	r25, Z+1	; 0x01
    3b36:	69 2f       	mov	r22, r25
    3b38:	41 e0       	ldi	r20, 0x01	; 1
    3b3a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_Low);
    3b3e:	fe 01       	movw	r30, r28
    3b40:	ef 58       	subi	r30, 0x8F	; 143
    3b42:	ff 4f       	sbci	r31, 0xFF	; 255
    3b44:	01 90       	ld	r0, Z+
    3b46:	f0 81       	ld	r31, Z
    3b48:	e0 2d       	mov	r30, r0
    3b4a:	80 81       	ld	r24, Z
    3b4c:	fe 01       	movw	r30, r28
    3b4e:	ef 58       	subi	r30, 0x8F	; 143
    3b50:	ff 4f       	sbci	r31, 0xFF	; 255
    3b52:	01 90       	ld	r0, Z+
    3b54:	f0 81       	ld	r31, Z
    3b56:	e0 2d       	mov	r30, r0
    3b58:	92 81       	ldd	r25, Z+2	; 0x02
    3b5a:	69 2f       	mov	r22, r25
    3b5c:	40 e0       	ldi	r20, 0x00	; 0
    3b5e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_Low);
    3b62:	fe 01       	movw	r30, r28
    3b64:	ef 58       	subi	r30, 0x8F	; 143
    3b66:	ff 4f       	sbci	r31, 0xFF	; 255
    3b68:	01 90       	ld	r0, Z+
    3b6a:	f0 81       	ld	r31, Z
    3b6c:	e0 2d       	mov	r30, r0
    3b6e:	80 81       	ld	r24, Z
    3b70:	fe 01       	movw	r30, r28
    3b72:	ef 58       	subi	r30, 0x8F	; 143
    3b74:	ff 4f       	sbci	r31, 0xFF	; 255
    3b76:	01 90       	ld	r0, Z+
    3b78:	f0 81       	ld	r31, Z
    3b7a:	e0 2d       	mov	r30, r0
    3b7c:	93 81       	ldd	r25, Z+3	; 0x03
    3b7e:	69 2f       	mov	r22, r25
    3b80:	40 e0       	ldi	r20, 0x00	; 0
    3b82:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_High);
    3b86:	fe 01       	movw	r30, r28
    3b88:	ef 58       	subi	r30, 0x8F	; 143
    3b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8c:	01 90       	ld	r0, Z+
    3b8e:	f0 81       	ld	r31, Z
    3b90:	e0 2d       	mov	r30, r0
    3b92:	80 81       	ld	r24, Z
    3b94:	fe 01       	movw	r30, r28
    3b96:	ef 58       	subi	r30, 0x8F	; 143
    3b98:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9a:	01 90       	ld	r0, Z+
    3b9c:	f0 81       	ld	r31, Z
    3b9e:	e0 2d       	mov	r30, r0
    3ba0:	94 81       	ldd	r25, Z+4	; 0x04
    3ba2:	69 2f       	mov	r22, r25
    3ba4:	41 e0       	ldi	r20, 0x01	; 1
    3ba6:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    3baa:	fe 01       	movw	r30, r28
    3bac:	ed 5b       	subi	r30, 0xBD	; 189
    3bae:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	a0 e0       	ldi	r26, 0x00	; 0
    3bb6:	b0 e4       	ldi	r27, 0x40	; 64
    3bb8:	80 83       	st	Z, r24
    3bba:	91 83       	std	Z+1, r25	; 0x01
    3bbc:	a2 83       	std	Z+2, r26	; 0x02
    3bbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bc0:	8e 01       	movw	r16, r28
    3bc2:	01 5c       	subi	r16, 0xC1	; 193
    3bc4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc6:	fe 01       	movw	r30, r28
    3bc8:	ed 5b       	subi	r30, 0xBD	; 189
    3bca:	ff 4f       	sbci	r31, 0xFF	; 255
    3bcc:	60 81       	ld	r22, Z
    3bce:	71 81       	ldd	r23, Z+1	; 0x01
    3bd0:	82 81       	ldd	r24, Z+2	; 0x02
    3bd2:	93 81       	ldd	r25, Z+3	; 0x03
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	4a ef       	ldi	r20, 0xFA	; 250
    3bda:	54 e4       	ldi	r21, 0x44	; 68
    3bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	f8 01       	movw	r30, r16
    3be6:	80 83       	st	Z, r24
    3be8:	91 83       	std	Z+1, r25	; 0x01
    3bea:	a2 83       	std	Z+2, r26	; 0x02
    3bec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bee:	fe 01       	movw	r30, r28
    3bf0:	ff 96       	adiw	r30, 0x3f	; 63
    3bf2:	60 81       	ld	r22, Z
    3bf4:	71 81       	ldd	r23, Z+1	; 0x01
    3bf6:	82 81       	ldd	r24, Z+2	; 0x02
    3bf8:	93 81       	ldd	r25, Z+3	; 0x03
    3bfa:	20 e0       	ldi	r18, 0x00	; 0
    3bfc:	30 e0       	ldi	r19, 0x00	; 0
    3bfe:	40 e8       	ldi	r20, 0x80	; 128
    3c00:	5f e3       	ldi	r21, 0x3F	; 63
    3c02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c06:	88 23       	and	r24, r24
    3c08:	2c f4       	brge	.+10     	; 0x3c14 <Stepper_voidCWHalfSteps+0x700>
		__ticks = 1;
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	9e af       	std	Y+62, r25	; 0x3e
    3c10:	8d af       	std	Y+61, r24	; 0x3d
    3c12:	46 c0       	rjmp	.+140    	; 0x3ca0 <Stepper_voidCWHalfSteps+0x78c>
	else if (__tmp > 65535)
    3c14:	fe 01       	movw	r30, r28
    3c16:	ff 96       	adiw	r30, 0x3f	; 63
    3c18:	60 81       	ld	r22, Z
    3c1a:	71 81       	ldd	r23, Z+1	; 0x01
    3c1c:	82 81       	ldd	r24, Z+2	; 0x02
    3c1e:	93 81       	ldd	r25, Z+3	; 0x03
    3c20:	20 e0       	ldi	r18, 0x00	; 0
    3c22:	3f ef       	ldi	r19, 0xFF	; 255
    3c24:	4f e7       	ldi	r20, 0x7F	; 127
    3c26:	57 e4       	ldi	r21, 0x47	; 71
    3c28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c2c:	18 16       	cp	r1, r24
    3c2e:	64 f5       	brge	.+88     	; 0x3c88 <Stepper_voidCWHalfSteps+0x774>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c30:	fe 01       	movw	r30, r28
    3c32:	ed 5b       	subi	r30, 0xBD	; 189
    3c34:	ff 4f       	sbci	r31, 0xFF	; 255
    3c36:	60 81       	ld	r22, Z
    3c38:	71 81       	ldd	r23, Z+1	; 0x01
    3c3a:	82 81       	ldd	r24, Z+2	; 0x02
    3c3c:	93 81       	ldd	r25, Z+3	; 0x03
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	40 e2       	ldi	r20, 0x20	; 32
    3c44:	51 e4       	ldi	r21, 0x41	; 65
    3c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	cb 01       	movw	r24, r22
    3c4e:	bc 01       	movw	r22, r24
    3c50:	cd 01       	movw	r24, r26
    3c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	9e af       	std	Y+62, r25	; 0x3e
    3c5c:	8d af       	std	Y+61, r24	; 0x3d
    3c5e:	0f c0       	rjmp	.+30     	; 0x3c7e <Stepper_voidCWHalfSteps+0x76a>
    3c60:	88 ec       	ldi	r24, 0xC8	; 200
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	9c af       	std	Y+60, r25	; 0x3c
    3c66:	8b af       	std	Y+59, r24	; 0x3b
    3c68:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c6a:	9c ad       	ldd	r25, Y+60	; 0x3c
    3c6c:	01 97       	sbiw	r24, 0x01	; 1
    3c6e:	f1 f7       	brne	.-4      	; 0x3c6c <Stepper_voidCWHalfSteps+0x758>
    3c70:	9c af       	std	Y+60, r25	; 0x3c
    3c72:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c74:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c76:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c78:	01 97       	sbiw	r24, 0x01	; 1
    3c7a:	9e af       	std	Y+62, r25	; 0x3e
    3c7c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c80:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c82:	00 97       	sbiw	r24, 0x00	; 0
    3c84:	69 f7       	brne	.-38     	; 0x3c60 <Stepper_voidCWHalfSteps+0x74c>
    3c86:	16 c0       	rjmp	.+44     	; 0x3cb4 <Stepper_voidCWHalfSteps+0x7a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c88:	fe 01       	movw	r30, r28
    3c8a:	ff 96       	adiw	r30, 0x3f	; 63
    3c8c:	60 81       	ld	r22, Z
    3c8e:	71 81       	ldd	r23, Z+1	; 0x01
    3c90:	82 81       	ldd	r24, Z+2	; 0x02
    3c92:	93 81       	ldd	r25, Z+3	; 0x03
    3c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c98:	dc 01       	movw	r26, r24
    3c9a:	cb 01       	movw	r24, r22
    3c9c:	9e af       	std	Y+62, r25	; 0x3e
    3c9e:	8d af       	std	Y+61, r24	; 0x3d
    3ca0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ca2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ca4:	9a af       	std	Y+58, r25	; 0x3a
    3ca6:	89 af       	std	Y+57, r24	; 0x39
    3ca8:	89 ad       	ldd	r24, Y+57	; 0x39
    3caa:	9a ad       	ldd	r25, Y+58	; 0x3a
    3cac:	01 97       	sbiw	r24, 0x01	; 1
    3cae:	f1 f7       	brne	.-4      	; 0x3cac <Stepper_voidCWHalfSteps+0x798>
    3cb0:	9a af       	std	Y+58, r25	; 0x3a
    3cb2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	/*the Yellow is Low  and all pin is high*/
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_High);
    3cb4:	fe 01       	movw	r30, r28
    3cb6:	ef 58       	subi	r30, 0x8F	; 143
    3cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cba:	01 90       	ld	r0, Z+
    3cbc:	f0 81       	ld	r31, Z
    3cbe:	e0 2d       	mov	r30, r0
    3cc0:	80 81       	ld	r24, Z
    3cc2:	fe 01       	movw	r30, r28
    3cc4:	ef 58       	subi	r30, 0x8F	; 143
    3cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc8:	01 90       	ld	r0, Z+
    3cca:	f0 81       	ld	r31, Z
    3ccc:	e0 2d       	mov	r30, r0
    3cce:	91 81       	ldd	r25, Z+1	; 0x01
    3cd0:	69 2f       	mov	r22, r25
    3cd2:	41 e0       	ldi	r20, 0x01	; 1
    3cd4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_High);
    3cd8:	fe 01       	movw	r30, r28
    3cda:	ef 58       	subi	r30, 0x8F	; 143
    3cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cde:	01 90       	ld	r0, Z+
    3ce0:	f0 81       	ld	r31, Z
    3ce2:	e0 2d       	mov	r30, r0
    3ce4:	80 81       	ld	r24, Z
    3ce6:	fe 01       	movw	r30, r28
    3ce8:	ef 58       	subi	r30, 0x8F	; 143
    3cea:	ff 4f       	sbci	r31, 0xFF	; 255
    3cec:	01 90       	ld	r0, Z+
    3cee:	f0 81       	ld	r31, Z
    3cf0:	e0 2d       	mov	r30, r0
    3cf2:	92 81       	ldd	r25, Z+2	; 0x02
    3cf4:	69 2f       	mov	r22, r25
    3cf6:	41 e0       	ldi	r20, 0x01	; 1
    3cf8:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_Low);
    3cfc:	fe 01       	movw	r30, r28
    3cfe:	ef 58       	subi	r30, 0x8F	; 143
    3d00:	ff 4f       	sbci	r31, 0xFF	; 255
    3d02:	01 90       	ld	r0, Z+
    3d04:	f0 81       	ld	r31, Z
    3d06:	e0 2d       	mov	r30, r0
    3d08:	80 81       	ld	r24, Z
    3d0a:	fe 01       	movw	r30, r28
    3d0c:	ef 58       	subi	r30, 0x8F	; 143
    3d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d10:	01 90       	ld	r0, Z+
    3d12:	f0 81       	ld	r31, Z
    3d14:	e0 2d       	mov	r30, r0
    3d16:	93 81       	ldd	r25, Z+3	; 0x03
    3d18:	69 2f       	mov	r22, r25
    3d1a:	40 e0       	ldi	r20, 0x00	; 0
    3d1c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_High);
    3d20:	fe 01       	movw	r30, r28
    3d22:	ef 58       	subi	r30, 0x8F	; 143
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	01 90       	ld	r0, Z+
    3d28:	f0 81       	ld	r31, Z
    3d2a:	e0 2d       	mov	r30, r0
    3d2c:	80 81       	ld	r24, Z
    3d2e:	fe 01       	movw	r30, r28
    3d30:	ef 58       	subi	r30, 0x8F	; 143
    3d32:	ff 4f       	sbci	r31, 0xFF	; 255
    3d34:	01 90       	ld	r0, Z+
    3d36:	f0 81       	ld	r31, Z
    3d38:	e0 2d       	mov	r30, r0
    3d3a:	94 81       	ldd	r25, Z+4	; 0x04
    3d3c:	69 2f       	mov	r22, r25
    3d3e:	41 e0       	ldi	r20, 0x01	; 1
    3d40:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    3d44:	80 e0       	ldi	r24, 0x00	; 0
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	a0 e0       	ldi	r26, 0x00	; 0
    3d4a:	b0 e4       	ldi	r27, 0x40	; 64
    3d4c:	8d ab       	std	Y+53, r24	; 0x35
    3d4e:	9e ab       	std	Y+54, r25	; 0x36
    3d50:	af ab       	std	Y+55, r26	; 0x37
    3d52:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d54:	6d a9       	ldd	r22, Y+53	; 0x35
    3d56:	7e a9       	ldd	r23, Y+54	; 0x36
    3d58:	8f a9       	ldd	r24, Y+55	; 0x37
    3d5a:	98 ad       	ldd	r25, Y+56	; 0x38
    3d5c:	20 e0       	ldi	r18, 0x00	; 0
    3d5e:	30 e0       	ldi	r19, 0x00	; 0
    3d60:	4a ef       	ldi	r20, 0xFA	; 250
    3d62:	54 e4       	ldi	r21, 0x44	; 68
    3d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d68:	dc 01       	movw	r26, r24
    3d6a:	cb 01       	movw	r24, r22
    3d6c:	89 ab       	std	Y+49, r24	; 0x31
    3d6e:	9a ab       	std	Y+50, r25	; 0x32
    3d70:	ab ab       	std	Y+51, r26	; 0x33
    3d72:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d74:	69 a9       	ldd	r22, Y+49	; 0x31
    3d76:	7a a9       	ldd	r23, Y+50	; 0x32
    3d78:	8b a9       	ldd	r24, Y+51	; 0x33
    3d7a:	9c a9       	ldd	r25, Y+52	; 0x34
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	40 e8       	ldi	r20, 0x80	; 128
    3d82:	5f e3       	ldi	r21, 0x3F	; 63
    3d84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d88:	88 23       	and	r24, r24
    3d8a:	2c f4       	brge	.+10     	; 0x3d96 <Stepper_voidCWHalfSteps+0x882>
		__ticks = 1;
    3d8c:	81 e0       	ldi	r24, 0x01	; 1
    3d8e:	90 e0       	ldi	r25, 0x00	; 0
    3d90:	98 ab       	std	Y+48, r25	; 0x30
    3d92:	8f a7       	std	Y+47, r24	; 0x2f
    3d94:	3f c0       	rjmp	.+126    	; 0x3e14 <Stepper_voidCWHalfSteps+0x900>
	else if (__tmp > 65535)
    3d96:	69 a9       	ldd	r22, Y+49	; 0x31
    3d98:	7a a9       	ldd	r23, Y+50	; 0x32
    3d9a:	8b a9       	ldd	r24, Y+51	; 0x33
    3d9c:	9c a9       	ldd	r25, Y+52	; 0x34
    3d9e:	20 e0       	ldi	r18, 0x00	; 0
    3da0:	3f ef       	ldi	r19, 0xFF	; 255
    3da2:	4f e7       	ldi	r20, 0x7F	; 127
    3da4:	57 e4       	ldi	r21, 0x47	; 71
    3da6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3daa:	18 16       	cp	r1, r24
    3dac:	4c f5       	brge	.+82     	; 0x3e00 <Stepper_voidCWHalfSteps+0x8ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dae:	6d a9       	ldd	r22, Y+53	; 0x35
    3db0:	7e a9       	ldd	r23, Y+54	; 0x36
    3db2:	8f a9       	ldd	r24, Y+55	; 0x37
    3db4:	98 ad       	ldd	r25, Y+56	; 0x38
    3db6:	20 e0       	ldi	r18, 0x00	; 0
    3db8:	30 e0       	ldi	r19, 0x00	; 0
    3dba:	40 e2       	ldi	r20, 0x20	; 32
    3dbc:	51 e4       	ldi	r21, 0x41	; 65
    3dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	bc 01       	movw	r22, r24
    3dc8:	cd 01       	movw	r24, r26
    3dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dce:	dc 01       	movw	r26, r24
    3dd0:	cb 01       	movw	r24, r22
    3dd2:	98 ab       	std	Y+48, r25	; 0x30
    3dd4:	8f a7       	std	Y+47, r24	; 0x2f
    3dd6:	0f c0       	rjmp	.+30     	; 0x3df6 <Stepper_voidCWHalfSteps+0x8e2>
    3dd8:	88 ec       	ldi	r24, 0xC8	; 200
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	9e a7       	std	Y+46, r25	; 0x2e
    3dde:	8d a7       	std	Y+45, r24	; 0x2d
    3de0:	8d a5       	ldd	r24, Y+45	; 0x2d
    3de2:	9e a5       	ldd	r25, Y+46	; 0x2e
    3de4:	01 97       	sbiw	r24, 0x01	; 1
    3de6:	f1 f7       	brne	.-4      	; 0x3de4 <Stepper_voidCWHalfSteps+0x8d0>
    3de8:	9e a7       	std	Y+46, r25	; 0x2e
    3dea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dec:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dee:	98 a9       	ldd	r25, Y+48	; 0x30
    3df0:	01 97       	sbiw	r24, 0x01	; 1
    3df2:	98 ab       	std	Y+48, r25	; 0x30
    3df4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3df6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3df8:	98 a9       	ldd	r25, Y+48	; 0x30
    3dfa:	00 97       	sbiw	r24, 0x00	; 0
    3dfc:	69 f7       	brne	.-38     	; 0x3dd8 <Stepper_voidCWHalfSteps+0x8c4>
    3dfe:	14 c0       	rjmp	.+40     	; 0x3e28 <Stepper_voidCWHalfSteps+0x914>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e00:	69 a9       	ldd	r22, Y+49	; 0x31
    3e02:	7a a9       	ldd	r23, Y+50	; 0x32
    3e04:	8b a9       	ldd	r24, Y+51	; 0x33
    3e06:	9c a9       	ldd	r25, Y+52	; 0x34
    3e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	cb 01       	movw	r24, r22
    3e10:	98 ab       	std	Y+48, r25	; 0x30
    3e12:	8f a7       	std	Y+47, r24	; 0x2f
    3e14:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e16:	98 a9       	ldd	r25, Y+48	; 0x30
    3e18:	9c a7       	std	Y+44, r25	; 0x2c
    3e1a:	8b a7       	std	Y+43, r24	; 0x2b
    3e1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e20:	01 97       	sbiw	r24, 0x01	; 1
    3e22:	f1 f7       	brne	.-4      	; 0x3e20 <Stepper_voidCWHalfSteps+0x90c>
    3e24:	9c a7       	std	Y+44, r25	; 0x2c
    3e26:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);

	/*the Yellow is Low  and all pin is high*/
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_High);
    3e28:	fe 01       	movw	r30, r28
    3e2a:	ef 58       	subi	r30, 0x8F	; 143
    3e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2e:	01 90       	ld	r0, Z+
    3e30:	f0 81       	ld	r31, Z
    3e32:	e0 2d       	mov	r30, r0
    3e34:	80 81       	ld	r24, Z
    3e36:	fe 01       	movw	r30, r28
    3e38:	ef 58       	subi	r30, 0x8F	; 143
    3e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3c:	01 90       	ld	r0, Z+
    3e3e:	f0 81       	ld	r31, Z
    3e40:	e0 2d       	mov	r30, r0
    3e42:	91 81       	ldd	r25, Z+1	; 0x01
    3e44:	69 2f       	mov	r22, r25
    3e46:	41 e0       	ldi	r20, 0x01	; 1
    3e48:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_High);
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	ef 58       	subi	r30, 0x8F	; 143
    3e50:	ff 4f       	sbci	r31, 0xFF	; 255
    3e52:	01 90       	ld	r0, Z+
    3e54:	f0 81       	ld	r31, Z
    3e56:	e0 2d       	mov	r30, r0
    3e58:	80 81       	ld	r24, Z
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	ef 58       	subi	r30, 0x8F	; 143
    3e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e60:	01 90       	ld	r0, Z+
    3e62:	f0 81       	ld	r31, Z
    3e64:	e0 2d       	mov	r30, r0
    3e66:	92 81       	ldd	r25, Z+2	; 0x02
    3e68:	69 2f       	mov	r22, r25
    3e6a:	41 e0       	ldi	r20, 0x01	; 1
    3e6c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_Low);
    3e70:	fe 01       	movw	r30, r28
    3e72:	ef 58       	subi	r30, 0x8F	; 143
    3e74:	ff 4f       	sbci	r31, 0xFF	; 255
    3e76:	01 90       	ld	r0, Z+
    3e78:	f0 81       	ld	r31, Z
    3e7a:	e0 2d       	mov	r30, r0
    3e7c:	80 81       	ld	r24, Z
    3e7e:	fe 01       	movw	r30, r28
    3e80:	ef 58       	subi	r30, 0x8F	; 143
    3e82:	ff 4f       	sbci	r31, 0xFF	; 255
    3e84:	01 90       	ld	r0, Z+
    3e86:	f0 81       	ld	r31, Z
    3e88:	e0 2d       	mov	r30, r0
    3e8a:	93 81       	ldd	r25, Z+3	; 0x03
    3e8c:	69 2f       	mov	r22, r25
    3e8e:	40 e0       	ldi	r20, 0x00	; 0
    3e90:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_Low);
    3e94:	fe 01       	movw	r30, r28
    3e96:	ef 58       	subi	r30, 0x8F	; 143
    3e98:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9a:	01 90       	ld	r0, Z+
    3e9c:	f0 81       	ld	r31, Z
    3e9e:	e0 2d       	mov	r30, r0
    3ea0:	80 81       	ld	r24, Z
    3ea2:	fe 01       	movw	r30, r28
    3ea4:	ef 58       	subi	r30, 0x8F	; 143
    3ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea8:	01 90       	ld	r0, Z+
    3eaa:	f0 81       	ld	r31, Z
    3eac:	e0 2d       	mov	r30, r0
    3eae:	94 81       	ldd	r25, Z+4	; 0x04
    3eb0:	69 2f       	mov	r22, r25
    3eb2:	40 e0       	ldi	r20, 0x00	; 0
    3eb4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    3eb8:	80 e0       	ldi	r24, 0x00	; 0
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	a0 e0       	ldi	r26, 0x00	; 0
    3ebe:	b0 e4       	ldi	r27, 0x40	; 64
    3ec0:	8f a3       	std	Y+39, r24	; 0x27
    3ec2:	98 a7       	std	Y+40, r25	; 0x28
    3ec4:	a9 a7       	std	Y+41, r26	; 0x29
    3ec6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec8:	6f a1       	ldd	r22, Y+39	; 0x27
    3eca:	78 a5       	ldd	r23, Y+40	; 0x28
    3ecc:	89 a5       	ldd	r24, Y+41	; 0x29
    3ece:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ed0:	20 e0       	ldi	r18, 0x00	; 0
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	4a ef       	ldi	r20, 0xFA	; 250
    3ed6:	54 e4       	ldi	r21, 0x44	; 68
    3ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3edc:	dc 01       	movw	r26, r24
    3ede:	cb 01       	movw	r24, r22
    3ee0:	8b a3       	std	Y+35, r24	; 0x23
    3ee2:	9c a3       	std	Y+36, r25	; 0x24
    3ee4:	ad a3       	std	Y+37, r26	; 0x25
    3ee6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ee8:	6b a1       	ldd	r22, Y+35	; 0x23
    3eea:	7c a1       	ldd	r23, Y+36	; 0x24
    3eec:	8d a1       	ldd	r24, Y+37	; 0x25
    3eee:	9e a1       	ldd	r25, Y+38	; 0x26
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	40 e8       	ldi	r20, 0x80	; 128
    3ef6:	5f e3       	ldi	r21, 0x3F	; 63
    3ef8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3efc:	88 23       	and	r24, r24
    3efe:	2c f4       	brge	.+10     	; 0x3f0a <Stepper_voidCWHalfSteps+0x9f6>
		__ticks = 1;
    3f00:	81 e0       	ldi	r24, 0x01	; 1
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	9a a3       	std	Y+34, r25	; 0x22
    3f06:	89 a3       	std	Y+33, r24	; 0x21
    3f08:	3f c0       	rjmp	.+126    	; 0x3f88 <Stepper_voidCWHalfSteps+0xa74>
	else if (__tmp > 65535)
    3f0a:	6b a1       	ldd	r22, Y+35	; 0x23
    3f0c:	7c a1       	ldd	r23, Y+36	; 0x24
    3f0e:	8d a1       	ldd	r24, Y+37	; 0x25
    3f10:	9e a1       	ldd	r25, Y+38	; 0x26
    3f12:	20 e0       	ldi	r18, 0x00	; 0
    3f14:	3f ef       	ldi	r19, 0xFF	; 255
    3f16:	4f e7       	ldi	r20, 0x7F	; 127
    3f18:	57 e4       	ldi	r21, 0x47	; 71
    3f1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f1e:	18 16       	cp	r1, r24
    3f20:	4c f5       	brge	.+82     	; 0x3f74 <Stepper_voidCWHalfSteps+0xa60>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f22:	6f a1       	ldd	r22, Y+39	; 0x27
    3f24:	78 a5       	ldd	r23, Y+40	; 0x28
    3f26:	89 a5       	ldd	r24, Y+41	; 0x29
    3f28:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f2a:	20 e0       	ldi	r18, 0x00	; 0
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	40 e2       	ldi	r20, 0x20	; 32
    3f30:	51 e4       	ldi	r21, 0x41	; 65
    3f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f36:	dc 01       	movw	r26, r24
    3f38:	cb 01       	movw	r24, r22
    3f3a:	bc 01       	movw	r22, r24
    3f3c:	cd 01       	movw	r24, r26
    3f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22
    3f46:	9a a3       	std	Y+34, r25	; 0x22
    3f48:	89 a3       	std	Y+33, r24	; 0x21
    3f4a:	0f c0       	rjmp	.+30     	; 0x3f6a <Stepper_voidCWHalfSteps+0xa56>
    3f4c:	88 ec       	ldi	r24, 0xC8	; 200
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	98 a3       	std	Y+32, r25	; 0x20
    3f52:	8f 8f       	std	Y+31, r24	; 0x1f
    3f54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f56:	98 a1       	ldd	r25, Y+32	; 0x20
    3f58:	01 97       	sbiw	r24, 0x01	; 1
    3f5a:	f1 f7       	brne	.-4      	; 0x3f58 <Stepper_voidCWHalfSteps+0xa44>
    3f5c:	98 a3       	std	Y+32, r25	; 0x20
    3f5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f60:	89 a1       	ldd	r24, Y+33	; 0x21
    3f62:	9a a1       	ldd	r25, Y+34	; 0x22
    3f64:	01 97       	sbiw	r24, 0x01	; 1
    3f66:	9a a3       	std	Y+34, r25	; 0x22
    3f68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f6a:	89 a1       	ldd	r24, Y+33	; 0x21
    3f6c:	9a a1       	ldd	r25, Y+34	; 0x22
    3f6e:	00 97       	sbiw	r24, 0x00	; 0
    3f70:	69 f7       	brne	.-38     	; 0x3f4c <Stepper_voidCWHalfSteps+0xa38>
    3f72:	14 c0       	rjmp	.+40     	; 0x3f9c <Stepper_voidCWHalfSteps+0xa88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f74:	6b a1       	ldd	r22, Y+35	; 0x23
    3f76:	7c a1       	ldd	r23, Y+36	; 0x24
    3f78:	8d a1       	ldd	r24, Y+37	; 0x25
    3f7a:	9e a1       	ldd	r25, Y+38	; 0x26
    3f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	9a a3       	std	Y+34, r25	; 0x22
    3f86:	89 a3       	std	Y+33, r24	; 0x21
    3f88:	89 a1       	ldd	r24, Y+33	; 0x21
    3f8a:	9a a1       	ldd	r25, Y+34	; 0x22
    3f8c:	9e 8f       	std	Y+30, r25	; 0x1e
    3f8e:	8d 8f       	std	Y+29, r24	; 0x1d
    3f90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f94:	01 97       	sbiw	r24, 0x01	; 1
    3f96:	f1 f7       	brne	.-4      	; 0x3f94 <Stepper_voidCWHalfSteps+0xa80>
    3f98:	9e 8f       	std	Y+30, r25	; 0x1e
    3f9a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	/*the Orange is Low  and all pin is high*/
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_High);
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	ef 58       	subi	r30, 0x8F	; 143
    3fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa2:	01 90       	ld	r0, Z+
    3fa4:	f0 81       	ld	r31, Z
    3fa6:	e0 2d       	mov	r30, r0
    3fa8:	80 81       	ld	r24, Z
    3faa:	fe 01       	movw	r30, r28
    3fac:	ef 58       	subi	r30, 0x8F	; 143
    3fae:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb0:	01 90       	ld	r0, Z+
    3fb2:	f0 81       	ld	r31, Z
    3fb4:	e0 2d       	mov	r30, r0
    3fb6:	91 81       	ldd	r25, Z+1	; 0x01
    3fb8:	69 2f       	mov	r22, r25
    3fba:	41 e0       	ldi	r20, 0x01	; 1
    3fbc:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_High);
    3fc0:	fe 01       	movw	r30, r28
    3fc2:	ef 58       	subi	r30, 0x8F	; 143
    3fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc6:	01 90       	ld	r0, Z+
    3fc8:	f0 81       	ld	r31, Z
    3fca:	e0 2d       	mov	r30, r0
    3fcc:	80 81       	ld	r24, Z
    3fce:	fe 01       	movw	r30, r28
    3fd0:	ef 58       	subi	r30, 0x8F	; 143
    3fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd4:	01 90       	ld	r0, Z+
    3fd6:	f0 81       	ld	r31, Z
    3fd8:	e0 2d       	mov	r30, r0
    3fda:	92 81       	ldd	r25, Z+2	; 0x02
    3fdc:	69 2f       	mov	r22, r25
    3fde:	41 e0       	ldi	r20, 0x01	; 1
    3fe0:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_High);
    3fe4:	fe 01       	movw	r30, r28
    3fe6:	ef 58       	subi	r30, 0x8F	; 143
    3fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fea:	01 90       	ld	r0, Z+
    3fec:	f0 81       	ld	r31, Z
    3fee:	e0 2d       	mov	r30, r0
    3ff0:	80 81       	ld	r24, Z
    3ff2:	fe 01       	movw	r30, r28
    3ff4:	ef 58       	subi	r30, 0x8F	; 143
    3ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff8:	01 90       	ld	r0, Z+
    3ffa:	f0 81       	ld	r31, Z
    3ffc:	e0 2d       	mov	r30, r0
    3ffe:	93 81       	ldd	r25, Z+3	; 0x03
    4000:	69 2f       	mov	r22, r25
    4002:	41 e0       	ldi	r20, 0x01	; 1
    4004:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_Low);
    4008:	fe 01       	movw	r30, r28
    400a:	ef 58       	subi	r30, 0x8F	; 143
    400c:	ff 4f       	sbci	r31, 0xFF	; 255
    400e:	01 90       	ld	r0, Z+
    4010:	f0 81       	ld	r31, Z
    4012:	e0 2d       	mov	r30, r0
    4014:	80 81       	ld	r24, Z
    4016:	fe 01       	movw	r30, r28
    4018:	ef 58       	subi	r30, 0x8F	; 143
    401a:	ff 4f       	sbci	r31, 0xFF	; 255
    401c:	01 90       	ld	r0, Z+
    401e:	f0 81       	ld	r31, Z
    4020:	e0 2d       	mov	r30, r0
    4022:	94 81       	ldd	r25, Z+4	; 0x04
    4024:	69 2f       	mov	r22, r25
    4026:	40 e0       	ldi	r20, 0x00	; 0
    4028:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    402c:	80 e0       	ldi	r24, 0x00	; 0
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	a0 e0       	ldi	r26, 0x00	; 0
    4032:	b0 e4       	ldi	r27, 0x40	; 64
    4034:	89 8f       	std	Y+25, r24	; 0x19
    4036:	9a 8f       	std	Y+26, r25	; 0x1a
    4038:	ab 8f       	std	Y+27, r26	; 0x1b
    403a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    403c:	69 8d       	ldd	r22, Y+25	; 0x19
    403e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4040:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4042:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4044:	20 e0       	ldi	r18, 0x00	; 0
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	4a ef       	ldi	r20, 0xFA	; 250
    404a:	54 e4       	ldi	r21, 0x44	; 68
    404c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4050:	dc 01       	movw	r26, r24
    4052:	cb 01       	movw	r24, r22
    4054:	8d 8b       	std	Y+21, r24	; 0x15
    4056:	9e 8b       	std	Y+22, r25	; 0x16
    4058:	af 8b       	std	Y+23, r26	; 0x17
    405a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    405c:	6d 89       	ldd	r22, Y+21	; 0x15
    405e:	7e 89       	ldd	r23, Y+22	; 0x16
    4060:	8f 89       	ldd	r24, Y+23	; 0x17
    4062:	98 8d       	ldd	r25, Y+24	; 0x18
    4064:	20 e0       	ldi	r18, 0x00	; 0
    4066:	30 e0       	ldi	r19, 0x00	; 0
    4068:	40 e8       	ldi	r20, 0x80	; 128
    406a:	5f e3       	ldi	r21, 0x3F	; 63
    406c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4070:	88 23       	and	r24, r24
    4072:	2c f4       	brge	.+10     	; 0x407e <Stepper_voidCWHalfSteps+0xb6a>
		__ticks = 1;
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	9c 8b       	std	Y+20, r25	; 0x14
    407a:	8b 8b       	std	Y+19, r24	; 0x13
    407c:	3f c0       	rjmp	.+126    	; 0x40fc <Stepper_voidCWHalfSteps+0xbe8>
	else if (__tmp > 65535)
    407e:	6d 89       	ldd	r22, Y+21	; 0x15
    4080:	7e 89       	ldd	r23, Y+22	; 0x16
    4082:	8f 89       	ldd	r24, Y+23	; 0x17
    4084:	98 8d       	ldd	r25, Y+24	; 0x18
    4086:	20 e0       	ldi	r18, 0x00	; 0
    4088:	3f ef       	ldi	r19, 0xFF	; 255
    408a:	4f e7       	ldi	r20, 0x7F	; 127
    408c:	57 e4       	ldi	r21, 0x47	; 71
    408e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4092:	18 16       	cp	r1, r24
    4094:	4c f5       	brge	.+82     	; 0x40e8 <Stepper_voidCWHalfSteps+0xbd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4096:	69 8d       	ldd	r22, Y+25	; 0x19
    4098:	7a 8d       	ldd	r23, Y+26	; 0x1a
    409a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    409c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    409e:	20 e0       	ldi	r18, 0x00	; 0
    40a0:	30 e0       	ldi	r19, 0x00	; 0
    40a2:	40 e2       	ldi	r20, 0x20	; 32
    40a4:	51 e4       	ldi	r21, 0x41	; 65
    40a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40aa:	dc 01       	movw	r26, r24
    40ac:	cb 01       	movw	r24, r22
    40ae:	bc 01       	movw	r22, r24
    40b0:	cd 01       	movw	r24, r26
    40b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b6:	dc 01       	movw	r26, r24
    40b8:	cb 01       	movw	r24, r22
    40ba:	9c 8b       	std	Y+20, r25	; 0x14
    40bc:	8b 8b       	std	Y+19, r24	; 0x13
    40be:	0f c0       	rjmp	.+30     	; 0x40de <Stepper_voidCWHalfSteps+0xbca>
    40c0:	88 ec       	ldi	r24, 0xC8	; 200
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	9a 8b       	std	Y+18, r25	; 0x12
    40c6:	89 8b       	std	Y+17, r24	; 0x11
    40c8:	89 89       	ldd	r24, Y+17	; 0x11
    40ca:	9a 89       	ldd	r25, Y+18	; 0x12
    40cc:	01 97       	sbiw	r24, 0x01	; 1
    40ce:	f1 f7       	brne	.-4      	; 0x40cc <Stepper_voidCWHalfSteps+0xbb8>
    40d0:	9a 8b       	std	Y+18, r25	; 0x12
    40d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40d4:	8b 89       	ldd	r24, Y+19	; 0x13
    40d6:	9c 89       	ldd	r25, Y+20	; 0x14
    40d8:	01 97       	sbiw	r24, 0x01	; 1
    40da:	9c 8b       	std	Y+20, r25	; 0x14
    40dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40de:	8b 89       	ldd	r24, Y+19	; 0x13
    40e0:	9c 89       	ldd	r25, Y+20	; 0x14
    40e2:	00 97       	sbiw	r24, 0x00	; 0
    40e4:	69 f7       	brne	.-38     	; 0x40c0 <Stepper_voidCWHalfSteps+0xbac>
    40e6:	14 c0       	rjmp	.+40     	; 0x4110 <Stepper_voidCWHalfSteps+0xbfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e8:	6d 89       	ldd	r22, Y+21	; 0x15
    40ea:	7e 89       	ldd	r23, Y+22	; 0x16
    40ec:	8f 89       	ldd	r24, Y+23	; 0x17
    40ee:	98 8d       	ldd	r25, Y+24	; 0x18
    40f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f4:	dc 01       	movw	r26, r24
    40f6:	cb 01       	movw	r24, r22
    40f8:	9c 8b       	std	Y+20, r25	; 0x14
    40fa:	8b 8b       	std	Y+19, r24	; 0x13
    40fc:	8b 89       	ldd	r24, Y+19	; 0x13
    40fe:	9c 89       	ldd	r25, Y+20	; 0x14
    4100:	98 8b       	std	Y+16, r25	; 0x10
    4102:	8f 87       	std	Y+15, r24	; 0x0f
    4104:	8f 85       	ldd	r24, Y+15	; 0x0f
    4106:	98 89       	ldd	r25, Y+16	; 0x10
    4108:	01 97       	sbiw	r24, 0x01	; 1
    410a:	f1 f7       	brne	.-4      	; 0x4108 <Stepper_voidCWHalfSteps+0xbf4>
    410c:	98 8b       	std	Y+16, r25	; 0x10
    410e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	/*the Orange is Low  and all pin is high*/
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_Low);
    4110:	fe 01       	movw	r30, r28
    4112:	ef 58       	subi	r30, 0x8F	; 143
    4114:	ff 4f       	sbci	r31, 0xFF	; 255
    4116:	01 90       	ld	r0, Z+
    4118:	f0 81       	ld	r31, Z
    411a:	e0 2d       	mov	r30, r0
    411c:	80 81       	ld	r24, Z
    411e:	fe 01       	movw	r30, r28
    4120:	ef 58       	subi	r30, 0x8F	; 143
    4122:	ff 4f       	sbci	r31, 0xFF	; 255
    4124:	01 90       	ld	r0, Z+
    4126:	f0 81       	ld	r31, Z
    4128:	e0 2d       	mov	r30, r0
    412a:	91 81       	ldd	r25, Z+1	; 0x01
    412c:	69 2f       	mov	r22, r25
    412e:	40 e0       	ldi	r20, 0x00	; 0
    4130:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_High);
    4134:	fe 01       	movw	r30, r28
    4136:	ef 58       	subi	r30, 0x8F	; 143
    4138:	ff 4f       	sbci	r31, 0xFF	; 255
    413a:	01 90       	ld	r0, Z+
    413c:	f0 81       	ld	r31, Z
    413e:	e0 2d       	mov	r30, r0
    4140:	80 81       	ld	r24, Z
    4142:	fe 01       	movw	r30, r28
    4144:	ef 58       	subi	r30, 0x8F	; 143
    4146:	ff 4f       	sbci	r31, 0xFF	; 255
    4148:	01 90       	ld	r0, Z+
    414a:	f0 81       	ld	r31, Z
    414c:	e0 2d       	mov	r30, r0
    414e:	92 81       	ldd	r25, Z+2	; 0x02
    4150:	69 2f       	mov	r22, r25
    4152:	41 e0       	ldi	r20, 0x01	; 1
    4154:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_High);
    4158:	fe 01       	movw	r30, r28
    415a:	ef 58       	subi	r30, 0x8F	; 143
    415c:	ff 4f       	sbci	r31, 0xFF	; 255
    415e:	01 90       	ld	r0, Z+
    4160:	f0 81       	ld	r31, Z
    4162:	e0 2d       	mov	r30, r0
    4164:	80 81       	ld	r24, Z
    4166:	fe 01       	movw	r30, r28
    4168:	ef 58       	subi	r30, 0x8F	; 143
    416a:	ff 4f       	sbci	r31, 0xFF	; 255
    416c:	01 90       	ld	r0, Z+
    416e:	f0 81       	ld	r31, Z
    4170:	e0 2d       	mov	r30, r0
    4172:	93 81       	ldd	r25, Z+3	; 0x03
    4174:	69 2f       	mov	r22, r25
    4176:	41 e0       	ldi	r20, 0x01	; 1
    4178:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_Low);
    417c:	fe 01       	movw	r30, r28
    417e:	ef 58       	subi	r30, 0x8F	; 143
    4180:	ff 4f       	sbci	r31, 0xFF	; 255
    4182:	01 90       	ld	r0, Z+
    4184:	f0 81       	ld	r31, Z
    4186:	e0 2d       	mov	r30, r0
    4188:	80 81       	ld	r24, Z
    418a:	fe 01       	movw	r30, r28
    418c:	ef 58       	subi	r30, 0x8F	; 143
    418e:	ff 4f       	sbci	r31, 0xFF	; 255
    4190:	01 90       	ld	r0, Z+
    4192:	f0 81       	ld	r31, Z
    4194:	e0 2d       	mov	r30, r0
    4196:	94 81       	ldd	r25, Z+4	; 0x04
    4198:	69 2f       	mov	r22, r25
    419a:	40 e0       	ldi	r20, 0x00	; 0
    419c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    41a0:	80 e0       	ldi	r24, 0x00	; 0
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	a0 e0       	ldi	r26, 0x00	; 0
    41a6:	b0 e4       	ldi	r27, 0x40	; 64
    41a8:	8b 87       	std	Y+11, r24	; 0x0b
    41aa:	9c 87       	std	Y+12, r25	; 0x0c
    41ac:	ad 87       	std	Y+13, r26	; 0x0d
    41ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    41b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    41b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    41b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    41b8:	20 e0       	ldi	r18, 0x00	; 0
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	4a ef       	ldi	r20, 0xFA	; 250
    41be:	54 e4       	ldi	r21, 0x44	; 68
    41c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41c4:	dc 01       	movw	r26, r24
    41c6:	cb 01       	movw	r24, r22
    41c8:	8f 83       	std	Y+7, r24	; 0x07
    41ca:	98 87       	std	Y+8, r25	; 0x08
    41cc:	a9 87       	std	Y+9, r26	; 0x09
    41ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41d0:	6f 81       	ldd	r22, Y+7	; 0x07
    41d2:	78 85       	ldd	r23, Y+8	; 0x08
    41d4:	89 85       	ldd	r24, Y+9	; 0x09
    41d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41d8:	20 e0       	ldi	r18, 0x00	; 0
    41da:	30 e0       	ldi	r19, 0x00	; 0
    41dc:	40 e8       	ldi	r20, 0x80	; 128
    41de:	5f e3       	ldi	r21, 0x3F	; 63
    41e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41e4:	88 23       	and	r24, r24
    41e6:	2c f4       	brge	.+10     	; 0x41f2 <Stepper_voidCWHalfSteps+0xcde>
		__ticks = 1;
    41e8:	81 e0       	ldi	r24, 0x01	; 1
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	9e 83       	std	Y+6, r25	; 0x06
    41ee:	8d 83       	std	Y+5, r24	; 0x05
    41f0:	3f c0       	rjmp	.+126    	; 0x4270 <Stepper_voidCWHalfSteps+0xd5c>
	else if (__tmp > 65535)
    41f2:	6f 81       	ldd	r22, Y+7	; 0x07
    41f4:	78 85       	ldd	r23, Y+8	; 0x08
    41f6:	89 85       	ldd	r24, Y+9	; 0x09
    41f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41fa:	20 e0       	ldi	r18, 0x00	; 0
    41fc:	3f ef       	ldi	r19, 0xFF	; 255
    41fe:	4f e7       	ldi	r20, 0x7F	; 127
    4200:	57 e4       	ldi	r21, 0x47	; 71
    4202:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4206:	18 16       	cp	r1, r24
    4208:	4c f5       	brge	.+82     	; 0x425c <Stepper_voidCWHalfSteps+0xd48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    420a:	6b 85       	ldd	r22, Y+11	; 0x0b
    420c:	7c 85       	ldd	r23, Y+12	; 0x0c
    420e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4210:	9e 85       	ldd	r25, Y+14	; 0x0e
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	40 e2       	ldi	r20, 0x20	; 32
    4218:	51 e4       	ldi	r21, 0x41	; 65
    421a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    421e:	dc 01       	movw	r26, r24
    4220:	cb 01       	movw	r24, r22
    4222:	bc 01       	movw	r22, r24
    4224:	cd 01       	movw	r24, r26
    4226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    422a:	dc 01       	movw	r26, r24
    422c:	cb 01       	movw	r24, r22
    422e:	9e 83       	std	Y+6, r25	; 0x06
    4230:	8d 83       	std	Y+5, r24	; 0x05
    4232:	0f c0       	rjmp	.+30     	; 0x4252 <Stepper_voidCWHalfSteps+0xd3e>
    4234:	88 ec       	ldi	r24, 0xC8	; 200
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	9c 83       	std	Y+4, r25	; 0x04
    423a:	8b 83       	std	Y+3, r24	; 0x03
    423c:	8b 81       	ldd	r24, Y+3	; 0x03
    423e:	9c 81       	ldd	r25, Y+4	; 0x04
    4240:	01 97       	sbiw	r24, 0x01	; 1
    4242:	f1 f7       	brne	.-4      	; 0x4240 <Stepper_voidCWHalfSteps+0xd2c>
    4244:	9c 83       	std	Y+4, r25	; 0x04
    4246:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4248:	8d 81       	ldd	r24, Y+5	; 0x05
    424a:	9e 81       	ldd	r25, Y+6	; 0x06
    424c:	01 97       	sbiw	r24, 0x01	; 1
    424e:	9e 83       	std	Y+6, r25	; 0x06
    4250:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4252:	8d 81       	ldd	r24, Y+5	; 0x05
    4254:	9e 81       	ldd	r25, Y+6	; 0x06
    4256:	00 97       	sbiw	r24, 0x00	; 0
    4258:	69 f7       	brne	.-38     	; 0x4234 <Stepper_voidCWHalfSteps+0xd20>
    425a:	14 c0       	rjmp	.+40     	; 0x4284 <Stepper_voidCWHalfSteps+0xd70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    425c:	6f 81       	ldd	r22, Y+7	; 0x07
    425e:	78 85       	ldd	r23, Y+8	; 0x08
    4260:	89 85       	ldd	r24, Y+9	; 0x09
    4262:	9a 85       	ldd	r25, Y+10	; 0x0a
    4264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4268:	dc 01       	movw	r26, r24
    426a:	cb 01       	movw	r24, r22
    426c:	9e 83       	std	Y+6, r25	; 0x06
    426e:	8d 83       	std	Y+5, r24	; 0x05
    4270:	8d 81       	ldd	r24, Y+5	; 0x05
    4272:	9e 81       	ldd	r25, Y+6	; 0x06
    4274:	9a 83       	std	Y+2, r25	; 0x02
    4276:	89 83       	std	Y+1, r24	; 0x01
    4278:	89 81       	ldd	r24, Y+1	; 0x01
    427a:	9a 81       	ldd	r25, Y+2	; 0x02
    427c:	01 97       	sbiw	r24, 0x01	; 1
    427e:	f1 f7       	brne	.-4      	; 0x427c <Stepper_voidCWHalfSteps+0xd68>
    4280:	9a 83       	std	Y+2, r25	; 0x02
    4282:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    4284:	ce 58       	subi	r28, 0x8E	; 142
    4286:	df 4f       	sbci	r29, 0xFF	; 255
    4288:	0f b6       	in	r0, 0x3f	; 63
    428a:	f8 94       	cli
    428c:	de bf       	out	0x3e, r29	; 62
    428e:	0f be       	out	0x3f, r0	; 63
    4290:	cd bf       	out	0x3d, r28	; 61
    4292:	cf 91       	pop	r28
    4294:	df 91       	pop	r29
    4296:	1f 91       	pop	r17
    4298:	0f 91       	pop	r16
    429a:	08 95       	ret

0000429c <Stepper_voidCCWHalfSteps>:
static void  Stepper_voidCCWHalfSteps(Stper_info * Motor1)
{
    429c:	0f 93       	push	r16
    429e:	1f 93       	push	r17
    42a0:	df 93       	push	r29
    42a2:	cf 93       	push	r28
    42a4:	cd b7       	in	r28, 0x3d	; 61
    42a6:	de b7       	in	r29, 0x3e	; 62
    42a8:	c2 57       	subi	r28, 0x72	; 114
    42aa:	d0 40       	sbci	r29, 0x00	; 0
    42ac:	0f b6       	in	r0, 0x3f	; 63
    42ae:	f8 94       	cli
    42b0:	de bf       	out	0x3e, r29	; 62
    42b2:	0f be       	out	0x3f, r0	; 63
    42b4:	cd bf       	out	0x3d, r28	; 61
    42b6:	fe 01       	movw	r30, r28
    42b8:	ef 58       	subi	r30, 0x8F	; 143
    42ba:	ff 4f       	sbci	r31, 0xFF	; 255
    42bc:	91 83       	std	Z+1, r25	; 0x01
    42be:	80 83       	st	Z, r24
	/*the Blue is Low  and all pin is high */
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_Low);
    42c0:	fe 01       	movw	r30, r28
    42c2:	ef 58       	subi	r30, 0x8F	; 143
    42c4:	ff 4f       	sbci	r31, 0xFF	; 255
    42c6:	01 90       	ld	r0, Z+
    42c8:	f0 81       	ld	r31, Z
    42ca:	e0 2d       	mov	r30, r0
    42cc:	80 81       	ld	r24, Z
    42ce:	fe 01       	movw	r30, r28
    42d0:	ef 58       	subi	r30, 0x8F	; 143
    42d2:	ff 4f       	sbci	r31, 0xFF	; 255
    42d4:	01 90       	ld	r0, Z+
    42d6:	f0 81       	ld	r31, Z
    42d8:	e0 2d       	mov	r30, r0
    42da:	91 81       	ldd	r25, Z+1	; 0x01
    42dc:	69 2f       	mov	r22, r25
    42de:	40 e0       	ldi	r20, 0x00	; 0
    42e0:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_High);
    42e4:	fe 01       	movw	r30, r28
    42e6:	ef 58       	subi	r30, 0x8F	; 143
    42e8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ea:	01 90       	ld	r0, Z+
    42ec:	f0 81       	ld	r31, Z
    42ee:	e0 2d       	mov	r30, r0
    42f0:	80 81       	ld	r24, Z
    42f2:	fe 01       	movw	r30, r28
    42f4:	ef 58       	subi	r30, 0x8F	; 143
    42f6:	ff 4f       	sbci	r31, 0xFF	; 255
    42f8:	01 90       	ld	r0, Z+
    42fa:	f0 81       	ld	r31, Z
    42fc:	e0 2d       	mov	r30, r0
    42fe:	94 81       	ldd	r25, Z+4	; 0x04
    4300:	69 2f       	mov	r22, r25
    4302:	41 e0       	ldi	r20, 0x01	; 1
    4304:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_High);
    4308:	fe 01       	movw	r30, r28
    430a:	ef 58       	subi	r30, 0x8F	; 143
    430c:	ff 4f       	sbci	r31, 0xFF	; 255
    430e:	01 90       	ld	r0, Z+
    4310:	f0 81       	ld	r31, Z
    4312:	e0 2d       	mov	r30, r0
    4314:	80 81       	ld	r24, Z
    4316:	fe 01       	movw	r30, r28
    4318:	ef 58       	subi	r30, 0x8F	; 143
    431a:	ff 4f       	sbci	r31, 0xFF	; 255
    431c:	01 90       	ld	r0, Z+
    431e:	f0 81       	ld	r31, Z
    4320:	e0 2d       	mov	r30, r0
    4322:	93 81       	ldd	r25, Z+3	; 0x03
    4324:	69 2f       	mov	r22, r25
    4326:	41 e0       	ldi	r20, 0x01	; 1
    4328:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_High);
    432c:	fe 01       	movw	r30, r28
    432e:	ef 58       	subi	r30, 0x8F	; 143
    4330:	ff 4f       	sbci	r31, 0xFF	; 255
    4332:	01 90       	ld	r0, Z+
    4334:	f0 81       	ld	r31, Z
    4336:	e0 2d       	mov	r30, r0
    4338:	80 81       	ld	r24, Z
    433a:	fe 01       	movw	r30, r28
    433c:	ef 58       	subi	r30, 0x8F	; 143
    433e:	ff 4f       	sbci	r31, 0xFF	; 255
    4340:	01 90       	ld	r0, Z+
    4342:	f0 81       	ld	r31, Z
    4344:	e0 2d       	mov	r30, r0
    4346:	92 81       	ldd	r25, Z+2	; 0x02
    4348:	69 2f       	mov	r22, r25
    434a:	41 e0       	ldi	r20, 0x01	; 1
    434c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    4350:	fe 01       	movw	r30, r28
    4352:	e3 59       	subi	r30, 0x93	; 147
    4354:	ff 4f       	sbci	r31, 0xFF	; 255
    4356:	80 e0       	ldi	r24, 0x00	; 0
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	a0 e0       	ldi	r26, 0x00	; 0
    435c:	b0 e4       	ldi	r27, 0x40	; 64
    435e:	80 83       	st	Z, r24
    4360:	91 83       	std	Z+1, r25	; 0x01
    4362:	a2 83       	std	Z+2, r26	; 0x02
    4364:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4366:	8e 01       	movw	r16, r28
    4368:	07 59       	subi	r16, 0x97	; 151
    436a:	1f 4f       	sbci	r17, 0xFF	; 255
    436c:	fe 01       	movw	r30, r28
    436e:	e3 59       	subi	r30, 0x93	; 147
    4370:	ff 4f       	sbci	r31, 0xFF	; 255
    4372:	60 81       	ld	r22, Z
    4374:	71 81       	ldd	r23, Z+1	; 0x01
    4376:	82 81       	ldd	r24, Z+2	; 0x02
    4378:	93 81       	ldd	r25, Z+3	; 0x03
    437a:	20 e0       	ldi	r18, 0x00	; 0
    437c:	30 e0       	ldi	r19, 0x00	; 0
    437e:	4a ef       	ldi	r20, 0xFA	; 250
    4380:	54 e4       	ldi	r21, 0x44	; 68
    4382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4386:	dc 01       	movw	r26, r24
    4388:	cb 01       	movw	r24, r22
    438a:	f8 01       	movw	r30, r16
    438c:	80 83       	st	Z, r24
    438e:	91 83       	std	Z+1, r25	; 0x01
    4390:	a2 83       	std	Z+2, r26	; 0x02
    4392:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4394:	fe 01       	movw	r30, r28
    4396:	e7 59       	subi	r30, 0x97	; 151
    4398:	ff 4f       	sbci	r31, 0xFF	; 255
    439a:	60 81       	ld	r22, Z
    439c:	71 81       	ldd	r23, Z+1	; 0x01
    439e:	82 81       	ldd	r24, Z+2	; 0x02
    43a0:	93 81       	ldd	r25, Z+3	; 0x03
    43a2:	20 e0       	ldi	r18, 0x00	; 0
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	40 e8       	ldi	r20, 0x80	; 128
    43a8:	5f e3       	ldi	r21, 0x3F	; 63
    43aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43ae:	88 23       	and	r24, r24
    43b0:	44 f4       	brge	.+16     	; 0x43c2 <Stepper_voidCCWHalfSteps+0x126>
		__ticks = 1;
    43b2:	fe 01       	movw	r30, r28
    43b4:	e9 59       	subi	r30, 0x99	; 153
    43b6:	ff 4f       	sbci	r31, 0xFF	; 255
    43b8:	81 e0       	ldi	r24, 0x01	; 1
    43ba:	90 e0       	ldi	r25, 0x00	; 0
    43bc:	91 83       	std	Z+1, r25	; 0x01
    43be:	80 83       	st	Z, r24
    43c0:	64 c0       	rjmp	.+200    	; 0x448a <Stepper_voidCCWHalfSteps+0x1ee>
	else if (__tmp > 65535)
    43c2:	fe 01       	movw	r30, r28
    43c4:	e7 59       	subi	r30, 0x97	; 151
    43c6:	ff 4f       	sbci	r31, 0xFF	; 255
    43c8:	60 81       	ld	r22, Z
    43ca:	71 81       	ldd	r23, Z+1	; 0x01
    43cc:	82 81       	ldd	r24, Z+2	; 0x02
    43ce:	93 81       	ldd	r25, Z+3	; 0x03
    43d0:	20 e0       	ldi	r18, 0x00	; 0
    43d2:	3f ef       	ldi	r19, 0xFF	; 255
    43d4:	4f e7       	ldi	r20, 0x7F	; 127
    43d6:	57 e4       	ldi	r21, 0x47	; 71
    43d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43dc:	18 16       	cp	r1, r24
    43de:	0c f0       	brlt	.+2      	; 0x43e2 <Stepper_voidCCWHalfSteps+0x146>
    43e0:	43 c0       	rjmp	.+134    	; 0x4468 <Stepper_voidCCWHalfSteps+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43e2:	fe 01       	movw	r30, r28
    43e4:	e3 59       	subi	r30, 0x93	; 147
    43e6:	ff 4f       	sbci	r31, 0xFF	; 255
    43e8:	60 81       	ld	r22, Z
    43ea:	71 81       	ldd	r23, Z+1	; 0x01
    43ec:	82 81       	ldd	r24, Z+2	; 0x02
    43ee:	93 81       	ldd	r25, Z+3	; 0x03
    43f0:	20 e0       	ldi	r18, 0x00	; 0
    43f2:	30 e0       	ldi	r19, 0x00	; 0
    43f4:	40 e2       	ldi	r20, 0x20	; 32
    43f6:	51 e4       	ldi	r21, 0x41	; 65
    43f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43fc:	dc 01       	movw	r26, r24
    43fe:	cb 01       	movw	r24, r22
    4400:	8e 01       	movw	r16, r28
    4402:	09 59       	subi	r16, 0x99	; 153
    4404:	1f 4f       	sbci	r17, 0xFF	; 255
    4406:	bc 01       	movw	r22, r24
    4408:	cd 01       	movw	r24, r26
    440a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    440e:	dc 01       	movw	r26, r24
    4410:	cb 01       	movw	r24, r22
    4412:	f8 01       	movw	r30, r16
    4414:	91 83       	std	Z+1, r25	; 0x01
    4416:	80 83       	st	Z, r24
    4418:	1f c0       	rjmp	.+62     	; 0x4458 <Stepper_voidCCWHalfSteps+0x1bc>
    441a:	fe 01       	movw	r30, r28
    441c:	eb 59       	subi	r30, 0x9B	; 155
    441e:	ff 4f       	sbci	r31, 0xFF	; 255
    4420:	88 ec       	ldi	r24, 0xC8	; 200
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	91 83       	std	Z+1, r25	; 0x01
    4426:	80 83       	st	Z, r24
    4428:	fe 01       	movw	r30, r28
    442a:	eb 59       	subi	r30, 0x9B	; 155
    442c:	ff 4f       	sbci	r31, 0xFF	; 255
    442e:	80 81       	ld	r24, Z
    4430:	91 81       	ldd	r25, Z+1	; 0x01
    4432:	01 97       	sbiw	r24, 0x01	; 1
    4434:	f1 f7       	brne	.-4      	; 0x4432 <Stepper_voidCCWHalfSteps+0x196>
    4436:	fe 01       	movw	r30, r28
    4438:	eb 59       	subi	r30, 0x9B	; 155
    443a:	ff 4f       	sbci	r31, 0xFF	; 255
    443c:	91 83       	std	Z+1, r25	; 0x01
    443e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4440:	de 01       	movw	r26, r28
    4442:	a9 59       	subi	r26, 0x99	; 153
    4444:	bf 4f       	sbci	r27, 0xFF	; 255
    4446:	fe 01       	movw	r30, r28
    4448:	e9 59       	subi	r30, 0x99	; 153
    444a:	ff 4f       	sbci	r31, 0xFF	; 255
    444c:	80 81       	ld	r24, Z
    444e:	91 81       	ldd	r25, Z+1	; 0x01
    4450:	01 97       	sbiw	r24, 0x01	; 1
    4452:	11 96       	adiw	r26, 0x01	; 1
    4454:	9c 93       	st	X, r25
    4456:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4458:	fe 01       	movw	r30, r28
    445a:	e9 59       	subi	r30, 0x99	; 153
    445c:	ff 4f       	sbci	r31, 0xFF	; 255
    445e:	80 81       	ld	r24, Z
    4460:	91 81       	ldd	r25, Z+1	; 0x01
    4462:	00 97       	sbiw	r24, 0x00	; 0
    4464:	d1 f6       	brne	.-76     	; 0x441a <Stepper_voidCCWHalfSteps+0x17e>
    4466:	27 c0       	rjmp	.+78     	; 0x44b6 <Stepper_voidCCWHalfSteps+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4468:	8e 01       	movw	r16, r28
    446a:	09 59       	subi	r16, 0x99	; 153
    446c:	1f 4f       	sbci	r17, 0xFF	; 255
    446e:	fe 01       	movw	r30, r28
    4470:	e7 59       	subi	r30, 0x97	; 151
    4472:	ff 4f       	sbci	r31, 0xFF	; 255
    4474:	60 81       	ld	r22, Z
    4476:	71 81       	ldd	r23, Z+1	; 0x01
    4478:	82 81       	ldd	r24, Z+2	; 0x02
    447a:	93 81       	ldd	r25, Z+3	; 0x03
    447c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4480:	dc 01       	movw	r26, r24
    4482:	cb 01       	movw	r24, r22
    4484:	f8 01       	movw	r30, r16
    4486:	91 83       	std	Z+1, r25	; 0x01
    4488:	80 83       	st	Z, r24
    448a:	de 01       	movw	r26, r28
    448c:	ad 59       	subi	r26, 0x9D	; 157
    448e:	bf 4f       	sbci	r27, 0xFF	; 255
    4490:	fe 01       	movw	r30, r28
    4492:	e9 59       	subi	r30, 0x99	; 153
    4494:	ff 4f       	sbci	r31, 0xFF	; 255
    4496:	80 81       	ld	r24, Z
    4498:	91 81       	ldd	r25, Z+1	; 0x01
    449a:	8d 93       	st	X+, r24
    449c:	9c 93       	st	X, r25
    449e:	fe 01       	movw	r30, r28
    44a0:	ed 59       	subi	r30, 0x9D	; 157
    44a2:	ff 4f       	sbci	r31, 0xFF	; 255
    44a4:	80 81       	ld	r24, Z
    44a6:	91 81       	ldd	r25, Z+1	; 0x01
    44a8:	01 97       	sbiw	r24, 0x01	; 1
    44aa:	f1 f7       	brne	.-4      	; 0x44a8 <Stepper_voidCCWHalfSteps+0x20c>
    44ac:	fe 01       	movw	r30, r28
    44ae:	ed 59       	subi	r30, 0x9D	; 157
    44b0:	ff 4f       	sbci	r31, 0xFF	; 255
    44b2:	91 83       	std	Z+1, r25	; 0x01
    44b4:	80 83       	st	Z, r24
	_delay_ms(2);
	/*the Blue is Low  and Pink all pin is high */
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_Low);
    44b6:	fe 01       	movw	r30, r28
    44b8:	ef 58       	subi	r30, 0x8F	; 143
    44ba:	ff 4f       	sbci	r31, 0xFF	; 255
    44bc:	01 90       	ld	r0, Z+
    44be:	f0 81       	ld	r31, Z
    44c0:	e0 2d       	mov	r30, r0
    44c2:	80 81       	ld	r24, Z
    44c4:	fe 01       	movw	r30, r28
    44c6:	ef 58       	subi	r30, 0x8F	; 143
    44c8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ca:	01 90       	ld	r0, Z+
    44cc:	f0 81       	ld	r31, Z
    44ce:	e0 2d       	mov	r30, r0
    44d0:	91 81       	ldd	r25, Z+1	; 0x01
    44d2:	69 2f       	mov	r22, r25
    44d4:	40 e0       	ldi	r20, 0x00	; 0
    44d6:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_Low);
    44da:	fe 01       	movw	r30, r28
    44dc:	ef 58       	subi	r30, 0x8F	; 143
    44de:	ff 4f       	sbci	r31, 0xFF	; 255
    44e0:	01 90       	ld	r0, Z+
    44e2:	f0 81       	ld	r31, Z
    44e4:	e0 2d       	mov	r30, r0
    44e6:	80 81       	ld	r24, Z
    44e8:	fe 01       	movw	r30, r28
    44ea:	ef 58       	subi	r30, 0x8F	; 143
    44ec:	ff 4f       	sbci	r31, 0xFF	; 255
    44ee:	01 90       	ld	r0, Z+
    44f0:	f0 81       	ld	r31, Z
    44f2:	e0 2d       	mov	r30, r0
    44f4:	94 81       	ldd	r25, Z+4	; 0x04
    44f6:	69 2f       	mov	r22, r25
    44f8:	40 e0       	ldi	r20, 0x00	; 0
    44fa:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_High);
    44fe:	fe 01       	movw	r30, r28
    4500:	ef 58       	subi	r30, 0x8F	; 143
    4502:	ff 4f       	sbci	r31, 0xFF	; 255
    4504:	01 90       	ld	r0, Z+
    4506:	f0 81       	ld	r31, Z
    4508:	e0 2d       	mov	r30, r0
    450a:	80 81       	ld	r24, Z
    450c:	fe 01       	movw	r30, r28
    450e:	ef 58       	subi	r30, 0x8F	; 143
    4510:	ff 4f       	sbci	r31, 0xFF	; 255
    4512:	01 90       	ld	r0, Z+
    4514:	f0 81       	ld	r31, Z
    4516:	e0 2d       	mov	r30, r0
    4518:	93 81       	ldd	r25, Z+3	; 0x03
    451a:	69 2f       	mov	r22, r25
    451c:	41 e0       	ldi	r20, 0x01	; 1
    451e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_High);
    4522:	fe 01       	movw	r30, r28
    4524:	ef 58       	subi	r30, 0x8F	; 143
    4526:	ff 4f       	sbci	r31, 0xFF	; 255
    4528:	01 90       	ld	r0, Z+
    452a:	f0 81       	ld	r31, Z
    452c:	e0 2d       	mov	r30, r0
    452e:	80 81       	ld	r24, Z
    4530:	fe 01       	movw	r30, r28
    4532:	ef 58       	subi	r30, 0x8F	; 143
    4534:	ff 4f       	sbci	r31, 0xFF	; 255
    4536:	01 90       	ld	r0, Z+
    4538:	f0 81       	ld	r31, Z
    453a:	e0 2d       	mov	r30, r0
    453c:	92 81       	ldd	r25, Z+2	; 0x02
    453e:	69 2f       	mov	r22, r25
    4540:	41 e0       	ldi	r20, 0x01	; 1
    4542:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    4546:	fe 01       	movw	r30, r28
    4548:	e1 5a       	subi	r30, 0xA1	; 161
    454a:	ff 4f       	sbci	r31, 0xFF	; 255
    454c:	80 e0       	ldi	r24, 0x00	; 0
    454e:	90 e0       	ldi	r25, 0x00	; 0
    4550:	a0 e0       	ldi	r26, 0x00	; 0
    4552:	b0 e4       	ldi	r27, 0x40	; 64
    4554:	80 83       	st	Z, r24
    4556:	91 83       	std	Z+1, r25	; 0x01
    4558:	a2 83       	std	Z+2, r26	; 0x02
    455a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    455c:	8e 01       	movw	r16, r28
    455e:	05 5a       	subi	r16, 0xA5	; 165
    4560:	1f 4f       	sbci	r17, 0xFF	; 255
    4562:	fe 01       	movw	r30, r28
    4564:	e1 5a       	subi	r30, 0xA1	; 161
    4566:	ff 4f       	sbci	r31, 0xFF	; 255
    4568:	60 81       	ld	r22, Z
    456a:	71 81       	ldd	r23, Z+1	; 0x01
    456c:	82 81       	ldd	r24, Z+2	; 0x02
    456e:	93 81       	ldd	r25, Z+3	; 0x03
    4570:	20 e0       	ldi	r18, 0x00	; 0
    4572:	30 e0       	ldi	r19, 0x00	; 0
    4574:	4a ef       	ldi	r20, 0xFA	; 250
    4576:	54 e4       	ldi	r21, 0x44	; 68
    4578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    457c:	dc 01       	movw	r26, r24
    457e:	cb 01       	movw	r24, r22
    4580:	f8 01       	movw	r30, r16
    4582:	80 83       	st	Z, r24
    4584:	91 83       	std	Z+1, r25	; 0x01
    4586:	a2 83       	std	Z+2, r26	; 0x02
    4588:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    458a:	fe 01       	movw	r30, r28
    458c:	e5 5a       	subi	r30, 0xA5	; 165
    458e:	ff 4f       	sbci	r31, 0xFF	; 255
    4590:	60 81       	ld	r22, Z
    4592:	71 81       	ldd	r23, Z+1	; 0x01
    4594:	82 81       	ldd	r24, Z+2	; 0x02
    4596:	93 81       	ldd	r25, Z+3	; 0x03
    4598:	20 e0       	ldi	r18, 0x00	; 0
    459a:	30 e0       	ldi	r19, 0x00	; 0
    459c:	40 e8       	ldi	r20, 0x80	; 128
    459e:	5f e3       	ldi	r21, 0x3F	; 63
    45a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45a4:	88 23       	and	r24, r24
    45a6:	44 f4       	brge	.+16     	; 0x45b8 <Stepper_voidCCWHalfSteps+0x31c>
		__ticks = 1;
    45a8:	fe 01       	movw	r30, r28
    45aa:	e7 5a       	subi	r30, 0xA7	; 167
    45ac:	ff 4f       	sbci	r31, 0xFF	; 255
    45ae:	81 e0       	ldi	r24, 0x01	; 1
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	91 83       	std	Z+1, r25	; 0x01
    45b4:	80 83       	st	Z, r24
    45b6:	64 c0       	rjmp	.+200    	; 0x4680 <Stepper_voidCCWHalfSteps+0x3e4>
	else if (__tmp > 65535)
    45b8:	fe 01       	movw	r30, r28
    45ba:	e5 5a       	subi	r30, 0xA5	; 165
    45bc:	ff 4f       	sbci	r31, 0xFF	; 255
    45be:	60 81       	ld	r22, Z
    45c0:	71 81       	ldd	r23, Z+1	; 0x01
    45c2:	82 81       	ldd	r24, Z+2	; 0x02
    45c4:	93 81       	ldd	r25, Z+3	; 0x03
    45c6:	20 e0       	ldi	r18, 0x00	; 0
    45c8:	3f ef       	ldi	r19, 0xFF	; 255
    45ca:	4f e7       	ldi	r20, 0x7F	; 127
    45cc:	57 e4       	ldi	r21, 0x47	; 71
    45ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45d2:	18 16       	cp	r1, r24
    45d4:	0c f0       	brlt	.+2      	; 0x45d8 <Stepper_voidCCWHalfSteps+0x33c>
    45d6:	43 c0       	rjmp	.+134    	; 0x465e <Stepper_voidCCWHalfSteps+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45d8:	fe 01       	movw	r30, r28
    45da:	e1 5a       	subi	r30, 0xA1	; 161
    45dc:	ff 4f       	sbci	r31, 0xFF	; 255
    45de:	60 81       	ld	r22, Z
    45e0:	71 81       	ldd	r23, Z+1	; 0x01
    45e2:	82 81       	ldd	r24, Z+2	; 0x02
    45e4:	93 81       	ldd	r25, Z+3	; 0x03
    45e6:	20 e0       	ldi	r18, 0x00	; 0
    45e8:	30 e0       	ldi	r19, 0x00	; 0
    45ea:	40 e2       	ldi	r20, 0x20	; 32
    45ec:	51 e4       	ldi	r21, 0x41	; 65
    45ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45f2:	dc 01       	movw	r26, r24
    45f4:	cb 01       	movw	r24, r22
    45f6:	8e 01       	movw	r16, r28
    45f8:	07 5a       	subi	r16, 0xA7	; 167
    45fa:	1f 4f       	sbci	r17, 0xFF	; 255
    45fc:	bc 01       	movw	r22, r24
    45fe:	cd 01       	movw	r24, r26
    4600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4604:	dc 01       	movw	r26, r24
    4606:	cb 01       	movw	r24, r22
    4608:	f8 01       	movw	r30, r16
    460a:	91 83       	std	Z+1, r25	; 0x01
    460c:	80 83       	st	Z, r24
    460e:	1f c0       	rjmp	.+62     	; 0x464e <Stepper_voidCCWHalfSteps+0x3b2>
    4610:	fe 01       	movw	r30, r28
    4612:	e9 5a       	subi	r30, 0xA9	; 169
    4614:	ff 4f       	sbci	r31, 0xFF	; 255
    4616:	88 ec       	ldi	r24, 0xC8	; 200
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	91 83       	std	Z+1, r25	; 0x01
    461c:	80 83       	st	Z, r24
    461e:	fe 01       	movw	r30, r28
    4620:	e9 5a       	subi	r30, 0xA9	; 169
    4622:	ff 4f       	sbci	r31, 0xFF	; 255
    4624:	80 81       	ld	r24, Z
    4626:	91 81       	ldd	r25, Z+1	; 0x01
    4628:	01 97       	sbiw	r24, 0x01	; 1
    462a:	f1 f7       	brne	.-4      	; 0x4628 <Stepper_voidCCWHalfSteps+0x38c>
    462c:	fe 01       	movw	r30, r28
    462e:	e9 5a       	subi	r30, 0xA9	; 169
    4630:	ff 4f       	sbci	r31, 0xFF	; 255
    4632:	91 83       	std	Z+1, r25	; 0x01
    4634:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4636:	de 01       	movw	r26, r28
    4638:	a7 5a       	subi	r26, 0xA7	; 167
    463a:	bf 4f       	sbci	r27, 0xFF	; 255
    463c:	fe 01       	movw	r30, r28
    463e:	e7 5a       	subi	r30, 0xA7	; 167
    4640:	ff 4f       	sbci	r31, 0xFF	; 255
    4642:	80 81       	ld	r24, Z
    4644:	91 81       	ldd	r25, Z+1	; 0x01
    4646:	01 97       	sbiw	r24, 0x01	; 1
    4648:	11 96       	adiw	r26, 0x01	; 1
    464a:	9c 93       	st	X, r25
    464c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    464e:	fe 01       	movw	r30, r28
    4650:	e7 5a       	subi	r30, 0xA7	; 167
    4652:	ff 4f       	sbci	r31, 0xFF	; 255
    4654:	80 81       	ld	r24, Z
    4656:	91 81       	ldd	r25, Z+1	; 0x01
    4658:	00 97       	sbiw	r24, 0x00	; 0
    465a:	d1 f6       	brne	.-76     	; 0x4610 <Stepper_voidCCWHalfSteps+0x374>
    465c:	27 c0       	rjmp	.+78     	; 0x46ac <Stepper_voidCCWHalfSteps+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    465e:	8e 01       	movw	r16, r28
    4660:	07 5a       	subi	r16, 0xA7	; 167
    4662:	1f 4f       	sbci	r17, 0xFF	; 255
    4664:	fe 01       	movw	r30, r28
    4666:	e5 5a       	subi	r30, 0xA5	; 165
    4668:	ff 4f       	sbci	r31, 0xFF	; 255
    466a:	60 81       	ld	r22, Z
    466c:	71 81       	ldd	r23, Z+1	; 0x01
    466e:	82 81       	ldd	r24, Z+2	; 0x02
    4670:	93 81       	ldd	r25, Z+3	; 0x03
    4672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4676:	dc 01       	movw	r26, r24
    4678:	cb 01       	movw	r24, r22
    467a:	f8 01       	movw	r30, r16
    467c:	91 83       	std	Z+1, r25	; 0x01
    467e:	80 83       	st	Z, r24
    4680:	de 01       	movw	r26, r28
    4682:	ab 5a       	subi	r26, 0xAB	; 171
    4684:	bf 4f       	sbci	r27, 0xFF	; 255
    4686:	fe 01       	movw	r30, r28
    4688:	e7 5a       	subi	r30, 0xA7	; 167
    468a:	ff 4f       	sbci	r31, 0xFF	; 255
    468c:	80 81       	ld	r24, Z
    468e:	91 81       	ldd	r25, Z+1	; 0x01
    4690:	8d 93       	st	X+, r24
    4692:	9c 93       	st	X, r25
    4694:	fe 01       	movw	r30, r28
    4696:	eb 5a       	subi	r30, 0xAB	; 171
    4698:	ff 4f       	sbci	r31, 0xFF	; 255
    469a:	80 81       	ld	r24, Z
    469c:	91 81       	ldd	r25, Z+1	; 0x01
    469e:	01 97       	sbiw	r24, 0x01	; 1
    46a0:	f1 f7       	brne	.-4      	; 0x469e <Stepper_voidCCWHalfSteps+0x402>
    46a2:	fe 01       	movw	r30, r28
    46a4:	eb 5a       	subi	r30, 0xAB	; 171
    46a6:	ff 4f       	sbci	r31, 0xFF	; 255
    46a8:	91 83       	std	Z+1, r25	; 0x01
    46aa:	80 83       	st	Z, r24
	_delay_ms(2);
	/*the Pink is Low  and all pin is high*/
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_High);
    46ac:	fe 01       	movw	r30, r28
    46ae:	ef 58       	subi	r30, 0x8F	; 143
    46b0:	ff 4f       	sbci	r31, 0xFF	; 255
    46b2:	01 90       	ld	r0, Z+
    46b4:	f0 81       	ld	r31, Z
    46b6:	e0 2d       	mov	r30, r0
    46b8:	80 81       	ld	r24, Z
    46ba:	fe 01       	movw	r30, r28
    46bc:	ef 58       	subi	r30, 0x8F	; 143
    46be:	ff 4f       	sbci	r31, 0xFF	; 255
    46c0:	01 90       	ld	r0, Z+
    46c2:	f0 81       	ld	r31, Z
    46c4:	e0 2d       	mov	r30, r0
    46c6:	91 81       	ldd	r25, Z+1	; 0x01
    46c8:	69 2f       	mov	r22, r25
    46ca:	41 e0       	ldi	r20, 0x01	; 1
    46cc:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_Low);
    46d0:	fe 01       	movw	r30, r28
    46d2:	ef 58       	subi	r30, 0x8F	; 143
    46d4:	ff 4f       	sbci	r31, 0xFF	; 255
    46d6:	01 90       	ld	r0, Z+
    46d8:	f0 81       	ld	r31, Z
    46da:	e0 2d       	mov	r30, r0
    46dc:	80 81       	ld	r24, Z
    46de:	fe 01       	movw	r30, r28
    46e0:	ef 58       	subi	r30, 0x8F	; 143
    46e2:	ff 4f       	sbci	r31, 0xFF	; 255
    46e4:	01 90       	ld	r0, Z+
    46e6:	f0 81       	ld	r31, Z
    46e8:	e0 2d       	mov	r30, r0
    46ea:	94 81       	ldd	r25, Z+4	; 0x04
    46ec:	69 2f       	mov	r22, r25
    46ee:	40 e0       	ldi	r20, 0x00	; 0
    46f0:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_High);
    46f4:	fe 01       	movw	r30, r28
    46f6:	ef 58       	subi	r30, 0x8F	; 143
    46f8:	ff 4f       	sbci	r31, 0xFF	; 255
    46fa:	01 90       	ld	r0, Z+
    46fc:	f0 81       	ld	r31, Z
    46fe:	e0 2d       	mov	r30, r0
    4700:	80 81       	ld	r24, Z
    4702:	fe 01       	movw	r30, r28
    4704:	ef 58       	subi	r30, 0x8F	; 143
    4706:	ff 4f       	sbci	r31, 0xFF	; 255
    4708:	01 90       	ld	r0, Z+
    470a:	f0 81       	ld	r31, Z
    470c:	e0 2d       	mov	r30, r0
    470e:	93 81       	ldd	r25, Z+3	; 0x03
    4710:	69 2f       	mov	r22, r25
    4712:	41 e0       	ldi	r20, 0x01	; 1
    4714:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_High);
    4718:	fe 01       	movw	r30, r28
    471a:	ef 58       	subi	r30, 0x8F	; 143
    471c:	ff 4f       	sbci	r31, 0xFF	; 255
    471e:	01 90       	ld	r0, Z+
    4720:	f0 81       	ld	r31, Z
    4722:	e0 2d       	mov	r30, r0
    4724:	80 81       	ld	r24, Z
    4726:	fe 01       	movw	r30, r28
    4728:	ef 58       	subi	r30, 0x8F	; 143
    472a:	ff 4f       	sbci	r31, 0xFF	; 255
    472c:	01 90       	ld	r0, Z+
    472e:	f0 81       	ld	r31, Z
    4730:	e0 2d       	mov	r30, r0
    4732:	92 81       	ldd	r25, Z+2	; 0x02
    4734:	69 2f       	mov	r22, r25
    4736:	41 e0       	ldi	r20, 0x01	; 1
    4738:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    473c:	fe 01       	movw	r30, r28
    473e:	ef 5a       	subi	r30, 0xAF	; 175
    4740:	ff 4f       	sbci	r31, 0xFF	; 255
    4742:	80 e0       	ldi	r24, 0x00	; 0
    4744:	90 e0       	ldi	r25, 0x00	; 0
    4746:	a0 e0       	ldi	r26, 0x00	; 0
    4748:	b0 e4       	ldi	r27, 0x40	; 64
    474a:	80 83       	st	Z, r24
    474c:	91 83       	std	Z+1, r25	; 0x01
    474e:	a2 83       	std	Z+2, r26	; 0x02
    4750:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4752:	8e 01       	movw	r16, r28
    4754:	03 5b       	subi	r16, 0xB3	; 179
    4756:	1f 4f       	sbci	r17, 0xFF	; 255
    4758:	fe 01       	movw	r30, r28
    475a:	ef 5a       	subi	r30, 0xAF	; 175
    475c:	ff 4f       	sbci	r31, 0xFF	; 255
    475e:	60 81       	ld	r22, Z
    4760:	71 81       	ldd	r23, Z+1	; 0x01
    4762:	82 81       	ldd	r24, Z+2	; 0x02
    4764:	93 81       	ldd	r25, Z+3	; 0x03
    4766:	20 e0       	ldi	r18, 0x00	; 0
    4768:	30 e0       	ldi	r19, 0x00	; 0
    476a:	4a ef       	ldi	r20, 0xFA	; 250
    476c:	54 e4       	ldi	r21, 0x44	; 68
    476e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4772:	dc 01       	movw	r26, r24
    4774:	cb 01       	movw	r24, r22
    4776:	f8 01       	movw	r30, r16
    4778:	80 83       	st	Z, r24
    477a:	91 83       	std	Z+1, r25	; 0x01
    477c:	a2 83       	std	Z+2, r26	; 0x02
    477e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4780:	fe 01       	movw	r30, r28
    4782:	e3 5b       	subi	r30, 0xB3	; 179
    4784:	ff 4f       	sbci	r31, 0xFF	; 255
    4786:	60 81       	ld	r22, Z
    4788:	71 81       	ldd	r23, Z+1	; 0x01
    478a:	82 81       	ldd	r24, Z+2	; 0x02
    478c:	93 81       	ldd	r25, Z+3	; 0x03
    478e:	20 e0       	ldi	r18, 0x00	; 0
    4790:	30 e0       	ldi	r19, 0x00	; 0
    4792:	40 e8       	ldi	r20, 0x80	; 128
    4794:	5f e3       	ldi	r21, 0x3F	; 63
    4796:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    479a:	88 23       	and	r24, r24
    479c:	44 f4       	brge	.+16     	; 0x47ae <Stepper_voidCCWHalfSteps+0x512>
		__ticks = 1;
    479e:	fe 01       	movw	r30, r28
    47a0:	e5 5b       	subi	r30, 0xB5	; 181
    47a2:	ff 4f       	sbci	r31, 0xFF	; 255
    47a4:	81 e0       	ldi	r24, 0x01	; 1
    47a6:	90 e0       	ldi	r25, 0x00	; 0
    47a8:	91 83       	std	Z+1, r25	; 0x01
    47aa:	80 83       	st	Z, r24
    47ac:	64 c0       	rjmp	.+200    	; 0x4876 <Stepper_voidCCWHalfSteps+0x5da>
	else if (__tmp > 65535)
    47ae:	fe 01       	movw	r30, r28
    47b0:	e3 5b       	subi	r30, 0xB3	; 179
    47b2:	ff 4f       	sbci	r31, 0xFF	; 255
    47b4:	60 81       	ld	r22, Z
    47b6:	71 81       	ldd	r23, Z+1	; 0x01
    47b8:	82 81       	ldd	r24, Z+2	; 0x02
    47ba:	93 81       	ldd	r25, Z+3	; 0x03
    47bc:	20 e0       	ldi	r18, 0x00	; 0
    47be:	3f ef       	ldi	r19, 0xFF	; 255
    47c0:	4f e7       	ldi	r20, 0x7F	; 127
    47c2:	57 e4       	ldi	r21, 0x47	; 71
    47c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47c8:	18 16       	cp	r1, r24
    47ca:	0c f0       	brlt	.+2      	; 0x47ce <Stepper_voidCCWHalfSteps+0x532>
    47cc:	43 c0       	rjmp	.+134    	; 0x4854 <Stepper_voidCCWHalfSteps+0x5b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47ce:	fe 01       	movw	r30, r28
    47d0:	ef 5a       	subi	r30, 0xAF	; 175
    47d2:	ff 4f       	sbci	r31, 0xFF	; 255
    47d4:	60 81       	ld	r22, Z
    47d6:	71 81       	ldd	r23, Z+1	; 0x01
    47d8:	82 81       	ldd	r24, Z+2	; 0x02
    47da:	93 81       	ldd	r25, Z+3	; 0x03
    47dc:	20 e0       	ldi	r18, 0x00	; 0
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	40 e2       	ldi	r20, 0x20	; 32
    47e2:	51 e4       	ldi	r21, 0x41	; 65
    47e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47e8:	dc 01       	movw	r26, r24
    47ea:	cb 01       	movw	r24, r22
    47ec:	8e 01       	movw	r16, r28
    47ee:	05 5b       	subi	r16, 0xB5	; 181
    47f0:	1f 4f       	sbci	r17, 0xFF	; 255
    47f2:	bc 01       	movw	r22, r24
    47f4:	cd 01       	movw	r24, r26
    47f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47fa:	dc 01       	movw	r26, r24
    47fc:	cb 01       	movw	r24, r22
    47fe:	f8 01       	movw	r30, r16
    4800:	91 83       	std	Z+1, r25	; 0x01
    4802:	80 83       	st	Z, r24
    4804:	1f c0       	rjmp	.+62     	; 0x4844 <Stepper_voidCCWHalfSteps+0x5a8>
    4806:	fe 01       	movw	r30, r28
    4808:	e7 5b       	subi	r30, 0xB7	; 183
    480a:	ff 4f       	sbci	r31, 0xFF	; 255
    480c:	88 ec       	ldi	r24, 0xC8	; 200
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	91 83       	std	Z+1, r25	; 0x01
    4812:	80 83       	st	Z, r24
    4814:	fe 01       	movw	r30, r28
    4816:	e7 5b       	subi	r30, 0xB7	; 183
    4818:	ff 4f       	sbci	r31, 0xFF	; 255
    481a:	80 81       	ld	r24, Z
    481c:	91 81       	ldd	r25, Z+1	; 0x01
    481e:	01 97       	sbiw	r24, 0x01	; 1
    4820:	f1 f7       	brne	.-4      	; 0x481e <Stepper_voidCCWHalfSteps+0x582>
    4822:	fe 01       	movw	r30, r28
    4824:	e7 5b       	subi	r30, 0xB7	; 183
    4826:	ff 4f       	sbci	r31, 0xFF	; 255
    4828:	91 83       	std	Z+1, r25	; 0x01
    482a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    482c:	de 01       	movw	r26, r28
    482e:	a5 5b       	subi	r26, 0xB5	; 181
    4830:	bf 4f       	sbci	r27, 0xFF	; 255
    4832:	fe 01       	movw	r30, r28
    4834:	e5 5b       	subi	r30, 0xB5	; 181
    4836:	ff 4f       	sbci	r31, 0xFF	; 255
    4838:	80 81       	ld	r24, Z
    483a:	91 81       	ldd	r25, Z+1	; 0x01
    483c:	01 97       	sbiw	r24, 0x01	; 1
    483e:	11 96       	adiw	r26, 0x01	; 1
    4840:	9c 93       	st	X, r25
    4842:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4844:	fe 01       	movw	r30, r28
    4846:	e5 5b       	subi	r30, 0xB5	; 181
    4848:	ff 4f       	sbci	r31, 0xFF	; 255
    484a:	80 81       	ld	r24, Z
    484c:	91 81       	ldd	r25, Z+1	; 0x01
    484e:	00 97       	sbiw	r24, 0x00	; 0
    4850:	d1 f6       	brne	.-76     	; 0x4806 <Stepper_voidCCWHalfSteps+0x56a>
    4852:	27 c0       	rjmp	.+78     	; 0x48a2 <Stepper_voidCCWHalfSteps+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4854:	8e 01       	movw	r16, r28
    4856:	05 5b       	subi	r16, 0xB5	; 181
    4858:	1f 4f       	sbci	r17, 0xFF	; 255
    485a:	fe 01       	movw	r30, r28
    485c:	e3 5b       	subi	r30, 0xB3	; 179
    485e:	ff 4f       	sbci	r31, 0xFF	; 255
    4860:	60 81       	ld	r22, Z
    4862:	71 81       	ldd	r23, Z+1	; 0x01
    4864:	82 81       	ldd	r24, Z+2	; 0x02
    4866:	93 81       	ldd	r25, Z+3	; 0x03
    4868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    486c:	dc 01       	movw	r26, r24
    486e:	cb 01       	movw	r24, r22
    4870:	f8 01       	movw	r30, r16
    4872:	91 83       	std	Z+1, r25	; 0x01
    4874:	80 83       	st	Z, r24
    4876:	de 01       	movw	r26, r28
    4878:	a9 5b       	subi	r26, 0xB9	; 185
    487a:	bf 4f       	sbci	r27, 0xFF	; 255
    487c:	fe 01       	movw	r30, r28
    487e:	e5 5b       	subi	r30, 0xB5	; 181
    4880:	ff 4f       	sbci	r31, 0xFF	; 255
    4882:	80 81       	ld	r24, Z
    4884:	91 81       	ldd	r25, Z+1	; 0x01
    4886:	8d 93       	st	X+, r24
    4888:	9c 93       	st	X, r25
    488a:	fe 01       	movw	r30, r28
    488c:	e9 5b       	subi	r30, 0xB9	; 185
    488e:	ff 4f       	sbci	r31, 0xFF	; 255
    4890:	80 81       	ld	r24, Z
    4892:	91 81       	ldd	r25, Z+1	; 0x01
    4894:	01 97       	sbiw	r24, 0x01	; 1
    4896:	f1 f7       	brne	.-4      	; 0x4894 <Stepper_voidCCWHalfSteps+0x5f8>
    4898:	fe 01       	movw	r30, r28
    489a:	e9 5b       	subi	r30, 0xB9	; 185
    489c:	ff 4f       	sbci	r31, 0xFF	; 255
    489e:	91 83       	std	Z+1, r25	; 0x01
    48a0:	80 83       	st	Z, r24
	_delay_ms(2);
	/*the Pink is Low  and all pin is high*/
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_High);
    48a2:	fe 01       	movw	r30, r28
    48a4:	ef 58       	subi	r30, 0x8F	; 143
    48a6:	ff 4f       	sbci	r31, 0xFF	; 255
    48a8:	01 90       	ld	r0, Z+
    48aa:	f0 81       	ld	r31, Z
    48ac:	e0 2d       	mov	r30, r0
    48ae:	80 81       	ld	r24, Z
    48b0:	fe 01       	movw	r30, r28
    48b2:	ef 58       	subi	r30, 0x8F	; 143
    48b4:	ff 4f       	sbci	r31, 0xFF	; 255
    48b6:	01 90       	ld	r0, Z+
    48b8:	f0 81       	ld	r31, Z
    48ba:	e0 2d       	mov	r30, r0
    48bc:	91 81       	ldd	r25, Z+1	; 0x01
    48be:	69 2f       	mov	r22, r25
    48c0:	41 e0       	ldi	r20, 0x01	; 1
    48c2:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_Low);
    48c6:	fe 01       	movw	r30, r28
    48c8:	ef 58       	subi	r30, 0x8F	; 143
    48ca:	ff 4f       	sbci	r31, 0xFF	; 255
    48cc:	01 90       	ld	r0, Z+
    48ce:	f0 81       	ld	r31, Z
    48d0:	e0 2d       	mov	r30, r0
    48d2:	80 81       	ld	r24, Z
    48d4:	fe 01       	movw	r30, r28
    48d6:	ef 58       	subi	r30, 0x8F	; 143
    48d8:	ff 4f       	sbci	r31, 0xFF	; 255
    48da:	01 90       	ld	r0, Z+
    48dc:	f0 81       	ld	r31, Z
    48de:	e0 2d       	mov	r30, r0
    48e0:	94 81       	ldd	r25, Z+4	; 0x04
    48e2:	69 2f       	mov	r22, r25
    48e4:	40 e0       	ldi	r20, 0x00	; 0
    48e6:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_Low);
    48ea:	fe 01       	movw	r30, r28
    48ec:	ef 58       	subi	r30, 0x8F	; 143
    48ee:	ff 4f       	sbci	r31, 0xFF	; 255
    48f0:	01 90       	ld	r0, Z+
    48f2:	f0 81       	ld	r31, Z
    48f4:	e0 2d       	mov	r30, r0
    48f6:	80 81       	ld	r24, Z
    48f8:	fe 01       	movw	r30, r28
    48fa:	ef 58       	subi	r30, 0x8F	; 143
    48fc:	ff 4f       	sbci	r31, 0xFF	; 255
    48fe:	01 90       	ld	r0, Z+
    4900:	f0 81       	ld	r31, Z
    4902:	e0 2d       	mov	r30, r0
    4904:	93 81       	ldd	r25, Z+3	; 0x03
    4906:	69 2f       	mov	r22, r25
    4908:	40 e0       	ldi	r20, 0x00	; 0
    490a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_High);
    490e:	fe 01       	movw	r30, r28
    4910:	ef 58       	subi	r30, 0x8F	; 143
    4912:	ff 4f       	sbci	r31, 0xFF	; 255
    4914:	01 90       	ld	r0, Z+
    4916:	f0 81       	ld	r31, Z
    4918:	e0 2d       	mov	r30, r0
    491a:	80 81       	ld	r24, Z
    491c:	fe 01       	movw	r30, r28
    491e:	ef 58       	subi	r30, 0x8F	; 143
    4920:	ff 4f       	sbci	r31, 0xFF	; 255
    4922:	01 90       	ld	r0, Z+
    4924:	f0 81       	ld	r31, Z
    4926:	e0 2d       	mov	r30, r0
    4928:	92 81       	ldd	r25, Z+2	; 0x02
    492a:	69 2f       	mov	r22, r25
    492c:	41 e0       	ldi	r20, 0x01	; 1
    492e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    4932:	fe 01       	movw	r30, r28
    4934:	ed 5b       	subi	r30, 0xBD	; 189
    4936:	ff 4f       	sbci	r31, 0xFF	; 255
    4938:	80 e0       	ldi	r24, 0x00	; 0
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	a0 e0       	ldi	r26, 0x00	; 0
    493e:	b0 e4       	ldi	r27, 0x40	; 64
    4940:	80 83       	st	Z, r24
    4942:	91 83       	std	Z+1, r25	; 0x01
    4944:	a2 83       	std	Z+2, r26	; 0x02
    4946:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4948:	8e 01       	movw	r16, r28
    494a:	01 5c       	subi	r16, 0xC1	; 193
    494c:	1f 4f       	sbci	r17, 0xFF	; 255
    494e:	fe 01       	movw	r30, r28
    4950:	ed 5b       	subi	r30, 0xBD	; 189
    4952:	ff 4f       	sbci	r31, 0xFF	; 255
    4954:	60 81       	ld	r22, Z
    4956:	71 81       	ldd	r23, Z+1	; 0x01
    4958:	82 81       	ldd	r24, Z+2	; 0x02
    495a:	93 81       	ldd	r25, Z+3	; 0x03
    495c:	20 e0       	ldi	r18, 0x00	; 0
    495e:	30 e0       	ldi	r19, 0x00	; 0
    4960:	4a ef       	ldi	r20, 0xFA	; 250
    4962:	54 e4       	ldi	r21, 0x44	; 68
    4964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4968:	dc 01       	movw	r26, r24
    496a:	cb 01       	movw	r24, r22
    496c:	f8 01       	movw	r30, r16
    496e:	80 83       	st	Z, r24
    4970:	91 83       	std	Z+1, r25	; 0x01
    4972:	a2 83       	std	Z+2, r26	; 0x02
    4974:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4976:	fe 01       	movw	r30, r28
    4978:	ff 96       	adiw	r30, 0x3f	; 63
    497a:	60 81       	ld	r22, Z
    497c:	71 81       	ldd	r23, Z+1	; 0x01
    497e:	82 81       	ldd	r24, Z+2	; 0x02
    4980:	93 81       	ldd	r25, Z+3	; 0x03
    4982:	20 e0       	ldi	r18, 0x00	; 0
    4984:	30 e0       	ldi	r19, 0x00	; 0
    4986:	40 e8       	ldi	r20, 0x80	; 128
    4988:	5f e3       	ldi	r21, 0x3F	; 63
    498a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    498e:	88 23       	and	r24, r24
    4990:	2c f4       	brge	.+10     	; 0x499c <Stepper_voidCCWHalfSteps+0x700>
		__ticks = 1;
    4992:	81 e0       	ldi	r24, 0x01	; 1
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	9e af       	std	Y+62, r25	; 0x3e
    4998:	8d af       	std	Y+61, r24	; 0x3d
    499a:	46 c0       	rjmp	.+140    	; 0x4a28 <Stepper_voidCCWHalfSteps+0x78c>
	else if (__tmp > 65535)
    499c:	fe 01       	movw	r30, r28
    499e:	ff 96       	adiw	r30, 0x3f	; 63
    49a0:	60 81       	ld	r22, Z
    49a2:	71 81       	ldd	r23, Z+1	; 0x01
    49a4:	82 81       	ldd	r24, Z+2	; 0x02
    49a6:	93 81       	ldd	r25, Z+3	; 0x03
    49a8:	20 e0       	ldi	r18, 0x00	; 0
    49aa:	3f ef       	ldi	r19, 0xFF	; 255
    49ac:	4f e7       	ldi	r20, 0x7F	; 127
    49ae:	57 e4       	ldi	r21, 0x47	; 71
    49b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49b4:	18 16       	cp	r1, r24
    49b6:	64 f5       	brge	.+88     	; 0x4a10 <Stepper_voidCCWHalfSteps+0x774>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49b8:	fe 01       	movw	r30, r28
    49ba:	ed 5b       	subi	r30, 0xBD	; 189
    49bc:	ff 4f       	sbci	r31, 0xFF	; 255
    49be:	60 81       	ld	r22, Z
    49c0:	71 81       	ldd	r23, Z+1	; 0x01
    49c2:	82 81       	ldd	r24, Z+2	; 0x02
    49c4:	93 81       	ldd	r25, Z+3	; 0x03
    49c6:	20 e0       	ldi	r18, 0x00	; 0
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	40 e2       	ldi	r20, 0x20	; 32
    49cc:	51 e4       	ldi	r21, 0x41	; 65
    49ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49d2:	dc 01       	movw	r26, r24
    49d4:	cb 01       	movw	r24, r22
    49d6:	bc 01       	movw	r22, r24
    49d8:	cd 01       	movw	r24, r26
    49da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49de:	dc 01       	movw	r26, r24
    49e0:	cb 01       	movw	r24, r22
    49e2:	9e af       	std	Y+62, r25	; 0x3e
    49e4:	8d af       	std	Y+61, r24	; 0x3d
    49e6:	0f c0       	rjmp	.+30     	; 0x4a06 <Stepper_voidCCWHalfSteps+0x76a>
    49e8:	88 ec       	ldi	r24, 0xC8	; 200
    49ea:	90 e0       	ldi	r25, 0x00	; 0
    49ec:	9c af       	std	Y+60, r25	; 0x3c
    49ee:	8b af       	std	Y+59, r24	; 0x3b
    49f0:	8b ad       	ldd	r24, Y+59	; 0x3b
    49f2:	9c ad       	ldd	r25, Y+60	; 0x3c
    49f4:	01 97       	sbiw	r24, 0x01	; 1
    49f6:	f1 f7       	brne	.-4      	; 0x49f4 <Stepper_voidCCWHalfSteps+0x758>
    49f8:	9c af       	std	Y+60, r25	; 0x3c
    49fa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    49fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a00:	01 97       	sbiw	r24, 0x01	; 1
    4a02:	9e af       	std	Y+62, r25	; 0x3e
    4a04:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a06:	8d ad       	ldd	r24, Y+61	; 0x3d
    4a08:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a0a:	00 97       	sbiw	r24, 0x00	; 0
    4a0c:	69 f7       	brne	.-38     	; 0x49e8 <Stepper_voidCCWHalfSteps+0x74c>
    4a0e:	16 c0       	rjmp	.+44     	; 0x4a3c <Stepper_voidCCWHalfSteps+0x7a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a10:	fe 01       	movw	r30, r28
    4a12:	ff 96       	adiw	r30, 0x3f	; 63
    4a14:	60 81       	ld	r22, Z
    4a16:	71 81       	ldd	r23, Z+1	; 0x01
    4a18:	82 81       	ldd	r24, Z+2	; 0x02
    4a1a:	93 81       	ldd	r25, Z+3	; 0x03
    4a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a20:	dc 01       	movw	r26, r24
    4a22:	cb 01       	movw	r24, r22
    4a24:	9e af       	std	Y+62, r25	; 0x3e
    4a26:	8d af       	std	Y+61, r24	; 0x3d
    4a28:	8d ad       	ldd	r24, Y+61	; 0x3d
    4a2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a2c:	9a af       	std	Y+58, r25	; 0x3a
    4a2e:	89 af       	std	Y+57, r24	; 0x39
    4a30:	89 ad       	ldd	r24, Y+57	; 0x39
    4a32:	9a ad       	ldd	r25, Y+58	; 0x3a
    4a34:	01 97       	sbiw	r24, 0x01	; 1
    4a36:	f1 f7       	brne	.-4      	; 0x4a34 <Stepper_voidCCWHalfSteps+0x798>
    4a38:	9a af       	std	Y+58, r25	; 0x3a
    4a3a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	/*the Yellow is Low  and all pin is high*/
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_High);
    4a3c:	fe 01       	movw	r30, r28
    4a3e:	ef 58       	subi	r30, 0x8F	; 143
    4a40:	ff 4f       	sbci	r31, 0xFF	; 255
    4a42:	01 90       	ld	r0, Z+
    4a44:	f0 81       	ld	r31, Z
    4a46:	e0 2d       	mov	r30, r0
    4a48:	80 81       	ld	r24, Z
    4a4a:	fe 01       	movw	r30, r28
    4a4c:	ef 58       	subi	r30, 0x8F	; 143
    4a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a50:	01 90       	ld	r0, Z+
    4a52:	f0 81       	ld	r31, Z
    4a54:	e0 2d       	mov	r30, r0
    4a56:	91 81       	ldd	r25, Z+1	; 0x01
    4a58:	69 2f       	mov	r22, r25
    4a5a:	41 e0       	ldi	r20, 0x01	; 1
    4a5c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_High);
    4a60:	fe 01       	movw	r30, r28
    4a62:	ef 58       	subi	r30, 0x8F	; 143
    4a64:	ff 4f       	sbci	r31, 0xFF	; 255
    4a66:	01 90       	ld	r0, Z+
    4a68:	f0 81       	ld	r31, Z
    4a6a:	e0 2d       	mov	r30, r0
    4a6c:	80 81       	ld	r24, Z
    4a6e:	fe 01       	movw	r30, r28
    4a70:	ef 58       	subi	r30, 0x8F	; 143
    4a72:	ff 4f       	sbci	r31, 0xFF	; 255
    4a74:	01 90       	ld	r0, Z+
    4a76:	f0 81       	ld	r31, Z
    4a78:	e0 2d       	mov	r30, r0
    4a7a:	94 81       	ldd	r25, Z+4	; 0x04
    4a7c:	69 2f       	mov	r22, r25
    4a7e:	41 e0       	ldi	r20, 0x01	; 1
    4a80:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_Low);
    4a84:	fe 01       	movw	r30, r28
    4a86:	ef 58       	subi	r30, 0x8F	; 143
    4a88:	ff 4f       	sbci	r31, 0xFF	; 255
    4a8a:	01 90       	ld	r0, Z+
    4a8c:	f0 81       	ld	r31, Z
    4a8e:	e0 2d       	mov	r30, r0
    4a90:	80 81       	ld	r24, Z
    4a92:	fe 01       	movw	r30, r28
    4a94:	ef 58       	subi	r30, 0x8F	; 143
    4a96:	ff 4f       	sbci	r31, 0xFF	; 255
    4a98:	01 90       	ld	r0, Z+
    4a9a:	f0 81       	ld	r31, Z
    4a9c:	e0 2d       	mov	r30, r0
    4a9e:	93 81       	ldd	r25, Z+3	; 0x03
    4aa0:	69 2f       	mov	r22, r25
    4aa2:	40 e0       	ldi	r20, 0x00	; 0
    4aa4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_High);
    4aa8:	fe 01       	movw	r30, r28
    4aaa:	ef 58       	subi	r30, 0x8F	; 143
    4aac:	ff 4f       	sbci	r31, 0xFF	; 255
    4aae:	01 90       	ld	r0, Z+
    4ab0:	f0 81       	ld	r31, Z
    4ab2:	e0 2d       	mov	r30, r0
    4ab4:	80 81       	ld	r24, Z
    4ab6:	fe 01       	movw	r30, r28
    4ab8:	ef 58       	subi	r30, 0x8F	; 143
    4aba:	ff 4f       	sbci	r31, 0xFF	; 255
    4abc:	01 90       	ld	r0, Z+
    4abe:	f0 81       	ld	r31, Z
    4ac0:	e0 2d       	mov	r30, r0
    4ac2:	92 81       	ldd	r25, Z+2	; 0x02
    4ac4:	69 2f       	mov	r22, r25
    4ac6:	41 e0       	ldi	r20, 0x01	; 1
    4ac8:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    4acc:	80 e0       	ldi	r24, 0x00	; 0
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	a0 e0       	ldi	r26, 0x00	; 0
    4ad2:	b0 e4       	ldi	r27, 0x40	; 64
    4ad4:	8d ab       	std	Y+53, r24	; 0x35
    4ad6:	9e ab       	std	Y+54, r25	; 0x36
    4ad8:	af ab       	std	Y+55, r26	; 0x37
    4ada:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4adc:	6d a9       	ldd	r22, Y+53	; 0x35
    4ade:	7e a9       	ldd	r23, Y+54	; 0x36
    4ae0:	8f a9       	ldd	r24, Y+55	; 0x37
    4ae2:	98 ad       	ldd	r25, Y+56	; 0x38
    4ae4:	20 e0       	ldi	r18, 0x00	; 0
    4ae6:	30 e0       	ldi	r19, 0x00	; 0
    4ae8:	4a ef       	ldi	r20, 0xFA	; 250
    4aea:	54 e4       	ldi	r21, 0x44	; 68
    4aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4af0:	dc 01       	movw	r26, r24
    4af2:	cb 01       	movw	r24, r22
    4af4:	89 ab       	std	Y+49, r24	; 0x31
    4af6:	9a ab       	std	Y+50, r25	; 0x32
    4af8:	ab ab       	std	Y+51, r26	; 0x33
    4afa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4afc:	69 a9       	ldd	r22, Y+49	; 0x31
    4afe:	7a a9       	ldd	r23, Y+50	; 0x32
    4b00:	8b a9       	ldd	r24, Y+51	; 0x33
    4b02:	9c a9       	ldd	r25, Y+52	; 0x34
    4b04:	20 e0       	ldi	r18, 0x00	; 0
    4b06:	30 e0       	ldi	r19, 0x00	; 0
    4b08:	40 e8       	ldi	r20, 0x80	; 128
    4b0a:	5f e3       	ldi	r21, 0x3F	; 63
    4b0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b10:	88 23       	and	r24, r24
    4b12:	2c f4       	brge	.+10     	; 0x4b1e <Stepper_voidCCWHalfSteps+0x882>
		__ticks = 1;
    4b14:	81 e0       	ldi	r24, 0x01	; 1
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	98 ab       	std	Y+48, r25	; 0x30
    4b1a:	8f a7       	std	Y+47, r24	; 0x2f
    4b1c:	3f c0       	rjmp	.+126    	; 0x4b9c <Stepper_voidCCWHalfSteps+0x900>
	else if (__tmp > 65535)
    4b1e:	69 a9       	ldd	r22, Y+49	; 0x31
    4b20:	7a a9       	ldd	r23, Y+50	; 0x32
    4b22:	8b a9       	ldd	r24, Y+51	; 0x33
    4b24:	9c a9       	ldd	r25, Y+52	; 0x34
    4b26:	20 e0       	ldi	r18, 0x00	; 0
    4b28:	3f ef       	ldi	r19, 0xFF	; 255
    4b2a:	4f e7       	ldi	r20, 0x7F	; 127
    4b2c:	57 e4       	ldi	r21, 0x47	; 71
    4b2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b32:	18 16       	cp	r1, r24
    4b34:	4c f5       	brge	.+82     	; 0x4b88 <Stepper_voidCCWHalfSteps+0x8ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b36:	6d a9       	ldd	r22, Y+53	; 0x35
    4b38:	7e a9       	ldd	r23, Y+54	; 0x36
    4b3a:	8f a9       	ldd	r24, Y+55	; 0x37
    4b3c:	98 ad       	ldd	r25, Y+56	; 0x38
    4b3e:	20 e0       	ldi	r18, 0x00	; 0
    4b40:	30 e0       	ldi	r19, 0x00	; 0
    4b42:	40 e2       	ldi	r20, 0x20	; 32
    4b44:	51 e4       	ldi	r21, 0x41	; 65
    4b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b4a:	dc 01       	movw	r26, r24
    4b4c:	cb 01       	movw	r24, r22
    4b4e:	bc 01       	movw	r22, r24
    4b50:	cd 01       	movw	r24, r26
    4b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b56:	dc 01       	movw	r26, r24
    4b58:	cb 01       	movw	r24, r22
    4b5a:	98 ab       	std	Y+48, r25	; 0x30
    4b5c:	8f a7       	std	Y+47, r24	; 0x2f
    4b5e:	0f c0       	rjmp	.+30     	; 0x4b7e <Stepper_voidCCWHalfSteps+0x8e2>
    4b60:	88 ec       	ldi	r24, 0xC8	; 200
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	9e a7       	std	Y+46, r25	; 0x2e
    4b66:	8d a7       	std	Y+45, r24	; 0x2d
    4b68:	8d a5       	ldd	r24, Y+45	; 0x2d
    4b6a:	9e a5       	ldd	r25, Y+46	; 0x2e
    4b6c:	01 97       	sbiw	r24, 0x01	; 1
    4b6e:	f1 f7       	brne	.-4      	; 0x4b6c <Stepper_voidCCWHalfSteps+0x8d0>
    4b70:	9e a7       	std	Y+46, r25	; 0x2e
    4b72:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b74:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b76:	98 a9       	ldd	r25, Y+48	; 0x30
    4b78:	01 97       	sbiw	r24, 0x01	; 1
    4b7a:	98 ab       	std	Y+48, r25	; 0x30
    4b7c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b80:	98 a9       	ldd	r25, Y+48	; 0x30
    4b82:	00 97       	sbiw	r24, 0x00	; 0
    4b84:	69 f7       	brne	.-38     	; 0x4b60 <Stepper_voidCCWHalfSteps+0x8c4>
    4b86:	14 c0       	rjmp	.+40     	; 0x4bb0 <Stepper_voidCCWHalfSteps+0x914>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b88:	69 a9       	ldd	r22, Y+49	; 0x31
    4b8a:	7a a9       	ldd	r23, Y+50	; 0x32
    4b8c:	8b a9       	ldd	r24, Y+51	; 0x33
    4b8e:	9c a9       	ldd	r25, Y+52	; 0x34
    4b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b94:	dc 01       	movw	r26, r24
    4b96:	cb 01       	movw	r24, r22
    4b98:	98 ab       	std	Y+48, r25	; 0x30
    4b9a:	8f a7       	std	Y+47, r24	; 0x2f
    4b9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b9e:	98 a9       	ldd	r25, Y+48	; 0x30
    4ba0:	9c a7       	std	Y+44, r25	; 0x2c
    4ba2:	8b a7       	std	Y+43, r24	; 0x2b
    4ba4:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ba6:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ba8:	01 97       	sbiw	r24, 0x01	; 1
    4baa:	f1 f7       	brne	.-4      	; 0x4ba8 <Stepper_voidCCWHalfSteps+0x90c>
    4bac:	9c a7       	std	Y+44, r25	; 0x2c
    4bae:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);

	/*the Yellow is Low  and all pin is high*/
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_High);
    4bb0:	fe 01       	movw	r30, r28
    4bb2:	ef 58       	subi	r30, 0x8F	; 143
    4bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb6:	01 90       	ld	r0, Z+
    4bb8:	f0 81       	ld	r31, Z
    4bba:	e0 2d       	mov	r30, r0
    4bbc:	80 81       	ld	r24, Z
    4bbe:	fe 01       	movw	r30, r28
    4bc0:	ef 58       	subi	r30, 0x8F	; 143
    4bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc4:	01 90       	ld	r0, Z+
    4bc6:	f0 81       	ld	r31, Z
    4bc8:	e0 2d       	mov	r30, r0
    4bca:	91 81       	ldd	r25, Z+1	; 0x01
    4bcc:	69 2f       	mov	r22, r25
    4bce:	41 e0       	ldi	r20, 0x01	; 1
    4bd0:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_High);
    4bd4:	fe 01       	movw	r30, r28
    4bd6:	ef 58       	subi	r30, 0x8F	; 143
    4bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bda:	01 90       	ld	r0, Z+
    4bdc:	f0 81       	ld	r31, Z
    4bde:	e0 2d       	mov	r30, r0
    4be0:	80 81       	ld	r24, Z
    4be2:	fe 01       	movw	r30, r28
    4be4:	ef 58       	subi	r30, 0x8F	; 143
    4be6:	ff 4f       	sbci	r31, 0xFF	; 255
    4be8:	01 90       	ld	r0, Z+
    4bea:	f0 81       	ld	r31, Z
    4bec:	e0 2d       	mov	r30, r0
    4bee:	94 81       	ldd	r25, Z+4	; 0x04
    4bf0:	69 2f       	mov	r22, r25
    4bf2:	41 e0       	ldi	r20, 0x01	; 1
    4bf4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_Low);
    4bf8:	fe 01       	movw	r30, r28
    4bfa:	ef 58       	subi	r30, 0x8F	; 143
    4bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfe:	01 90       	ld	r0, Z+
    4c00:	f0 81       	ld	r31, Z
    4c02:	e0 2d       	mov	r30, r0
    4c04:	80 81       	ld	r24, Z
    4c06:	fe 01       	movw	r30, r28
    4c08:	ef 58       	subi	r30, 0x8F	; 143
    4c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0c:	01 90       	ld	r0, Z+
    4c0e:	f0 81       	ld	r31, Z
    4c10:	e0 2d       	mov	r30, r0
    4c12:	93 81       	ldd	r25, Z+3	; 0x03
    4c14:	69 2f       	mov	r22, r25
    4c16:	40 e0       	ldi	r20, 0x00	; 0
    4c18:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_Low);
    4c1c:	fe 01       	movw	r30, r28
    4c1e:	ef 58       	subi	r30, 0x8F	; 143
    4c20:	ff 4f       	sbci	r31, 0xFF	; 255
    4c22:	01 90       	ld	r0, Z+
    4c24:	f0 81       	ld	r31, Z
    4c26:	e0 2d       	mov	r30, r0
    4c28:	80 81       	ld	r24, Z
    4c2a:	fe 01       	movw	r30, r28
    4c2c:	ef 58       	subi	r30, 0x8F	; 143
    4c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c30:	01 90       	ld	r0, Z+
    4c32:	f0 81       	ld	r31, Z
    4c34:	e0 2d       	mov	r30, r0
    4c36:	92 81       	ldd	r25, Z+2	; 0x02
    4c38:	69 2f       	mov	r22, r25
    4c3a:	40 e0       	ldi	r20, 0x00	; 0
    4c3c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    4c40:	80 e0       	ldi	r24, 0x00	; 0
    4c42:	90 e0       	ldi	r25, 0x00	; 0
    4c44:	a0 e0       	ldi	r26, 0x00	; 0
    4c46:	b0 e4       	ldi	r27, 0x40	; 64
    4c48:	8f a3       	std	Y+39, r24	; 0x27
    4c4a:	98 a7       	std	Y+40, r25	; 0x28
    4c4c:	a9 a7       	std	Y+41, r26	; 0x29
    4c4e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c50:	6f a1       	ldd	r22, Y+39	; 0x27
    4c52:	78 a5       	ldd	r23, Y+40	; 0x28
    4c54:	89 a5       	ldd	r24, Y+41	; 0x29
    4c56:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c58:	20 e0       	ldi	r18, 0x00	; 0
    4c5a:	30 e0       	ldi	r19, 0x00	; 0
    4c5c:	4a ef       	ldi	r20, 0xFA	; 250
    4c5e:	54 e4       	ldi	r21, 0x44	; 68
    4c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c64:	dc 01       	movw	r26, r24
    4c66:	cb 01       	movw	r24, r22
    4c68:	8b a3       	std	Y+35, r24	; 0x23
    4c6a:	9c a3       	std	Y+36, r25	; 0x24
    4c6c:	ad a3       	std	Y+37, r26	; 0x25
    4c6e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4c70:	6b a1       	ldd	r22, Y+35	; 0x23
    4c72:	7c a1       	ldd	r23, Y+36	; 0x24
    4c74:	8d a1       	ldd	r24, Y+37	; 0x25
    4c76:	9e a1       	ldd	r25, Y+38	; 0x26
    4c78:	20 e0       	ldi	r18, 0x00	; 0
    4c7a:	30 e0       	ldi	r19, 0x00	; 0
    4c7c:	40 e8       	ldi	r20, 0x80	; 128
    4c7e:	5f e3       	ldi	r21, 0x3F	; 63
    4c80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c84:	88 23       	and	r24, r24
    4c86:	2c f4       	brge	.+10     	; 0x4c92 <Stepper_voidCCWHalfSteps+0x9f6>
		__ticks = 1;
    4c88:	81 e0       	ldi	r24, 0x01	; 1
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	9a a3       	std	Y+34, r25	; 0x22
    4c8e:	89 a3       	std	Y+33, r24	; 0x21
    4c90:	3f c0       	rjmp	.+126    	; 0x4d10 <Stepper_voidCCWHalfSteps+0xa74>
	else if (__tmp > 65535)
    4c92:	6b a1       	ldd	r22, Y+35	; 0x23
    4c94:	7c a1       	ldd	r23, Y+36	; 0x24
    4c96:	8d a1       	ldd	r24, Y+37	; 0x25
    4c98:	9e a1       	ldd	r25, Y+38	; 0x26
    4c9a:	20 e0       	ldi	r18, 0x00	; 0
    4c9c:	3f ef       	ldi	r19, 0xFF	; 255
    4c9e:	4f e7       	ldi	r20, 0x7F	; 127
    4ca0:	57 e4       	ldi	r21, 0x47	; 71
    4ca2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ca6:	18 16       	cp	r1, r24
    4ca8:	4c f5       	brge	.+82     	; 0x4cfc <Stepper_voidCCWHalfSteps+0xa60>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4caa:	6f a1       	ldd	r22, Y+39	; 0x27
    4cac:	78 a5       	ldd	r23, Y+40	; 0x28
    4cae:	89 a5       	ldd	r24, Y+41	; 0x29
    4cb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    4cb2:	20 e0       	ldi	r18, 0x00	; 0
    4cb4:	30 e0       	ldi	r19, 0x00	; 0
    4cb6:	40 e2       	ldi	r20, 0x20	; 32
    4cb8:	51 e4       	ldi	r21, 0x41	; 65
    4cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cbe:	dc 01       	movw	r26, r24
    4cc0:	cb 01       	movw	r24, r22
    4cc2:	bc 01       	movw	r22, r24
    4cc4:	cd 01       	movw	r24, r26
    4cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cca:	dc 01       	movw	r26, r24
    4ccc:	cb 01       	movw	r24, r22
    4cce:	9a a3       	std	Y+34, r25	; 0x22
    4cd0:	89 a3       	std	Y+33, r24	; 0x21
    4cd2:	0f c0       	rjmp	.+30     	; 0x4cf2 <Stepper_voidCCWHalfSteps+0xa56>
    4cd4:	88 ec       	ldi	r24, 0xC8	; 200
    4cd6:	90 e0       	ldi	r25, 0x00	; 0
    4cd8:	98 a3       	std	Y+32, r25	; 0x20
    4cda:	8f 8f       	std	Y+31, r24	; 0x1f
    4cdc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4cde:	98 a1       	ldd	r25, Y+32	; 0x20
    4ce0:	01 97       	sbiw	r24, 0x01	; 1
    4ce2:	f1 f7       	brne	.-4      	; 0x4ce0 <Stepper_voidCCWHalfSteps+0xa44>
    4ce4:	98 a3       	std	Y+32, r25	; 0x20
    4ce6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ce8:	89 a1       	ldd	r24, Y+33	; 0x21
    4cea:	9a a1       	ldd	r25, Y+34	; 0x22
    4cec:	01 97       	sbiw	r24, 0x01	; 1
    4cee:	9a a3       	std	Y+34, r25	; 0x22
    4cf0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cf2:	89 a1       	ldd	r24, Y+33	; 0x21
    4cf4:	9a a1       	ldd	r25, Y+34	; 0x22
    4cf6:	00 97       	sbiw	r24, 0x00	; 0
    4cf8:	69 f7       	brne	.-38     	; 0x4cd4 <Stepper_voidCCWHalfSteps+0xa38>
    4cfa:	14 c0       	rjmp	.+40     	; 0x4d24 <Stepper_voidCCWHalfSteps+0xa88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cfc:	6b a1       	ldd	r22, Y+35	; 0x23
    4cfe:	7c a1       	ldd	r23, Y+36	; 0x24
    4d00:	8d a1       	ldd	r24, Y+37	; 0x25
    4d02:	9e a1       	ldd	r25, Y+38	; 0x26
    4d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d08:	dc 01       	movw	r26, r24
    4d0a:	cb 01       	movw	r24, r22
    4d0c:	9a a3       	std	Y+34, r25	; 0x22
    4d0e:	89 a3       	std	Y+33, r24	; 0x21
    4d10:	89 a1       	ldd	r24, Y+33	; 0x21
    4d12:	9a a1       	ldd	r25, Y+34	; 0x22
    4d14:	9e 8f       	std	Y+30, r25	; 0x1e
    4d16:	8d 8f       	std	Y+29, r24	; 0x1d
    4d18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d1a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4d1c:	01 97       	sbiw	r24, 0x01	; 1
    4d1e:	f1 f7       	brne	.-4      	; 0x4d1c <Stepper_voidCCWHalfSteps+0xa80>
    4d20:	9e 8f       	std	Y+30, r25	; 0x1e
    4d22:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	/*the Orange is Low  and all pin is high*/
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_High);
    4d24:	fe 01       	movw	r30, r28
    4d26:	ef 58       	subi	r30, 0x8F	; 143
    4d28:	ff 4f       	sbci	r31, 0xFF	; 255
    4d2a:	01 90       	ld	r0, Z+
    4d2c:	f0 81       	ld	r31, Z
    4d2e:	e0 2d       	mov	r30, r0
    4d30:	80 81       	ld	r24, Z
    4d32:	fe 01       	movw	r30, r28
    4d34:	ef 58       	subi	r30, 0x8F	; 143
    4d36:	ff 4f       	sbci	r31, 0xFF	; 255
    4d38:	01 90       	ld	r0, Z+
    4d3a:	f0 81       	ld	r31, Z
    4d3c:	e0 2d       	mov	r30, r0
    4d3e:	91 81       	ldd	r25, Z+1	; 0x01
    4d40:	69 2f       	mov	r22, r25
    4d42:	41 e0       	ldi	r20, 0x01	; 1
    4d44:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_High);
    4d48:	fe 01       	movw	r30, r28
    4d4a:	ef 58       	subi	r30, 0x8F	; 143
    4d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4e:	01 90       	ld	r0, Z+
    4d50:	f0 81       	ld	r31, Z
    4d52:	e0 2d       	mov	r30, r0
    4d54:	80 81       	ld	r24, Z
    4d56:	fe 01       	movw	r30, r28
    4d58:	ef 58       	subi	r30, 0x8F	; 143
    4d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d5c:	01 90       	ld	r0, Z+
    4d5e:	f0 81       	ld	r31, Z
    4d60:	e0 2d       	mov	r30, r0
    4d62:	92 81       	ldd	r25, Z+2	; 0x02
    4d64:	69 2f       	mov	r22, r25
    4d66:	41 e0       	ldi	r20, 0x01	; 1
    4d68:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_High);
    4d6c:	fe 01       	movw	r30, r28
    4d6e:	ef 58       	subi	r30, 0x8F	; 143
    4d70:	ff 4f       	sbci	r31, 0xFF	; 255
    4d72:	01 90       	ld	r0, Z+
    4d74:	f0 81       	ld	r31, Z
    4d76:	e0 2d       	mov	r30, r0
    4d78:	80 81       	ld	r24, Z
    4d7a:	fe 01       	movw	r30, r28
    4d7c:	ef 58       	subi	r30, 0x8F	; 143
    4d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d80:	01 90       	ld	r0, Z+
    4d82:	f0 81       	ld	r31, Z
    4d84:	e0 2d       	mov	r30, r0
    4d86:	93 81       	ldd	r25, Z+3	; 0x03
    4d88:	69 2f       	mov	r22, r25
    4d8a:	41 e0       	ldi	r20, 0x01	; 1
    4d8c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_Low);
    4d90:	fe 01       	movw	r30, r28
    4d92:	ef 58       	subi	r30, 0x8F	; 143
    4d94:	ff 4f       	sbci	r31, 0xFF	; 255
    4d96:	01 90       	ld	r0, Z+
    4d98:	f0 81       	ld	r31, Z
    4d9a:	e0 2d       	mov	r30, r0
    4d9c:	80 81       	ld	r24, Z
    4d9e:	fe 01       	movw	r30, r28
    4da0:	ef 58       	subi	r30, 0x8F	; 143
    4da2:	ff 4f       	sbci	r31, 0xFF	; 255
    4da4:	01 90       	ld	r0, Z+
    4da6:	f0 81       	ld	r31, Z
    4da8:	e0 2d       	mov	r30, r0
    4daa:	94 81       	ldd	r25, Z+4	; 0x04
    4dac:	69 2f       	mov	r22, r25
    4dae:	40 e0       	ldi	r20, 0x00	; 0
    4db0:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    4db4:	80 e0       	ldi	r24, 0x00	; 0
    4db6:	90 e0       	ldi	r25, 0x00	; 0
    4db8:	a0 e0       	ldi	r26, 0x00	; 0
    4dba:	b0 e4       	ldi	r27, 0x40	; 64
    4dbc:	89 8f       	std	Y+25, r24	; 0x19
    4dbe:	9a 8f       	std	Y+26, r25	; 0x1a
    4dc0:	ab 8f       	std	Y+27, r26	; 0x1b
    4dc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dc4:	69 8d       	ldd	r22, Y+25	; 0x19
    4dc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4dc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4dca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4dcc:	20 e0       	ldi	r18, 0x00	; 0
    4dce:	30 e0       	ldi	r19, 0x00	; 0
    4dd0:	4a ef       	ldi	r20, 0xFA	; 250
    4dd2:	54 e4       	ldi	r21, 0x44	; 68
    4dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dd8:	dc 01       	movw	r26, r24
    4dda:	cb 01       	movw	r24, r22
    4ddc:	8d 8b       	std	Y+21, r24	; 0x15
    4dde:	9e 8b       	std	Y+22, r25	; 0x16
    4de0:	af 8b       	std	Y+23, r26	; 0x17
    4de2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4de4:	6d 89       	ldd	r22, Y+21	; 0x15
    4de6:	7e 89       	ldd	r23, Y+22	; 0x16
    4de8:	8f 89       	ldd	r24, Y+23	; 0x17
    4dea:	98 8d       	ldd	r25, Y+24	; 0x18
    4dec:	20 e0       	ldi	r18, 0x00	; 0
    4dee:	30 e0       	ldi	r19, 0x00	; 0
    4df0:	40 e8       	ldi	r20, 0x80	; 128
    4df2:	5f e3       	ldi	r21, 0x3F	; 63
    4df4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4df8:	88 23       	and	r24, r24
    4dfa:	2c f4       	brge	.+10     	; 0x4e06 <Stepper_voidCCWHalfSteps+0xb6a>
		__ticks = 1;
    4dfc:	81 e0       	ldi	r24, 0x01	; 1
    4dfe:	90 e0       	ldi	r25, 0x00	; 0
    4e00:	9c 8b       	std	Y+20, r25	; 0x14
    4e02:	8b 8b       	std	Y+19, r24	; 0x13
    4e04:	3f c0       	rjmp	.+126    	; 0x4e84 <Stepper_voidCCWHalfSteps+0xbe8>
	else if (__tmp > 65535)
    4e06:	6d 89       	ldd	r22, Y+21	; 0x15
    4e08:	7e 89       	ldd	r23, Y+22	; 0x16
    4e0a:	8f 89       	ldd	r24, Y+23	; 0x17
    4e0c:	98 8d       	ldd	r25, Y+24	; 0x18
    4e0e:	20 e0       	ldi	r18, 0x00	; 0
    4e10:	3f ef       	ldi	r19, 0xFF	; 255
    4e12:	4f e7       	ldi	r20, 0x7F	; 127
    4e14:	57 e4       	ldi	r21, 0x47	; 71
    4e16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e1a:	18 16       	cp	r1, r24
    4e1c:	4c f5       	brge	.+82     	; 0x4e70 <Stepper_voidCCWHalfSteps+0xbd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e1e:	69 8d       	ldd	r22, Y+25	; 0x19
    4e20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e26:	20 e0       	ldi	r18, 0x00	; 0
    4e28:	30 e0       	ldi	r19, 0x00	; 0
    4e2a:	40 e2       	ldi	r20, 0x20	; 32
    4e2c:	51 e4       	ldi	r21, 0x41	; 65
    4e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e32:	dc 01       	movw	r26, r24
    4e34:	cb 01       	movw	r24, r22
    4e36:	bc 01       	movw	r22, r24
    4e38:	cd 01       	movw	r24, r26
    4e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e3e:	dc 01       	movw	r26, r24
    4e40:	cb 01       	movw	r24, r22
    4e42:	9c 8b       	std	Y+20, r25	; 0x14
    4e44:	8b 8b       	std	Y+19, r24	; 0x13
    4e46:	0f c0       	rjmp	.+30     	; 0x4e66 <Stepper_voidCCWHalfSteps+0xbca>
    4e48:	88 ec       	ldi	r24, 0xC8	; 200
    4e4a:	90 e0       	ldi	r25, 0x00	; 0
    4e4c:	9a 8b       	std	Y+18, r25	; 0x12
    4e4e:	89 8b       	std	Y+17, r24	; 0x11
    4e50:	89 89       	ldd	r24, Y+17	; 0x11
    4e52:	9a 89       	ldd	r25, Y+18	; 0x12
    4e54:	01 97       	sbiw	r24, 0x01	; 1
    4e56:	f1 f7       	brne	.-4      	; 0x4e54 <Stepper_voidCCWHalfSteps+0xbb8>
    4e58:	9a 8b       	std	Y+18, r25	; 0x12
    4e5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    4e5e:	9c 89       	ldd	r25, Y+20	; 0x14
    4e60:	01 97       	sbiw	r24, 0x01	; 1
    4e62:	9c 8b       	std	Y+20, r25	; 0x14
    4e64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e66:	8b 89       	ldd	r24, Y+19	; 0x13
    4e68:	9c 89       	ldd	r25, Y+20	; 0x14
    4e6a:	00 97       	sbiw	r24, 0x00	; 0
    4e6c:	69 f7       	brne	.-38     	; 0x4e48 <Stepper_voidCCWHalfSteps+0xbac>
    4e6e:	14 c0       	rjmp	.+40     	; 0x4e98 <Stepper_voidCCWHalfSteps+0xbfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e70:	6d 89       	ldd	r22, Y+21	; 0x15
    4e72:	7e 89       	ldd	r23, Y+22	; 0x16
    4e74:	8f 89       	ldd	r24, Y+23	; 0x17
    4e76:	98 8d       	ldd	r25, Y+24	; 0x18
    4e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e7c:	dc 01       	movw	r26, r24
    4e7e:	cb 01       	movw	r24, r22
    4e80:	9c 8b       	std	Y+20, r25	; 0x14
    4e82:	8b 8b       	std	Y+19, r24	; 0x13
    4e84:	8b 89       	ldd	r24, Y+19	; 0x13
    4e86:	9c 89       	ldd	r25, Y+20	; 0x14
    4e88:	98 8b       	std	Y+16, r25	; 0x10
    4e8a:	8f 87       	std	Y+15, r24	; 0x0f
    4e8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e8e:	98 89       	ldd	r25, Y+16	; 0x10
    4e90:	01 97       	sbiw	r24, 0x01	; 1
    4e92:	f1 f7       	brne	.-4      	; 0x4e90 <Stepper_voidCCWHalfSteps+0xbf4>
    4e94:	98 8b       	std	Y+16, r25	; 0x10
    4e96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	/*the Orange is Low  and all pin is high*/
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Blue , DIO_Low);
    4e98:	fe 01       	movw	r30, r28
    4e9a:	ef 58       	subi	r30, 0x8F	; 143
    4e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e9e:	01 90       	ld	r0, Z+
    4ea0:	f0 81       	ld	r31, Z
    4ea2:	e0 2d       	mov	r30, r0
    4ea4:	80 81       	ld	r24, Z
    4ea6:	fe 01       	movw	r30, r28
    4ea8:	ef 58       	subi	r30, 0x8F	; 143
    4eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    4eac:	01 90       	ld	r0, Z+
    4eae:	f0 81       	ld	r31, Z
    4eb0:	e0 2d       	mov	r30, r0
    4eb2:	91 81       	ldd	r25, Z+1	; 0x01
    4eb4:	69 2f       	mov	r22, r25
    4eb6:	40 e0       	ldi	r20, 0x00	; 0
    4eb8:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Pink, DIO_High);
    4ebc:	fe 01       	movw	r30, r28
    4ebe:	ef 58       	subi	r30, 0x8F	; 143
    4ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec2:	01 90       	ld	r0, Z+
    4ec4:	f0 81       	ld	r31, Z
    4ec6:	e0 2d       	mov	r30, r0
    4ec8:	80 81       	ld	r24, Z
    4eca:	fe 01       	movw	r30, r28
    4ecc:	ef 58       	subi	r30, 0x8F	; 143
    4ece:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed0:	01 90       	ld	r0, Z+
    4ed2:	f0 81       	ld	r31, Z
    4ed4:	e0 2d       	mov	r30, r0
    4ed6:	92 81       	ldd	r25, Z+2	; 0x02
    4ed8:	69 2f       	mov	r22, r25
    4eda:	41 e0       	ldi	r20, 0x01	; 1
    4edc:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Yellow, DIO_High);
    4ee0:	fe 01       	movw	r30, r28
    4ee2:	ef 58       	subi	r30, 0x8F	; 143
    4ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee6:	01 90       	ld	r0, Z+
    4ee8:	f0 81       	ld	r31, Z
    4eea:	e0 2d       	mov	r30, r0
    4eec:	80 81       	ld	r24, Z
    4eee:	fe 01       	movw	r30, r28
    4ef0:	ef 58       	subi	r30, 0x8F	; 143
    4ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef4:	01 90       	ld	r0, Z+
    4ef6:	f0 81       	ld	r31, Z
    4ef8:	e0 2d       	mov	r30, r0
    4efa:	93 81       	ldd	r25, Z+3	; 0x03
    4efc:	69 2f       	mov	r22, r25
    4efe:	41 e0       	ldi	r20, 0x01	; 1
    4f00:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(Motor1->Stper_Group,Motor1->Stper_Orange, DIO_Low);
    4f04:	fe 01       	movw	r30, r28
    4f06:	ef 58       	subi	r30, 0x8F	; 143
    4f08:	ff 4f       	sbci	r31, 0xFF	; 255
    4f0a:	01 90       	ld	r0, Z+
    4f0c:	f0 81       	ld	r31, Z
    4f0e:	e0 2d       	mov	r30, r0
    4f10:	80 81       	ld	r24, Z
    4f12:	fe 01       	movw	r30, r28
    4f14:	ef 58       	subi	r30, 0x8F	; 143
    4f16:	ff 4f       	sbci	r31, 0xFF	; 255
    4f18:	01 90       	ld	r0, Z+
    4f1a:	f0 81       	ld	r31, Z
    4f1c:	e0 2d       	mov	r30, r0
    4f1e:	94 81       	ldd	r25, Z+4	; 0x04
    4f20:	69 2f       	mov	r22, r25
    4f22:	40 e0       	ldi	r20, 0x00	; 0
    4f24:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    4f28:	80 e0       	ldi	r24, 0x00	; 0
    4f2a:	90 e0       	ldi	r25, 0x00	; 0
    4f2c:	a0 e0       	ldi	r26, 0x00	; 0
    4f2e:	b0 e4       	ldi	r27, 0x40	; 64
    4f30:	8b 87       	std	Y+11, r24	; 0x0b
    4f32:	9c 87       	std	Y+12, r25	; 0x0c
    4f34:	ad 87       	std	Y+13, r26	; 0x0d
    4f36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f38:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f40:	20 e0       	ldi	r18, 0x00	; 0
    4f42:	30 e0       	ldi	r19, 0x00	; 0
    4f44:	4a ef       	ldi	r20, 0xFA	; 250
    4f46:	54 e4       	ldi	r21, 0x44	; 68
    4f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f4c:	dc 01       	movw	r26, r24
    4f4e:	cb 01       	movw	r24, r22
    4f50:	8f 83       	std	Y+7, r24	; 0x07
    4f52:	98 87       	std	Y+8, r25	; 0x08
    4f54:	a9 87       	std	Y+9, r26	; 0x09
    4f56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f58:	6f 81       	ldd	r22, Y+7	; 0x07
    4f5a:	78 85       	ldd	r23, Y+8	; 0x08
    4f5c:	89 85       	ldd	r24, Y+9	; 0x09
    4f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f60:	20 e0       	ldi	r18, 0x00	; 0
    4f62:	30 e0       	ldi	r19, 0x00	; 0
    4f64:	40 e8       	ldi	r20, 0x80	; 128
    4f66:	5f e3       	ldi	r21, 0x3F	; 63
    4f68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f6c:	88 23       	and	r24, r24
    4f6e:	2c f4       	brge	.+10     	; 0x4f7a <Stepper_voidCCWHalfSteps+0xcde>
		__ticks = 1;
    4f70:	81 e0       	ldi	r24, 0x01	; 1
    4f72:	90 e0       	ldi	r25, 0x00	; 0
    4f74:	9e 83       	std	Y+6, r25	; 0x06
    4f76:	8d 83       	std	Y+5, r24	; 0x05
    4f78:	3f c0       	rjmp	.+126    	; 0x4ff8 <Stepper_voidCCWHalfSteps+0xd5c>
	else if (__tmp > 65535)
    4f7a:	6f 81       	ldd	r22, Y+7	; 0x07
    4f7c:	78 85       	ldd	r23, Y+8	; 0x08
    4f7e:	89 85       	ldd	r24, Y+9	; 0x09
    4f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f82:	20 e0       	ldi	r18, 0x00	; 0
    4f84:	3f ef       	ldi	r19, 0xFF	; 255
    4f86:	4f e7       	ldi	r20, 0x7F	; 127
    4f88:	57 e4       	ldi	r21, 0x47	; 71
    4f8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f8e:	18 16       	cp	r1, r24
    4f90:	4c f5       	brge	.+82     	; 0x4fe4 <Stepper_voidCCWHalfSteps+0xd48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f92:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f94:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f96:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f98:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f9a:	20 e0       	ldi	r18, 0x00	; 0
    4f9c:	30 e0       	ldi	r19, 0x00	; 0
    4f9e:	40 e2       	ldi	r20, 0x20	; 32
    4fa0:	51 e4       	ldi	r21, 0x41	; 65
    4fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fa6:	dc 01       	movw	r26, r24
    4fa8:	cb 01       	movw	r24, r22
    4faa:	bc 01       	movw	r22, r24
    4fac:	cd 01       	movw	r24, r26
    4fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fb2:	dc 01       	movw	r26, r24
    4fb4:	cb 01       	movw	r24, r22
    4fb6:	9e 83       	std	Y+6, r25	; 0x06
    4fb8:	8d 83       	std	Y+5, r24	; 0x05
    4fba:	0f c0       	rjmp	.+30     	; 0x4fda <Stepper_voidCCWHalfSteps+0xd3e>
    4fbc:	88 ec       	ldi	r24, 0xC8	; 200
    4fbe:	90 e0       	ldi	r25, 0x00	; 0
    4fc0:	9c 83       	std	Y+4, r25	; 0x04
    4fc2:	8b 83       	std	Y+3, r24	; 0x03
    4fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    4fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    4fc8:	01 97       	sbiw	r24, 0x01	; 1
    4fca:	f1 f7       	brne	.-4      	; 0x4fc8 <Stepper_voidCCWHalfSteps+0xd2c>
    4fcc:	9c 83       	std	Y+4, r25	; 0x04
    4fce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    4fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    4fd4:	01 97       	sbiw	r24, 0x01	; 1
    4fd6:	9e 83       	std	Y+6, r25	; 0x06
    4fd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fda:	8d 81       	ldd	r24, Y+5	; 0x05
    4fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    4fde:	00 97       	sbiw	r24, 0x00	; 0
    4fe0:	69 f7       	brne	.-38     	; 0x4fbc <Stepper_voidCCWHalfSteps+0xd20>
    4fe2:	14 c0       	rjmp	.+40     	; 0x500c <Stepper_voidCCWHalfSteps+0xd70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fe4:	6f 81       	ldd	r22, Y+7	; 0x07
    4fe6:	78 85       	ldd	r23, Y+8	; 0x08
    4fe8:	89 85       	ldd	r24, Y+9	; 0x09
    4fea:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ff0:	dc 01       	movw	r26, r24
    4ff2:	cb 01       	movw	r24, r22
    4ff4:	9e 83       	std	Y+6, r25	; 0x06
    4ff6:	8d 83       	std	Y+5, r24	; 0x05
    4ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    4ffa:	9e 81       	ldd	r25, Y+6	; 0x06
    4ffc:	9a 83       	std	Y+2, r25	; 0x02
    4ffe:	89 83       	std	Y+1, r24	; 0x01
    5000:	89 81       	ldd	r24, Y+1	; 0x01
    5002:	9a 81       	ldd	r25, Y+2	; 0x02
    5004:	01 97       	sbiw	r24, 0x01	; 1
    5006:	f1 f7       	brne	.-4      	; 0x5004 <Stepper_voidCCWHalfSteps+0xd68>
    5008:	9a 83       	std	Y+2, r25	; 0x02
    500a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    500c:	ce 58       	subi	r28, 0x8E	; 142
    500e:	df 4f       	sbci	r29, 0xFF	; 255
    5010:	0f b6       	in	r0, 0x3f	; 63
    5012:	f8 94       	cli
    5014:	de bf       	out	0x3e, r29	; 62
    5016:	0f be       	out	0x3f, r0	; 63
    5018:	cd bf       	out	0x3d, r28	; 61
    501a:	cf 91       	pop	r28
    501c:	df 91       	pop	r29
    501e:	1f 91       	pop	r17
    5020:	0f 91       	pop	r16
    5022:	08 95       	ret

00005024 <SevSeg_SevErrInit>:
		SevSegCA_8 ,
		SevSegCA_9
};

SevErrState	   SevSeg_SevErrInit(SevSeg_info* SevenSegment1)
{
    5024:	df 93       	push	r29
    5026:	cf 93       	push	r28
    5028:	00 d0       	rcall	.+0      	; 0x502a <SevSeg_SevErrInit+0x6>
    502a:	cd b7       	in	r28, 0x3d	; 61
    502c:	de b7       	in	r29, 0x3e	; 62
    502e:	9a 83       	std	Y+2, r25	; 0x02
    5030:	89 83       	std	Y+1, r24	; 0x01
	DIO_ErrStateSetGroupDirection ((SevenSegment1->SevSeg_Group),0xff);
    5032:	e9 81       	ldd	r30, Y+1	; 0x01
    5034:	fa 81       	ldd	r31, Y+2	; 0x02
    5036:	81 81       	ldd	r24, Z+1	; 0x01
    5038:	6f ef       	ldi	r22, 0xFF	; 255
    503a:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <DIO_ErrStateSetGroupDirection>
	return SevSegNoError;
    503e:	80 e0       	ldi	r24, 0x00	; 0
}
    5040:	0f 90       	pop	r0
    5042:	0f 90       	pop	r0
    5044:	cf 91       	pop	r28
    5046:	df 91       	pop	r29
    5048:	08 95       	ret

0000504a <SevSeg_SevErrStateSetNumber>:

SevErrState    SevSeg_SevErrStateSetNumber(u8 Copy_Number , SevSeg_info* SevenSegment1)
{
    504a:	df 93       	push	r29
    504c:	cf 93       	push	r28
    504e:	cd b7       	in	r28, 0x3d	; 61
    5050:	de b7       	in	r29, 0x3e	; 62
    5052:	61 97       	sbiw	r28, 0x11	; 17
    5054:	0f b6       	in	r0, 0x3f	; 63
    5056:	f8 94       	cli
    5058:	de bf       	out	0x3e, r29	; 62
    505a:	0f be       	out	0x3f, r0	; 63
    505c:	cd bf       	out	0x3d, r28	; 61
    505e:	8f 87       	std	Y+15, r24	; 0x0f
    5060:	79 8b       	std	Y+17, r23	; 0x11
    5062:	68 8b       	std	Y+16, r22	; 0x10
	DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[Copy_Number]);
    5064:	e8 89       	ldd	r30, Y+16	; 0x10
    5066:	f9 89       	ldd	r31, Y+17	; 0x11
    5068:	21 81       	ldd	r18, Z+1	; 0x01
    506a:	8f 85       	ldd	r24, Y+15	; 0x0f
    506c:	88 2f       	mov	r24, r24
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	fc 01       	movw	r30, r24
    5072:	e6 59       	subi	r30, 0x96	; 150
    5074:	fe 4f       	sbci	r31, 0xFE	; 254
    5076:	90 81       	ld	r25, Z
    5078:	82 2f       	mov	r24, r18
    507a:	69 2f       	mov	r22, r25
    507c:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_ErrStateSetGroupValue>
    5080:	80 e0       	ldi	r24, 0x00	; 0
    5082:	90 e0       	ldi	r25, 0x00	; 0
    5084:	aa e7       	ldi	r26, 0x7A	; 122
    5086:	b4 e4       	ldi	r27, 0x44	; 68
    5088:	8b 87       	std	Y+11, r24	; 0x0b
    508a:	9c 87       	std	Y+12, r25	; 0x0c
    508c:	ad 87       	std	Y+13, r26	; 0x0d
    508e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5090:	6b 85       	ldd	r22, Y+11	; 0x0b
    5092:	7c 85       	ldd	r23, Y+12	; 0x0c
    5094:	8d 85       	ldd	r24, Y+13	; 0x0d
    5096:	9e 85       	ldd	r25, Y+14	; 0x0e
    5098:	20 e0       	ldi	r18, 0x00	; 0
    509a:	30 e0       	ldi	r19, 0x00	; 0
    509c:	4a ef       	ldi	r20, 0xFA	; 250
    509e:	54 e4       	ldi	r21, 0x44	; 68
    50a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50a4:	dc 01       	movw	r26, r24
    50a6:	cb 01       	movw	r24, r22
    50a8:	8f 83       	std	Y+7, r24	; 0x07
    50aa:	98 87       	std	Y+8, r25	; 0x08
    50ac:	a9 87       	std	Y+9, r26	; 0x09
    50ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    50b0:	6f 81       	ldd	r22, Y+7	; 0x07
    50b2:	78 85       	ldd	r23, Y+8	; 0x08
    50b4:	89 85       	ldd	r24, Y+9	; 0x09
    50b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    50b8:	20 e0       	ldi	r18, 0x00	; 0
    50ba:	30 e0       	ldi	r19, 0x00	; 0
    50bc:	40 e8       	ldi	r20, 0x80	; 128
    50be:	5f e3       	ldi	r21, 0x3F	; 63
    50c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50c4:	88 23       	and	r24, r24
    50c6:	2c f4       	brge	.+10     	; 0x50d2 <SevSeg_SevErrStateSetNumber+0x88>
		__ticks = 1;
    50c8:	81 e0       	ldi	r24, 0x01	; 1
    50ca:	90 e0       	ldi	r25, 0x00	; 0
    50cc:	9e 83       	std	Y+6, r25	; 0x06
    50ce:	8d 83       	std	Y+5, r24	; 0x05
    50d0:	3f c0       	rjmp	.+126    	; 0x5150 <SevSeg_SevErrStateSetNumber+0x106>
	else if (__tmp > 65535)
    50d2:	6f 81       	ldd	r22, Y+7	; 0x07
    50d4:	78 85       	ldd	r23, Y+8	; 0x08
    50d6:	89 85       	ldd	r24, Y+9	; 0x09
    50d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    50da:	20 e0       	ldi	r18, 0x00	; 0
    50dc:	3f ef       	ldi	r19, 0xFF	; 255
    50de:	4f e7       	ldi	r20, 0x7F	; 127
    50e0:	57 e4       	ldi	r21, 0x47	; 71
    50e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50e6:	18 16       	cp	r1, r24
    50e8:	4c f5       	brge	.+82     	; 0x513c <SevSeg_SevErrStateSetNumber+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    50ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    50ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    50f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    50f2:	20 e0       	ldi	r18, 0x00	; 0
    50f4:	30 e0       	ldi	r19, 0x00	; 0
    50f6:	40 e2       	ldi	r20, 0x20	; 32
    50f8:	51 e4       	ldi	r21, 0x41	; 65
    50fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50fe:	dc 01       	movw	r26, r24
    5100:	cb 01       	movw	r24, r22
    5102:	bc 01       	movw	r22, r24
    5104:	cd 01       	movw	r24, r26
    5106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    510a:	dc 01       	movw	r26, r24
    510c:	cb 01       	movw	r24, r22
    510e:	9e 83       	std	Y+6, r25	; 0x06
    5110:	8d 83       	std	Y+5, r24	; 0x05
    5112:	0f c0       	rjmp	.+30     	; 0x5132 <SevSeg_SevErrStateSetNumber+0xe8>
    5114:	88 ec       	ldi	r24, 0xC8	; 200
    5116:	90 e0       	ldi	r25, 0x00	; 0
    5118:	9c 83       	std	Y+4, r25	; 0x04
    511a:	8b 83       	std	Y+3, r24	; 0x03
    511c:	8b 81       	ldd	r24, Y+3	; 0x03
    511e:	9c 81       	ldd	r25, Y+4	; 0x04
    5120:	01 97       	sbiw	r24, 0x01	; 1
    5122:	f1 f7       	brne	.-4      	; 0x5120 <SevSeg_SevErrStateSetNumber+0xd6>
    5124:	9c 83       	std	Y+4, r25	; 0x04
    5126:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5128:	8d 81       	ldd	r24, Y+5	; 0x05
    512a:	9e 81       	ldd	r25, Y+6	; 0x06
    512c:	01 97       	sbiw	r24, 0x01	; 1
    512e:	9e 83       	std	Y+6, r25	; 0x06
    5130:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5132:	8d 81       	ldd	r24, Y+5	; 0x05
    5134:	9e 81       	ldd	r25, Y+6	; 0x06
    5136:	00 97       	sbiw	r24, 0x00	; 0
    5138:	69 f7       	brne	.-38     	; 0x5114 <SevSeg_SevErrStateSetNumber+0xca>
    513a:	14 c0       	rjmp	.+40     	; 0x5164 <SevSeg_SevErrStateSetNumber+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    513c:	6f 81       	ldd	r22, Y+7	; 0x07
    513e:	78 85       	ldd	r23, Y+8	; 0x08
    5140:	89 85       	ldd	r24, Y+9	; 0x09
    5142:	9a 85       	ldd	r25, Y+10	; 0x0a
    5144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5148:	dc 01       	movw	r26, r24
    514a:	cb 01       	movw	r24, r22
    514c:	9e 83       	std	Y+6, r25	; 0x06
    514e:	8d 83       	std	Y+5, r24	; 0x05
    5150:	8d 81       	ldd	r24, Y+5	; 0x05
    5152:	9e 81       	ldd	r25, Y+6	; 0x06
    5154:	9a 83       	std	Y+2, r25	; 0x02
    5156:	89 83       	std	Y+1, r24	; 0x01
    5158:	89 81       	ldd	r24, Y+1	; 0x01
    515a:	9a 81       	ldd	r25, Y+2	; 0x02
    515c:	01 97       	sbiw	r24, 0x01	; 1
    515e:	f1 f7       	brne	.-4      	; 0x515c <SevSeg_SevErrStateSetNumber+0x112>
    5160:	9a 83       	std	Y+2, r25	; 0x02
    5162:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	return SevSegNoError;
    5164:	80 e0       	ldi	r24, 0x00	; 0
}
    5166:	61 96       	adiw	r28, 0x11	; 17
    5168:	0f b6       	in	r0, 0x3f	; 63
    516a:	f8 94       	cli
    516c:	de bf       	out	0x3e, r29	; 62
    516e:	0f be       	out	0x3f, r0	; 63
    5170:	cd bf       	out	0x3d, r28	; 61
    5172:	cf 91       	pop	r28
    5174:	df 91       	pop	r29
    5176:	08 95       	ret

00005178 <SevSeg_SevErrStateDisplayRange>:

SevErrState    SevSeg_SevErrStateDisplayRange(SevSeg_info* SevenSegment1 , u8 Copy_start , u8 Copy_End )
{
    5178:	df 93       	push	r29
    517a:	cf 93       	push	r28
    517c:	cd b7       	in	r28, 0x3d	; 61
    517e:	de b7       	in	r29, 0x3e	; 62
    5180:	a3 97       	sbiw	r28, 0x23	; 35
    5182:	0f b6       	in	r0, 0x3f	; 63
    5184:	f8 94       	cli
    5186:	de bf       	out	0x3e, r29	; 62
    5188:	0f be       	out	0x3f, r0	; 63
    518a:	cd bf       	out	0x3d, r28	; 61
    518c:	98 a3       	std	Y+32, r25	; 0x20
    518e:	8f 8f       	std	Y+31, r24	; 0x1f
    5190:	69 a3       	std	Y+33, r22	; 0x21
    5192:	4a a3       	std	Y+34, r20	; 0x22
	if (Copy_start<Copy_End)
    5194:	99 a1       	ldd	r25, Y+33	; 0x21
    5196:	8a a1       	ldd	r24, Y+34	; 0x22
    5198:	98 17       	cp	r25, r24
    519a:	08 f0       	brcs	.+2      	; 0x519e <SevSeg_SevErrStateDisplayRange+0x26>
    519c:	94 c0       	rjmp	.+296    	; 0x52c6 <SevSeg_SevErrStateDisplayRange+0x14e>
	{
		for(s8 i = Copy_start; i<=Copy_End;i++)
    519e:	89 a1       	ldd	r24, Y+33	; 0x21
    51a0:	8e 8f       	std	Y+30, r24	; 0x1e
    51a2:	84 c0       	rjmp	.+264    	; 0x52ac <SevSeg_SevErrStateDisplayRange+0x134>
		{
			DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[i]);
    51a4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    51a6:	f8 a1       	ldd	r31, Y+32	; 0x20
    51a8:	21 81       	ldd	r18, Z+1	; 0x01
    51aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    51ac:	99 27       	eor	r25, r25
    51ae:	87 fd       	sbrc	r24, 7
    51b0:	90 95       	com	r25
    51b2:	fc 01       	movw	r30, r24
    51b4:	e6 59       	subi	r30, 0x96	; 150
    51b6:	fe 4f       	sbci	r31, 0xFE	; 254
    51b8:	90 81       	ld	r25, Z
    51ba:	82 2f       	mov	r24, r18
    51bc:	69 2f       	mov	r22, r25
    51be:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_ErrStateSetGroupValue>
    51c2:	80 e0       	ldi	r24, 0x00	; 0
    51c4:	90 e0       	ldi	r25, 0x00	; 0
    51c6:	aa e7       	ldi	r26, 0x7A	; 122
    51c8:	b4 e4       	ldi	r27, 0x44	; 68
    51ca:	89 8f       	std	Y+25, r24	; 0x19
    51cc:	9a 8f       	std	Y+26, r25	; 0x1a
    51ce:	ab 8f       	std	Y+27, r26	; 0x1b
    51d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51d2:	69 8d       	ldd	r22, Y+25	; 0x19
    51d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51da:	20 e0       	ldi	r18, 0x00	; 0
    51dc:	30 e0       	ldi	r19, 0x00	; 0
    51de:	4a ef       	ldi	r20, 0xFA	; 250
    51e0:	54 e4       	ldi	r21, 0x44	; 68
    51e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51e6:	dc 01       	movw	r26, r24
    51e8:	cb 01       	movw	r24, r22
    51ea:	8d 8b       	std	Y+21, r24	; 0x15
    51ec:	9e 8b       	std	Y+22, r25	; 0x16
    51ee:	af 8b       	std	Y+23, r26	; 0x17
    51f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    51f2:	6d 89       	ldd	r22, Y+21	; 0x15
    51f4:	7e 89       	ldd	r23, Y+22	; 0x16
    51f6:	8f 89       	ldd	r24, Y+23	; 0x17
    51f8:	98 8d       	ldd	r25, Y+24	; 0x18
    51fa:	20 e0       	ldi	r18, 0x00	; 0
    51fc:	30 e0       	ldi	r19, 0x00	; 0
    51fe:	40 e8       	ldi	r20, 0x80	; 128
    5200:	5f e3       	ldi	r21, 0x3F	; 63
    5202:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5206:	88 23       	and	r24, r24
    5208:	2c f4       	brge	.+10     	; 0x5214 <SevSeg_SevErrStateDisplayRange+0x9c>
		__ticks = 1;
    520a:	81 e0       	ldi	r24, 0x01	; 1
    520c:	90 e0       	ldi	r25, 0x00	; 0
    520e:	9c 8b       	std	Y+20, r25	; 0x14
    5210:	8b 8b       	std	Y+19, r24	; 0x13
    5212:	3f c0       	rjmp	.+126    	; 0x5292 <SevSeg_SevErrStateDisplayRange+0x11a>
	else if (__tmp > 65535)
    5214:	6d 89       	ldd	r22, Y+21	; 0x15
    5216:	7e 89       	ldd	r23, Y+22	; 0x16
    5218:	8f 89       	ldd	r24, Y+23	; 0x17
    521a:	98 8d       	ldd	r25, Y+24	; 0x18
    521c:	20 e0       	ldi	r18, 0x00	; 0
    521e:	3f ef       	ldi	r19, 0xFF	; 255
    5220:	4f e7       	ldi	r20, 0x7F	; 127
    5222:	57 e4       	ldi	r21, 0x47	; 71
    5224:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5228:	18 16       	cp	r1, r24
    522a:	4c f5       	brge	.+82     	; 0x527e <SevSeg_SevErrStateDisplayRange+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    522c:	69 8d       	ldd	r22, Y+25	; 0x19
    522e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5230:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5232:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5234:	20 e0       	ldi	r18, 0x00	; 0
    5236:	30 e0       	ldi	r19, 0x00	; 0
    5238:	40 e2       	ldi	r20, 0x20	; 32
    523a:	51 e4       	ldi	r21, 0x41	; 65
    523c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5240:	dc 01       	movw	r26, r24
    5242:	cb 01       	movw	r24, r22
    5244:	bc 01       	movw	r22, r24
    5246:	cd 01       	movw	r24, r26
    5248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    524c:	dc 01       	movw	r26, r24
    524e:	cb 01       	movw	r24, r22
    5250:	9c 8b       	std	Y+20, r25	; 0x14
    5252:	8b 8b       	std	Y+19, r24	; 0x13
    5254:	0f c0       	rjmp	.+30     	; 0x5274 <SevSeg_SevErrStateDisplayRange+0xfc>
    5256:	88 ec       	ldi	r24, 0xC8	; 200
    5258:	90 e0       	ldi	r25, 0x00	; 0
    525a:	9a 8b       	std	Y+18, r25	; 0x12
    525c:	89 8b       	std	Y+17, r24	; 0x11
    525e:	89 89       	ldd	r24, Y+17	; 0x11
    5260:	9a 89       	ldd	r25, Y+18	; 0x12
    5262:	01 97       	sbiw	r24, 0x01	; 1
    5264:	f1 f7       	brne	.-4      	; 0x5262 <SevSeg_SevErrStateDisplayRange+0xea>
    5266:	9a 8b       	std	Y+18, r25	; 0x12
    5268:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    526a:	8b 89       	ldd	r24, Y+19	; 0x13
    526c:	9c 89       	ldd	r25, Y+20	; 0x14
    526e:	01 97       	sbiw	r24, 0x01	; 1
    5270:	9c 8b       	std	Y+20, r25	; 0x14
    5272:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5274:	8b 89       	ldd	r24, Y+19	; 0x13
    5276:	9c 89       	ldd	r25, Y+20	; 0x14
    5278:	00 97       	sbiw	r24, 0x00	; 0
    527a:	69 f7       	brne	.-38     	; 0x5256 <SevSeg_SevErrStateDisplayRange+0xde>
    527c:	14 c0       	rjmp	.+40     	; 0x52a6 <SevSeg_SevErrStateDisplayRange+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    527e:	6d 89       	ldd	r22, Y+21	; 0x15
    5280:	7e 89       	ldd	r23, Y+22	; 0x16
    5282:	8f 89       	ldd	r24, Y+23	; 0x17
    5284:	98 8d       	ldd	r25, Y+24	; 0x18
    5286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    528a:	dc 01       	movw	r26, r24
    528c:	cb 01       	movw	r24, r22
    528e:	9c 8b       	std	Y+20, r25	; 0x14
    5290:	8b 8b       	std	Y+19, r24	; 0x13
    5292:	8b 89       	ldd	r24, Y+19	; 0x13
    5294:	9c 89       	ldd	r25, Y+20	; 0x14
    5296:	98 8b       	std	Y+16, r25	; 0x10
    5298:	8f 87       	std	Y+15, r24	; 0x0f
    529a:	8f 85       	ldd	r24, Y+15	; 0x0f
    529c:	98 89       	ldd	r25, Y+16	; 0x10
    529e:	01 97       	sbiw	r24, 0x01	; 1
    52a0:	f1 f7       	brne	.-4      	; 0x529e <SevSeg_SevErrStateDisplayRange+0x126>
    52a2:	98 8b       	std	Y+16, r25	; 0x10
    52a4:	8f 87       	std	Y+15, r24	; 0x0f

SevErrState    SevSeg_SevErrStateDisplayRange(SevSeg_info* SevenSegment1 , u8 Copy_start , u8 Copy_End )
{
	if (Copy_start<Copy_End)
	{
		for(s8 i = Copy_start; i<=Copy_End;i++)
    52a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    52a8:	8f 5f       	subi	r24, 0xFF	; 255
    52aa:	8e 8f       	std	Y+30, r24	; 0x1e
    52ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    52ae:	28 2f       	mov	r18, r24
    52b0:	33 27       	eor	r19, r19
    52b2:	27 fd       	sbrc	r18, 7
    52b4:	30 95       	com	r19
    52b6:	8a a1       	ldd	r24, Y+34	; 0x22
    52b8:	88 2f       	mov	r24, r24
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	82 17       	cp	r24, r18
    52be:	93 07       	cpc	r25, r19
    52c0:	0c f0       	brlt	.+2      	; 0x52c4 <SevSeg_SevErrStateDisplayRange+0x14c>
    52c2:	70 cf       	rjmp	.-288    	; 0x51a4 <SevSeg_SevErrStateDisplayRange+0x2c>
    52c4:	9c c0       	rjmp	.+312    	; 0x53fe <SevSeg_SevErrStateDisplayRange+0x286>
		{
			DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[i]);
			_delay_ms(1000);
		}
	}
	else if(Copy_start>Copy_End)
    52c6:	99 a1       	ldd	r25, Y+33	; 0x21
    52c8:	8a a1       	ldd	r24, Y+34	; 0x22
    52ca:	89 17       	cp	r24, r25
    52cc:	08 f0       	brcs	.+2      	; 0x52d0 <SevSeg_SevErrStateDisplayRange+0x158>
    52ce:	94 c0       	rjmp	.+296    	; 0x53f8 <SevSeg_SevErrStateDisplayRange+0x280>
	{
		for(s8 i = Copy_start; i>=Copy_End;i--)
    52d0:	89 a1       	ldd	r24, Y+33	; 0x21
    52d2:	8d 8f       	std	Y+29, r24	; 0x1d
    52d4:	84 c0       	rjmp	.+264    	; 0x53de <SevSeg_SevErrStateDisplayRange+0x266>
		{
			DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[i]);
    52d6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    52d8:	f8 a1       	ldd	r31, Y+32	; 0x20
    52da:	21 81       	ldd	r18, Z+1	; 0x01
    52dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52de:	99 27       	eor	r25, r25
    52e0:	87 fd       	sbrc	r24, 7
    52e2:	90 95       	com	r25
    52e4:	fc 01       	movw	r30, r24
    52e6:	e6 59       	subi	r30, 0x96	; 150
    52e8:	fe 4f       	sbci	r31, 0xFE	; 254
    52ea:	90 81       	ld	r25, Z
    52ec:	82 2f       	mov	r24, r18
    52ee:	69 2f       	mov	r22, r25
    52f0:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_ErrStateSetGroupValue>
    52f4:	80 e0       	ldi	r24, 0x00	; 0
    52f6:	90 e0       	ldi	r25, 0x00	; 0
    52f8:	aa e7       	ldi	r26, 0x7A	; 122
    52fa:	b4 e4       	ldi	r27, 0x44	; 68
    52fc:	8b 87       	std	Y+11, r24	; 0x0b
    52fe:	9c 87       	std	Y+12, r25	; 0x0c
    5300:	ad 87       	std	Y+13, r26	; 0x0d
    5302:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5304:	6b 85       	ldd	r22, Y+11	; 0x0b
    5306:	7c 85       	ldd	r23, Y+12	; 0x0c
    5308:	8d 85       	ldd	r24, Y+13	; 0x0d
    530a:	9e 85       	ldd	r25, Y+14	; 0x0e
    530c:	20 e0       	ldi	r18, 0x00	; 0
    530e:	30 e0       	ldi	r19, 0x00	; 0
    5310:	4a ef       	ldi	r20, 0xFA	; 250
    5312:	54 e4       	ldi	r21, 0x44	; 68
    5314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5318:	dc 01       	movw	r26, r24
    531a:	cb 01       	movw	r24, r22
    531c:	8f 83       	std	Y+7, r24	; 0x07
    531e:	98 87       	std	Y+8, r25	; 0x08
    5320:	a9 87       	std	Y+9, r26	; 0x09
    5322:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5324:	6f 81       	ldd	r22, Y+7	; 0x07
    5326:	78 85       	ldd	r23, Y+8	; 0x08
    5328:	89 85       	ldd	r24, Y+9	; 0x09
    532a:	9a 85       	ldd	r25, Y+10	; 0x0a
    532c:	20 e0       	ldi	r18, 0x00	; 0
    532e:	30 e0       	ldi	r19, 0x00	; 0
    5330:	40 e8       	ldi	r20, 0x80	; 128
    5332:	5f e3       	ldi	r21, 0x3F	; 63
    5334:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5338:	88 23       	and	r24, r24
    533a:	2c f4       	brge	.+10     	; 0x5346 <SevSeg_SevErrStateDisplayRange+0x1ce>
		__ticks = 1;
    533c:	81 e0       	ldi	r24, 0x01	; 1
    533e:	90 e0       	ldi	r25, 0x00	; 0
    5340:	9e 83       	std	Y+6, r25	; 0x06
    5342:	8d 83       	std	Y+5, r24	; 0x05
    5344:	3f c0       	rjmp	.+126    	; 0x53c4 <SevSeg_SevErrStateDisplayRange+0x24c>
	else if (__tmp > 65535)
    5346:	6f 81       	ldd	r22, Y+7	; 0x07
    5348:	78 85       	ldd	r23, Y+8	; 0x08
    534a:	89 85       	ldd	r24, Y+9	; 0x09
    534c:	9a 85       	ldd	r25, Y+10	; 0x0a
    534e:	20 e0       	ldi	r18, 0x00	; 0
    5350:	3f ef       	ldi	r19, 0xFF	; 255
    5352:	4f e7       	ldi	r20, 0x7F	; 127
    5354:	57 e4       	ldi	r21, 0x47	; 71
    5356:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    535a:	18 16       	cp	r1, r24
    535c:	4c f5       	brge	.+82     	; 0x53b0 <SevSeg_SevErrStateDisplayRange+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    535e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5360:	7c 85       	ldd	r23, Y+12	; 0x0c
    5362:	8d 85       	ldd	r24, Y+13	; 0x0d
    5364:	9e 85       	ldd	r25, Y+14	; 0x0e
    5366:	20 e0       	ldi	r18, 0x00	; 0
    5368:	30 e0       	ldi	r19, 0x00	; 0
    536a:	40 e2       	ldi	r20, 0x20	; 32
    536c:	51 e4       	ldi	r21, 0x41	; 65
    536e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5372:	dc 01       	movw	r26, r24
    5374:	cb 01       	movw	r24, r22
    5376:	bc 01       	movw	r22, r24
    5378:	cd 01       	movw	r24, r26
    537a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    537e:	dc 01       	movw	r26, r24
    5380:	cb 01       	movw	r24, r22
    5382:	9e 83       	std	Y+6, r25	; 0x06
    5384:	8d 83       	std	Y+5, r24	; 0x05
    5386:	0f c0       	rjmp	.+30     	; 0x53a6 <SevSeg_SevErrStateDisplayRange+0x22e>
    5388:	88 ec       	ldi	r24, 0xC8	; 200
    538a:	90 e0       	ldi	r25, 0x00	; 0
    538c:	9c 83       	std	Y+4, r25	; 0x04
    538e:	8b 83       	std	Y+3, r24	; 0x03
    5390:	8b 81       	ldd	r24, Y+3	; 0x03
    5392:	9c 81       	ldd	r25, Y+4	; 0x04
    5394:	01 97       	sbiw	r24, 0x01	; 1
    5396:	f1 f7       	brne	.-4      	; 0x5394 <SevSeg_SevErrStateDisplayRange+0x21c>
    5398:	9c 83       	std	Y+4, r25	; 0x04
    539a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    539c:	8d 81       	ldd	r24, Y+5	; 0x05
    539e:	9e 81       	ldd	r25, Y+6	; 0x06
    53a0:	01 97       	sbiw	r24, 0x01	; 1
    53a2:	9e 83       	std	Y+6, r25	; 0x06
    53a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53a6:	8d 81       	ldd	r24, Y+5	; 0x05
    53a8:	9e 81       	ldd	r25, Y+6	; 0x06
    53aa:	00 97       	sbiw	r24, 0x00	; 0
    53ac:	69 f7       	brne	.-38     	; 0x5388 <SevSeg_SevErrStateDisplayRange+0x210>
    53ae:	14 c0       	rjmp	.+40     	; 0x53d8 <SevSeg_SevErrStateDisplayRange+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53b0:	6f 81       	ldd	r22, Y+7	; 0x07
    53b2:	78 85       	ldd	r23, Y+8	; 0x08
    53b4:	89 85       	ldd	r24, Y+9	; 0x09
    53b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    53b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53bc:	dc 01       	movw	r26, r24
    53be:	cb 01       	movw	r24, r22
    53c0:	9e 83       	std	Y+6, r25	; 0x06
    53c2:	8d 83       	std	Y+5, r24	; 0x05
    53c4:	8d 81       	ldd	r24, Y+5	; 0x05
    53c6:	9e 81       	ldd	r25, Y+6	; 0x06
    53c8:	9a 83       	std	Y+2, r25	; 0x02
    53ca:	89 83       	std	Y+1, r24	; 0x01
    53cc:	89 81       	ldd	r24, Y+1	; 0x01
    53ce:	9a 81       	ldd	r25, Y+2	; 0x02
    53d0:	01 97       	sbiw	r24, 0x01	; 1
    53d2:	f1 f7       	brne	.-4      	; 0x53d0 <SevSeg_SevErrStateDisplayRange+0x258>
    53d4:	9a 83       	std	Y+2, r25	; 0x02
    53d6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
		}
	}
	else if(Copy_start>Copy_End)
	{
		for(s8 i = Copy_start; i>=Copy_End;i--)
    53d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53da:	81 50       	subi	r24, 0x01	; 1
    53dc:	8d 8f       	std	Y+29, r24	; 0x1d
    53de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53e0:	28 2f       	mov	r18, r24
    53e2:	33 27       	eor	r19, r19
    53e4:	27 fd       	sbrc	r18, 7
    53e6:	30 95       	com	r19
    53e8:	8a a1       	ldd	r24, Y+34	; 0x22
    53ea:	88 2f       	mov	r24, r24
    53ec:	90 e0       	ldi	r25, 0x00	; 0
    53ee:	28 17       	cp	r18, r24
    53f0:	39 07       	cpc	r19, r25
    53f2:	0c f0       	brlt	.+2      	; 0x53f6 <SevSeg_SevErrStateDisplayRange+0x27e>
    53f4:	70 cf       	rjmp	.-288    	; 0x52d6 <SevSeg_SevErrStateDisplayRange+0x15e>
    53f6:	03 c0       	rjmp	.+6      	; 0x53fe <SevSeg_SevErrStateDisplayRange+0x286>
			_delay_ms(1000);
		}
	}
	else
	{
		return DispRangeError;
    53f8:	81 e0       	ldi	r24, 0x01	; 1
    53fa:	8b a3       	std	Y+35, r24	; 0x23
    53fc:	01 c0       	rjmp	.+2      	; 0x5400 <SevSeg_SevErrStateDisplayRange+0x288>
	}
	return SevSegNoError;
    53fe:	1b a2       	std	Y+35, r1	; 0x23
    5400:	8b a1       	ldd	r24, Y+35	; 0x23
	
}
    5402:	a3 96       	adiw	r28, 0x23	; 35
    5404:	0f b6       	in	r0, 0x3f	; 63
    5406:	f8 94       	cli
    5408:	de bf       	out	0x3e, r29	; 62
    540a:	0f be       	out	0x3f, r0	; 63
    540c:	cd bf       	out	0x3d, r28	; 61
    540e:	cf 91       	pop	r28
    5410:	df 91       	pop	r29
    5412:	08 95       	ret

00005414 <Led_LedErrStateTurnOn>:
#include "../../Common/definition.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "Led_Interface.h"

LedErrState	Led_LedErrStateTurnOn(Led_info *Led) 
{
    5414:	df 93       	push	r29
    5416:	cf 93       	push	r28
    5418:	00 d0       	rcall	.+0      	; 0x541a <Led_LedErrStateTurnOn+0x6>
    541a:	0f 92       	push	r0
    541c:	cd b7       	in	r28, 0x3d	; 61
    541e:	de b7       	in	r29, 0x3e	; 62
    5420:	9a 83       	std	Y+2, r25	; 0x02
    5422:	89 83       	std	Y+1, r24	; 0x01
	
	if (Led->ConnectionType == Source_Connection)
    5424:	e9 81       	ldd	r30, Y+1	; 0x01
    5426:	fa 81       	ldd	r31, Y+2	; 0x02
    5428:	82 81       	ldd	r24, Z+2	; 0x02
    542a:	88 23       	and	r24, r24
    542c:	59 f4       	brne	.+22     	; 0x5444 <Led_LedErrStateTurnOn+0x30>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_High);
    542e:	e9 81       	ldd	r30, Y+1	; 0x01
    5430:	fa 81       	ldd	r31, Y+2	; 0x02
    5432:	80 81       	ld	r24, Z
    5434:	e9 81       	ldd	r30, Y+1	; 0x01
    5436:	fa 81       	ldd	r31, Y+2	; 0x02
    5438:	91 81       	ldd	r25, Z+1	; 0x01
    543a:	69 2f       	mov	r22, r25
    543c:	41 e0       	ldi	r20, 0x01	; 1
    543e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    5442:	13 c0       	rjmp	.+38     	; 0x546a <Led_LedErrStateTurnOn+0x56>
	}
	else if (Led->ConnectionType == Sink_Connection)
    5444:	e9 81       	ldd	r30, Y+1	; 0x01
    5446:	fa 81       	ldd	r31, Y+2	; 0x02
    5448:	82 81       	ldd	r24, Z+2	; 0x02
    544a:	81 30       	cpi	r24, 0x01	; 1
    544c:	59 f4       	brne	.+22     	; 0x5464 <Led_LedErrStateTurnOn+0x50>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_Low);
    544e:	e9 81       	ldd	r30, Y+1	; 0x01
    5450:	fa 81       	ldd	r31, Y+2	; 0x02
    5452:	80 81       	ld	r24, Z
    5454:	e9 81       	ldd	r30, Y+1	; 0x01
    5456:	fa 81       	ldd	r31, Y+2	; 0x02
    5458:	91 81       	ldd	r25, Z+1	; 0x01
    545a:	69 2f       	mov	r22, r25
    545c:	40 e0       	ldi	r20, 0x00	; 0
    545e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    5462:	03 c0       	rjmp	.+6      	; 0x546a <Led_LedErrStateTurnOn+0x56>
	}
	else 
	{
		return ConnectionTypeError;
    5464:	81 e0       	ldi	r24, 0x01	; 1
    5466:	8b 83       	std	Y+3, r24	; 0x03
    5468:	01 c0       	rjmp	.+2      	; 0x546c <Led_LedErrStateTurnOn+0x58>
	}
	return LedNoError;
    546a:	1b 82       	std	Y+3, r1	; 0x03
    546c:	8b 81       	ldd	r24, Y+3	; 0x03
	
	
} 
    546e:	0f 90       	pop	r0
    5470:	0f 90       	pop	r0
    5472:	0f 90       	pop	r0
    5474:	cf 91       	pop	r28
    5476:	df 91       	pop	r29
    5478:	08 95       	ret

0000547a <Led_LedErrStateTurnOff>:
  


LedErrState	Led_LedErrStateTurnOff(Led_info *Led) 
{
    547a:	df 93       	push	r29
    547c:	cf 93       	push	r28
    547e:	00 d0       	rcall	.+0      	; 0x5480 <Led_LedErrStateTurnOff+0x6>
    5480:	0f 92       	push	r0
    5482:	cd b7       	in	r28, 0x3d	; 61
    5484:	de b7       	in	r29, 0x3e	; 62
    5486:	9a 83       	std	Y+2, r25	; 0x02
    5488:	89 83       	std	Y+1, r24	; 0x01
	if (Led->ConnectionType == Source_Connection)
    548a:	e9 81       	ldd	r30, Y+1	; 0x01
    548c:	fa 81       	ldd	r31, Y+2	; 0x02
    548e:	82 81       	ldd	r24, Z+2	; 0x02
    5490:	88 23       	and	r24, r24
    5492:	59 f4       	brne	.+22     	; 0x54aa <Led_LedErrStateTurnOff+0x30>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_Low);
    5494:	e9 81       	ldd	r30, Y+1	; 0x01
    5496:	fa 81       	ldd	r31, Y+2	; 0x02
    5498:	80 81       	ld	r24, Z
    549a:	e9 81       	ldd	r30, Y+1	; 0x01
    549c:	fa 81       	ldd	r31, Y+2	; 0x02
    549e:	91 81       	ldd	r25, Z+1	; 0x01
    54a0:	69 2f       	mov	r22, r25
    54a2:	40 e0       	ldi	r20, 0x00	; 0
    54a4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    54a8:	13 c0       	rjmp	.+38     	; 0x54d0 <Led_LedErrStateTurnOff+0x56>
	}
	else if (Led->ConnectionType == Sink_Connection)
    54aa:	e9 81       	ldd	r30, Y+1	; 0x01
    54ac:	fa 81       	ldd	r31, Y+2	; 0x02
    54ae:	82 81       	ldd	r24, Z+2	; 0x02
    54b0:	81 30       	cpi	r24, 0x01	; 1
    54b2:	59 f4       	brne	.+22     	; 0x54ca <Led_LedErrStateTurnOff+0x50>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_High);
    54b4:	e9 81       	ldd	r30, Y+1	; 0x01
    54b6:	fa 81       	ldd	r31, Y+2	; 0x02
    54b8:	80 81       	ld	r24, Z
    54ba:	e9 81       	ldd	r30, Y+1	; 0x01
    54bc:	fa 81       	ldd	r31, Y+2	; 0x02
    54be:	91 81       	ldd	r25, Z+1	; 0x01
    54c0:	69 2f       	mov	r22, r25
    54c2:	41 e0       	ldi	r20, 0x01	; 1
    54c4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    54c8:	03 c0       	rjmp	.+6      	; 0x54d0 <Led_LedErrStateTurnOff+0x56>
	}
	else 
	{
		return ConnectionTypeError;
    54ca:	81 e0       	ldi	r24, 0x01	; 1
    54cc:	8b 83       	std	Y+3, r24	; 0x03
    54ce:	01 c0       	rjmp	.+2      	; 0x54d2 <Led_LedErrStateTurnOff+0x58>
	}
	return NoError;
    54d0:	1b 82       	std	Y+3, r1	; 0x03
    54d2:	8b 81       	ldd	r24, Y+3	; 0x03
	
}
    54d4:	0f 90       	pop	r0
    54d6:	0f 90       	pop	r0
    54d8:	0f 90       	pop	r0
    54da:	cf 91       	pop	r28
    54dc:	df 91       	pop	r29
    54de:	08 95       	ret

000054e0 <LCD_VoidInit>:




void LCD_VoidInit(Lcd_info* lcd)
{
    54e0:	df 93       	push	r29
    54e2:	cf 93       	push	r28
    54e4:	cd b7       	in	r28, 0x3d	; 61
    54e6:	de b7       	in	r29, 0x3e	; 62
    54e8:	ea 97       	sbiw	r28, 0x3a	; 58
    54ea:	0f b6       	in	r0, 0x3f	; 63
    54ec:	f8 94       	cli
    54ee:	de bf       	out	0x3e, r29	; 62
    54f0:	0f be       	out	0x3f, r0	; 63
    54f2:	cd bf       	out	0x3d, r28	; 61
    54f4:	9a af       	std	Y+58, r25	; 0x3a
    54f6:	89 af       	std	Y+57, r24	; 0x39
	
	
	/*Set Direction*/
	DIO_ErrStateSetPinDirection(lcd->Rs_Group,lcd->Rs_Pin,DIO_Output);
    54f8:	e9 ad       	ldd	r30, Y+57	; 0x39
    54fa:	fa ad       	ldd	r31, Y+58	; 0x3a
    54fc:	80 81       	ld	r24, Z
    54fe:	e9 ad       	ldd	r30, Y+57	; 0x39
    5500:	fa ad       	ldd	r31, Y+58	; 0x3a
    5502:	91 81       	ldd	r25, Z+1	; 0x01
    5504:	69 2f       	mov	r22, r25
    5506:	41 e0       	ldi	r20, 0x01	; 1
    5508:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->Rw_Group,lcd->Rw_Pin,DIO_Output);
    550c:	e9 ad       	ldd	r30, Y+57	; 0x39
    550e:	fa ad       	ldd	r31, Y+58	; 0x3a
    5510:	82 81       	ldd	r24, Z+2	; 0x02
    5512:	e9 ad       	ldd	r30, Y+57	; 0x39
    5514:	fa ad       	ldd	r31, Y+58	; 0x3a
    5516:	93 81       	ldd	r25, Z+3	; 0x03
    5518:	69 2f       	mov	r22, r25
    551a:	41 e0       	ldi	r20, 0x01	; 1
    551c:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->E_Group,lcd->E_Pin,DIO_Output);
    5520:	e9 ad       	ldd	r30, Y+57	; 0x39
    5522:	fa ad       	ldd	r31, Y+58	; 0x3a
    5524:	84 81       	ldd	r24, Z+4	; 0x04
    5526:	e9 ad       	ldd	r30, Y+57	; 0x39
    5528:	fa ad       	ldd	r31, Y+58	; 0x3a
    552a:	95 81       	ldd	r25, Z+5	; 0x05
    552c:	69 2f       	mov	r22, r25
    552e:	41 e0       	ldi	r20, 0x01	; 1
    5530:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetGroupDirection(lcd->Data_Group,0xff);
    5534:	e9 ad       	ldd	r30, Y+57	; 0x39
    5536:	fa ad       	ldd	r31, Y+58	; 0x3a
    5538:	86 81       	ldd	r24, Z+6	; 0x06
    553a:	6f ef       	ldi	r22, 0xFF	; 255
    553c:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <DIO_ErrStateSetGroupDirection>
    5540:	80 e0       	ldi	r24, 0x00	; 0
    5542:	90 e0       	ldi	r25, 0x00	; 0
    5544:	a0 e2       	ldi	r26, 0x20	; 32
    5546:	b2 e4       	ldi	r27, 0x42	; 66
    5548:	8d ab       	std	Y+53, r24	; 0x35
    554a:	9e ab       	std	Y+54, r25	; 0x36
    554c:	af ab       	std	Y+55, r26	; 0x37
    554e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5550:	6d a9       	ldd	r22, Y+53	; 0x35
    5552:	7e a9       	ldd	r23, Y+54	; 0x36
    5554:	8f a9       	ldd	r24, Y+55	; 0x37
    5556:	98 ad       	ldd	r25, Y+56	; 0x38
    5558:	20 e0       	ldi	r18, 0x00	; 0
    555a:	30 e0       	ldi	r19, 0x00	; 0
    555c:	4a ef       	ldi	r20, 0xFA	; 250
    555e:	54 e4       	ldi	r21, 0x44	; 68
    5560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5564:	dc 01       	movw	r26, r24
    5566:	cb 01       	movw	r24, r22
    5568:	89 ab       	std	Y+49, r24	; 0x31
    556a:	9a ab       	std	Y+50, r25	; 0x32
    556c:	ab ab       	std	Y+51, r26	; 0x33
    556e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5570:	69 a9       	ldd	r22, Y+49	; 0x31
    5572:	7a a9       	ldd	r23, Y+50	; 0x32
    5574:	8b a9       	ldd	r24, Y+51	; 0x33
    5576:	9c a9       	ldd	r25, Y+52	; 0x34
    5578:	20 e0       	ldi	r18, 0x00	; 0
    557a:	30 e0       	ldi	r19, 0x00	; 0
    557c:	40 e8       	ldi	r20, 0x80	; 128
    557e:	5f e3       	ldi	r21, 0x3F	; 63
    5580:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5584:	88 23       	and	r24, r24
    5586:	2c f4       	brge	.+10     	; 0x5592 <LCD_VoidInit+0xb2>
		__ticks = 1;
    5588:	81 e0       	ldi	r24, 0x01	; 1
    558a:	90 e0       	ldi	r25, 0x00	; 0
    558c:	98 ab       	std	Y+48, r25	; 0x30
    558e:	8f a7       	std	Y+47, r24	; 0x2f
    5590:	3f c0       	rjmp	.+126    	; 0x5610 <LCD_VoidInit+0x130>
	else if (__tmp > 65535)
    5592:	69 a9       	ldd	r22, Y+49	; 0x31
    5594:	7a a9       	ldd	r23, Y+50	; 0x32
    5596:	8b a9       	ldd	r24, Y+51	; 0x33
    5598:	9c a9       	ldd	r25, Y+52	; 0x34
    559a:	20 e0       	ldi	r18, 0x00	; 0
    559c:	3f ef       	ldi	r19, 0xFF	; 255
    559e:	4f e7       	ldi	r20, 0x7F	; 127
    55a0:	57 e4       	ldi	r21, 0x47	; 71
    55a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55a6:	18 16       	cp	r1, r24
    55a8:	4c f5       	brge	.+82     	; 0x55fc <LCD_VoidInit+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55aa:	6d a9       	ldd	r22, Y+53	; 0x35
    55ac:	7e a9       	ldd	r23, Y+54	; 0x36
    55ae:	8f a9       	ldd	r24, Y+55	; 0x37
    55b0:	98 ad       	ldd	r25, Y+56	; 0x38
    55b2:	20 e0       	ldi	r18, 0x00	; 0
    55b4:	30 e0       	ldi	r19, 0x00	; 0
    55b6:	40 e2       	ldi	r20, 0x20	; 32
    55b8:	51 e4       	ldi	r21, 0x41	; 65
    55ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55be:	dc 01       	movw	r26, r24
    55c0:	cb 01       	movw	r24, r22
    55c2:	bc 01       	movw	r22, r24
    55c4:	cd 01       	movw	r24, r26
    55c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55ca:	dc 01       	movw	r26, r24
    55cc:	cb 01       	movw	r24, r22
    55ce:	98 ab       	std	Y+48, r25	; 0x30
    55d0:	8f a7       	std	Y+47, r24	; 0x2f
    55d2:	0f c0       	rjmp	.+30     	; 0x55f2 <LCD_VoidInit+0x112>
    55d4:	88 ec       	ldi	r24, 0xC8	; 200
    55d6:	90 e0       	ldi	r25, 0x00	; 0
    55d8:	9e a7       	std	Y+46, r25	; 0x2e
    55da:	8d a7       	std	Y+45, r24	; 0x2d
    55dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    55de:	9e a5       	ldd	r25, Y+46	; 0x2e
    55e0:	01 97       	sbiw	r24, 0x01	; 1
    55e2:	f1 f7       	brne	.-4      	; 0x55e0 <LCD_VoidInit+0x100>
    55e4:	9e a7       	std	Y+46, r25	; 0x2e
    55e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    55ea:	98 a9       	ldd	r25, Y+48	; 0x30
    55ec:	01 97       	sbiw	r24, 0x01	; 1
    55ee:	98 ab       	std	Y+48, r25	; 0x30
    55f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    55f4:	98 a9       	ldd	r25, Y+48	; 0x30
    55f6:	00 97       	sbiw	r24, 0x00	; 0
    55f8:	69 f7       	brne	.-38     	; 0x55d4 <LCD_VoidInit+0xf4>
    55fa:	14 c0       	rjmp	.+40     	; 0x5624 <LCD_VoidInit+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55fc:	69 a9       	ldd	r22, Y+49	; 0x31
    55fe:	7a a9       	ldd	r23, Y+50	; 0x32
    5600:	8b a9       	ldd	r24, Y+51	; 0x33
    5602:	9c a9       	ldd	r25, Y+52	; 0x34
    5604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5608:	dc 01       	movw	r26, r24
    560a:	cb 01       	movw	r24, r22
    560c:	98 ab       	std	Y+48, r25	; 0x30
    560e:	8f a7       	std	Y+47, r24	; 0x2f
    5610:	8f a5       	ldd	r24, Y+47	; 0x2f
    5612:	98 a9       	ldd	r25, Y+48	; 0x30
    5614:	9c a7       	std	Y+44, r25	; 0x2c
    5616:	8b a7       	std	Y+43, r24	; 0x2b
    5618:	8b a5       	ldd	r24, Y+43	; 0x2b
    561a:	9c a5       	ldd	r25, Y+44	; 0x2c
    561c:	01 97       	sbiw	r24, 0x01	; 1
    561e:	f1 f7       	brne	.-4      	; 0x561c <LCD_VoidInit+0x13c>
    5620:	9c a7       	std	Y+44, r25	; 0x2c
    5622:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);


	// Function set
	LCD_VoidSendCommand(LCD_Set8Bit2Line5x8,lcd);
    5624:	29 ad       	ldd	r18, Y+57	; 0x39
    5626:	3a ad       	ldd	r19, Y+58	; 0x3a
    5628:	88 e3       	ldi	r24, 0x38	; 56
    562a:	b9 01       	movw	r22, r18
    562c:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <LCD_VoidSendCommand>
    5630:	80 e0       	ldi	r24, 0x00	; 0
    5632:	90 e0       	ldi	r25, 0x00	; 0
    5634:	a0 e8       	ldi	r26, 0x80	; 128
    5636:	bf e3       	ldi	r27, 0x3F	; 63
    5638:	8f a3       	std	Y+39, r24	; 0x27
    563a:	98 a7       	std	Y+40, r25	; 0x28
    563c:	a9 a7       	std	Y+41, r26	; 0x29
    563e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5640:	6f a1       	ldd	r22, Y+39	; 0x27
    5642:	78 a5       	ldd	r23, Y+40	; 0x28
    5644:	89 a5       	ldd	r24, Y+41	; 0x29
    5646:	9a a5       	ldd	r25, Y+42	; 0x2a
    5648:	20 e0       	ldi	r18, 0x00	; 0
    564a:	30 e0       	ldi	r19, 0x00	; 0
    564c:	4a ef       	ldi	r20, 0xFA	; 250
    564e:	54 e4       	ldi	r21, 0x44	; 68
    5650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5654:	dc 01       	movw	r26, r24
    5656:	cb 01       	movw	r24, r22
    5658:	8b a3       	std	Y+35, r24	; 0x23
    565a:	9c a3       	std	Y+36, r25	; 0x24
    565c:	ad a3       	std	Y+37, r26	; 0x25
    565e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5660:	6b a1       	ldd	r22, Y+35	; 0x23
    5662:	7c a1       	ldd	r23, Y+36	; 0x24
    5664:	8d a1       	ldd	r24, Y+37	; 0x25
    5666:	9e a1       	ldd	r25, Y+38	; 0x26
    5668:	20 e0       	ldi	r18, 0x00	; 0
    566a:	30 e0       	ldi	r19, 0x00	; 0
    566c:	40 e8       	ldi	r20, 0x80	; 128
    566e:	5f e3       	ldi	r21, 0x3F	; 63
    5670:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5674:	88 23       	and	r24, r24
    5676:	2c f4       	brge	.+10     	; 0x5682 <LCD_VoidInit+0x1a2>
		__ticks = 1;
    5678:	81 e0       	ldi	r24, 0x01	; 1
    567a:	90 e0       	ldi	r25, 0x00	; 0
    567c:	9a a3       	std	Y+34, r25	; 0x22
    567e:	89 a3       	std	Y+33, r24	; 0x21
    5680:	3f c0       	rjmp	.+126    	; 0x5700 <LCD_VoidInit+0x220>
	else if (__tmp > 65535)
    5682:	6b a1       	ldd	r22, Y+35	; 0x23
    5684:	7c a1       	ldd	r23, Y+36	; 0x24
    5686:	8d a1       	ldd	r24, Y+37	; 0x25
    5688:	9e a1       	ldd	r25, Y+38	; 0x26
    568a:	20 e0       	ldi	r18, 0x00	; 0
    568c:	3f ef       	ldi	r19, 0xFF	; 255
    568e:	4f e7       	ldi	r20, 0x7F	; 127
    5690:	57 e4       	ldi	r21, 0x47	; 71
    5692:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5696:	18 16       	cp	r1, r24
    5698:	4c f5       	brge	.+82     	; 0x56ec <LCD_VoidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    569a:	6f a1       	ldd	r22, Y+39	; 0x27
    569c:	78 a5       	ldd	r23, Y+40	; 0x28
    569e:	89 a5       	ldd	r24, Y+41	; 0x29
    56a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    56a2:	20 e0       	ldi	r18, 0x00	; 0
    56a4:	30 e0       	ldi	r19, 0x00	; 0
    56a6:	40 e2       	ldi	r20, 0x20	; 32
    56a8:	51 e4       	ldi	r21, 0x41	; 65
    56aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56ae:	dc 01       	movw	r26, r24
    56b0:	cb 01       	movw	r24, r22
    56b2:	bc 01       	movw	r22, r24
    56b4:	cd 01       	movw	r24, r26
    56b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56ba:	dc 01       	movw	r26, r24
    56bc:	cb 01       	movw	r24, r22
    56be:	9a a3       	std	Y+34, r25	; 0x22
    56c0:	89 a3       	std	Y+33, r24	; 0x21
    56c2:	0f c0       	rjmp	.+30     	; 0x56e2 <LCD_VoidInit+0x202>
    56c4:	88 ec       	ldi	r24, 0xC8	; 200
    56c6:	90 e0       	ldi	r25, 0x00	; 0
    56c8:	98 a3       	std	Y+32, r25	; 0x20
    56ca:	8f 8f       	std	Y+31, r24	; 0x1f
    56cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    56ce:	98 a1       	ldd	r25, Y+32	; 0x20
    56d0:	01 97       	sbiw	r24, 0x01	; 1
    56d2:	f1 f7       	brne	.-4      	; 0x56d0 <LCD_VoidInit+0x1f0>
    56d4:	98 a3       	std	Y+32, r25	; 0x20
    56d6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56d8:	89 a1       	ldd	r24, Y+33	; 0x21
    56da:	9a a1       	ldd	r25, Y+34	; 0x22
    56dc:	01 97       	sbiw	r24, 0x01	; 1
    56de:	9a a3       	std	Y+34, r25	; 0x22
    56e0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56e2:	89 a1       	ldd	r24, Y+33	; 0x21
    56e4:	9a a1       	ldd	r25, Y+34	; 0x22
    56e6:	00 97       	sbiw	r24, 0x00	; 0
    56e8:	69 f7       	brne	.-38     	; 0x56c4 <LCD_VoidInit+0x1e4>
    56ea:	14 c0       	rjmp	.+40     	; 0x5714 <LCD_VoidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56ec:	6b a1       	ldd	r22, Y+35	; 0x23
    56ee:	7c a1       	ldd	r23, Y+36	; 0x24
    56f0:	8d a1       	ldd	r24, Y+37	; 0x25
    56f2:	9e a1       	ldd	r25, Y+38	; 0x26
    56f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56f8:	dc 01       	movw	r26, r24
    56fa:	cb 01       	movw	r24, r22
    56fc:	9a a3       	std	Y+34, r25	; 0x22
    56fe:	89 a3       	std	Y+33, r24	; 0x21
    5700:	89 a1       	ldd	r24, Y+33	; 0x21
    5702:	9a a1       	ldd	r25, Y+34	; 0x22
    5704:	9e 8f       	std	Y+30, r25	; 0x1e
    5706:	8d 8f       	std	Y+29, r24	; 0x1d
    5708:	8d 8d       	ldd	r24, Y+29	; 0x1d
    570a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    570c:	01 97       	sbiw	r24, 0x01	; 1
    570e:	f1 f7       	brne	.-4      	; 0x570c <LCD_VoidInit+0x22c>
    5710:	9e 8f       	std	Y+30, r25	; 0x1e
    5712:	8d 8f       	std	Y+29, r24	; 0x1d
	//_delay_us(40);
	_delay_ms(1);
	// Display ON/OFF control
	LCD_VoidSendCommand(LCD_CursorON,lcd);
    5714:	29 ad       	ldd	r18, Y+57	; 0x39
    5716:	3a ad       	ldd	r19, Y+58	; 0x3a
    5718:	8e e0       	ldi	r24, 0x0E	; 14
    571a:	b9 01       	movw	r22, r18
    571c:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <LCD_VoidSendCommand>
    5720:	80 e0       	ldi	r24, 0x00	; 0
    5722:	90 e0       	ldi	r25, 0x00	; 0
    5724:	a0 e8       	ldi	r26, 0x80	; 128
    5726:	bf e3       	ldi	r27, 0x3F	; 63
    5728:	89 8f       	std	Y+25, r24	; 0x19
    572a:	9a 8f       	std	Y+26, r25	; 0x1a
    572c:	ab 8f       	std	Y+27, r26	; 0x1b
    572e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5730:	69 8d       	ldd	r22, Y+25	; 0x19
    5732:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5734:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5736:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5738:	20 e0       	ldi	r18, 0x00	; 0
    573a:	30 e0       	ldi	r19, 0x00	; 0
    573c:	4a ef       	ldi	r20, 0xFA	; 250
    573e:	54 e4       	ldi	r21, 0x44	; 68
    5740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5744:	dc 01       	movw	r26, r24
    5746:	cb 01       	movw	r24, r22
    5748:	8d 8b       	std	Y+21, r24	; 0x15
    574a:	9e 8b       	std	Y+22, r25	; 0x16
    574c:	af 8b       	std	Y+23, r26	; 0x17
    574e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5750:	6d 89       	ldd	r22, Y+21	; 0x15
    5752:	7e 89       	ldd	r23, Y+22	; 0x16
    5754:	8f 89       	ldd	r24, Y+23	; 0x17
    5756:	98 8d       	ldd	r25, Y+24	; 0x18
    5758:	20 e0       	ldi	r18, 0x00	; 0
    575a:	30 e0       	ldi	r19, 0x00	; 0
    575c:	40 e8       	ldi	r20, 0x80	; 128
    575e:	5f e3       	ldi	r21, 0x3F	; 63
    5760:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5764:	88 23       	and	r24, r24
    5766:	2c f4       	brge	.+10     	; 0x5772 <LCD_VoidInit+0x292>
		__ticks = 1;
    5768:	81 e0       	ldi	r24, 0x01	; 1
    576a:	90 e0       	ldi	r25, 0x00	; 0
    576c:	9c 8b       	std	Y+20, r25	; 0x14
    576e:	8b 8b       	std	Y+19, r24	; 0x13
    5770:	3f c0       	rjmp	.+126    	; 0x57f0 <LCD_VoidInit+0x310>
	else if (__tmp > 65535)
    5772:	6d 89       	ldd	r22, Y+21	; 0x15
    5774:	7e 89       	ldd	r23, Y+22	; 0x16
    5776:	8f 89       	ldd	r24, Y+23	; 0x17
    5778:	98 8d       	ldd	r25, Y+24	; 0x18
    577a:	20 e0       	ldi	r18, 0x00	; 0
    577c:	3f ef       	ldi	r19, 0xFF	; 255
    577e:	4f e7       	ldi	r20, 0x7F	; 127
    5780:	57 e4       	ldi	r21, 0x47	; 71
    5782:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5786:	18 16       	cp	r1, r24
    5788:	4c f5       	brge	.+82     	; 0x57dc <LCD_VoidInit+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    578a:	69 8d       	ldd	r22, Y+25	; 0x19
    578c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    578e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5790:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5792:	20 e0       	ldi	r18, 0x00	; 0
    5794:	30 e0       	ldi	r19, 0x00	; 0
    5796:	40 e2       	ldi	r20, 0x20	; 32
    5798:	51 e4       	ldi	r21, 0x41	; 65
    579a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    579e:	dc 01       	movw	r26, r24
    57a0:	cb 01       	movw	r24, r22
    57a2:	bc 01       	movw	r22, r24
    57a4:	cd 01       	movw	r24, r26
    57a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57aa:	dc 01       	movw	r26, r24
    57ac:	cb 01       	movw	r24, r22
    57ae:	9c 8b       	std	Y+20, r25	; 0x14
    57b0:	8b 8b       	std	Y+19, r24	; 0x13
    57b2:	0f c0       	rjmp	.+30     	; 0x57d2 <LCD_VoidInit+0x2f2>
    57b4:	88 ec       	ldi	r24, 0xC8	; 200
    57b6:	90 e0       	ldi	r25, 0x00	; 0
    57b8:	9a 8b       	std	Y+18, r25	; 0x12
    57ba:	89 8b       	std	Y+17, r24	; 0x11
    57bc:	89 89       	ldd	r24, Y+17	; 0x11
    57be:	9a 89       	ldd	r25, Y+18	; 0x12
    57c0:	01 97       	sbiw	r24, 0x01	; 1
    57c2:	f1 f7       	brne	.-4      	; 0x57c0 <LCD_VoidInit+0x2e0>
    57c4:	9a 8b       	std	Y+18, r25	; 0x12
    57c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57c8:	8b 89       	ldd	r24, Y+19	; 0x13
    57ca:	9c 89       	ldd	r25, Y+20	; 0x14
    57cc:	01 97       	sbiw	r24, 0x01	; 1
    57ce:	9c 8b       	std	Y+20, r25	; 0x14
    57d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57d2:	8b 89       	ldd	r24, Y+19	; 0x13
    57d4:	9c 89       	ldd	r25, Y+20	; 0x14
    57d6:	00 97       	sbiw	r24, 0x00	; 0
    57d8:	69 f7       	brne	.-38     	; 0x57b4 <LCD_VoidInit+0x2d4>
    57da:	14 c0       	rjmp	.+40     	; 0x5804 <LCD_VoidInit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57dc:	6d 89       	ldd	r22, Y+21	; 0x15
    57de:	7e 89       	ldd	r23, Y+22	; 0x16
    57e0:	8f 89       	ldd	r24, Y+23	; 0x17
    57e2:	98 8d       	ldd	r25, Y+24	; 0x18
    57e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57e8:	dc 01       	movw	r26, r24
    57ea:	cb 01       	movw	r24, r22
    57ec:	9c 8b       	std	Y+20, r25	; 0x14
    57ee:	8b 8b       	std	Y+19, r24	; 0x13
    57f0:	8b 89       	ldd	r24, Y+19	; 0x13
    57f2:	9c 89       	ldd	r25, Y+20	; 0x14
    57f4:	98 8b       	std	Y+16, r25	; 0x10
    57f6:	8f 87       	std	Y+15, r24	; 0x0f
    57f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    57fa:	98 89       	ldd	r25, Y+16	; 0x10
    57fc:	01 97       	sbiw	r24, 0x01	; 1
    57fe:	f1 f7       	brne	.-4      	; 0x57fc <LCD_VoidInit+0x31c>
    5800:	98 8b       	std	Y+16, r25	; 0x10
    5802:	8f 87       	std	Y+15, r24	; 0x0f
	//_delay_us(40);
	_delay_ms(1);
	// Display Clear
	LCD_VoidSendCommand(LCD_ClearDisplay,lcd);
    5804:	29 ad       	ldd	r18, Y+57	; 0x39
    5806:	3a ad       	ldd	r19, Y+58	; 0x3a
    5808:	81 e0       	ldi	r24, 0x01	; 1
    580a:	b9 01       	movw	r22, r18
    580c:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <LCD_VoidSendCommand>
    5810:	80 e0       	ldi	r24, 0x00	; 0
    5812:	90 e0       	ldi	r25, 0x00	; 0
    5814:	a0 e0       	ldi	r26, 0x00	; 0
    5816:	b0 e4       	ldi	r27, 0x40	; 64
    5818:	8b 87       	std	Y+11, r24	; 0x0b
    581a:	9c 87       	std	Y+12, r25	; 0x0c
    581c:	ad 87       	std	Y+13, r26	; 0x0d
    581e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5820:	6b 85       	ldd	r22, Y+11	; 0x0b
    5822:	7c 85       	ldd	r23, Y+12	; 0x0c
    5824:	8d 85       	ldd	r24, Y+13	; 0x0d
    5826:	9e 85       	ldd	r25, Y+14	; 0x0e
    5828:	20 e0       	ldi	r18, 0x00	; 0
    582a:	30 e0       	ldi	r19, 0x00	; 0
    582c:	4a ef       	ldi	r20, 0xFA	; 250
    582e:	54 e4       	ldi	r21, 0x44	; 68
    5830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5834:	dc 01       	movw	r26, r24
    5836:	cb 01       	movw	r24, r22
    5838:	8f 83       	std	Y+7, r24	; 0x07
    583a:	98 87       	std	Y+8, r25	; 0x08
    583c:	a9 87       	std	Y+9, r26	; 0x09
    583e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5840:	6f 81       	ldd	r22, Y+7	; 0x07
    5842:	78 85       	ldd	r23, Y+8	; 0x08
    5844:	89 85       	ldd	r24, Y+9	; 0x09
    5846:	9a 85       	ldd	r25, Y+10	; 0x0a
    5848:	20 e0       	ldi	r18, 0x00	; 0
    584a:	30 e0       	ldi	r19, 0x00	; 0
    584c:	40 e8       	ldi	r20, 0x80	; 128
    584e:	5f e3       	ldi	r21, 0x3F	; 63
    5850:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5854:	88 23       	and	r24, r24
    5856:	2c f4       	brge	.+10     	; 0x5862 <LCD_VoidInit+0x382>
		__ticks = 1;
    5858:	81 e0       	ldi	r24, 0x01	; 1
    585a:	90 e0       	ldi	r25, 0x00	; 0
    585c:	9e 83       	std	Y+6, r25	; 0x06
    585e:	8d 83       	std	Y+5, r24	; 0x05
    5860:	3f c0       	rjmp	.+126    	; 0x58e0 <LCD_VoidInit+0x400>
	else if (__tmp > 65535)
    5862:	6f 81       	ldd	r22, Y+7	; 0x07
    5864:	78 85       	ldd	r23, Y+8	; 0x08
    5866:	89 85       	ldd	r24, Y+9	; 0x09
    5868:	9a 85       	ldd	r25, Y+10	; 0x0a
    586a:	20 e0       	ldi	r18, 0x00	; 0
    586c:	3f ef       	ldi	r19, 0xFF	; 255
    586e:	4f e7       	ldi	r20, 0x7F	; 127
    5870:	57 e4       	ldi	r21, 0x47	; 71
    5872:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5876:	18 16       	cp	r1, r24
    5878:	4c f5       	brge	.+82     	; 0x58cc <LCD_VoidInit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    587a:	6b 85       	ldd	r22, Y+11	; 0x0b
    587c:	7c 85       	ldd	r23, Y+12	; 0x0c
    587e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5880:	9e 85       	ldd	r25, Y+14	; 0x0e
    5882:	20 e0       	ldi	r18, 0x00	; 0
    5884:	30 e0       	ldi	r19, 0x00	; 0
    5886:	40 e2       	ldi	r20, 0x20	; 32
    5888:	51 e4       	ldi	r21, 0x41	; 65
    588a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    588e:	dc 01       	movw	r26, r24
    5890:	cb 01       	movw	r24, r22
    5892:	bc 01       	movw	r22, r24
    5894:	cd 01       	movw	r24, r26
    5896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    589a:	dc 01       	movw	r26, r24
    589c:	cb 01       	movw	r24, r22
    589e:	9e 83       	std	Y+6, r25	; 0x06
    58a0:	8d 83       	std	Y+5, r24	; 0x05
    58a2:	0f c0       	rjmp	.+30     	; 0x58c2 <LCD_VoidInit+0x3e2>
    58a4:	88 ec       	ldi	r24, 0xC8	; 200
    58a6:	90 e0       	ldi	r25, 0x00	; 0
    58a8:	9c 83       	std	Y+4, r25	; 0x04
    58aa:	8b 83       	std	Y+3, r24	; 0x03
    58ac:	8b 81       	ldd	r24, Y+3	; 0x03
    58ae:	9c 81       	ldd	r25, Y+4	; 0x04
    58b0:	01 97       	sbiw	r24, 0x01	; 1
    58b2:	f1 f7       	brne	.-4      	; 0x58b0 <LCD_VoidInit+0x3d0>
    58b4:	9c 83       	std	Y+4, r25	; 0x04
    58b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58b8:	8d 81       	ldd	r24, Y+5	; 0x05
    58ba:	9e 81       	ldd	r25, Y+6	; 0x06
    58bc:	01 97       	sbiw	r24, 0x01	; 1
    58be:	9e 83       	std	Y+6, r25	; 0x06
    58c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58c2:	8d 81       	ldd	r24, Y+5	; 0x05
    58c4:	9e 81       	ldd	r25, Y+6	; 0x06
    58c6:	00 97       	sbiw	r24, 0x00	; 0
    58c8:	69 f7       	brne	.-38     	; 0x58a4 <LCD_VoidInit+0x3c4>
    58ca:	14 c0       	rjmp	.+40     	; 0x58f4 <LCD_VoidInit+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58cc:	6f 81       	ldd	r22, Y+7	; 0x07
    58ce:	78 85       	ldd	r23, Y+8	; 0x08
    58d0:	89 85       	ldd	r24, Y+9	; 0x09
    58d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    58d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58d8:	dc 01       	movw	r26, r24
    58da:	cb 01       	movw	r24, r22
    58dc:	9e 83       	std	Y+6, r25	; 0x06
    58de:	8d 83       	std	Y+5, r24	; 0x05
    58e0:	8d 81       	ldd	r24, Y+5	; 0x05
    58e2:	9e 81       	ldd	r25, Y+6	; 0x06
    58e4:	9a 83       	std	Y+2, r25	; 0x02
    58e6:	89 83       	std	Y+1, r24	; 0x01
    58e8:	89 81       	ldd	r24, Y+1	; 0x01
    58ea:	9a 81       	ldd	r25, Y+2	; 0x02
    58ec:	01 97       	sbiw	r24, 0x01	; 1
    58ee:	f1 f7       	brne	.-4      	; 0x58ec <LCD_VoidInit+0x40c>
    58f0:	9a 83       	std	Y+2, r25	; 0x02
    58f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);


}	
    58f4:	ea 96       	adiw	r28, 0x3a	; 58
    58f6:	0f b6       	in	r0, 0x3f	; 63
    58f8:	f8 94       	cli
    58fa:	de bf       	out	0x3e, r29	; 62
    58fc:	0f be       	out	0x3f, r0	; 63
    58fe:	cd bf       	out	0x3d, r28	; 61
    5900:	cf 91       	pop	r28
    5902:	df 91       	pop	r29
    5904:	08 95       	ret

00005906 <LCD_VoidGoToXY>:


void LCD_VoidGoToXY(u8 Local_XPosition,u8 Local_YPosition, Lcd_info* lcd)
{
    5906:	df 93       	push	r29
    5908:	cf 93       	push	r28
    590a:	00 d0       	rcall	.+0      	; 0x590c <LCD_VoidGoToXY+0x6>
    590c:	00 d0       	rcall	.+0      	; 0x590e <LCD_VoidGoToXY+0x8>
    590e:	0f 92       	push	r0
    5910:	cd b7       	in	r28, 0x3d	; 61
    5912:	de b7       	in	r29, 0x3e	; 62
    5914:	8a 83       	std	Y+2, r24	; 0x02
    5916:	6b 83       	std	Y+3, r22	; 0x03
    5918:	5d 83       	std	Y+5, r21	; 0x05
    591a:	4c 83       	std	Y+4, r20	; 0x04
	// x_pos from 0 to 1
	// y_pos from 0 to 15
	u8 Adress = 0 ;
    591c:	19 82       	std	Y+1, r1	; 0x01
	if (0 == Local_XPosition)
    591e:	8a 81       	ldd	r24, Y+2	; 0x02
    5920:	88 23       	and	r24, r24
    5922:	19 f4       	brne	.+6      	; 0x592a <LCD_VoidGoToXY+0x24>
	{
		Adress = LCD_FirstLine + LCD_SetAddressDDRAM;
    5924:	80 e8       	ldi	r24, 0x80	; 128
    5926:	89 83       	std	Y+1, r24	; 0x01
    5928:	05 c0       	rjmp	.+10     	; 0x5934 <LCD_VoidGoToXY+0x2e>
	}
	else if (1 == Local_XPosition)
    592a:	8a 81       	ldd	r24, Y+2	; 0x02
    592c:	81 30       	cpi	r24, 0x01	; 1
    592e:	11 f4       	brne	.+4      	; 0x5934 <LCD_VoidGoToXY+0x2e>
	{
		Adress = LCD_SecoundLine + LCD_SetAddressDDRAM;
    5930:	80 ec       	ldi	r24, 0xC0	; 192
    5932:	89 83       	std	Y+1, r24	; 0x01
	}
	if (Local_YPosition < 16)
    5934:	8b 81       	ldd	r24, Y+3	; 0x03
    5936:	80 31       	cpi	r24, 0x10	; 16
    5938:	20 f4       	brcc	.+8      	; 0x5942 <LCD_VoidGoToXY+0x3c>
	{
		Adress += Local_YPosition ;
    593a:	89 81       	ldd	r24, Y+1	; 0x01
    593c:	9b 81       	ldd	r25, Y+3	; 0x03
    593e:	89 0f       	add	r24, r25
    5940:	89 83       	std	Y+1, r24	; 0x01
	}
	else{/*error*/}

	LCD_VoidSendCommand(Adress,lcd) ;
    5942:	2c 81       	ldd	r18, Y+4	; 0x04
    5944:	3d 81       	ldd	r19, Y+5	; 0x05
    5946:	89 81       	ldd	r24, Y+1	; 0x01
    5948:	b9 01       	movw	r22, r18
    594a:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <LCD_VoidSendCommand>

}
    594e:	0f 90       	pop	r0
    5950:	0f 90       	pop	r0
    5952:	0f 90       	pop	r0
    5954:	0f 90       	pop	r0
    5956:	0f 90       	pop	r0
    5958:	cf 91       	pop	r28
    595a:	df 91       	pop	r29
    595c:	08 95       	ret

0000595e <LCD_VoidSendString>:


void LCD_VoidSendString(u8 *Address_String, Lcd_info* lcd)
{
    595e:	df 93       	push	r29
    5960:	cf 93       	push	r28
    5962:	00 d0       	rcall	.+0      	; 0x5964 <LCD_VoidSendString+0x6>
    5964:	00 d0       	rcall	.+0      	; 0x5966 <LCD_VoidSendString+0x8>
    5966:	0f 92       	push	r0
    5968:	cd b7       	in	r28, 0x3d	; 61
    596a:	de b7       	in	r29, 0x3e	; 62
    596c:	9b 83       	std	Y+3, r25	; 0x03
    596e:	8a 83       	std	Y+2, r24	; 0x02
    5970:	7d 83       	std	Y+5, r23	; 0x05
    5972:	6c 83       	std	Y+4, r22	; 0x04
	u8 stringCounter=0;
    5974:	19 82       	std	Y+1, r1	; 0x01
    5976:	11 c0       	rjmp	.+34     	; 0x599a <LCD_VoidSendString+0x3c>
	for(;Address_String[stringCounter] != '\0'; stringCounter++ )
	{
		LCD_VoidSendChar(Address_String[stringCounter],lcd);
    5978:	89 81       	ldd	r24, Y+1	; 0x01
    597a:	28 2f       	mov	r18, r24
    597c:	30 e0       	ldi	r19, 0x00	; 0
    597e:	8a 81       	ldd	r24, Y+2	; 0x02
    5980:	9b 81       	ldd	r25, Y+3	; 0x03
    5982:	fc 01       	movw	r30, r24
    5984:	e2 0f       	add	r30, r18
    5986:	f3 1f       	adc	r31, r19
    5988:	80 81       	ld	r24, Z
    598a:	2c 81       	ldd	r18, Y+4	; 0x04
    598c:	3d 81       	ldd	r19, Y+5	; 0x05
    598e:	b9 01       	movw	r22, r18
    5990:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <LCD_VoidSendChar>


void LCD_VoidSendString(u8 *Address_String, Lcd_info* lcd)
{
	u8 stringCounter=0;
	for(;Address_String[stringCounter] != '\0'; stringCounter++ )
    5994:	89 81       	ldd	r24, Y+1	; 0x01
    5996:	8f 5f       	subi	r24, 0xFF	; 255
    5998:	89 83       	std	Y+1, r24	; 0x01
    599a:	89 81       	ldd	r24, Y+1	; 0x01
    599c:	28 2f       	mov	r18, r24
    599e:	30 e0       	ldi	r19, 0x00	; 0
    59a0:	8a 81       	ldd	r24, Y+2	; 0x02
    59a2:	9b 81       	ldd	r25, Y+3	; 0x03
    59a4:	fc 01       	movw	r30, r24
    59a6:	e2 0f       	add	r30, r18
    59a8:	f3 1f       	adc	r31, r19
    59aa:	80 81       	ld	r24, Z
    59ac:	88 23       	and	r24, r24
    59ae:	21 f7       	brne	.-56     	; 0x5978 <LCD_VoidSendString+0x1a>
	{
		LCD_VoidSendChar(Address_String[stringCounter],lcd);
	}
}
    59b0:	0f 90       	pop	r0
    59b2:	0f 90       	pop	r0
    59b4:	0f 90       	pop	r0
    59b6:	0f 90       	pop	r0
    59b8:	0f 90       	pop	r0
    59ba:	cf 91       	pop	r28
    59bc:	df 91       	pop	r29
    59be:	08 95       	ret

000059c0 <LCD_VoidSendNum>:


void LCD_VoidSendNum(s16 Copy_Num, Lcd_info* lcd)
 {
    59c0:	df 93       	push	r29
    59c2:	cf 93       	push	r28
    59c4:	cd b7       	in	r28, 0x3d	; 61
    59c6:	de b7       	in	r29, 0x3e	; 62
    59c8:	69 97       	sbiw	r28, 0x19	; 25
    59ca:	0f b6       	in	r0, 0x3f	; 63
    59cc:	f8 94       	cli
    59ce:	de bf       	out	0x3e, r29	; 62
    59d0:	0f be       	out	0x3f, r0	; 63
    59d2:	cd bf       	out	0x3d, r28	; 61
    59d4:	9f 8b       	std	Y+23, r25	; 0x17
    59d6:	8e 8b       	std	Y+22, r24	; 0x16
    59d8:	79 8f       	std	Y+25, r23	; 0x19
    59da:	68 8f       	std	Y+24, r22	; 0x18
    u8 i,j,c,ArrCount,s[15];
	s16 sign;
	i = 0;
    59dc:	1e 82       	std	Y+6, r1	; 0x06
	ArrCount = 0;
    59de:	1b 82       	std	Y+3, r1	; 0x03
	sign = Copy_Num;
    59e0:	8e 89       	ldd	r24, Y+22	; 0x16
    59e2:	9f 89       	ldd	r25, Y+23	; 0x17
    59e4:	9a 83       	std	Y+2, r25	; 0x02
    59e6:	89 83       	std	Y+1, r24	; 0x01
	if (sign < 0)  /* record sign */
    59e8:	89 81       	ldd	r24, Y+1	; 0x01
    59ea:	9a 81       	ldd	r25, Y+2	; 0x02
    59ec:	99 23       	and	r25, r25
    59ee:	3c f4       	brge	.+14     	; 0x59fe <LCD_VoidSendNum+0x3e>
	{
	 Copy_Num = -Copy_Num;          /* make the NUM positive */
    59f0:	8e 89       	ldd	r24, Y+22	; 0x16
    59f2:	9f 89       	ldd	r25, Y+23	; 0x17
    59f4:	90 95       	com	r25
    59f6:	81 95       	neg	r24
    59f8:	9f 4f       	sbci	r25, 0xFF	; 255
    59fa:	9f 8b       	std	Y+23, r25	; 0x17
    59fc:	8e 8b       	std	Y+22, r24	; 0x16
	}

	do {                       /* Convert NUM to ASCII in reverse order */

	 s[i] = (Copy_Num % 10) + '0';
    59fe:	8e 81       	ldd	r24, Y+6	; 0x06
    5a00:	e8 2f       	mov	r30, r24
    5a02:	f0 e0       	ldi	r31, 0x00	; 0
    5a04:	8e 89       	ldd	r24, Y+22	; 0x16
    5a06:	9f 89       	ldd	r25, Y+23	; 0x17
    5a08:	2a e0       	ldi	r18, 0x0A	; 10
    5a0a:	30 e0       	ldi	r19, 0x00	; 0
    5a0c:	b9 01       	movw	r22, r18
    5a0e:	0e 94 80 34 	call	0x6900	; 0x6900 <__divmodhi4>
    5a12:	28 2f       	mov	r18, r24
    5a14:	20 5d       	subi	r18, 0xD0	; 208
    5a16:	ce 01       	movw	r24, r28
    5a18:	07 96       	adiw	r24, 0x07	; 7
    5a1a:	e8 0f       	add	r30, r24
    5a1c:	f9 1f       	adc	r31, r25
    5a1e:	20 83       	st	Z, r18
	 i++;
    5a20:	8e 81       	ldd	r24, Y+6	; 0x06
    5a22:	8f 5f       	subi	r24, 0xFF	; 255
    5a24:	8e 83       	std	Y+6, r24	; 0x06

	 } while ((Copy_Num /= 10) > 0);
    5a26:	8e 89       	ldd	r24, Y+22	; 0x16
    5a28:	9f 89       	ldd	r25, Y+23	; 0x17
    5a2a:	2a e0       	ldi	r18, 0x0A	; 10
    5a2c:	30 e0       	ldi	r19, 0x00	; 0
    5a2e:	b9 01       	movw	r22, r18
    5a30:	0e 94 80 34 	call	0x6900	; 0x6900 <__divmodhi4>
    5a34:	cb 01       	movw	r24, r22
    5a36:	9f 8b       	std	Y+23, r25	; 0x17
    5a38:	8e 8b       	std	Y+22, r24	; 0x16
    5a3a:	8e 89       	ldd	r24, Y+22	; 0x16
    5a3c:	9f 89       	ldd	r25, Y+23	; 0x17
    5a3e:	18 16       	cp	r1, r24
    5a40:	19 06       	cpc	r1, r25
    5a42:	ec f2       	brlt	.-70     	; 0x59fe <LCD_VoidSendNum+0x3e>

	if (sign < 0)      /* putting sign */
    5a44:	89 81       	ldd	r24, Y+1	; 0x01
    5a46:	9a 81       	ldd	r25, Y+2	; 0x02
    5a48:	99 23       	and	r25, r25
    5a4a:	6c f4       	brge	.+26     	; 0x5a66 <LCD_VoidSendNum+0xa6>
	{
		s[i++] = '-';
    5a4c:	8e 81       	ldd	r24, Y+6	; 0x06
    5a4e:	28 2f       	mov	r18, r24
    5a50:	30 e0       	ldi	r19, 0x00	; 0
    5a52:	ce 01       	movw	r24, r28
    5a54:	07 96       	adiw	r24, 0x07	; 7
    5a56:	fc 01       	movw	r30, r24
    5a58:	e2 0f       	add	r30, r18
    5a5a:	f3 1f       	adc	r31, r19
    5a5c:	8d e2       	ldi	r24, 0x2D	; 45
    5a5e:	80 83       	st	Z, r24
    5a60:	8e 81       	ldd	r24, Y+6	; 0x06
    5a62:	8f 5f       	subi	r24, 0xFF	; 255
    5a64:	8e 83       	std	Y+6, r24	; 0x06
	}

	ArrCount=i;
    5a66:	8e 81       	ldd	r24, Y+6	; 0x06
    5a68:	8b 83       	std	Y+3, r24	; 0x03
	j=ArrCount-1;
    5a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    5a6c:	81 50       	subi	r24, 0x01	; 1
    5a6e:	8d 83       	std	Y+5, r24	; 0x05
	for (i = 0; i<j; i++, j--) /* reversing the array to make the NUM in order */
    5a70:	1e 82       	std	Y+6, r1	; 0x06
    5a72:	2c c0       	rjmp	.+88     	; 0x5acc <LCD_VoidSendNum+0x10c>
	{
	  c = s[i];
    5a74:	8e 81       	ldd	r24, Y+6	; 0x06
    5a76:	28 2f       	mov	r18, r24
    5a78:	30 e0       	ldi	r19, 0x00	; 0
    5a7a:	ce 01       	movw	r24, r28
    5a7c:	07 96       	adiw	r24, 0x07	; 7
    5a7e:	fc 01       	movw	r30, r24
    5a80:	e2 0f       	add	r30, r18
    5a82:	f3 1f       	adc	r31, r19
    5a84:	80 81       	ld	r24, Z
    5a86:	8c 83       	std	Y+4, r24	; 0x04
	  s[i] = s[j];
    5a88:	8e 81       	ldd	r24, Y+6	; 0x06
    5a8a:	48 2f       	mov	r20, r24
    5a8c:	50 e0       	ldi	r21, 0x00	; 0
    5a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    5a90:	28 2f       	mov	r18, r24
    5a92:	30 e0       	ldi	r19, 0x00	; 0
    5a94:	ce 01       	movw	r24, r28
    5a96:	07 96       	adiw	r24, 0x07	; 7
    5a98:	fc 01       	movw	r30, r24
    5a9a:	e2 0f       	add	r30, r18
    5a9c:	f3 1f       	adc	r31, r19
    5a9e:	20 81       	ld	r18, Z
    5aa0:	ce 01       	movw	r24, r28
    5aa2:	07 96       	adiw	r24, 0x07	; 7
    5aa4:	fc 01       	movw	r30, r24
    5aa6:	e4 0f       	add	r30, r20
    5aa8:	f5 1f       	adc	r31, r21
    5aaa:	20 83       	st	Z, r18
	  s[j] = c;
    5aac:	8d 81       	ldd	r24, Y+5	; 0x05
    5aae:	28 2f       	mov	r18, r24
    5ab0:	30 e0       	ldi	r19, 0x00	; 0
    5ab2:	ce 01       	movw	r24, r28
    5ab4:	07 96       	adiw	r24, 0x07	; 7
    5ab6:	fc 01       	movw	r30, r24
    5ab8:	e2 0f       	add	r30, r18
    5aba:	f3 1f       	adc	r31, r19
    5abc:	8c 81       	ldd	r24, Y+4	; 0x04
    5abe:	80 83       	st	Z, r24
		s[i++] = '-';
	}

	ArrCount=i;
	j=ArrCount-1;
	for (i = 0; i<j; i++, j--) /* reversing the array to make the NUM in order */
    5ac0:	8e 81       	ldd	r24, Y+6	; 0x06
    5ac2:	8f 5f       	subi	r24, 0xFF	; 255
    5ac4:	8e 83       	std	Y+6, r24	; 0x06
    5ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ac8:	81 50       	subi	r24, 0x01	; 1
    5aca:	8d 83       	std	Y+5, r24	; 0x05
    5acc:	9e 81       	ldd	r25, Y+6	; 0x06
    5ace:	8d 81       	ldd	r24, Y+5	; 0x05
    5ad0:	98 17       	cp	r25, r24
    5ad2:	80 f2       	brcs	.-96     	; 0x5a74 <LCD_VoidSendNum+0xb4>
	  c = s[i];
	  s[i] = s[j];
	  s[j] = c;
	}

	for (i = 0; i<ArrCount; i++) /* PRINTNIG the NUM */
    5ad4:	1e 82       	std	Y+6, r1	; 0x06
    5ad6:	11 c0       	rjmp	.+34     	; 0x5afa <LCD_VoidSendNum+0x13a>
	{
		LCD_VoidSendChar (s[i],lcd);
    5ad8:	8e 81       	ldd	r24, Y+6	; 0x06
    5ada:	28 2f       	mov	r18, r24
    5adc:	30 e0       	ldi	r19, 0x00	; 0
    5ade:	ce 01       	movw	r24, r28
    5ae0:	07 96       	adiw	r24, 0x07	; 7
    5ae2:	fc 01       	movw	r30, r24
    5ae4:	e2 0f       	add	r30, r18
    5ae6:	f3 1f       	adc	r31, r19
    5ae8:	80 81       	ld	r24, Z
    5aea:	28 8d       	ldd	r18, Y+24	; 0x18
    5aec:	39 8d       	ldd	r19, Y+25	; 0x19
    5aee:	b9 01       	movw	r22, r18
    5af0:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <LCD_VoidSendChar>
	  c = s[i];
	  s[i] = s[j];
	  s[j] = c;
	}

	for (i = 0; i<ArrCount; i++) /* PRINTNIG the NUM */
    5af4:	8e 81       	ldd	r24, Y+6	; 0x06
    5af6:	8f 5f       	subi	r24, 0xFF	; 255
    5af8:	8e 83       	std	Y+6, r24	; 0x06
    5afa:	9e 81       	ldd	r25, Y+6	; 0x06
    5afc:	8b 81       	ldd	r24, Y+3	; 0x03
    5afe:	98 17       	cp	r25, r24
    5b00:	58 f3       	brcs	.-42     	; 0x5ad8 <LCD_VoidSendNum+0x118>
	{
		LCD_VoidSendChar (s[i],lcd);
	}


 }
    5b02:	69 96       	adiw	r28, 0x19	; 25
    5b04:	0f b6       	in	r0, 0x3f	; 63
    5b06:	f8 94       	cli
    5b08:	de bf       	out	0x3e, r29	; 62
    5b0a:	0f be       	out	0x3f, r0	; 63
    5b0c:	cd bf       	out	0x3d, r28	; 61
    5b0e:	cf 91       	pop	r28
    5b10:	df 91       	pop	r29
    5b12:	08 95       	ret

00005b14 <LCD_VoidSendFloat>:

void LCD_VoidSendFloat(f32 Copy_fNum, Lcd_info* lcd)
{
    5b14:	df 93       	push	r29
    5b16:	cf 93       	push	r28
    5b18:	cd b7       	in	r28, 0x3d	; 61
    5b1a:	de b7       	in	r29, 0x3e	; 62
    5b1c:	2c 97       	sbiw	r28, 0x0c	; 12
    5b1e:	0f b6       	in	r0, 0x3f	; 63
    5b20:	f8 94       	cli
    5b22:	de bf       	out	0x3e, r29	; 62
    5b24:	0f be       	out	0x3f, r0	; 63
    5b26:	cd bf       	out	0x3d, r28	; 61
    5b28:	6f 83       	std	Y+7, r22	; 0x07
    5b2a:	78 87       	std	Y+8, r23	; 0x08
    5b2c:	89 87       	std	Y+9, r24	; 0x09
    5b2e:	9a 87       	std	Y+10, r25	; 0x0a
    5b30:	5c 87       	std	Y+12, r21	; 0x0c
    5b32:	4b 87       	std	Y+11, r20	; 0x0b
	// Extract integer part
	s16 INTpart = (s16)Copy_fNum;
    5b34:	6f 81       	ldd	r22, Y+7	; 0x07
    5b36:	78 85       	ldd	r23, Y+8	; 0x08
    5b38:	89 85       	ldd	r24, Y+9	; 0x09
    5b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b3c:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5b40:	dc 01       	movw	r26, r24
    5b42:	cb 01       	movw	r24, r22
    5b44:	9e 83       	std	Y+6, r25	; 0x06
    5b46:	8d 83       	std	Y+5, r24	; 0x05

	// Extract floating part
	f32 fpart = Copy_fNum - (f32)INTpart;
    5b48:	8d 81       	ldd	r24, Y+5	; 0x05
    5b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    5b4c:	aa 27       	eor	r26, r26
    5b4e:	97 fd       	sbrc	r25, 7
    5b50:	a0 95       	com	r26
    5b52:	ba 2f       	mov	r27, r26
    5b54:	bc 01       	movw	r22, r24
    5b56:	cd 01       	movw	r24, r26
    5b58:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5b5c:	9b 01       	movw	r18, r22
    5b5e:	ac 01       	movw	r20, r24
    5b60:	6f 81       	ldd	r22, Y+7	; 0x07
    5b62:	78 85       	ldd	r23, Y+8	; 0x08
    5b64:	89 85       	ldd	r24, Y+9	; 0x09
    5b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b68:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5b6c:	dc 01       	movw	r26, r24
    5b6e:	cb 01       	movw	r24, r22
    5b70:	89 83       	std	Y+1, r24	; 0x01
    5b72:	9a 83       	std	Y+2, r25	; 0x02
    5b74:	ab 83       	std	Y+3, r26	; 0x03
    5b76:	bc 83       	std	Y+4, r27	; 0x04

	//Exception for negative number
	if(fpart<0){fpart*=-1;}
    5b78:	69 81       	ldd	r22, Y+1	; 0x01
    5b7a:	7a 81       	ldd	r23, Y+2	; 0x02
    5b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    5b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    5b80:	20 e0       	ldi	r18, 0x00	; 0
    5b82:	30 e0       	ldi	r19, 0x00	; 0
    5b84:	40 e0       	ldi	r20, 0x00	; 0
    5b86:	50 e0       	ldi	r21, 0x00	; 0
    5b88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b8c:	88 23       	and	r24, r24
    5b8e:	4c f4       	brge	.+18     	; 0x5ba2 <LCD_VoidSendFloat+0x8e>
    5b90:	89 81       	ldd	r24, Y+1	; 0x01
    5b92:	9a 81       	ldd	r25, Y+2	; 0x02
    5b94:	ab 81       	ldd	r26, Y+3	; 0x03
    5b96:	bc 81       	ldd	r27, Y+4	; 0x04
    5b98:	b0 58       	subi	r27, 0x80	; 128
    5b9a:	89 83       	std	Y+1, r24	; 0x01
    5b9c:	9a 83       	std	Y+2, r25	; 0x02
    5b9e:	ab 83       	std	Y+3, r26	; 0x03
    5ba0:	bc 83       	std	Y+4, r27	; 0x04

	// convert integer part to string
	LCD_VoidSendNum(INTpart, lcd);
    5ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    5ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    5ba6:	2b 85       	ldd	r18, Y+11	; 0x0b
    5ba8:	3c 85       	ldd	r19, Y+12	; 0x0c
    5baa:	b9 01       	movw	r22, r18
    5bac:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <LCD_VoidSendNum>

	// add dot
	LCD_VoidSendString(".", lcd);
    5bb0:	80 e6       	ldi	r24, 0x60	; 96
    5bb2:	90 e0       	ldi	r25, 0x00	; 0
    5bb4:	2b 85       	ldd	r18, Y+11	; 0x0b
    5bb6:	3c 85       	ldd	r19, Y+12	; 0x0c
    5bb8:	b9 01       	movw	r22, r18
    5bba:	0e 94 af 2c 	call	0x595e	; 0x595e <LCD_VoidSendString>
	// Get the value of fraction part upto 4 digits of points after dot
	fpart = fpart * 10000;
    5bbe:	69 81       	ldd	r22, Y+1	; 0x01
    5bc0:	7a 81       	ldd	r23, Y+2	; 0x02
    5bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    5bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    5bc6:	20 e0       	ldi	r18, 0x00	; 0
    5bc8:	30 e4       	ldi	r19, 0x40	; 64
    5bca:	4c e1       	ldi	r20, 0x1C	; 28
    5bcc:	56 e4       	ldi	r21, 0x46	; 70
    5bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bd2:	dc 01       	movw	r26, r24
    5bd4:	cb 01       	movw	r24, r22
    5bd6:	89 83       	std	Y+1, r24	; 0x01
    5bd8:	9a 83       	std	Y+2, r25	; 0x02
    5bda:	ab 83       	std	Y+3, r26	; 0x03
    5bdc:	bc 83       	std	Y+4, r27	; 0x04

	LCD_VoidSendNum(fpart, lcd);
    5bde:	69 81       	ldd	r22, Y+1	; 0x01
    5be0:	7a 81       	ldd	r23, Y+2	; 0x02
    5be2:	8b 81       	ldd	r24, Y+3	; 0x03
    5be4:	9c 81       	ldd	r25, Y+4	; 0x04
    5be6:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5bea:	dc 01       	movw	r26, r24
    5bec:	cb 01       	movw	r24, r22
    5bee:	2b 85       	ldd	r18, Y+11	; 0x0b
    5bf0:	3c 85       	ldd	r19, Y+12	; 0x0c
    5bf2:	b9 01       	movw	r22, r18
    5bf4:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <LCD_VoidSendNum>

}
    5bf8:	2c 96       	adiw	r28, 0x0c	; 12
    5bfa:	0f b6       	in	r0, 0x3f	; 63
    5bfc:	f8 94       	cli
    5bfe:	de bf       	out	0x3e, r29	; 62
    5c00:	0f be       	out	0x3f, r0	; 63
    5c02:	cd bf       	out	0x3d, r28	; 61
    5c04:	cf 91       	pop	r28
    5c06:	df 91       	pop	r29
    5c08:	08 95       	ret

00005c0a <LCD_VoidWriteOnCGRAM>:

void LCD_VoidWriteOnCGRAM(u8 CGRAMmemoryLocation, u8 *ArrChar, Lcd_info* lcd)
{
    5c0a:	df 93       	push	r29
    5c0c:	cf 93       	push	r28
    5c0e:	00 d0       	rcall	.+0      	; 0x5c10 <LCD_VoidWriteOnCGRAM+0x6>
    5c10:	00 d0       	rcall	.+0      	; 0x5c12 <LCD_VoidWriteOnCGRAM+0x8>
    5c12:	00 d0       	rcall	.+0      	; 0x5c14 <LCD_VoidWriteOnCGRAM+0xa>
    5c14:	cd b7       	in	r28, 0x3d	; 61
    5c16:	de b7       	in	r29, 0x3e	; 62
    5c18:	8a 83       	std	Y+2, r24	; 0x02
    5c1a:	7c 83       	std	Y+4, r23	; 0x04
    5c1c:	6b 83       	std	Y+3, r22	; 0x03
    5c1e:	5e 83       	std	Y+6, r21	; 0x06
    5c20:	4d 83       	std	Y+5, r20	; 0x05
	u8 counter;
	if(CGRAMmemoryLocation<MAX_CHAR_SIZE_CGRAM) //If valid address
    5c22:	8a 81       	ldd	r24, Y+2	; 0x02
    5c24:	88 30       	cpi	r24, 0x08	; 8
    5c26:	58 f5       	brcc	.+86     	; 0x5c7e <LCD_VoidWriteOnCGRAM+0x74>
	{
		LCD_VoidSendCommand((LCD_SetAddressCGRAM+(CGRAMmemoryLocation*MAX_CHAR_SIZE_CGRAM)),lcd); //Write to CGRAM
    5c28:	8a 81       	ldd	r24, Y+2	; 0x02
    5c2a:	88 2f       	mov	r24, r24
    5c2c:	90 e0       	ldi	r25, 0x00	; 0
    5c2e:	08 96       	adiw	r24, 0x08	; 8
    5c30:	88 0f       	add	r24, r24
    5c32:	99 1f       	adc	r25, r25
    5c34:	88 0f       	add	r24, r24
    5c36:	99 1f       	adc	r25, r25
    5c38:	88 0f       	add	r24, r24
    5c3a:	99 1f       	adc	r25, r25
    5c3c:	2d 81       	ldd	r18, Y+5	; 0x05
    5c3e:	3e 81       	ldd	r19, Y+6	; 0x06
    5c40:	b9 01       	movw	r22, r18
    5c42:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <LCD_VoidSendCommand>
		for(counter=0; counter<MAX_CHAR_SIZE_CGRAM; counter++)
    5c46:	19 82       	std	Y+1, r1	; 0x01
    5c48:	11 c0       	rjmp	.+34     	; 0x5c6c <LCD_VoidWriteOnCGRAM+0x62>
		{
			LCD_VoidSendChar(ArrChar[counter],lcd); //Write the character pattern to CGRAM
    5c4a:	89 81       	ldd	r24, Y+1	; 0x01
    5c4c:	28 2f       	mov	r18, r24
    5c4e:	30 e0       	ldi	r19, 0x00	; 0
    5c50:	8b 81       	ldd	r24, Y+3	; 0x03
    5c52:	9c 81       	ldd	r25, Y+4	; 0x04
    5c54:	fc 01       	movw	r30, r24
    5c56:	e2 0f       	add	r30, r18
    5c58:	f3 1f       	adc	r31, r19
    5c5a:	80 81       	ld	r24, Z
    5c5c:	2d 81       	ldd	r18, Y+5	; 0x05
    5c5e:	3e 81       	ldd	r19, Y+6	; 0x06
    5c60:	b9 01       	movw	r22, r18
    5c62:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <LCD_VoidSendChar>
{
	u8 counter;
	if(CGRAMmemoryLocation<MAX_CHAR_SIZE_CGRAM) //If valid address
	{
		LCD_VoidSendCommand((LCD_SetAddressCGRAM+(CGRAMmemoryLocation*MAX_CHAR_SIZE_CGRAM)),lcd); //Write to CGRAM
		for(counter=0; counter<MAX_CHAR_SIZE_CGRAM; counter++)
    5c66:	89 81       	ldd	r24, Y+1	; 0x01
    5c68:	8f 5f       	subi	r24, 0xFF	; 255
    5c6a:	89 83       	std	Y+1, r24	; 0x01
    5c6c:	89 81       	ldd	r24, Y+1	; 0x01
    5c6e:	88 30       	cpi	r24, 0x08	; 8
    5c70:	60 f3       	brcs	.-40     	; 0x5c4a <LCD_VoidWriteOnCGRAM+0x40>
		{
			LCD_VoidSendChar(ArrChar[counter],lcd); //Write the character pattern to CGRAM
		}
		LCD_VoidSendCommand(LCD_SetAddressDDRAM,lcd); //back to DDRAM location 0
    5c72:	2d 81       	ldd	r18, Y+5	; 0x05
    5c74:	3e 81       	ldd	r19, Y+6	; 0x06
    5c76:	80 e8       	ldi	r24, 0x80	; 128
    5c78:	b9 01       	movw	r22, r18
    5c7a:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <LCD_VoidSendCommand>
	else
	{
		/*Error*/
	}

}
    5c7e:	26 96       	adiw	r28, 0x06	; 6
    5c80:	0f b6       	in	r0, 0x3f	; 63
    5c82:	f8 94       	cli
    5c84:	de bf       	out	0x3e, r29	; 62
    5c86:	0f be       	out	0x3f, r0	; 63
    5c88:	cd bf       	out	0x3d, r28	; 61
    5c8a:	cf 91       	pop	r28
    5c8c:	df 91       	pop	r29
    5c8e:	08 95       	ret

00005c90 <LCD_VoidDispCharCGRAM>:

void LCD_VoidDispCharCGRAM(u8 CGRAMmemoryLocation, Lcd_info* lcd)
{
    5c90:	df 93       	push	r29
    5c92:	cf 93       	push	r28
    5c94:	00 d0       	rcall	.+0      	; 0x5c96 <LCD_VoidDispCharCGRAM+0x6>
    5c96:	0f 92       	push	r0
    5c98:	cd b7       	in	r28, 0x3d	; 61
    5c9a:	de b7       	in	r29, 0x3e	; 62
    5c9c:	89 83       	std	Y+1, r24	; 0x01
    5c9e:	7b 83       	std	Y+3, r23	; 0x03
    5ca0:	6a 83       	std	Y+2, r22	; 0x02
	LCD_VoidSendChar(CGRAMmemoryLocation,lcd);
    5ca2:	2a 81       	ldd	r18, Y+2	; 0x02
    5ca4:	3b 81       	ldd	r19, Y+3	; 0x03
    5ca6:	89 81       	ldd	r24, Y+1	; 0x01
    5ca8:	b9 01       	movw	r22, r18
    5caa:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <LCD_VoidSendChar>
}
    5cae:	0f 90       	pop	r0
    5cb0:	0f 90       	pop	r0
    5cb2:	0f 90       	pop	r0
    5cb4:	cf 91       	pop	r28
    5cb6:	df 91       	pop	r29
    5cb8:	08 95       	ret

00005cba <LCD_VoidSendCommand>:

void LCD_VoidSendCommand(u8 Copy_Command, Lcd_info* lcd)
{
    5cba:	df 93       	push	r29
    5cbc:	cf 93       	push	r28
    5cbe:	cd b7       	in	r28, 0x3d	; 61
    5cc0:	de b7       	in	r29, 0x3e	; 62
    5cc2:	6f 97       	sbiw	r28, 0x1f	; 31
    5cc4:	0f b6       	in	r0, 0x3f	; 63
    5cc6:	f8 94       	cli
    5cc8:	de bf       	out	0x3e, r29	; 62
    5cca:	0f be       	out	0x3f, r0	; 63
    5ccc:	cd bf       	out	0x3d, r28	; 61
    5cce:	8d 8f       	std	Y+29, r24	; 0x1d
    5cd0:	7f 8f       	std	Y+31, r23	; 0x1f
    5cd2:	6e 8f       	std	Y+30, r22	; 0x1e
	
	// RS=0 to send a Command and RS=1 to send Instraction
	DIO_ErrStateSetPinValue (lcd->Rs_Group,lcd->Rs_Pin,DIO_Low);
    5cd4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5cd6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5cd8:	80 81       	ld	r24, Z
    5cda:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5cdc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5cde:	91 81       	ldd	r25, Z+1	; 0x01
    5ce0:	69 2f       	mov	r22, r25
    5ce2:	40 e0       	ldi	r20, 0x00	; 0
    5ce4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	// RW=0 to Write and RW=1 to Read
	DIO_ErrStateSetPinValue (lcd->Rw_Group,lcd->Rw_Pin,DIO_Low);
    5ce8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5cea:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5cec:	82 81       	ldd	r24, Z+2	; 0x02
    5cee:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5cf0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5cf2:	93 81       	ldd	r25, Z+3	; 0x03
    5cf4:	69 2f       	mov	r22, r25
    5cf6:	40 e0       	ldi	r20, 0x00	; 0
    5cf8:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	// Write Command
	DIO_ErrStateSetGroupValue(lcd->Data_Group,Copy_Command);
    5cfc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5cfe:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5d00:	86 81       	ldd	r24, Z+6	; 0x06
    5d02:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5d04:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_ErrStateSetGroupValue>
	// Enable=1 for 230 nano secounds 
	DIO_ErrStateSetPinValue (lcd->E_Group,lcd->E_Pin,DIO_High);
    5d08:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5d0a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5d0c:	84 81       	ldd	r24, Z+4	; 0x04
    5d0e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5d10:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5d12:	95 81       	ldd	r25, Z+5	; 0x05
    5d14:	69 2f       	mov	r22, r25
    5d16:	41 e0       	ldi	r20, 0x01	; 1
    5d18:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    5d1c:	80 e0       	ldi	r24, 0x00	; 0
    5d1e:	90 e0       	ldi	r25, 0x00	; 0
    5d20:	a0 e8       	ldi	r26, 0x80	; 128
    5d22:	bf e3       	ldi	r27, 0x3F	; 63
    5d24:	89 8f       	std	Y+25, r24	; 0x19
    5d26:	9a 8f       	std	Y+26, r25	; 0x1a
    5d28:	ab 8f       	std	Y+27, r26	; 0x1b
    5d2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d2c:	69 8d       	ldd	r22, Y+25	; 0x19
    5d2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5d30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5d32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5d34:	20 e0       	ldi	r18, 0x00	; 0
    5d36:	30 e0       	ldi	r19, 0x00	; 0
    5d38:	4a ef       	ldi	r20, 0xFA	; 250
    5d3a:	54 e4       	ldi	r21, 0x44	; 68
    5d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d40:	dc 01       	movw	r26, r24
    5d42:	cb 01       	movw	r24, r22
    5d44:	8d 8b       	std	Y+21, r24	; 0x15
    5d46:	9e 8b       	std	Y+22, r25	; 0x16
    5d48:	af 8b       	std	Y+23, r26	; 0x17
    5d4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5d4c:	6d 89       	ldd	r22, Y+21	; 0x15
    5d4e:	7e 89       	ldd	r23, Y+22	; 0x16
    5d50:	8f 89       	ldd	r24, Y+23	; 0x17
    5d52:	98 8d       	ldd	r25, Y+24	; 0x18
    5d54:	20 e0       	ldi	r18, 0x00	; 0
    5d56:	30 e0       	ldi	r19, 0x00	; 0
    5d58:	40 e8       	ldi	r20, 0x80	; 128
    5d5a:	5f e3       	ldi	r21, 0x3F	; 63
    5d5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5d60:	88 23       	and	r24, r24
    5d62:	2c f4       	brge	.+10     	; 0x5d6e <LCD_VoidSendCommand+0xb4>
		__ticks = 1;
    5d64:	81 e0       	ldi	r24, 0x01	; 1
    5d66:	90 e0       	ldi	r25, 0x00	; 0
    5d68:	9c 8b       	std	Y+20, r25	; 0x14
    5d6a:	8b 8b       	std	Y+19, r24	; 0x13
    5d6c:	3f c0       	rjmp	.+126    	; 0x5dec <LCD_VoidSendCommand+0x132>
	else if (__tmp > 65535)
    5d6e:	6d 89       	ldd	r22, Y+21	; 0x15
    5d70:	7e 89       	ldd	r23, Y+22	; 0x16
    5d72:	8f 89       	ldd	r24, Y+23	; 0x17
    5d74:	98 8d       	ldd	r25, Y+24	; 0x18
    5d76:	20 e0       	ldi	r18, 0x00	; 0
    5d78:	3f ef       	ldi	r19, 0xFF	; 255
    5d7a:	4f e7       	ldi	r20, 0x7F	; 127
    5d7c:	57 e4       	ldi	r21, 0x47	; 71
    5d7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5d82:	18 16       	cp	r1, r24
    5d84:	4c f5       	brge	.+82     	; 0x5dd8 <LCD_VoidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d86:	69 8d       	ldd	r22, Y+25	; 0x19
    5d88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5d8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5d8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5d8e:	20 e0       	ldi	r18, 0x00	; 0
    5d90:	30 e0       	ldi	r19, 0x00	; 0
    5d92:	40 e2       	ldi	r20, 0x20	; 32
    5d94:	51 e4       	ldi	r21, 0x41	; 65
    5d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d9a:	dc 01       	movw	r26, r24
    5d9c:	cb 01       	movw	r24, r22
    5d9e:	bc 01       	movw	r22, r24
    5da0:	cd 01       	movw	r24, r26
    5da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5da6:	dc 01       	movw	r26, r24
    5da8:	cb 01       	movw	r24, r22
    5daa:	9c 8b       	std	Y+20, r25	; 0x14
    5dac:	8b 8b       	std	Y+19, r24	; 0x13
    5dae:	0f c0       	rjmp	.+30     	; 0x5dce <LCD_VoidSendCommand+0x114>
    5db0:	88 ec       	ldi	r24, 0xC8	; 200
    5db2:	90 e0       	ldi	r25, 0x00	; 0
    5db4:	9a 8b       	std	Y+18, r25	; 0x12
    5db6:	89 8b       	std	Y+17, r24	; 0x11
    5db8:	89 89       	ldd	r24, Y+17	; 0x11
    5dba:	9a 89       	ldd	r25, Y+18	; 0x12
    5dbc:	01 97       	sbiw	r24, 0x01	; 1
    5dbe:	f1 f7       	brne	.-4      	; 0x5dbc <LCD_VoidSendCommand+0x102>
    5dc0:	9a 8b       	std	Y+18, r25	; 0x12
    5dc2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5dc4:	8b 89       	ldd	r24, Y+19	; 0x13
    5dc6:	9c 89       	ldd	r25, Y+20	; 0x14
    5dc8:	01 97       	sbiw	r24, 0x01	; 1
    5dca:	9c 8b       	std	Y+20, r25	; 0x14
    5dcc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dce:	8b 89       	ldd	r24, Y+19	; 0x13
    5dd0:	9c 89       	ldd	r25, Y+20	; 0x14
    5dd2:	00 97       	sbiw	r24, 0x00	; 0
    5dd4:	69 f7       	brne	.-38     	; 0x5db0 <LCD_VoidSendCommand+0xf6>
    5dd6:	14 c0       	rjmp	.+40     	; 0x5e00 <LCD_VoidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5dd8:	6d 89       	ldd	r22, Y+21	; 0x15
    5dda:	7e 89       	ldd	r23, Y+22	; 0x16
    5ddc:	8f 89       	ldd	r24, Y+23	; 0x17
    5dde:	98 8d       	ldd	r25, Y+24	; 0x18
    5de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5de4:	dc 01       	movw	r26, r24
    5de6:	cb 01       	movw	r24, r22
    5de8:	9c 8b       	std	Y+20, r25	; 0x14
    5dea:	8b 8b       	std	Y+19, r24	; 0x13
    5dec:	8b 89       	ldd	r24, Y+19	; 0x13
    5dee:	9c 89       	ldd	r25, Y+20	; 0x14
    5df0:	98 8b       	std	Y+16, r25	; 0x10
    5df2:	8f 87       	std	Y+15, r24	; 0x0f
    5df4:	8f 85       	ldd	r24, Y+15	; 0x0f
    5df6:	98 89       	ldd	r25, Y+16	; 0x10
    5df8:	01 97       	sbiw	r24, 0x01	; 1
    5dfa:	f1 f7       	brne	.-4      	; 0x5df8 <LCD_VoidSendCommand+0x13e>
    5dfc:	98 8b       	std	Y+16, r25	; 0x10
    5dfe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ErrStateSetPinValue (lcd->E_Group,lcd->E_Pin,DIO_Low);
    5e00:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5e02:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5e04:	84 81       	ldd	r24, Z+4	; 0x04
    5e06:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5e08:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5e0a:	95 81       	ldd	r25, Z+5	; 0x05
    5e0c:	69 2f       	mov	r22, r25
    5e0e:	40 e0       	ldi	r20, 0x00	; 0
    5e10:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    5e14:	80 e0       	ldi	r24, 0x00	; 0
    5e16:	90 e0       	ldi	r25, 0x00	; 0
    5e18:	a0 e8       	ldi	r26, 0x80	; 128
    5e1a:	bf e3       	ldi	r27, 0x3F	; 63
    5e1c:	8b 87       	std	Y+11, r24	; 0x0b
    5e1e:	9c 87       	std	Y+12, r25	; 0x0c
    5e20:	ad 87       	std	Y+13, r26	; 0x0d
    5e22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e24:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e26:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e2c:	20 e0       	ldi	r18, 0x00	; 0
    5e2e:	30 e0       	ldi	r19, 0x00	; 0
    5e30:	4a ef       	ldi	r20, 0xFA	; 250
    5e32:	54 e4       	ldi	r21, 0x44	; 68
    5e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e38:	dc 01       	movw	r26, r24
    5e3a:	cb 01       	movw	r24, r22
    5e3c:	8f 83       	std	Y+7, r24	; 0x07
    5e3e:	98 87       	std	Y+8, r25	; 0x08
    5e40:	a9 87       	std	Y+9, r26	; 0x09
    5e42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5e44:	6f 81       	ldd	r22, Y+7	; 0x07
    5e46:	78 85       	ldd	r23, Y+8	; 0x08
    5e48:	89 85       	ldd	r24, Y+9	; 0x09
    5e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e4c:	20 e0       	ldi	r18, 0x00	; 0
    5e4e:	30 e0       	ldi	r19, 0x00	; 0
    5e50:	40 e8       	ldi	r20, 0x80	; 128
    5e52:	5f e3       	ldi	r21, 0x3F	; 63
    5e54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5e58:	88 23       	and	r24, r24
    5e5a:	2c f4       	brge	.+10     	; 0x5e66 <LCD_VoidSendCommand+0x1ac>
		__ticks = 1;
    5e5c:	81 e0       	ldi	r24, 0x01	; 1
    5e5e:	90 e0       	ldi	r25, 0x00	; 0
    5e60:	9e 83       	std	Y+6, r25	; 0x06
    5e62:	8d 83       	std	Y+5, r24	; 0x05
    5e64:	3f c0       	rjmp	.+126    	; 0x5ee4 <LCD_VoidSendCommand+0x22a>
	else if (__tmp > 65535)
    5e66:	6f 81       	ldd	r22, Y+7	; 0x07
    5e68:	78 85       	ldd	r23, Y+8	; 0x08
    5e6a:	89 85       	ldd	r24, Y+9	; 0x09
    5e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e6e:	20 e0       	ldi	r18, 0x00	; 0
    5e70:	3f ef       	ldi	r19, 0xFF	; 255
    5e72:	4f e7       	ldi	r20, 0x7F	; 127
    5e74:	57 e4       	ldi	r21, 0x47	; 71
    5e76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5e7a:	18 16       	cp	r1, r24
    5e7c:	4c f5       	brge	.+82     	; 0x5ed0 <LCD_VoidSendCommand+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e86:	20 e0       	ldi	r18, 0x00	; 0
    5e88:	30 e0       	ldi	r19, 0x00	; 0
    5e8a:	40 e2       	ldi	r20, 0x20	; 32
    5e8c:	51 e4       	ldi	r21, 0x41	; 65
    5e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e92:	dc 01       	movw	r26, r24
    5e94:	cb 01       	movw	r24, r22
    5e96:	bc 01       	movw	r22, r24
    5e98:	cd 01       	movw	r24, r26
    5e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e9e:	dc 01       	movw	r26, r24
    5ea0:	cb 01       	movw	r24, r22
    5ea2:	9e 83       	std	Y+6, r25	; 0x06
    5ea4:	8d 83       	std	Y+5, r24	; 0x05
    5ea6:	0f c0       	rjmp	.+30     	; 0x5ec6 <LCD_VoidSendCommand+0x20c>
    5ea8:	88 ec       	ldi	r24, 0xC8	; 200
    5eaa:	90 e0       	ldi	r25, 0x00	; 0
    5eac:	9c 83       	std	Y+4, r25	; 0x04
    5eae:	8b 83       	std	Y+3, r24	; 0x03
    5eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    5eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    5eb4:	01 97       	sbiw	r24, 0x01	; 1
    5eb6:	f1 f7       	brne	.-4      	; 0x5eb4 <LCD_VoidSendCommand+0x1fa>
    5eb8:	9c 83       	std	Y+4, r25	; 0x04
    5eba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    5ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    5ec0:	01 97       	sbiw	r24, 0x01	; 1
    5ec2:	9e 83       	std	Y+6, r25	; 0x06
    5ec4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    5eca:	00 97       	sbiw	r24, 0x00	; 0
    5ecc:	69 f7       	brne	.-38     	; 0x5ea8 <LCD_VoidSendCommand+0x1ee>
    5ece:	14 c0       	rjmp	.+40     	; 0x5ef8 <LCD_VoidSendCommand+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    5ed2:	78 85       	ldd	r23, Y+8	; 0x08
    5ed4:	89 85       	ldd	r24, Y+9	; 0x09
    5ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5edc:	dc 01       	movw	r26, r24
    5ede:	cb 01       	movw	r24, r22
    5ee0:	9e 83       	std	Y+6, r25	; 0x06
    5ee2:	8d 83       	std	Y+5, r24	; 0x05
    5ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    5ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    5ee8:	9a 83       	std	Y+2, r25	; 0x02
    5eea:	89 83       	std	Y+1, r24	; 0x01
    5eec:	89 81       	ldd	r24, Y+1	; 0x01
    5eee:	9a 81       	ldd	r25, Y+2	; 0x02
    5ef0:	01 97       	sbiw	r24, 0x01	; 1
    5ef2:	f1 f7       	brne	.-4      	; 0x5ef0 <LCD_VoidSendCommand+0x236>
    5ef4:	9a 83       	std	Y+2, r25	; 0x02
    5ef6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
}
    5ef8:	6f 96       	adiw	r28, 0x1f	; 31
    5efa:	0f b6       	in	r0, 0x3f	; 63
    5efc:	f8 94       	cli
    5efe:	de bf       	out	0x3e, r29	; 62
    5f00:	0f be       	out	0x3f, r0	; 63
    5f02:	cd bf       	out	0x3d, r28	; 61
    5f04:	cf 91       	pop	r28
    5f06:	df 91       	pop	r29
    5f08:	08 95       	ret

00005f0a <LCD_VoidSendChar>:

void LCD_VoidSendChar(u8 Copy_Char, Lcd_info* lcd)
{
    5f0a:	df 93       	push	r29
    5f0c:	cf 93       	push	r28
    5f0e:	cd b7       	in	r28, 0x3d	; 61
    5f10:	de b7       	in	r29, 0x3e	; 62
    5f12:	6f 97       	sbiw	r28, 0x1f	; 31
    5f14:	0f b6       	in	r0, 0x3f	; 63
    5f16:	f8 94       	cli
    5f18:	de bf       	out	0x3e, r29	; 62
    5f1a:	0f be       	out	0x3f, r0	; 63
    5f1c:	cd bf       	out	0x3d, r28	; 61
    5f1e:	8d 8f       	std	Y+29, r24	; 0x1d
    5f20:	7f 8f       	std	Y+31, r23	; 0x1f
    5f22:	6e 8f       	std	Y+30, r22	; 0x1e
	
	// RS=0 to send a Command and RS=1 to send Data
	DIO_ErrStateSetPinValue (lcd->Rs_Group,lcd->Rs_Pin,DIO_High);
    5f24:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5f26:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5f28:	80 81       	ld	r24, Z
    5f2a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5f2c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5f2e:	91 81       	ldd	r25, Z+1	; 0x01
    5f30:	69 2f       	mov	r22, r25
    5f32:	41 e0       	ldi	r20, 0x01	; 1
    5f34:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	// RW=0 to Write and RW=1 to Read
	DIO_ErrStateSetPinValue (lcd->Rw_Group,lcd->Rw_Pin,DIO_Low);
    5f38:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5f3a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5f3c:	82 81       	ldd	r24, Z+2	; 0x02
    5f3e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5f40:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5f42:	93 81       	ldd	r25, Z+3	; 0x03
    5f44:	69 2f       	mov	r22, r25
    5f46:	40 e0       	ldi	r20, 0x00	; 0
    5f48:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	// Write Data
	DIO_ErrStateSetGroupValue(lcd->Data_Group,Copy_Char);
    5f4c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5f4e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5f50:	86 81       	ldd	r24, Z+6	; 0x06
    5f52:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5f54:	0e 94 47 10 	call	0x208e	; 0x208e <DIO_ErrStateSetGroupValue>
	// Enable=1 for 230 nano secounds 
	DIO_ErrStateSetPinValue (lcd->E_Group,lcd->E_Pin,DIO_High);
    5f58:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5f5a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5f5c:	84 81       	ldd	r24, Z+4	; 0x04
    5f5e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5f60:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5f62:	95 81       	ldd	r25, Z+5	; 0x05
    5f64:	69 2f       	mov	r22, r25
    5f66:	41 e0       	ldi	r20, 0x01	; 1
    5f68:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    5f6c:	80 e0       	ldi	r24, 0x00	; 0
    5f6e:	90 e0       	ldi	r25, 0x00	; 0
    5f70:	a0 e8       	ldi	r26, 0x80	; 128
    5f72:	bf e3       	ldi	r27, 0x3F	; 63
    5f74:	89 8f       	std	Y+25, r24	; 0x19
    5f76:	9a 8f       	std	Y+26, r25	; 0x1a
    5f78:	ab 8f       	std	Y+27, r26	; 0x1b
    5f7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f7c:	69 8d       	ldd	r22, Y+25	; 0x19
    5f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5f84:	20 e0       	ldi	r18, 0x00	; 0
    5f86:	30 e0       	ldi	r19, 0x00	; 0
    5f88:	4a ef       	ldi	r20, 0xFA	; 250
    5f8a:	54 e4       	ldi	r21, 0x44	; 68
    5f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f90:	dc 01       	movw	r26, r24
    5f92:	cb 01       	movw	r24, r22
    5f94:	8d 8b       	std	Y+21, r24	; 0x15
    5f96:	9e 8b       	std	Y+22, r25	; 0x16
    5f98:	af 8b       	std	Y+23, r26	; 0x17
    5f9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5f9c:	6d 89       	ldd	r22, Y+21	; 0x15
    5f9e:	7e 89       	ldd	r23, Y+22	; 0x16
    5fa0:	8f 89       	ldd	r24, Y+23	; 0x17
    5fa2:	98 8d       	ldd	r25, Y+24	; 0x18
    5fa4:	20 e0       	ldi	r18, 0x00	; 0
    5fa6:	30 e0       	ldi	r19, 0x00	; 0
    5fa8:	40 e8       	ldi	r20, 0x80	; 128
    5faa:	5f e3       	ldi	r21, 0x3F	; 63
    5fac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5fb0:	88 23       	and	r24, r24
    5fb2:	2c f4       	brge	.+10     	; 0x5fbe <LCD_VoidSendChar+0xb4>
		__ticks = 1;
    5fb4:	81 e0       	ldi	r24, 0x01	; 1
    5fb6:	90 e0       	ldi	r25, 0x00	; 0
    5fb8:	9c 8b       	std	Y+20, r25	; 0x14
    5fba:	8b 8b       	std	Y+19, r24	; 0x13
    5fbc:	3f c0       	rjmp	.+126    	; 0x603c <LCD_VoidSendChar+0x132>
	else if (__tmp > 65535)
    5fbe:	6d 89       	ldd	r22, Y+21	; 0x15
    5fc0:	7e 89       	ldd	r23, Y+22	; 0x16
    5fc2:	8f 89       	ldd	r24, Y+23	; 0x17
    5fc4:	98 8d       	ldd	r25, Y+24	; 0x18
    5fc6:	20 e0       	ldi	r18, 0x00	; 0
    5fc8:	3f ef       	ldi	r19, 0xFF	; 255
    5fca:	4f e7       	ldi	r20, 0x7F	; 127
    5fcc:	57 e4       	ldi	r21, 0x47	; 71
    5fce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5fd2:	18 16       	cp	r1, r24
    5fd4:	4c f5       	brge	.+82     	; 0x6028 <LCD_VoidSendChar+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fd6:	69 8d       	ldd	r22, Y+25	; 0x19
    5fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5fde:	20 e0       	ldi	r18, 0x00	; 0
    5fe0:	30 e0       	ldi	r19, 0x00	; 0
    5fe2:	40 e2       	ldi	r20, 0x20	; 32
    5fe4:	51 e4       	ldi	r21, 0x41	; 65
    5fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fea:	dc 01       	movw	r26, r24
    5fec:	cb 01       	movw	r24, r22
    5fee:	bc 01       	movw	r22, r24
    5ff0:	cd 01       	movw	r24, r26
    5ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ff6:	dc 01       	movw	r26, r24
    5ff8:	cb 01       	movw	r24, r22
    5ffa:	9c 8b       	std	Y+20, r25	; 0x14
    5ffc:	8b 8b       	std	Y+19, r24	; 0x13
    5ffe:	0f c0       	rjmp	.+30     	; 0x601e <LCD_VoidSendChar+0x114>
    6000:	88 ec       	ldi	r24, 0xC8	; 200
    6002:	90 e0       	ldi	r25, 0x00	; 0
    6004:	9a 8b       	std	Y+18, r25	; 0x12
    6006:	89 8b       	std	Y+17, r24	; 0x11
    6008:	89 89       	ldd	r24, Y+17	; 0x11
    600a:	9a 89       	ldd	r25, Y+18	; 0x12
    600c:	01 97       	sbiw	r24, 0x01	; 1
    600e:	f1 f7       	brne	.-4      	; 0x600c <LCD_VoidSendChar+0x102>
    6010:	9a 8b       	std	Y+18, r25	; 0x12
    6012:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6014:	8b 89       	ldd	r24, Y+19	; 0x13
    6016:	9c 89       	ldd	r25, Y+20	; 0x14
    6018:	01 97       	sbiw	r24, 0x01	; 1
    601a:	9c 8b       	std	Y+20, r25	; 0x14
    601c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    601e:	8b 89       	ldd	r24, Y+19	; 0x13
    6020:	9c 89       	ldd	r25, Y+20	; 0x14
    6022:	00 97       	sbiw	r24, 0x00	; 0
    6024:	69 f7       	brne	.-38     	; 0x6000 <LCD_VoidSendChar+0xf6>
    6026:	14 c0       	rjmp	.+40     	; 0x6050 <LCD_VoidSendChar+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6028:	6d 89       	ldd	r22, Y+21	; 0x15
    602a:	7e 89       	ldd	r23, Y+22	; 0x16
    602c:	8f 89       	ldd	r24, Y+23	; 0x17
    602e:	98 8d       	ldd	r25, Y+24	; 0x18
    6030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6034:	dc 01       	movw	r26, r24
    6036:	cb 01       	movw	r24, r22
    6038:	9c 8b       	std	Y+20, r25	; 0x14
    603a:	8b 8b       	std	Y+19, r24	; 0x13
    603c:	8b 89       	ldd	r24, Y+19	; 0x13
    603e:	9c 89       	ldd	r25, Y+20	; 0x14
    6040:	98 8b       	std	Y+16, r25	; 0x10
    6042:	8f 87       	std	Y+15, r24	; 0x0f
    6044:	8f 85       	ldd	r24, Y+15	; 0x0f
    6046:	98 89       	ldd	r25, Y+16	; 0x10
    6048:	01 97       	sbiw	r24, 0x01	; 1
    604a:	f1 f7       	brne	.-4      	; 0x6048 <LCD_VoidSendChar+0x13e>
    604c:	98 8b       	std	Y+16, r25	; 0x10
    604e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ErrStateSetPinValue (lcd->E_Group,lcd->E_Pin,DIO_Low);
    6050:	ee 8d       	ldd	r30, Y+30	; 0x1e
    6052:	ff 8d       	ldd	r31, Y+31	; 0x1f
    6054:	84 81       	ldd	r24, Z+4	; 0x04
    6056:	ee 8d       	ldd	r30, Y+30	; 0x1e
    6058:	ff 8d       	ldd	r31, Y+31	; 0x1f
    605a:	95 81       	ldd	r25, Z+5	; 0x05
    605c:	69 2f       	mov	r22, r25
    605e:	40 e0       	ldi	r20, 0x00	; 0
    6060:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
    6064:	80 e0       	ldi	r24, 0x00	; 0
    6066:	90 e0       	ldi	r25, 0x00	; 0
    6068:	a0 e8       	ldi	r26, 0x80	; 128
    606a:	bf e3       	ldi	r27, 0x3F	; 63
    606c:	8b 87       	std	Y+11, r24	; 0x0b
    606e:	9c 87       	std	Y+12, r25	; 0x0c
    6070:	ad 87       	std	Y+13, r26	; 0x0d
    6072:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6074:	6b 85       	ldd	r22, Y+11	; 0x0b
    6076:	7c 85       	ldd	r23, Y+12	; 0x0c
    6078:	8d 85       	ldd	r24, Y+13	; 0x0d
    607a:	9e 85       	ldd	r25, Y+14	; 0x0e
    607c:	20 e0       	ldi	r18, 0x00	; 0
    607e:	30 e0       	ldi	r19, 0x00	; 0
    6080:	4a ef       	ldi	r20, 0xFA	; 250
    6082:	54 e4       	ldi	r21, 0x44	; 68
    6084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6088:	dc 01       	movw	r26, r24
    608a:	cb 01       	movw	r24, r22
    608c:	8f 83       	std	Y+7, r24	; 0x07
    608e:	98 87       	std	Y+8, r25	; 0x08
    6090:	a9 87       	std	Y+9, r26	; 0x09
    6092:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6094:	6f 81       	ldd	r22, Y+7	; 0x07
    6096:	78 85       	ldd	r23, Y+8	; 0x08
    6098:	89 85       	ldd	r24, Y+9	; 0x09
    609a:	9a 85       	ldd	r25, Y+10	; 0x0a
    609c:	20 e0       	ldi	r18, 0x00	; 0
    609e:	30 e0       	ldi	r19, 0x00	; 0
    60a0:	40 e8       	ldi	r20, 0x80	; 128
    60a2:	5f e3       	ldi	r21, 0x3F	; 63
    60a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    60a8:	88 23       	and	r24, r24
    60aa:	2c f4       	brge	.+10     	; 0x60b6 <LCD_VoidSendChar+0x1ac>
		__ticks = 1;
    60ac:	81 e0       	ldi	r24, 0x01	; 1
    60ae:	90 e0       	ldi	r25, 0x00	; 0
    60b0:	9e 83       	std	Y+6, r25	; 0x06
    60b2:	8d 83       	std	Y+5, r24	; 0x05
    60b4:	3f c0       	rjmp	.+126    	; 0x6134 <LCD_VoidSendChar+0x22a>
	else if (__tmp > 65535)
    60b6:	6f 81       	ldd	r22, Y+7	; 0x07
    60b8:	78 85       	ldd	r23, Y+8	; 0x08
    60ba:	89 85       	ldd	r24, Y+9	; 0x09
    60bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    60be:	20 e0       	ldi	r18, 0x00	; 0
    60c0:	3f ef       	ldi	r19, 0xFF	; 255
    60c2:	4f e7       	ldi	r20, 0x7F	; 127
    60c4:	57 e4       	ldi	r21, 0x47	; 71
    60c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    60ca:	18 16       	cp	r1, r24
    60cc:	4c f5       	brge	.+82     	; 0x6120 <LCD_VoidSendChar+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    60d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    60d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    60d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    60d6:	20 e0       	ldi	r18, 0x00	; 0
    60d8:	30 e0       	ldi	r19, 0x00	; 0
    60da:	40 e2       	ldi	r20, 0x20	; 32
    60dc:	51 e4       	ldi	r21, 0x41	; 65
    60de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60e2:	dc 01       	movw	r26, r24
    60e4:	cb 01       	movw	r24, r22
    60e6:	bc 01       	movw	r22, r24
    60e8:	cd 01       	movw	r24, r26
    60ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60ee:	dc 01       	movw	r26, r24
    60f0:	cb 01       	movw	r24, r22
    60f2:	9e 83       	std	Y+6, r25	; 0x06
    60f4:	8d 83       	std	Y+5, r24	; 0x05
    60f6:	0f c0       	rjmp	.+30     	; 0x6116 <LCD_VoidSendChar+0x20c>
    60f8:	88 ec       	ldi	r24, 0xC8	; 200
    60fa:	90 e0       	ldi	r25, 0x00	; 0
    60fc:	9c 83       	std	Y+4, r25	; 0x04
    60fe:	8b 83       	std	Y+3, r24	; 0x03
    6100:	8b 81       	ldd	r24, Y+3	; 0x03
    6102:	9c 81       	ldd	r25, Y+4	; 0x04
    6104:	01 97       	sbiw	r24, 0x01	; 1
    6106:	f1 f7       	brne	.-4      	; 0x6104 <LCD_VoidSendChar+0x1fa>
    6108:	9c 83       	std	Y+4, r25	; 0x04
    610a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    610c:	8d 81       	ldd	r24, Y+5	; 0x05
    610e:	9e 81       	ldd	r25, Y+6	; 0x06
    6110:	01 97       	sbiw	r24, 0x01	; 1
    6112:	9e 83       	std	Y+6, r25	; 0x06
    6114:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6116:	8d 81       	ldd	r24, Y+5	; 0x05
    6118:	9e 81       	ldd	r25, Y+6	; 0x06
    611a:	00 97       	sbiw	r24, 0x00	; 0
    611c:	69 f7       	brne	.-38     	; 0x60f8 <LCD_VoidSendChar+0x1ee>
    611e:	14 c0       	rjmp	.+40     	; 0x6148 <LCD_VoidSendChar+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6120:	6f 81       	ldd	r22, Y+7	; 0x07
    6122:	78 85       	ldd	r23, Y+8	; 0x08
    6124:	89 85       	ldd	r24, Y+9	; 0x09
    6126:	9a 85       	ldd	r25, Y+10	; 0x0a
    6128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    612c:	dc 01       	movw	r26, r24
    612e:	cb 01       	movw	r24, r22
    6130:	9e 83       	std	Y+6, r25	; 0x06
    6132:	8d 83       	std	Y+5, r24	; 0x05
    6134:	8d 81       	ldd	r24, Y+5	; 0x05
    6136:	9e 81       	ldd	r25, Y+6	; 0x06
    6138:	9a 83       	std	Y+2, r25	; 0x02
    613a:	89 83       	std	Y+1, r24	; 0x01
    613c:	89 81       	ldd	r24, Y+1	; 0x01
    613e:	9a 81       	ldd	r25, Y+2	; 0x02
    6140:	01 97       	sbiw	r24, 0x01	; 1
    6142:	f1 f7       	brne	.-4      	; 0x6140 <LCD_VoidSendChar+0x236>
    6144:	9a 83       	std	Y+2, r25	; 0x02
    6146:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
}		
    6148:	6f 96       	adiw	r28, 0x1f	; 31
    614a:	0f b6       	in	r0, 0x3f	; 63
    614c:	f8 94       	cli
    614e:	de bf       	out	0x3e, r29	; 62
    6150:	0f be       	out	0x3f, r0	; 63
    6152:	cd bf       	out	0x3d, r28	; 61
    6154:	cf 91       	pop	r28
    6156:	df 91       	pop	r29
    6158:	08 95       	ret

0000615a <KPD_voidInit>:
const u8 KPD_u8SwitchVal[4][4] = KPD_KEYS;

const u8 KPD_u8RowsPins[4] = { ROW1, ROW2, ROW3, ROW4 };
const u8 KPD_u8ColsPins[4] = { COL1, COL2, COL3, COL4 };

void KPD_voidInit(void) {
    615a:	df 93       	push	r29
    615c:	cf 93       	push	r28
    615e:	cd b7       	in	r28, 0x3d	; 61
    6160:	de b7       	in	r29, 0x3e	; 62

	DIO_ErrStateSetPinDirection(KPD_PORT, ROW1, DIO_Output);
    6162:	82 e0       	ldi	r24, 0x02	; 2
    6164:	60 e0       	ldi	r22, 0x00	; 0
    6166:	41 e0       	ldi	r20, 0x01	; 1
    6168:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KPD_PORT, ROW2, DIO_Output);
    616c:	82 e0       	ldi	r24, 0x02	; 2
    616e:	61 e0       	ldi	r22, 0x01	; 1
    6170:	41 e0       	ldi	r20, 0x01	; 1
    6172:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KPD_PORT, ROW3, DIO_Output);
    6176:	82 e0       	ldi	r24, 0x02	; 2
    6178:	62 e0       	ldi	r22, 0x02	; 2
    617a:	41 e0       	ldi	r20, 0x01	; 1
    617c:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KPD_PORT, ROW4, DIO_Output);
    6180:	82 e0       	ldi	r24, 0x02	; 2
    6182:	63 e0       	ldi	r22, 0x03	; 3
    6184:	41 e0       	ldi	r20, 0x01	; 1
    6186:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>

	DIO_ErrStateSetPinDirection(KPD_PORT, COL1, DIO_Input);
    618a:	82 e0       	ldi	r24, 0x02	; 2
    618c:	64 e0       	ldi	r22, 0x04	; 4
    618e:	40 e0       	ldi	r20, 0x00	; 0
    6190:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KPD_PORT, COL2, DIO_Input);
    6194:	82 e0       	ldi	r24, 0x02	; 2
    6196:	65 e0       	ldi	r22, 0x05	; 5
    6198:	40 e0       	ldi	r20, 0x00	; 0
    619a:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KPD_PORT, COL3, DIO_Input);
    619e:	82 e0       	ldi	r24, 0x02	; 2
    61a0:	66 e0       	ldi	r22, 0x06	; 6
    61a2:	40 e0       	ldi	r20, 0x00	; 0
    61a4:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KPD_PORT, COL4, DIO_Input);
    61a8:	82 e0       	ldi	r24, 0x02	; 2
    61aa:	67 e0       	ldi	r22, 0x07	; 7
    61ac:	40 e0       	ldi	r20, 0x00	; 0
    61ae:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
	
	// setting the Rows to HIGH and activate the columns internal Pull Up resistors
	PORTC_ITI = 0xff ;
    61b2:	e5 e3       	ldi	r30, 0x35	; 53
    61b4:	f0 e0       	ldi	r31, 0x00	; 0
    61b6:	8f ef       	ldi	r24, 0xFF	; 255
    61b8:	80 83       	st	Z, r24

}
    61ba:	cf 91       	pop	r28
    61bc:	df 91       	pop	r29
    61be:	08 95       	ret

000061c0 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void) {
    61c0:	df 93       	push	r29
    61c2:	cf 93       	push	r28
    61c4:	cd b7       	in	r28, 0x3d	; 61
    61c6:	de b7       	in	r29, 0x3e	; 62
    61c8:	63 97       	sbiw	r28, 0x13	; 19
    61ca:	0f b6       	in	r0, 0x3f	; 63
    61cc:	f8 94       	cli
    61ce:	de bf       	out	0x3e, r29	; 62
    61d0:	0f be       	out	0x3f, r0	; 63
    61d2:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8Col, Local_u8Row;
	u8 Local_u8Sw = KPD_u8KEY_NOT_PRESSED;
    61d4:	8f ef       	ldi	r24, 0xFF	; 255
    61d6:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8Flag = 0;
    61d8:	1f 86       	std	Y+15, r1	; 0x0f
	u8 val = 0;
    61da:	1b 8a       	std	Y+19, r1	; 0x13

	for (Local_u8Row = 0; Local_u8Row <= 3; Local_u8Row++) {
    61dc:	19 8a       	std	Y+17, r1	; 0x11
    61de:	d4 c0       	rjmp	.+424    	; 0x6388 <KPD_u8GetPressedKey+0x1c8>

		DIO_ErrStateSetPinValue(KPD_PORT, KPD_u8RowsPins[Local_u8Row], DIO_Low);
    61e0:	89 89       	ldd	r24, Y+17	; 0x11
    61e2:	88 2f       	mov	r24, r24
    61e4:	90 e0       	ldi	r25, 0x00	; 0
    61e6:	fc 01       	movw	r30, r24
    61e8:	ec 57       	subi	r30, 0x7C	; 124
    61ea:	fe 4f       	sbci	r31, 0xFE	; 254
    61ec:	90 81       	ld	r25, Z
    61ee:	82 e0       	ldi	r24, 0x02	; 2
    61f0:	69 2f       	mov	r22, r25
    61f2:	40 e0       	ldi	r20, 0x00	; 0
    61f4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>

		for (Local_u8Col = 0; Local_u8Col <= 3; Local_u8Col++) {
    61f8:	1a 8a       	std	Y+18, r1	; 0x12
    61fa:	b0 c0       	rjmp	.+352    	; 0x635c <KPD_u8GetPressedKey+0x19c>

			// Key pressed
			DIO_ErrStateReadPinValue(KPD_PORT, KPD_u8ColsPins[Local_u8Col],&val);
    61fc:	8a 89       	ldd	r24, Y+18	; 0x12
    61fe:	88 2f       	mov	r24, r24
    6200:	90 e0       	ldi	r25, 0x00	; 0
    6202:	fc 01       	movw	r30, r24
    6204:	e8 57       	subi	r30, 0x78	; 120
    6206:	fe 4f       	sbci	r31, 0xFE	; 254
    6208:	90 81       	ld	r25, Z
    620a:	9e 01       	movw	r18, r28
    620c:	2d 5e       	subi	r18, 0xED	; 237
    620e:	3f 4f       	sbci	r19, 0xFF	; 255
    6210:	82 e0       	ldi	r24, 0x02	; 2
    6212:	69 2f       	mov	r22, r25
    6214:	a9 01       	movw	r20, r18
    6216:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <DIO_ErrStateReadPinValue>
			if (DIO_Low == val)
    621a:	8b 89       	ldd	r24, Y+19	; 0x13
    621c:	88 23       	and	r24, r24
    621e:	09 f0       	breq	.+2      	; 0x6222 <KPD_u8GetPressedKey+0x62>
    6220:	9a c0       	rjmp	.+308    	; 0x6356 <KPD_u8GetPressedKey+0x196>
    6222:	80 e0       	ldi	r24, 0x00	; 0
    6224:	90 e0       	ldi	r25, 0x00	; 0
    6226:	a0 ee       	ldi	r26, 0xE0	; 224
    6228:	b0 e4       	ldi	r27, 0x40	; 64
    622a:	8b 87       	std	Y+11, r24	; 0x0b
    622c:	9c 87       	std	Y+12, r25	; 0x0c
    622e:	ad 87       	std	Y+13, r26	; 0x0d
    6230:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6232:	6b 85       	ldd	r22, Y+11	; 0x0b
    6234:	7c 85       	ldd	r23, Y+12	; 0x0c
    6236:	8d 85       	ldd	r24, Y+13	; 0x0d
    6238:	9e 85       	ldd	r25, Y+14	; 0x0e
    623a:	20 e0       	ldi	r18, 0x00	; 0
    623c:	30 e0       	ldi	r19, 0x00	; 0
    623e:	4a ef       	ldi	r20, 0xFA	; 250
    6240:	54 e4       	ldi	r21, 0x44	; 68
    6242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6246:	dc 01       	movw	r26, r24
    6248:	cb 01       	movw	r24, r22
    624a:	8f 83       	std	Y+7, r24	; 0x07
    624c:	98 87       	std	Y+8, r25	; 0x08
    624e:	a9 87       	std	Y+9, r26	; 0x09
    6250:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6252:	6f 81       	ldd	r22, Y+7	; 0x07
    6254:	78 85       	ldd	r23, Y+8	; 0x08
    6256:	89 85       	ldd	r24, Y+9	; 0x09
    6258:	9a 85       	ldd	r25, Y+10	; 0x0a
    625a:	20 e0       	ldi	r18, 0x00	; 0
    625c:	30 e0       	ldi	r19, 0x00	; 0
    625e:	40 e8       	ldi	r20, 0x80	; 128
    6260:	5f e3       	ldi	r21, 0x3F	; 63
    6262:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6266:	88 23       	and	r24, r24
    6268:	2c f4       	brge	.+10     	; 0x6274 <KPD_u8GetPressedKey+0xb4>
		__ticks = 1;
    626a:	81 e0       	ldi	r24, 0x01	; 1
    626c:	90 e0       	ldi	r25, 0x00	; 0
    626e:	9e 83       	std	Y+6, r25	; 0x06
    6270:	8d 83       	std	Y+5, r24	; 0x05
    6272:	3f c0       	rjmp	.+126    	; 0x62f2 <KPD_u8GetPressedKey+0x132>
	else if (__tmp > 65535)
    6274:	6f 81       	ldd	r22, Y+7	; 0x07
    6276:	78 85       	ldd	r23, Y+8	; 0x08
    6278:	89 85       	ldd	r24, Y+9	; 0x09
    627a:	9a 85       	ldd	r25, Y+10	; 0x0a
    627c:	20 e0       	ldi	r18, 0x00	; 0
    627e:	3f ef       	ldi	r19, 0xFF	; 255
    6280:	4f e7       	ldi	r20, 0x7F	; 127
    6282:	57 e4       	ldi	r21, 0x47	; 71
    6284:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6288:	18 16       	cp	r1, r24
    628a:	4c f5       	brge	.+82     	; 0x62de <KPD_u8GetPressedKey+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    628c:	6b 85       	ldd	r22, Y+11	; 0x0b
    628e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6290:	8d 85       	ldd	r24, Y+13	; 0x0d
    6292:	9e 85       	ldd	r25, Y+14	; 0x0e
    6294:	20 e0       	ldi	r18, 0x00	; 0
    6296:	30 e0       	ldi	r19, 0x00	; 0
    6298:	40 e2       	ldi	r20, 0x20	; 32
    629a:	51 e4       	ldi	r21, 0x41	; 65
    629c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62a0:	dc 01       	movw	r26, r24
    62a2:	cb 01       	movw	r24, r22
    62a4:	bc 01       	movw	r22, r24
    62a6:	cd 01       	movw	r24, r26
    62a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62ac:	dc 01       	movw	r26, r24
    62ae:	cb 01       	movw	r24, r22
    62b0:	9e 83       	std	Y+6, r25	; 0x06
    62b2:	8d 83       	std	Y+5, r24	; 0x05
    62b4:	0f c0       	rjmp	.+30     	; 0x62d4 <KPD_u8GetPressedKey+0x114>
    62b6:	88 ec       	ldi	r24, 0xC8	; 200
    62b8:	90 e0       	ldi	r25, 0x00	; 0
    62ba:	9c 83       	std	Y+4, r25	; 0x04
    62bc:	8b 83       	std	Y+3, r24	; 0x03
    62be:	8b 81       	ldd	r24, Y+3	; 0x03
    62c0:	9c 81       	ldd	r25, Y+4	; 0x04
    62c2:	01 97       	sbiw	r24, 0x01	; 1
    62c4:	f1 f7       	brne	.-4      	; 0x62c2 <KPD_u8GetPressedKey+0x102>
    62c6:	9c 83       	std	Y+4, r25	; 0x04
    62c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62ca:	8d 81       	ldd	r24, Y+5	; 0x05
    62cc:	9e 81       	ldd	r25, Y+6	; 0x06
    62ce:	01 97       	sbiw	r24, 0x01	; 1
    62d0:	9e 83       	std	Y+6, r25	; 0x06
    62d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62d4:	8d 81       	ldd	r24, Y+5	; 0x05
    62d6:	9e 81       	ldd	r25, Y+6	; 0x06
    62d8:	00 97       	sbiw	r24, 0x00	; 0
    62da:	69 f7       	brne	.-38     	; 0x62b6 <KPD_u8GetPressedKey+0xf6>
    62dc:	24 c0       	rjmp	.+72     	; 0x6326 <KPD_u8GetPressedKey+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62de:	6f 81       	ldd	r22, Y+7	; 0x07
    62e0:	78 85       	ldd	r23, Y+8	; 0x08
    62e2:	89 85       	ldd	r24, Y+9	; 0x09
    62e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    62e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62ea:	dc 01       	movw	r26, r24
    62ec:	cb 01       	movw	r24, r22
    62ee:	9e 83       	std	Y+6, r25	; 0x06
    62f0:	8d 83       	std	Y+5, r24	; 0x05
    62f2:	8d 81       	ldd	r24, Y+5	; 0x05
    62f4:	9e 81       	ldd	r25, Y+6	; 0x06
    62f6:	9a 83       	std	Y+2, r25	; 0x02
    62f8:	89 83       	std	Y+1, r24	; 0x01
    62fa:	89 81       	ldd	r24, Y+1	; 0x01
    62fc:	9a 81       	ldd	r25, Y+2	; 0x02
    62fe:	01 97       	sbiw	r24, 0x01	; 1
    6300:	f1 f7       	brne	.-4      	; 0x62fe <KPD_u8GetPressedKey+0x13e>
    6302:	9a 83       	std	Y+2, r25	; 0x02
    6304:	89 83       	std	Y+1, r24	; 0x01
    6306:	0f c0       	rjmp	.+30     	; 0x6326 <KPD_u8GetPressedKey+0x166>
				_delay_ms(7);

				// to delay till pressing is over
				while (DIO_Low == val)
				{
					DIO_ErrStateReadPinValue(KPD_PORT,KPD_u8ColsPins[Local_u8Col], &val);
    6308:	8a 89       	ldd	r24, Y+18	; 0x12
    630a:	88 2f       	mov	r24, r24
    630c:	90 e0       	ldi	r25, 0x00	; 0
    630e:	fc 01       	movw	r30, r24
    6310:	e8 57       	subi	r30, 0x78	; 120
    6312:	fe 4f       	sbci	r31, 0xFE	; 254
    6314:	90 81       	ld	r25, Z
    6316:	9e 01       	movw	r18, r28
    6318:	2d 5e       	subi	r18, 0xED	; 237
    631a:	3f 4f       	sbci	r19, 0xFF	; 255
    631c:	82 e0       	ldi	r24, 0x02	; 2
    631e:	69 2f       	mov	r22, r25
    6320:	a9 01       	movw	r20, r18
    6322:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <DIO_ErrStateReadPinValue>
			{
				// bouncing 
				_delay_ms(7);

				// to delay till pressing is over
				while (DIO_Low == val)
    6326:	8b 89       	ldd	r24, Y+19	; 0x13
    6328:	88 23       	and	r24, r24
    632a:	71 f3       	breq	.-36     	; 0x6308 <KPD_u8GetPressedKey+0x148>
				{
					DIO_ErrStateReadPinValue(KPD_PORT,KPD_u8ColsPins[Local_u8Col], &val);
				}

				Local_u8Sw = KPD_u8SwitchVal[Local_u8Row][Local_u8Col];
    632c:	89 89       	ldd	r24, Y+17	; 0x11
    632e:	48 2f       	mov	r20, r24
    6330:	50 e0       	ldi	r21, 0x00	; 0
    6332:	8a 89       	ldd	r24, Y+18	; 0x12
    6334:	28 2f       	mov	r18, r24
    6336:	30 e0       	ldi	r19, 0x00	; 0
    6338:	ca 01       	movw	r24, r20
    633a:	88 0f       	add	r24, r24
    633c:	99 1f       	adc	r25, r25
    633e:	88 0f       	add	r24, r24
    6340:	99 1f       	adc	r25, r25
    6342:	82 0f       	add	r24, r18
    6344:	93 1f       	adc	r25, r19
    6346:	fc 01       	movw	r30, r24
    6348:	ec 58       	subi	r30, 0x8C	; 140
    634a:	fe 4f       	sbci	r31, 0xFE	; 254
    634c:	80 81       	ld	r24, Z
    634e:	88 8b       	std	Y+16, r24	; 0x10

				Local_u8Flag = 1;
    6350:	81 e0       	ldi	r24, 0x01	; 1
    6352:	8f 87       	std	Y+15, r24	; 0x0f
    6354:	07 c0       	rjmp	.+14     	; 0x6364 <KPD_u8GetPressedKey+0x1a4>

	for (Local_u8Row = 0; Local_u8Row <= 3; Local_u8Row++) {

		DIO_ErrStateSetPinValue(KPD_PORT, KPD_u8RowsPins[Local_u8Row], DIO_Low);

		for (Local_u8Col = 0; Local_u8Col <= 3; Local_u8Col++) {
    6356:	8a 89       	ldd	r24, Y+18	; 0x12
    6358:	8f 5f       	subi	r24, 0xFF	; 255
    635a:	8a 8b       	std	Y+18, r24	; 0x12
    635c:	8a 89       	ldd	r24, Y+18	; 0x12
    635e:	84 30       	cpi	r24, 0x04	; 4
    6360:	08 f4       	brcc	.+2      	; 0x6364 <KPD_u8GetPressedKey+0x1a4>
    6362:	4c cf       	rjmp	.-360    	; 0x61fc <KPD_u8GetPressedKey+0x3c>

			}
		}

		// Reseting the previous Row
		DIO_ErrStateSetPinValue(KPD_PORT, KPD_u8RowsPins[Local_u8Row],DIO_High);
    6364:	89 89       	ldd	r24, Y+17	; 0x11
    6366:	88 2f       	mov	r24, r24
    6368:	90 e0       	ldi	r25, 0x00	; 0
    636a:	fc 01       	movw	r30, r24
    636c:	ec 57       	subi	r30, 0x7C	; 124
    636e:	fe 4f       	sbci	r31, 0xFE	; 254
    6370:	90 81       	ld	r25, Z
    6372:	82 e0       	ldi	r24, 0x02	; 2
    6374:	69 2f       	mov	r22, r25
    6376:	41 e0       	ldi	r20, 0x01	; 1
    6378:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>

		// if we found the pressed sw will get out the function
		if (1 == Local_u8Flag) {
    637c:	8f 85       	ldd	r24, Y+15	; 0x0f
    637e:	81 30       	cpi	r24, 0x01	; 1
    6380:	39 f0       	breq	.+14     	; 0x6390 <KPD_u8GetPressedKey+0x1d0>
	u8 Local_u8Col, Local_u8Row;
	u8 Local_u8Sw = KPD_u8KEY_NOT_PRESSED;
	u8 Local_u8Flag = 0;
	u8 val = 0;

	for (Local_u8Row = 0; Local_u8Row <= 3; Local_u8Row++) {
    6382:	89 89       	ldd	r24, Y+17	; 0x11
    6384:	8f 5f       	subi	r24, 0xFF	; 255
    6386:	89 8b       	std	Y+17, r24	; 0x11
    6388:	89 89       	ldd	r24, Y+17	; 0x11
    638a:	84 30       	cpi	r24, 0x04	; 4
    638c:	08 f4       	brcc	.+2      	; 0x6390 <KPD_u8GetPressedKey+0x1d0>
    638e:	28 cf       	rjmp	.-432    	; 0x61e0 <KPD_u8GetPressedKey+0x20>
		if (1 == Local_u8Flag) {
			break;
		}

	}
	return (Local_u8Sw);
    6390:	88 89       	ldd	r24, Y+16	; 0x10
}	
    6392:	63 96       	adiw	r28, 0x13	; 19
    6394:	0f b6       	in	r0, 0x3f	; 63
    6396:	f8 94       	cli
    6398:	de bf       	out	0x3e, r29	; 62
    639a:	0f be       	out	0x3f, r0	; 63
    639c:	cd bf       	out	0x3d, r28	; 61
    639e:	cf 91       	pop	r28
    63a0:	df 91       	pop	r29
    63a2:	08 95       	ret

000063a4 <Motor_voidInit>:


#include "DC_Motor_Interface.h"

void Motor_voidInit(DC_motor_Info * motor_info)
{
    63a4:	df 93       	push	r29
    63a6:	cf 93       	push	r28
    63a8:	00 d0       	rcall	.+0      	; 0x63aa <Motor_voidInit+0x6>
    63aa:	cd b7       	in	r28, 0x3d	; 61
    63ac:	de b7       	in	r29, 0x3e	; 62
    63ae:	9a 83       	std	Y+2, r25	; 0x02
    63b0:	89 83       	std	Y+1, r24	; 0x01
	DIO_ErrStateSetPinDirection(motor_info->GP0,motor_info->P0,DIO_Output);
    63b2:	e9 81       	ldd	r30, Y+1	; 0x01
    63b4:	fa 81       	ldd	r31, Y+2	; 0x02
    63b6:	80 81       	ld	r24, Z
    63b8:	e9 81       	ldd	r30, Y+1	; 0x01
    63ba:	fa 81       	ldd	r31, Y+2	; 0x02
    63bc:	91 81       	ldd	r25, Z+1	; 0x01
    63be:	69 2f       	mov	r22, r25
    63c0:	41 e0       	ldi	r20, 0x01	; 1
    63c2:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(motor_info->GP1,motor_info->P1,DIO_Output);
    63c6:	e9 81       	ldd	r30, Y+1	; 0x01
    63c8:	fa 81       	ldd	r31, Y+2	; 0x02
    63ca:	82 81       	ldd	r24, Z+2	; 0x02
    63cc:	e9 81       	ldd	r30, Y+1	; 0x01
    63ce:	fa 81       	ldd	r31, Y+2	; 0x02
    63d0:	93 81       	ldd	r25, Z+3	; 0x03
    63d2:	69 2f       	mov	r22, r25
    63d4:	41 e0       	ldi	r20, 0x01	; 1
    63d6:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(DIO_GroupB,Pin3,DIO_Output);
    63da:	81 e0       	ldi	r24, 0x01	; 1
    63dc:	63 e0       	ldi	r22, 0x03	; 3
    63de:	41 e0       	ldi	r20, 0x01	; 1
    63e0:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_ErrStateSetPinDirection>
	Timer0_voidInit();
    63e4:	0e 94 9b 09 	call	0x1336	; 0x1336 <Timer0_voidInit>
	//Timer0_voidSetPin_softPWM(motor_info->GP0,motor_info->P0);
}
    63e8:	0f 90       	pop	r0
    63ea:	0f 90       	pop	r0
    63ec:	cf 91       	pop	r28
    63ee:	df 91       	pop	r29
    63f0:	08 95       	ret

000063f2 <Motor_voidDirCtrl>:

void Motor_voidDirCtrl(DC_motor_Dir dir,DC_motor_Info * motor_info)
{
    63f2:	df 93       	push	r29
    63f4:	cf 93       	push	r28
    63f6:	00 d0       	rcall	.+0      	; 0x63f8 <Motor_voidDirCtrl+0x6>
    63f8:	0f 92       	push	r0
    63fa:	cd b7       	in	r28, 0x3d	; 61
    63fc:	de b7       	in	r29, 0x3e	; 62
    63fe:	89 83       	std	Y+1, r24	; 0x01
    6400:	7b 83       	std	Y+3, r23	; 0x03
    6402:	6a 83       	std	Y+2, r22	; 0x02
	if(dir == RightDir)
    6404:	89 81       	ldd	r24, Y+1	; 0x01
    6406:	88 23       	and	r24, r24
    6408:	a1 f4       	brne	.+40     	; 0x6432 <Motor_voidDirCtrl+0x40>
	{
		DIO_ErrStateSetPinValue(motor_info->GP0,motor_info->P0,DIO_High);
    640a:	ea 81       	ldd	r30, Y+2	; 0x02
    640c:	fb 81       	ldd	r31, Y+3	; 0x03
    640e:	80 81       	ld	r24, Z
    6410:	ea 81       	ldd	r30, Y+2	; 0x02
    6412:	fb 81       	ldd	r31, Y+3	; 0x03
    6414:	91 81       	ldd	r25, Z+1	; 0x01
    6416:	69 2f       	mov	r22, r25
    6418:	41 e0       	ldi	r20, 0x01	; 1
    641a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(motor_info->GP1,motor_info->P1,DIO_Low);
    641e:	ea 81       	ldd	r30, Y+2	; 0x02
    6420:	fb 81       	ldd	r31, Y+3	; 0x03
    6422:	82 81       	ldd	r24, Z+2	; 0x02
    6424:	ea 81       	ldd	r30, Y+2	; 0x02
    6426:	fb 81       	ldd	r31, Y+3	; 0x03
    6428:	93 81       	ldd	r25, Z+3	; 0x03
    642a:	69 2f       	mov	r22, r25
    642c:	40 e0       	ldi	r20, 0x00	; 0
    642e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	}
	if(dir == LeftDir)
    6432:	89 81       	ldd	r24, Y+1	; 0x01
    6434:	81 30       	cpi	r24, 0x01	; 1
    6436:	a1 f4       	brne	.+40     	; 0x6460 <Motor_voidDirCtrl+0x6e>
	{
		DIO_ErrStateSetPinValue(motor_info->GP0,motor_info->P0,DIO_Low);
    6438:	ea 81       	ldd	r30, Y+2	; 0x02
    643a:	fb 81       	ldd	r31, Y+3	; 0x03
    643c:	80 81       	ld	r24, Z
    643e:	ea 81       	ldd	r30, Y+2	; 0x02
    6440:	fb 81       	ldd	r31, Y+3	; 0x03
    6442:	91 81       	ldd	r25, Z+1	; 0x01
    6444:	69 2f       	mov	r22, r25
    6446:	40 e0       	ldi	r20, 0x00	; 0
    6448:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(motor_info->GP1,motor_info->P1,DIO_High);
    644c:	ea 81       	ldd	r30, Y+2	; 0x02
    644e:	fb 81       	ldd	r31, Y+3	; 0x03
    6450:	82 81       	ldd	r24, Z+2	; 0x02
    6452:	ea 81       	ldd	r30, Y+2	; 0x02
    6454:	fb 81       	ldd	r31, Y+3	; 0x03
    6456:	93 81       	ldd	r25, Z+3	; 0x03
    6458:	69 2f       	mov	r22, r25
    645a:	41 e0       	ldi	r20, 0x01	; 1
    645c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	}
}
    6460:	0f 90       	pop	r0
    6462:	0f 90       	pop	r0
    6464:	0f 90       	pop	r0
    6466:	cf 91       	pop	r28
    6468:	df 91       	pop	r29
    646a:	08 95       	ret

0000646c <MOTOR_voidSpeed>:
void MOTOR_voidSpeed(u8 speed_percentage,DC_motor_Dir dir,DC_motor_Info * motor_info)
{
    646c:	df 93       	push	r29
    646e:	cf 93       	push	r28
    6470:	00 d0       	rcall	.+0      	; 0x6472 <MOTOR_voidSpeed+0x6>
    6472:	00 d0       	rcall	.+0      	; 0x6474 <MOTOR_voidSpeed+0x8>
    6474:	cd b7       	in	r28, 0x3d	; 61
    6476:	de b7       	in	r29, 0x3e	; 62
    6478:	89 83       	std	Y+1, r24	; 0x01
    647a:	6a 83       	std	Y+2, r22	; 0x02
    647c:	5c 83       	std	Y+4, r21	; 0x04
    647e:	4b 83       	std	Y+3, r20	; 0x03
	if(speed_percentage<101 && speed_percentage>-1)
    6480:	89 81       	ldd	r24, Y+1	; 0x01
    6482:	85 36       	cpi	r24, 0x65	; 101
    6484:	08 f0       	brcs	.+2      	; 0x6488 <MOTOR_voidSpeed+0x1c>
	{/*Continue*/}
	else{ speed_percentage = 0;}
    6486:	19 82       	std	Y+1, r1	; 0x01

	if(dir == RightDir)
    6488:	8a 81       	ldd	r24, Y+2	; 0x02
    648a:	88 23       	and	r24, r24
    648c:	69 f4       	brne	.+26     	; 0x64a8 <MOTOR_voidSpeed+0x3c>
	{
		//Timer0_voidSetDuty_percentage(speed_percentage,motor_info->GP0,motor_info->P0);
		Timer0_voidFastPWM_percentage(speed_percentage);
    648e:	89 81       	ldd	r24, Y+1	; 0x01
    6490:	0e 94 bd 0a 	call	0x157a	; 0x157a <Timer0_voidFastPWM_percentage>
		DIO_ErrStateSetPinValue(motor_info->GP1,motor_info->P1,DIO_Low);
    6494:	eb 81       	ldd	r30, Y+3	; 0x03
    6496:	fc 81       	ldd	r31, Y+4	; 0x04
    6498:	82 81       	ldd	r24, Z+2	; 0x02
    649a:	eb 81       	ldd	r30, Y+3	; 0x03
    649c:	fc 81       	ldd	r31, Y+4	; 0x04
    649e:	93 81       	ldd	r25, Z+3	; 0x03
    64a0:	69 2f       	mov	r22, r25
    64a2:	40 e0       	ldi	r20, 0x00	; 0
    64a4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DIO_ErrStateSetPinValue>
	}
	if(dir == LeftDir)
    64a8:	8a 81       	ldd	r24, Y+2	; 0x02
    64aa:	81 30       	cpi	r24, 0x01	; 1
    64ac:	71 f4       	brne	.+28     	; 0x64ca <MOTOR_voidSpeed+0x5e>
	{
		//DIO_ErrStateSetPinValue(motor_info->GP0,motor_info->P0,DIO_Low);
		Timer0_voidFastPWM_percentage(speed_percentage);
    64ae:	89 81       	ldd	r24, Y+1	; 0x01
    64b0:	0e 94 bd 0a 	call	0x157a	; 0x157a <Timer0_voidFastPWM_percentage>
		Timer0_voidSetDuty_percentage(speed_percentage,motor_info->GP1,motor_info->P1);
    64b4:	eb 81       	ldd	r30, Y+3	; 0x03
    64b6:	fc 81       	ldd	r31, Y+4	; 0x04
    64b8:	22 81       	ldd	r18, Z+2	; 0x02
    64ba:	eb 81       	ldd	r30, Y+3	; 0x03
    64bc:	fc 81       	ldd	r31, Y+4	; 0x04
    64be:	93 81       	ldd	r25, Z+3	; 0x03
    64c0:	89 81       	ldd	r24, Y+1	; 0x01
    64c2:	62 2f       	mov	r22, r18
    64c4:	49 2f       	mov	r20, r25
    64c6:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <Timer0_voidSetDuty_percentage>
	}

}
    64ca:	0f 90       	pop	r0
    64cc:	0f 90       	pop	r0
    64ce:	0f 90       	pop	r0
    64d0:	0f 90       	pop	r0
    64d2:	cf 91       	pop	r28
    64d4:	df 91       	pop	r29
    64d6:	08 95       	ret

000064d8 <stepper_Motor>:
#include "stepper_Motor.h"
//#include "../MCAL/DIO/DIO_Interface.h"
#include <avr/io.h>

void stepper_Motor(void)
{
    64d8:	df 93       	push	r29
    64da:	cf 93       	push	r28
    64dc:	cd b7       	in	r28, 0x3d	; 61
    64de:	de b7       	in	r29, 0x3e	; 62
    64e0:	ea 97       	sbiw	r28, 0x3a	; 58
    64e2:	0f b6       	in	r0, 0x3f	; 63
    64e4:	f8 94       	cli
    64e6:	de bf       	out	0x3e, r29	; 62
    64e8:	0f be       	out	0x3f, r0	; 63
    64ea:	cd bf       	out	0x3d, r28	; 61
	int period;
	DDRB = 0xF0;		/* Make PORTB lower pins as output */
    64ec:	e7 e3       	ldi	r30, 0x37	; 55
    64ee:	f0 e0       	ldi	r31, 0x00	; 0
    64f0:	80 ef       	ldi	r24, 0xF0	; 240
    64f2:	80 83       	st	Z, r24
	period = 100;		/* Set period in between two steps */
    64f4:	84 e6       	ldi	r24, 0x64	; 100
    64f6:	90 e0       	ldi	r25, 0x00	; 0
    64f8:	9a af       	std	Y+58, r25	; 0x3a
    64fa:	89 af       	std	Y+57, r24	; 0x39
	while (1)
	{
		PORTB = 0x10;
    64fc:	e8 e3       	ldi	r30, 0x38	; 56
    64fe:	f0 e0       	ldi	r31, 0x00	; 0
    6500:	80 e1       	ldi	r24, 0x10	; 16
    6502:	80 83       	st	Z, r24
		_delay_ms(period);
    6504:	89 ad       	ldd	r24, Y+57	; 0x39
    6506:	9a ad       	ldd	r25, Y+58	; 0x3a
    6508:	aa 27       	eor	r26, r26
    650a:	97 fd       	sbrc	r25, 7
    650c:	a0 95       	com	r26
    650e:	ba 2f       	mov	r27, r26
    6510:	bc 01       	movw	r22, r24
    6512:	cd 01       	movw	r24, r26
    6514:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    6518:	dc 01       	movw	r26, r24
    651a:	cb 01       	movw	r24, r22
    651c:	8d ab       	std	Y+53, r24	; 0x35
    651e:	9e ab       	std	Y+54, r25	; 0x36
    6520:	af ab       	std	Y+55, r26	; 0x37
    6522:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6524:	6d a9       	ldd	r22, Y+53	; 0x35
    6526:	7e a9       	ldd	r23, Y+54	; 0x36
    6528:	8f a9       	ldd	r24, Y+55	; 0x37
    652a:	98 ad       	ldd	r25, Y+56	; 0x38
    652c:	20 e0       	ldi	r18, 0x00	; 0
    652e:	30 e0       	ldi	r19, 0x00	; 0
    6530:	4a ef       	ldi	r20, 0xFA	; 250
    6532:	54 e4       	ldi	r21, 0x44	; 68
    6534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6538:	dc 01       	movw	r26, r24
    653a:	cb 01       	movw	r24, r22
    653c:	89 ab       	std	Y+49, r24	; 0x31
    653e:	9a ab       	std	Y+50, r25	; 0x32
    6540:	ab ab       	std	Y+51, r26	; 0x33
    6542:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6544:	69 a9       	ldd	r22, Y+49	; 0x31
    6546:	7a a9       	ldd	r23, Y+50	; 0x32
    6548:	8b a9       	ldd	r24, Y+51	; 0x33
    654a:	9c a9       	ldd	r25, Y+52	; 0x34
    654c:	20 e0       	ldi	r18, 0x00	; 0
    654e:	30 e0       	ldi	r19, 0x00	; 0
    6550:	40 e8       	ldi	r20, 0x80	; 128
    6552:	5f e3       	ldi	r21, 0x3F	; 63
    6554:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6558:	88 23       	and	r24, r24
    655a:	2c f4       	brge	.+10     	; 0x6566 <stepper_Motor+0x8e>
		__ticks = 1;
    655c:	81 e0       	ldi	r24, 0x01	; 1
    655e:	90 e0       	ldi	r25, 0x00	; 0
    6560:	98 ab       	std	Y+48, r25	; 0x30
    6562:	8f a7       	std	Y+47, r24	; 0x2f
    6564:	3f c0       	rjmp	.+126    	; 0x65e4 <stepper_Motor+0x10c>
	else if (__tmp > 65535)
    6566:	69 a9       	ldd	r22, Y+49	; 0x31
    6568:	7a a9       	ldd	r23, Y+50	; 0x32
    656a:	8b a9       	ldd	r24, Y+51	; 0x33
    656c:	9c a9       	ldd	r25, Y+52	; 0x34
    656e:	20 e0       	ldi	r18, 0x00	; 0
    6570:	3f ef       	ldi	r19, 0xFF	; 255
    6572:	4f e7       	ldi	r20, 0x7F	; 127
    6574:	57 e4       	ldi	r21, 0x47	; 71
    6576:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    657a:	18 16       	cp	r1, r24
    657c:	4c f5       	brge	.+82     	; 0x65d0 <stepper_Motor+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    657e:	6d a9       	ldd	r22, Y+53	; 0x35
    6580:	7e a9       	ldd	r23, Y+54	; 0x36
    6582:	8f a9       	ldd	r24, Y+55	; 0x37
    6584:	98 ad       	ldd	r25, Y+56	; 0x38
    6586:	20 e0       	ldi	r18, 0x00	; 0
    6588:	30 e0       	ldi	r19, 0x00	; 0
    658a:	40 e2       	ldi	r20, 0x20	; 32
    658c:	51 e4       	ldi	r21, 0x41	; 65
    658e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6592:	dc 01       	movw	r26, r24
    6594:	cb 01       	movw	r24, r22
    6596:	bc 01       	movw	r22, r24
    6598:	cd 01       	movw	r24, r26
    659a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    659e:	dc 01       	movw	r26, r24
    65a0:	cb 01       	movw	r24, r22
    65a2:	98 ab       	std	Y+48, r25	; 0x30
    65a4:	8f a7       	std	Y+47, r24	; 0x2f
    65a6:	0f c0       	rjmp	.+30     	; 0x65c6 <stepper_Motor+0xee>
    65a8:	88 ec       	ldi	r24, 0xC8	; 200
    65aa:	90 e0       	ldi	r25, 0x00	; 0
    65ac:	9e a7       	std	Y+46, r25	; 0x2e
    65ae:	8d a7       	std	Y+45, r24	; 0x2d
    65b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    65b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    65b4:	01 97       	sbiw	r24, 0x01	; 1
    65b6:	f1 f7       	brne	.-4      	; 0x65b4 <stepper_Motor+0xdc>
    65b8:	9e a7       	std	Y+46, r25	; 0x2e
    65ba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    65bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    65be:	98 a9       	ldd	r25, Y+48	; 0x30
    65c0:	01 97       	sbiw	r24, 0x01	; 1
    65c2:	98 ab       	std	Y+48, r25	; 0x30
    65c4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    65c8:	98 a9       	ldd	r25, Y+48	; 0x30
    65ca:	00 97       	sbiw	r24, 0x00	; 0
    65cc:	69 f7       	brne	.-38     	; 0x65a8 <stepper_Motor+0xd0>
    65ce:	14 c0       	rjmp	.+40     	; 0x65f8 <stepper_Motor+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65d0:	69 a9       	ldd	r22, Y+49	; 0x31
    65d2:	7a a9       	ldd	r23, Y+50	; 0x32
    65d4:	8b a9       	ldd	r24, Y+51	; 0x33
    65d6:	9c a9       	ldd	r25, Y+52	; 0x34
    65d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65dc:	dc 01       	movw	r26, r24
    65de:	cb 01       	movw	r24, r22
    65e0:	98 ab       	std	Y+48, r25	; 0x30
    65e2:	8f a7       	std	Y+47, r24	; 0x2f
    65e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    65e6:	98 a9       	ldd	r25, Y+48	; 0x30
    65e8:	9c a7       	std	Y+44, r25	; 0x2c
    65ea:	8b a7       	std	Y+43, r24	; 0x2b
    65ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    65ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    65f0:	01 97       	sbiw	r24, 0x01	; 1
    65f2:	f1 f7       	brne	.-4      	; 0x65f0 <stepper_Motor+0x118>
    65f4:	9c a7       	std	Y+44, r25	; 0x2c
    65f6:	8b a7       	std	Y+43, r24	; 0x2b
		PORTB = 0x20;
    65f8:	e8 e3       	ldi	r30, 0x38	; 56
    65fa:	f0 e0       	ldi	r31, 0x00	; 0
    65fc:	80 e2       	ldi	r24, 0x20	; 32
    65fe:	80 83       	st	Z, r24
		_delay_ms(period);
    6600:	89 ad       	ldd	r24, Y+57	; 0x39
    6602:	9a ad       	ldd	r25, Y+58	; 0x3a
    6604:	aa 27       	eor	r26, r26
    6606:	97 fd       	sbrc	r25, 7
    6608:	a0 95       	com	r26
    660a:	ba 2f       	mov	r27, r26
    660c:	bc 01       	movw	r22, r24
    660e:	cd 01       	movw	r24, r26
    6610:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    6614:	dc 01       	movw	r26, r24
    6616:	cb 01       	movw	r24, r22
    6618:	8f a3       	std	Y+39, r24	; 0x27
    661a:	98 a7       	std	Y+40, r25	; 0x28
    661c:	a9 a7       	std	Y+41, r26	; 0x29
    661e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6620:	6f a1       	ldd	r22, Y+39	; 0x27
    6622:	78 a5       	ldd	r23, Y+40	; 0x28
    6624:	89 a5       	ldd	r24, Y+41	; 0x29
    6626:	9a a5       	ldd	r25, Y+42	; 0x2a
    6628:	20 e0       	ldi	r18, 0x00	; 0
    662a:	30 e0       	ldi	r19, 0x00	; 0
    662c:	4a ef       	ldi	r20, 0xFA	; 250
    662e:	54 e4       	ldi	r21, 0x44	; 68
    6630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6634:	dc 01       	movw	r26, r24
    6636:	cb 01       	movw	r24, r22
    6638:	8b a3       	std	Y+35, r24	; 0x23
    663a:	9c a3       	std	Y+36, r25	; 0x24
    663c:	ad a3       	std	Y+37, r26	; 0x25
    663e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6640:	6b a1       	ldd	r22, Y+35	; 0x23
    6642:	7c a1       	ldd	r23, Y+36	; 0x24
    6644:	8d a1       	ldd	r24, Y+37	; 0x25
    6646:	9e a1       	ldd	r25, Y+38	; 0x26
    6648:	20 e0       	ldi	r18, 0x00	; 0
    664a:	30 e0       	ldi	r19, 0x00	; 0
    664c:	40 e8       	ldi	r20, 0x80	; 128
    664e:	5f e3       	ldi	r21, 0x3F	; 63
    6650:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6654:	88 23       	and	r24, r24
    6656:	2c f4       	brge	.+10     	; 0x6662 <stepper_Motor+0x18a>
		__ticks = 1;
    6658:	81 e0       	ldi	r24, 0x01	; 1
    665a:	90 e0       	ldi	r25, 0x00	; 0
    665c:	9a a3       	std	Y+34, r25	; 0x22
    665e:	89 a3       	std	Y+33, r24	; 0x21
    6660:	3f c0       	rjmp	.+126    	; 0x66e0 <stepper_Motor+0x208>
	else if (__tmp > 65535)
    6662:	6b a1       	ldd	r22, Y+35	; 0x23
    6664:	7c a1       	ldd	r23, Y+36	; 0x24
    6666:	8d a1       	ldd	r24, Y+37	; 0x25
    6668:	9e a1       	ldd	r25, Y+38	; 0x26
    666a:	20 e0       	ldi	r18, 0x00	; 0
    666c:	3f ef       	ldi	r19, 0xFF	; 255
    666e:	4f e7       	ldi	r20, 0x7F	; 127
    6670:	57 e4       	ldi	r21, 0x47	; 71
    6672:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6676:	18 16       	cp	r1, r24
    6678:	4c f5       	brge	.+82     	; 0x66cc <stepper_Motor+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    667a:	6f a1       	ldd	r22, Y+39	; 0x27
    667c:	78 a5       	ldd	r23, Y+40	; 0x28
    667e:	89 a5       	ldd	r24, Y+41	; 0x29
    6680:	9a a5       	ldd	r25, Y+42	; 0x2a
    6682:	20 e0       	ldi	r18, 0x00	; 0
    6684:	30 e0       	ldi	r19, 0x00	; 0
    6686:	40 e2       	ldi	r20, 0x20	; 32
    6688:	51 e4       	ldi	r21, 0x41	; 65
    668a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    668e:	dc 01       	movw	r26, r24
    6690:	cb 01       	movw	r24, r22
    6692:	bc 01       	movw	r22, r24
    6694:	cd 01       	movw	r24, r26
    6696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    669a:	dc 01       	movw	r26, r24
    669c:	cb 01       	movw	r24, r22
    669e:	9a a3       	std	Y+34, r25	; 0x22
    66a0:	89 a3       	std	Y+33, r24	; 0x21
    66a2:	0f c0       	rjmp	.+30     	; 0x66c2 <stepper_Motor+0x1ea>
    66a4:	88 ec       	ldi	r24, 0xC8	; 200
    66a6:	90 e0       	ldi	r25, 0x00	; 0
    66a8:	98 a3       	std	Y+32, r25	; 0x20
    66aa:	8f 8f       	std	Y+31, r24	; 0x1f
    66ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    66ae:	98 a1       	ldd	r25, Y+32	; 0x20
    66b0:	01 97       	sbiw	r24, 0x01	; 1
    66b2:	f1 f7       	brne	.-4      	; 0x66b0 <stepper_Motor+0x1d8>
    66b4:	98 a3       	std	Y+32, r25	; 0x20
    66b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    66b8:	89 a1       	ldd	r24, Y+33	; 0x21
    66ba:	9a a1       	ldd	r25, Y+34	; 0x22
    66bc:	01 97       	sbiw	r24, 0x01	; 1
    66be:	9a a3       	std	Y+34, r25	; 0x22
    66c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    66c2:	89 a1       	ldd	r24, Y+33	; 0x21
    66c4:	9a a1       	ldd	r25, Y+34	; 0x22
    66c6:	00 97       	sbiw	r24, 0x00	; 0
    66c8:	69 f7       	brne	.-38     	; 0x66a4 <stepper_Motor+0x1cc>
    66ca:	14 c0       	rjmp	.+40     	; 0x66f4 <stepper_Motor+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    66cc:	6b a1       	ldd	r22, Y+35	; 0x23
    66ce:	7c a1       	ldd	r23, Y+36	; 0x24
    66d0:	8d a1       	ldd	r24, Y+37	; 0x25
    66d2:	9e a1       	ldd	r25, Y+38	; 0x26
    66d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    66d8:	dc 01       	movw	r26, r24
    66da:	cb 01       	movw	r24, r22
    66dc:	9a a3       	std	Y+34, r25	; 0x22
    66de:	89 a3       	std	Y+33, r24	; 0x21
    66e0:	89 a1       	ldd	r24, Y+33	; 0x21
    66e2:	9a a1       	ldd	r25, Y+34	; 0x22
    66e4:	9e 8f       	std	Y+30, r25	; 0x1e
    66e6:	8d 8f       	std	Y+29, r24	; 0x1d
    66e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    66ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    66ec:	01 97       	sbiw	r24, 0x01	; 1
    66ee:	f1 f7       	brne	.-4      	; 0x66ec <stepper_Motor+0x214>
    66f0:	9e 8f       	std	Y+30, r25	; 0x1e
    66f2:	8d 8f       	std	Y+29, r24	; 0x1d
		PORTB = 0x40;
    66f4:	e8 e3       	ldi	r30, 0x38	; 56
    66f6:	f0 e0       	ldi	r31, 0x00	; 0
    66f8:	80 e4       	ldi	r24, 0x40	; 64
    66fa:	80 83       	st	Z, r24
		_delay_ms(period);
    66fc:	89 ad       	ldd	r24, Y+57	; 0x39
    66fe:	9a ad       	ldd	r25, Y+58	; 0x3a
    6700:	aa 27       	eor	r26, r26
    6702:	97 fd       	sbrc	r25, 7
    6704:	a0 95       	com	r26
    6706:	ba 2f       	mov	r27, r26
    6708:	bc 01       	movw	r22, r24
    670a:	cd 01       	movw	r24, r26
    670c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    6710:	dc 01       	movw	r26, r24
    6712:	cb 01       	movw	r24, r22
    6714:	89 8f       	std	Y+25, r24	; 0x19
    6716:	9a 8f       	std	Y+26, r25	; 0x1a
    6718:	ab 8f       	std	Y+27, r26	; 0x1b
    671a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    671c:	69 8d       	ldd	r22, Y+25	; 0x19
    671e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6720:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6722:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6724:	20 e0       	ldi	r18, 0x00	; 0
    6726:	30 e0       	ldi	r19, 0x00	; 0
    6728:	4a ef       	ldi	r20, 0xFA	; 250
    672a:	54 e4       	ldi	r21, 0x44	; 68
    672c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6730:	dc 01       	movw	r26, r24
    6732:	cb 01       	movw	r24, r22
    6734:	8d 8b       	std	Y+21, r24	; 0x15
    6736:	9e 8b       	std	Y+22, r25	; 0x16
    6738:	af 8b       	std	Y+23, r26	; 0x17
    673a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    673c:	6d 89       	ldd	r22, Y+21	; 0x15
    673e:	7e 89       	ldd	r23, Y+22	; 0x16
    6740:	8f 89       	ldd	r24, Y+23	; 0x17
    6742:	98 8d       	ldd	r25, Y+24	; 0x18
    6744:	20 e0       	ldi	r18, 0x00	; 0
    6746:	30 e0       	ldi	r19, 0x00	; 0
    6748:	40 e8       	ldi	r20, 0x80	; 128
    674a:	5f e3       	ldi	r21, 0x3F	; 63
    674c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6750:	88 23       	and	r24, r24
    6752:	2c f4       	brge	.+10     	; 0x675e <stepper_Motor+0x286>
		__ticks = 1;
    6754:	81 e0       	ldi	r24, 0x01	; 1
    6756:	90 e0       	ldi	r25, 0x00	; 0
    6758:	9c 8b       	std	Y+20, r25	; 0x14
    675a:	8b 8b       	std	Y+19, r24	; 0x13
    675c:	3f c0       	rjmp	.+126    	; 0x67dc <stepper_Motor+0x304>
	else if (__tmp > 65535)
    675e:	6d 89       	ldd	r22, Y+21	; 0x15
    6760:	7e 89       	ldd	r23, Y+22	; 0x16
    6762:	8f 89       	ldd	r24, Y+23	; 0x17
    6764:	98 8d       	ldd	r25, Y+24	; 0x18
    6766:	20 e0       	ldi	r18, 0x00	; 0
    6768:	3f ef       	ldi	r19, 0xFF	; 255
    676a:	4f e7       	ldi	r20, 0x7F	; 127
    676c:	57 e4       	ldi	r21, 0x47	; 71
    676e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6772:	18 16       	cp	r1, r24
    6774:	4c f5       	brge	.+82     	; 0x67c8 <stepper_Motor+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6776:	69 8d       	ldd	r22, Y+25	; 0x19
    6778:	7a 8d       	ldd	r23, Y+26	; 0x1a
    677a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    677c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    677e:	20 e0       	ldi	r18, 0x00	; 0
    6780:	30 e0       	ldi	r19, 0x00	; 0
    6782:	40 e2       	ldi	r20, 0x20	; 32
    6784:	51 e4       	ldi	r21, 0x41	; 65
    6786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    678a:	dc 01       	movw	r26, r24
    678c:	cb 01       	movw	r24, r22
    678e:	bc 01       	movw	r22, r24
    6790:	cd 01       	movw	r24, r26
    6792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6796:	dc 01       	movw	r26, r24
    6798:	cb 01       	movw	r24, r22
    679a:	9c 8b       	std	Y+20, r25	; 0x14
    679c:	8b 8b       	std	Y+19, r24	; 0x13
    679e:	0f c0       	rjmp	.+30     	; 0x67be <stepper_Motor+0x2e6>
    67a0:	88 ec       	ldi	r24, 0xC8	; 200
    67a2:	90 e0       	ldi	r25, 0x00	; 0
    67a4:	9a 8b       	std	Y+18, r25	; 0x12
    67a6:	89 8b       	std	Y+17, r24	; 0x11
    67a8:	89 89       	ldd	r24, Y+17	; 0x11
    67aa:	9a 89       	ldd	r25, Y+18	; 0x12
    67ac:	01 97       	sbiw	r24, 0x01	; 1
    67ae:	f1 f7       	brne	.-4      	; 0x67ac <stepper_Motor+0x2d4>
    67b0:	9a 8b       	std	Y+18, r25	; 0x12
    67b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67b4:	8b 89       	ldd	r24, Y+19	; 0x13
    67b6:	9c 89       	ldd	r25, Y+20	; 0x14
    67b8:	01 97       	sbiw	r24, 0x01	; 1
    67ba:	9c 8b       	std	Y+20, r25	; 0x14
    67bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67be:	8b 89       	ldd	r24, Y+19	; 0x13
    67c0:	9c 89       	ldd	r25, Y+20	; 0x14
    67c2:	00 97       	sbiw	r24, 0x00	; 0
    67c4:	69 f7       	brne	.-38     	; 0x67a0 <stepper_Motor+0x2c8>
    67c6:	14 c0       	rjmp	.+40     	; 0x67f0 <stepper_Motor+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67c8:	6d 89       	ldd	r22, Y+21	; 0x15
    67ca:	7e 89       	ldd	r23, Y+22	; 0x16
    67cc:	8f 89       	ldd	r24, Y+23	; 0x17
    67ce:	98 8d       	ldd	r25, Y+24	; 0x18
    67d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67d4:	dc 01       	movw	r26, r24
    67d6:	cb 01       	movw	r24, r22
    67d8:	9c 8b       	std	Y+20, r25	; 0x14
    67da:	8b 8b       	std	Y+19, r24	; 0x13
    67dc:	8b 89       	ldd	r24, Y+19	; 0x13
    67de:	9c 89       	ldd	r25, Y+20	; 0x14
    67e0:	98 8b       	std	Y+16, r25	; 0x10
    67e2:	8f 87       	std	Y+15, r24	; 0x0f
    67e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    67e6:	98 89       	ldd	r25, Y+16	; 0x10
    67e8:	01 97       	sbiw	r24, 0x01	; 1
    67ea:	f1 f7       	brne	.-4      	; 0x67e8 <stepper_Motor+0x310>
    67ec:	98 8b       	std	Y+16, r25	; 0x10
    67ee:	8f 87       	std	Y+15, r24	; 0x0f
		PORTB = 0x80;
    67f0:	e8 e3       	ldi	r30, 0x38	; 56
    67f2:	f0 e0       	ldi	r31, 0x00	; 0
    67f4:	80 e8       	ldi	r24, 0x80	; 128
    67f6:	80 83       	st	Z, r24
		_delay_ms(period);
    67f8:	89 ad       	ldd	r24, Y+57	; 0x39
    67fa:	9a ad       	ldd	r25, Y+58	; 0x3a
    67fc:	aa 27       	eor	r26, r26
    67fe:	97 fd       	sbrc	r25, 7
    6800:	a0 95       	com	r26
    6802:	ba 2f       	mov	r27, r26
    6804:	bc 01       	movw	r22, r24
    6806:	cd 01       	movw	r24, r26
    6808:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    680c:	dc 01       	movw	r26, r24
    680e:	cb 01       	movw	r24, r22
    6810:	8b 87       	std	Y+11, r24	; 0x0b
    6812:	9c 87       	std	Y+12, r25	; 0x0c
    6814:	ad 87       	std	Y+13, r26	; 0x0d
    6816:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6818:	6b 85       	ldd	r22, Y+11	; 0x0b
    681a:	7c 85       	ldd	r23, Y+12	; 0x0c
    681c:	8d 85       	ldd	r24, Y+13	; 0x0d
    681e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6820:	20 e0       	ldi	r18, 0x00	; 0
    6822:	30 e0       	ldi	r19, 0x00	; 0
    6824:	4a ef       	ldi	r20, 0xFA	; 250
    6826:	54 e4       	ldi	r21, 0x44	; 68
    6828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    682c:	dc 01       	movw	r26, r24
    682e:	cb 01       	movw	r24, r22
    6830:	8f 83       	std	Y+7, r24	; 0x07
    6832:	98 87       	std	Y+8, r25	; 0x08
    6834:	a9 87       	std	Y+9, r26	; 0x09
    6836:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6838:	6f 81       	ldd	r22, Y+7	; 0x07
    683a:	78 85       	ldd	r23, Y+8	; 0x08
    683c:	89 85       	ldd	r24, Y+9	; 0x09
    683e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6840:	20 e0       	ldi	r18, 0x00	; 0
    6842:	30 e0       	ldi	r19, 0x00	; 0
    6844:	40 e8       	ldi	r20, 0x80	; 128
    6846:	5f e3       	ldi	r21, 0x3F	; 63
    6848:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    684c:	88 23       	and	r24, r24
    684e:	2c f4       	brge	.+10     	; 0x685a <stepper_Motor+0x382>
		__ticks = 1;
    6850:	81 e0       	ldi	r24, 0x01	; 1
    6852:	90 e0       	ldi	r25, 0x00	; 0
    6854:	9e 83       	std	Y+6, r25	; 0x06
    6856:	8d 83       	std	Y+5, r24	; 0x05
    6858:	3f c0       	rjmp	.+126    	; 0x68d8 <stepper_Motor+0x400>
	else if (__tmp > 65535)
    685a:	6f 81       	ldd	r22, Y+7	; 0x07
    685c:	78 85       	ldd	r23, Y+8	; 0x08
    685e:	89 85       	ldd	r24, Y+9	; 0x09
    6860:	9a 85       	ldd	r25, Y+10	; 0x0a
    6862:	20 e0       	ldi	r18, 0x00	; 0
    6864:	3f ef       	ldi	r19, 0xFF	; 255
    6866:	4f e7       	ldi	r20, 0x7F	; 127
    6868:	57 e4       	ldi	r21, 0x47	; 71
    686a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    686e:	18 16       	cp	r1, r24
    6870:	4c f5       	brge	.+82     	; 0x68c4 <stepper_Motor+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6872:	6b 85       	ldd	r22, Y+11	; 0x0b
    6874:	7c 85       	ldd	r23, Y+12	; 0x0c
    6876:	8d 85       	ldd	r24, Y+13	; 0x0d
    6878:	9e 85       	ldd	r25, Y+14	; 0x0e
    687a:	20 e0       	ldi	r18, 0x00	; 0
    687c:	30 e0       	ldi	r19, 0x00	; 0
    687e:	40 e2       	ldi	r20, 0x20	; 32
    6880:	51 e4       	ldi	r21, 0x41	; 65
    6882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6886:	dc 01       	movw	r26, r24
    6888:	cb 01       	movw	r24, r22
    688a:	bc 01       	movw	r22, r24
    688c:	cd 01       	movw	r24, r26
    688e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6892:	dc 01       	movw	r26, r24
    6894:	cb 01       	movw	r24, r22
    6896:	9e 83       	std	Y+6, r25	; 0x06
    6898:	8d 83       	std	Y+5, r24	; 0x05
    689a:	0f c0       	rjmp	.+30     	; 0x68ba <stepper_Motor+0x3e2>
    689c:	88 ec       	ldi	r24, 0xC8	; 200
    689e:	90 e0       	ldi	r25, 0x00	; 0
    68a0:	9c 83       	std	Y+4, r25	; 0x04
    68a2:	8b 83       	std	Y+3, r24	; 0x03
    68a4:	8b 81       	ldd	r24, Y+3	; 0x03
    68a6:	9c 81       	ldd	r25, Y+4	; 0x04
    68a8:	01 97       	sbiw	r24, 0x01	; 1
    68aa:	f1 f7       	brne	.-4      	; 0x68a8 <stepper_Motor+0x3d0>
    68ac:	9c 83       	std	Y+4, r25	; 0x04
    68ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68b0:	8d 81       	ldd	r24, Y+5	; 0x05
    68b2:	9e 81       	ldd	r25, Y+6	; 0x06
    68b4:	01 97       	sbiw	r24, 0x01	; 1
    68b6:	9e 83       	std	Y+6, r25	; 0x06
    68b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68ba:	8d 81       	ldd	r24, Y+5	; 0x05
    68bc:	9e 81       	ldd	r25, Y+6	; 0x06
    68be:	00 97       	sbiw	r24, 0x00	; 0
    68c0:	69 f7       	brne	.-38     	; 0x689c <stepper_Motor+0x3c4>
    68c2:	1c ce       	rjmp	.-968    	; 0x64fc <stepper_Motor+0x24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68c4:	6f 81       	ldd	r22, Y+7	; 0x07
    68c6:	78 85       	ldd	r23, Y+8	; 0x08
    68c8:	89 85       	ldd	r24, Y+9	; 0x09
    68ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    68cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68d0:	dc 01       	movw	r26, r24
    68d2:	cb 01       	movw	r24, r22
    68d4:	9e 83       	std	Y+6, r25	; 0x06
    68d6:	8d 83       	std	Y+5, r24	; 0x05
    68d8:	8d 81       	ldd	r24, Y+5	; 0x05
    68da:	9e 81       	ldd	r25, Y+6	; 0x06
    68dc:	9a 83       	std	Y+2, r25	; 0x02
    68de:	89 83       	std	Y+1, r24	; 0x01
    68e0:	89 81       	ldd	r24, Y+1	; 0x01
    68e2:	9a 81       	ldd	r25, Y+2	; 0x02
    68e4:	01 97       	sbiw	r24, 0x01	; 1
    68e6:	f1 f7       	brne	.-4      	; 0x68e4 <stepper_Motor+0x40c>
    68e8:	9a 83       	std	Y+2, r25	; 0x02
    68ea:	89 83       	std	Y+1, r24	; 0x01
    68ec:	07 ce       	rjmp	.-1010   	; 0x64fc <stepper_Motor+0x24>

000068ee <main>:
//#include "APP/Speed_Control.h"
//#include "APP/SPI_test.h"
//#include "APP/ADC_test.h"
#include "APP/stepper_Motor.h"
void main()
{
    68ee:	df 93       	push	r29
    68f0:	cf 93       	push	r28
    68f2:	cd b7       	in	r28, 0x3d	; 61
    68f4:	de b7       	in	r29, 0x3e	; 62
	//WDT_test();
	//servo_Motor();
	//Speed_Control();
	//SPI_test();
	//ADC_test();
	stepper_Motor();
    68f6:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <stepper_Motor>
}
    68fa:	cf 91       	pop	r28
    68fc:	df 91       	pop	r29
    68fe:	08 95       	ret

00006900 <__divmodhi4>:
    6900:	97 fb       	bst	r25, 7
    6902:	09 2e       	mov	r0, r25
    6904:	07 26       	eor	r0, r23
    6906:	0a d0       	rcall	.+20     	; 0x691c <__divmodhi4_neg1>
    6908:	77 fd       	sbrc	r23, 7
    690a:	04 d0       	rcall	.+8      	; 0x6914 <__divmodhi4_neg2>
    690c:	0c d0       	rcall	.+24     	; 0x6926 <__udivmodhi4>
    690e:	06 d0       	rcall	.+12     	; 0x691c <__divmodhi4_neg1>
    6910:	00 20       	and	r0, r0
    6912:	1a f4       	brpl	.+6      	; 0x691a <__divmodhi4_exit>

00006914 <__divmodhi4_neg2>:
    6914:	70 95       	com	r23
    6916:	61 95       	neg	r22
    6918:	7f 4f       	sbci	r23, 0xFF	; 255

0000691a <__divmodhi4_exit>:
    691a:	08 95       	ret

0000691c <__divmodhi4_neg1>:
    691c:	f6 f7       	brtc	.-4      	; 0x691a <__divmodhi4_exit>
    691e:	90 95       	com	r25
    6920:	81 95       	neg	r24
    6922:	9f 4f       	sbci	r25, 0xFF	; 255
    6924:	08 95       	ret

00006926 <__udivmodhi4>:
    6926:	aa 1b       	sub	r26, r26
    6928:	bb 1b       	sub	r27, r27
    692a:	51 e1       	ldi	r21, 0x11	; 17
    692c:	07 c0       	rjmp	.+14     	; 0x693c <__udivmodhi4_ep>

0000692e <__udivmodhi4_loop>:
    692e:	aa 1f       	adc	r26, r26
    6930:	bb 1f       	adc	r27, r27
    6932:	a6 17       	cp	r26, r22
    6934:	b7 07       	cpc	r27, r23
    6936:	10 f0       	brcs	.+4      	; 0x693c <__udivmodhi4_ep>
    6938:	a6 1b       	sub	r26, r22
    693a:	b7 0b       	sbc	r27, r23

0000693c <__udivmodhi4_ep>:
    693c:	88 1f       	adc	r24, r24
    693e:	99 1f       	adc	r25, r25
    6940:	5a 95       	dec	r21
    6942:	a9 f7       	brne	.-22     	; 0x692e <__udivmodhi4_loop>
    6944:	80 95       	com	r24
    6946:	90 95       	com	r25
    6948:	bc 01       	movw	r22, r24
    694a:	cd 01       	movw	r24, r26
    694c:	08 95       	ret

0000694e <__prologue_saves__>:
    694e:	2f 92       	push	r2
    6950:	3f 92       	push	r3
    6952:	4f 92       	push	r4
    6954:	5f 92       	push	r5
    6956:	6f 92       	push	r6
    6958:	7f 92       	push	r7
    695a:	8f 92       	push	r8
    695c:	9f 92       	push	r9
    695e:	af 92       	push	r10
    6960:	bf 92       	push	r11
    6962:	cf 92       	push	r12
    6964:	df 92       	push	r13
    6966:	ef 92       	push	r14
    6968:	ff 92       	push	r15
    696a:	0f 93       	push	r16
    696c:	1f 93       	push	r17
    696e:	cf 93       	push	r28
    6970:	df 93       	push	r29
    6972:	cd b7       	in	r28, 0x3d	; 61
    6974:	de b7       	in	r29, 0x3e	; 62
    6976:	ca 1b       	sub	r28, r26
    6978:	db 0b       	sbc	r29, r27
    697a:	0f b6       	in	r0, 0x3f	; 63
    697c:	f8 94       	cli
    697e:	de bf       	out	0x3e, r29	; 62
    6980:	0f be       	out	0x3f, r0	; 63
    6982:	cd bf       	out	0x3d, r28	; 61
    6984:	09 94       	ijmp

00006986 <__epilogue_restores__>:
    6986:	2a 88       	ldd	r2, Y+18	; 0x12
    6988:	39 88       	ldd	r3, Y+17	; 0x11
    698a:	48 88       	ldd	r4, Y+16	; 0x10
    698c:	5f 84       	ldd	r5, Y+15	; 0x0f
    698e:	6e 84       	ldd	r6, Y+14	; 0x0e
    6990:	7d 84       	ldd	r7, Y+13	; 0x0d
    6992:	8c 84       	ldd	r8, Y+12	; 0x0c
    6994:	9b 84       	ldd	r9, Y+11	; 0x0b
    6996:	aa 84       	ldd	r10, Y+10	; 0x0a
    6998:	b9 84       	ldd	r11, Y+9	; 0x09
    699a:	c8 84       	ldd	r12, Y+8	; 0x08
    699c:	df 80       	ldd	r13, Y+7	; 0x07
    699e:	ee 80       	ldd	r14, Y+6	; 0x06
    69a0:	fd 80       	ldd	r15, Y+5	; 0x05
    69a2:	0c 81       	ldd	r16, Y+4	; 0x04
    69a4:	1b 81       	ldd	r17, Y+3	; 0x03
    69a6:	aa 81       	ldd	r26, Y+2	; 0x02
    69a8:	b9 81       	ldd	r27, Y+1	; 0x01
    69aa:	ce 0f       	add	r28, r30
    69ac:	d1 1d       	adc	r29, r1
    69ae:	0f b6       	in	r0, 0x3f	; 63
    69b0:	f8 94       	cli
    69b2:	de bf       	out	0x3e, r29	; 62
    69b4:	0f be       	out	0x3f, r0	; 63
    69b6:	cd bf       	out	0x3d, r28	; 61
    69b8:	ed 01       	movw	r28, r26
    69ba:	08 95       	ret

000069bc <_exit>:
    69bc:	f8 94       	cli

000069be <__stop_program>:
    69be:	ff cf       	rjmp	.-2      	; 0x69be <__stop_program>
