
Seg_7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000239c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  0000239c  00002410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000025b0  00000000  00000000  0000242c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001f2a  00000000  00000000  000049dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00006906  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00006a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00006bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00009d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000acc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000ae40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000b102  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b990  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 8c 11 	call	0x2318	; 0x2318 <main>
      7a:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 95 11 	jmp	0x232a	; 0x232a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 95 11 	jmp	0x232a	; 0x232a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 a5 11 	jmp	0x234a	; 0x234a <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_ErrStateSetPinDirection>:
/* Date   : 24 MAR 2023                            */
/***************************************************/
#include "DIO_Interface.h"

ErrState  DIO_ErrStateSetPinDirection(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber,DIO_DirectionState Copy_DirectionState)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	28 97       	sbiw	r28, 0x08	; 8
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	6a 83       	std	Y+2, r22	; 0x02
     ca6:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_PinNumber<=Pin7 && Copy_PinNumber>=Pin0)
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	88 30       	cpi	r24, 0x08	; 8
     cac:	08 f0       	brcs	.+2      	; 0xcb0 <DIO_ErrStateSetPinDirection+0x22>
     cae:	f6 c0       	rjmp	.+492    	; 0xe9c <DIO_ErrStateSetPinDirection+0x20e>
	{
		/*Input-> write Zero DDR (CLR) */
		if (Copy_DirectionState == DIO_Input )
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	88 23       	and	r24, r24
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <DIO_ErrStateSetPinDirection+0x2a>
     cb6:	77 c0       	rjmp	.+238    	; 0xda6 <DIO_ErrStateSetPinDirection+0x118>
		{
			switch(Copy_GroupNumber){
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	38 87       	std	Y+8, r19	; 0x08
     cc0:	2f 83       	std	Y+7, r18	; 0x07
     cc2:	8f 81       	ldd	r24, Y+7	; 0x07
     cc4:	98 85       	ldd	r25, Y+8	; 0x08
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	91 05       	cpc	r25, r1
     cca:	59 f1       	breq	.+86     	; 0xd22 <DIO_ErrStateSetPinDirection+0x94>
     ccc:	2f 81       	ldd	r18, Y+7	; 0x07
     cce:	38 85       	ldd	r19, Y+8	; 0x08
     cd0:	22 30       	cpi	r18, 0x02	; 2
     cd2:	31 05       	cpc	r19, r1
     cd4:	2c f4       	brge	.+10     	; 0xce0 <DIO_ErrStateSetPinDirection+0x52>
     cd6:	8f 81       	ldd	r24, Y+7	; 0x07
     cd8:	98 85       	ldd	r25, Y+8	; 0x08
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	69 f0       	breq	.+26     	; 0xcf8 <DIO_ErrStateSetPinDirection+0x6a>
     cde:	60 c0       	rjmp	.+192    	; 0xda0 <DIO_ErrStateSetPinDirection+0x112>
     ce0:	2f 81       	ldd	r18, Y+7	; 0x07
     ce2:	38 85       	ldd	r19, Y+8	; 0x08
     ce4:	22 30       	cpi	r18, 0x02	; 2
     ce6:	31 05       	cpc	r19, r1
     ce8:	89 f1       	breq	.+98     	; 0xd4c <DIO_ErrStateSetPinDirection+0xbe>
     cea:	8f 81       	ldd	r24, Y+7	; 0x07
     cec:	98 85       	ldd	r25, Y+8	; 0x08
     cee:	83 30       	cpi	r24, 0x03	; 3
     cf0:	91 05       	cpc	r25, r1
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <DIO_ErrStateSetPinDirection+0x68>
     cf4:	40 c0       	rjmp	.+128    	; 0xd76 <DIO_ErrStateSetPinDirection+0xe8>
     cf6:	54 c0       	rjmp	.+168    	; 0xda0 <DIO_ErrStateSetPinDirection+0x112>
			/*Group A*/
			case DIO_GroupA : CLR_BIT(DDRA_ITI , Copy_PinNumber ) ;
     cf8:	aa e3       	ldi	r26, 0x3A	; 58
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	ea e3       	ldi	r30, 0x3A	; 58
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	48 2f       	mov	r20, r24
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	02 2e       	mov	r0, r18
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <DIO_ErrStateSetPinDirection+0x88>
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	0a 94       	dec	r0
     d18:	e2 f7       	brpl	.-8      	; 0xd12 <DIO_ErrStateSetPinDirection+0x84>
     d1a:	80 95       	com	r24
     d1c:	84 23       	and	r24, r20
     d1e:	8c 93       	st	X, r24
     d20:	bb c0       	rjmp	.+374    	; 0xe98 <DIO_ErrStateSetPinDirection+0x20a>
			break ;
			/*Group B*/
			case DIO_GroupB : CLR_BIT(DDRB_ITI , Copy_PinNumber ) ;
     d22:	a7 e3       	ldi	r26, 0x37	; 55
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e7 e3       	ldi	r30, 0x37	; 55
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	48 2f       	mov	r20, r24
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	02 2e       	mov	r0, r18
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <DIO_ErrStateSetPinDirection+0xb2>
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	0a 94       	dec	r0
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <DIO_ErrStateSetPinDirection+0xae>
     d44:	80 95       	com	r24
     d46:	84 23       	and	r24, r20
     d48:	8c 93       	st	X, r24
     d4a:	a6 c0       	rjmp	.+332    	; 0xe98 <DIO_ErrStateSetPinDirection+0x20a>
			break ;
			/*Group C*/
			case DIO_GroupC : CLR_BIT(DDRC_ITI , Copy_PinNumber ) ;
     d4c:	a4 e3       	ldi	r26, 0x34	; 52
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e4 e3       	ldi	r30, 0x34	; 52
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	48 2f       	mov	r20, r24
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	02 2e       	mov	r0, r18
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <DIO_ErrStateSetPinDirection+0xdc>
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	0a 94       	dec	r0
     d6c:	e2 f7       	brpl	.-8      	; 0xd66 <DIO_ErrStateSetPinDirection+0xd8>
     d6e:	80 95       	com	r24
     d70:	84 23       	and	r24, r20
     d72:	8c 93       	st	X, r24
     d74:	91 c0       	rjmp	.+290    	; 0xe98 <DIO_ErrStateSetPinDirection+0x20a>
			break ;
			/*Group D*/
			case DIO_GroupD : CLR_BIT(DDRD_ITI , Copy_PinNumber ) ;
     d76:	a1 e3       	ldi	r26, 0x31	; 49
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e1 e3       	ldi	r30, 0x31	; 49
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	48 2f       	mov	r20, r24
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 2e       	mov	r0, r18
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <DIO_ErrStateSetPinDirection+0x106>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	0a 94       	dec	r0
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <DIO_ErrStateSetPinDirection+0x102>
     d98:	80 95       	com	r24
     d9a:	84 23       	and	r24, r20
     d9c:	8c 93       	st	X, r24
     d9e:	7c c0       	rjmp	.+248    	; 0xe98 <DIO_ErrStateSetPinDirection+0x20a>
			break ;
			/*Wrong*/
			default:
				return GroupError ;
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	9e 83       	std	Y+6, r25	; 0x06
     da4:	7d c0       	rjmp	.+250    	; 0xea0 <DIO_ErrStateSetPinDirection+0x212>


		}

		/*Output -> write DDR = one */
		else if (Copy_DirectionState == DIO_Output )
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	09 f0       	breq	.+2      	; 0xdae <DIO_ErrStateSetPinDirection+0x120>
     dac:	72 c0       	rjmp	.+228    	; 0xe92 <DIO_ErrStateSetPinDirection+0x204>
		{
			switch(Copy_GroupNumber){
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	3d 83       	std	Y+5, r19	; 0x05
     db6:	2c 83       	std	Y+4, r18	; 0x04
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	9d 81       	ldd	r25, Y+5	; 0x05
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	91 05       	cpc	r25, r1
     dc0:	49 f1       	breq	.+82     	; 0xe14 <DIO_ErrStateSetPinDirection+0x186>
     dc2:	2c 81       	ldd	r18, Y+4	; 0x04
     dc4:	3d 81       	ldd	r19, Y+5	; 0x05
     dc6:	22 30       	cpi	r18, 0x02	; 2
     dc8:	31 05       	cpc	r19, r1
     dca:	2c f4       	brge	.+10     	; 0xdd6 <DIO_ErrStateSetPinDirection+0x148>
     dcc:	8c 81       	ldd	r24, Y+4	; 0x04
     dce:	9d 81       	ldd	r25, Y+5	; 0x05
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	61 f0       	breq	.+24     	; 0xdec <DIO_ErrStateSetPinDirection+0x15e>
     dd4:	5b c0       	rjmp	.+182    	; 0xe8c <DIO_ErrStateSetPinDirection+0x1fe>
     dd6:	2c 81       	ldd	r18, Y+4	; 0x04
     dd8:	3d 81       	ldd	r19, Y+5	; 0x05
     dda:	22 30       	cpi	r18, 0x02	; 2
     ddc:	31 05       	cpc	r19, r1
     dde:	71 f1       	breq	.+92     	; 0xe3c <DIO_ErrStateSetPinDirection+0x1ae>
     de0:	8c 81       	ldd	r24, Y+4	; 0x04
     de2:	9d 81       	ldd	r25, Y+5	; 0x05
     de4:	83 30       	cpi	r24, 0x03	; 3
     de6:	91 05       	cpc	r25, r1
     de8:	e9 f1       	breq	.+122    	; 0xe64 <DIO_ErrStateSetPinDirection+0x1d6>
     dea:	50 c0       	rjmp	.+160    	; 0xe8c <DIO_ErrStateSetPinDirection+0x1fe>
			/*Group A*/
			case DIO_GroupA : SET_BIT(DDRA_ITI,Copy_PinNumber);break;
     dec:	aa e3       	ldi	r26, 0x3A	; 58
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	ea e3       	ldi	r30, 0x3A	; 58
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_ErrStateSetPinDirection+0x17c>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_ErrStateSetPinDirection+0x178>
     e0e:	84 2b       	or	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	42 c0       	rjmp	.+132    	; 0xe98 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group B*/
			case DIO_GroupB : SET_BIT(DDRB_ITI,Copy_PinNumber);break;
     e14:	a7 e3       	ldi	r26, 0x37	; 55
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e7 e3       	ldi	r30, 0x37	; 55
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_ErrStateSetPinDirection+0x1a4>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_ErrStateSetPinDirection+0x1a0>
     e36:	84 2b       	or	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	2e c0       	rjmp	.+92     	; 0xe98 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group C*/
			case DIO_GroupC : SET_BIT(DDRC_ITI,Copy_PinNumber);break;
     e3c:	a4 e3       	ldi	r26, 0x34	; 52
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e4 e3       	ldi	r30, 0x34	; 52
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_ErrStateSetPinDirection+0x1cc>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_ErrStateSetPinDirection+0x1c8>
     e5e:	84 2b       	or	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	1a c0       	rjmp	.+52     	; 0xe98 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group D*/
			case DIO_GroupD : SET_BIT(DDRD_ITI,Copy_PinNumber);break;
     e64:	a1 e3       	ldi	r26, 0x31	; 49
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e1 e3       	ldi	r30, 0x31	; 49
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_ErrStateSetPinDirection+0x1f4>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_ErrStateSetPinDirection+0x1f0>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	06 c0       	rjmp	.+12     	; 0xe98 <DIO_ErrStateSetPinDirection+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	07 c0       	rjmp	.+14     	; 0xea0 <DIO_ErrStateSetPinDirection+0x212>
			}
		}

		else
		{
			return DirectionError ;
     e92:	23 e0       	ldi	r18, 0x03	; 3
     e94:	2e 83       	std	Y+6, r18	; 0x06
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <DIO_ErrStateSetPinDirection+0x212>
		}

		return NoError ;
     e98:	1e 82       	std	Y+6, r1	; 0x06
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <DIO_ErrStateSetPinDirection+0x212>
	}
	else
	{
		return PinNumberError ;
     e9c:	32 e0       	ldi	r19, 0x02	; 2
     e9e:	3e 83       	std	Y+6, r19	; 0x06
     ea0:	8e 81       	ldd	r24, Y+6	; 0x06
	}
}
     ea2:	28 96       	adiw	r28, 0x08	; 8
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <DIO_ErrStateSetPinValue>:

ErrState  DIO_ErrStateSetPinValue(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber,DIO_ValueState Copy_ValueState)
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	28 97       	sbiw	r28, 0x08	; 8
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	89 83       	std	Y+1, r24	; 0x01
     eca:	6a 83       	std	Y+2, r22	; 0x02
     ecc:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_PinNumber<=Pin7 && Copy_PinNumber>=Pin0)
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	88 30       	cpi	r24, 0x08	; 8
     ed2:	08 f0       	brcs	.+2      	; 0xed6 <DIO_ErrStateSetPinValue+0x22>
     ed4:	f6 c0       	rjmp	.+492    	; 0x10c2 <DIO_ErrStateSetPinValue+0x20e>
	{
		/*Low-> write Zero Port (CLR) */
		if (Copy_ValueState == DIO_Low )
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	88 23       	and	r24, r24
     eda:	09 f0       	breq	.+2      	; 0xede <DIO_ErrStateSetPinValue+0x2a>
     edc:	77 c0       	rjmp	.+238    	; 0xfcc <DIO_ErrStateSetPinValue+0x118>
		{
			switch(Copy_GroupNumber){
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	38 87       	std	Y+8, r19	; 0x08
     ee6:	2f 83       	std	Y+7, r18	; 0x07
     ee8:	8f 81       	ldd	r24, Y+7	; 0x07
     eea:	98 85       	ldd	r25, Y+8	; 0x08
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	91 05       	cpc	r25, r1
     ef0:	59 f1       	breq	.+86     	; 0xf48 <DIO_ErrStateSetPinValue+0x94>
     ef2:	2f 81       	ldd	r18, Y+7	; 0x07
     ef4:	38 85       	ldd	r19, Y+8	; 0x08
     ef6:	22 30       	cpi	r18, 0x02	; 2
     ef8:	31 05       	cpc	r19, r1
     efa:	2c f4       	brge	.+10     	; 0xf06 <DIO_ErrStateSetPinValue+0x52>
     efc:	8f 81       	ldd	r24, Y+7	; 0x07
     efe:	98 85       	ldd	r25, Y+8	; 0x08
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	69 f0       	breq	.+26     	; 0xf1e <DIO_ErrStateSetPinValue+0x6a>
     f04:	60 c0       	rjmp	.+192    	; 0xfc6 <DIO_ErrStateSetPinValue+0x112>
     f06:	2f 81       	ldd	r18, Y+7	; 0x07
     f08:	38 85       	ldd	r19, Y+8	; 0x08
     f0a:	22 30       	cpi	r18, 0x02	; 2
     f0c:	31 05       	cpc	r19, r1
     f0e:	89 f1       	breq	.+98     	; 0xf72 <DIO_ErrStateSetPinValue+0xbe>
     f10:	8f 81       	ldd	r24, Y+7	; 0x07
     f12:	98 85       	ldd	r25, Y+8	; 0x08
     f14:	83 30       	cpi	r24, 0x03	; 3
     f16:	91 05       	cpc	r25, r1
     f18:	09 f4       	brne	.+2      	; 0xf1c <DIO_ErrStateSetPinValue+0x68>
     f1a:	40 c0       	rjmp	.+128    	; 0xf9c <DIO_ErrStateSetPinValue+0xe8>
     f1c:	54 c0       	rjmp	.+168    	; 0xfc6 <DIO_ErrStateSetPinValue+0x112>
			/*Group A*/
			case DIO_GroupA : CLR_BIT(PORTA_ITI , Copy_PinNumber ) ;break ;
     f1e:	ab e3       	ldi	r26, 0x3B	; 59
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	eb e3       	ldi	r30, 0x3B	; 59
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_ErrStateSetPinValue+0x88>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_ErrStateSetPinValue+0x84>
     f40:	80 95       	com	r24
     f42:	84 23       	and	r24, r20
     f44:	8c 93       	st	X, r24
     f46:	bb c0       	rjmp	.+374    	; 0x10be <DIO_ErrStateSetPinValue+0x20a>
			/*Group B*/
			case DIO_GroupB : CLR_BIT(PORTB_ITI , Copy_PinNumber ) ;break ;
     f48:	a8 e3       	ldi	r26, 0x38	; 56
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e8 e3       	ldi	r30, 0x38	; 56
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <DIO_ErrStateSetPinValue+0xb2>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <DIO_ErrStateSetPinValue+0xae>
     f6a:	80 95       	com	r24
     f6c:	84 23       	and	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	a6 c0       	rjmp	.+332    	; 0x10be <DIO_ErrStateSetPinValue+0x20a>
			/*Group C*/
			case DIO_GroupC : CLR_BIT(PORTC_ITI , Copy_PinNumber ) ;break ;
     f72:	a5 e3       	ldi	r26, 0x35	; 53
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e5 e3       	ldi	r30, 0x35	; 53
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_ErrStateSetPinValue+0xdc>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_ErrStateSetPinValue+0xd8>
     f94:	80 95       	com	r24
     f96:	84 23       	and	r24, r20
     f98:	8c 93       	st	X, r24
     f9a:	91 c0       	rjmp	.+290    	; 0x10be <DIO_ErrStateSetPinValue+0x20a>
			/*Group D*/
			case DIO_GroupD : CLR_BIT(PORTD_ITI , Copy_PinNumber ) ;break ;
     f9c:	a2 e3       	ldi	r26, 0x32	; 50
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e2 e3       	ldi	r30, 0x32	; 50
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 2e       	mov	r0, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <DIO_ErrStateSetPinValue+0x106>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <DIO_ErrStateSetPinValue+0x102>
     fbe:	80 95       	com	r24
     fc0:	84 23       	and	r24, r20
     fc2:	8c 93       	st	X, r24
     fc4:	7c c0       	rjmp	.+248    	; 0x10be <DIO_ErrStateSetPinValue+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	9e 83       	std	Y+6, r25	; 0x06
     fca:	7d c0       	rjmp	.+250    	; 0x10c6 <DIO_ErrStateSetPinValue+0x212>
			}
		}

		/*High -> write port = one */
		else if (Copy_ValueState == DIO_High )
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <DIO_ErrStateSetPinValue+0x120>
     fd2:	72 c0       	rjmp	.+228    	; 0x10b8 <DIO_ErrStateSetPinValue+0x204>
		{
			switch(Copy_GroupNumber){
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	3d 83       	std	Y+5, r19	; 0x05
     fdc:	2c 83       	std	Y+4, r18	; 0x04
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	91 05       	cpc	r25, r1
     fe6:	49 f1       	breq	.+82     	; 0x103a <DIO_ErrStateSetPinValue+0x186>
     fe8:	2c 81       	ldd	r18, Y+4	; 0x04
     fea:	3d 81       	ldd	r19, Y+5	; 0x05
     fec:	22 30       	cpi	r18, 0x02	; 2
     fee:	31 05       	cpc	r19, r1
     ff0:	2c f4       	brge	.+10     	; 0xffc <DIO_ErrStateSetPinValue+0x148>
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	9d 81       	ldd	r25, Y+5	; 0x05
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	61 f0       	breq	.+24     	; 0x1012 <DIO_ErrStateSetPinValue+0x15e>
     ffa:	5b c0       	rjmp	.+182    	; 0x10b2 <DIO_ErrStateSetPinValue+0x1fe>
     ffc:	2c 81       	ldd	r18, Y+4	; 0x04
     ffe:	3d 81       	ldd	r19, Y+5	; 0x05
    1000:	22 30       	cpi	r18, 0x02	; 2
    1002:	31 05       	cpc	r19, r1
    1004:	71 f1       	breq	.+92     	; 0x1062 <DIO_ErrStateSetPinValue+0x1ae>
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	9d 81       	ldd	r25, Y+5	; 0x05
    100a:	83 30       	cpi	r24, 0x03	; 3
    100c:	91 05       	cpc	r25, r1
    100e:	e9 f1       	breq	.+122    	; 0x108a <DIO_ErrStateSetPinValue+0x1d6>
    1010:	50 c0       	rjmp	.+160    	; 0x10b2 <DIO_ErrStateSetPinValue+0x1fe>
			/*Group A*/
			case DIO_GroupA : SET_BIT(PORTA_ITI,Copy_PinNumber);break;
    1012:	ab e3       	ldi	r26, 0x3B	; 59
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	eb e3       	ldi	r30, 0x3B	; 59
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_ErrStateSetPinValue+0x17c>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <DIO_ErrStateSetPinValue+0x178>
    1034:	84 2b       	or	r24, r20
    1036:	8c 93       	st	X, r24
    1038:	42 c0       	rjmp	.+132    	; 0x10be <DIO_ErrStateSetPinValue+0x20a>
			/*Group B*/
			case DIO_GroupB : SET_BIT(PORTB_ITI,Copy_PinNumber);break;
    103a:	a8 e3       	ldi	r26, 0x38	; 56
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e8 e3       	ldi	r30, 0x38	; 56
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_ErrStateSetPinValue+0x1a4>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <DIO_ErrStateSetPinValue+0x1a0>
    105c:	84 2b       	or	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	2e c0       	rjmp	.+92     	; 0x10be <DIO_ErrStateSetPinValue+0x20a>
			/*Group C*/
			case DIO_GroupC : SET_BIT(PORTC_ITI,Copy_PinNumber);break;
    1062:	a5 e3       	ldi	r26, 0x35	; 53
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e5 e3       	ldi	r30, 0x35	; 53
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_ErrStateSetPinValue+0x1cc>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_ErrStateSetPinValue+0x1c8>
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	1a c0       	rjmp	.+52     	; 0x10be <DIO_ErrStateSetPinValue+0x20a>
			/*Group D*/
			case DIO_GroupD : SET_BIT(PORTD_ITI,Copy_PinNumber);break;
    108a:	a2 e3       	ldi	r26, 0x32	; 50
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e2 e3       	ldi	r30, 0x32	; 50
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <DIO_ErrStateSetPinValue+0x1f4>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <DIO_ErrStateSetPinValue+0x1f0>
    10ac:	84 2b       	or	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	06 c0       	rjmp	.+12     	; 0x10be <DIO_ErrStateSetPinValue+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	9e 83       	std	Y+6, r25	; 0x06
    10b6:	07 c0       	rjmp	.+14     	; 0x10c6 <DIO_ErrStateSetPinValue+0x212>
			}
		}

		else
		{
			return DirectionError ;
    10b8:	23 e0       	ldi	r18, 0x03	; 3
    10ba:	2e 83       	std	Y+6, r18	; 0x06
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <DIO_ErrStateSetPinValue+0x212>
		}

		return NoError ;
    10be:	1e 82       	std	Y+6, r1	; 0x06
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_ErrStateSetPinValue+0x212>
	}
	else
	{
		return PinNumberError ;
    10c2:	32 e0       	ldi	r19, 0x02	; 2
    10c4:	3e 83       	std	Y+6, r19	; 0x06
    10c6:	8e 81       	ldd	r24, Y+6	; 0x06
	}

}
    10c8:	28 96       	adiw	r28, 0x08	; 8
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <DIO_ErrStateReadPinValue>:

ErrState  DIO_ErrStateReadPinValue(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber ,u8 *Result)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	27 97       	sbiw	r28, 0x07	; 7
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	6a 83       	std	Y+2, r22	; 0x02
    10f2:	5c 83       	std	Y+4, r21	; 0x04
    10f4:	4b 83       	std	Y+3, r20	; 0x03
	/*check on pin range from 0 to 7 */
	if (Copy_PinNumber>= Pin0 && Copy_PinNumber <=Pin7)
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	88 30       	cpi	r24, 0x08	; 8
    10fa:	08 f0       	brcs	.+2      	; 0x10fe <DIO_ErrStateReadPinValue+0x24>
    10fc:	76 c0       	rjmp	.+236    	; 0x11ea <DIO_ErrStateReadPinValue+0x110>
	{
		switch(Copy_GroupNumber)
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	3f 83       	std	Y+7, r19	; 0x07
    1106:	2e 83       	std	Y+6, r18	; 0x06
    1108:	4e 81       	ldd	r20, Y+6	; 0x06
    110a:	5f 81       	ldd	r21, Y+7	; 0x07
    110c:	41 30       	cpi	r20, 0x01	; 1
    110e:	51 05       	cpc	r21, r1
    1110:	59 f1       	breq	.+86     	; 0x1168 <DIO_ErrStateReadPinValue+0x8e>
    1112:	8e 81       	ldd	r24, Y+6	; 0x06
    1114:	9f 81       	ldd	r25, Y+7	; 0x07
    1116:	82 30       	cpi	r24, 0x02	; 2
    1118:	91 05       	cpc	r25, r1
    111a:	34 f4       	brge	.+12     	; 0x1128 <DIO_ErrStateReadPinValue+0x4e>
    111c:	2e 81       	ldd	r18, Y+6	; 0x06
    111e:	3f 81       	ldd	r19, Y+7	; 0x07
    1120:	21 15       	cp	r18, r1
    1122:	31 05       	cpc	r19, r1
    1124:	69 f0       	breq	.+26     	; 0x1140 <DIO_ErrStateReadPinValue+0x66>
    1126:	5c c0       	rjmp	.+184    	; 0x11e0 <DIO_ErrStateReadPinValue+0x106>
    1128:	4e 81       	ldd	r20, Y+6	; 0x06
    112a:	5f 81       	ldd	r21, Y+7	; 0x07
    112c:	42 30       	cpi	r20, 0x02	; 2
    112e:	51 05       	cpc	r21, r1
    1130:	79 f1       	breq	.+94     	; 0x1190 <DIO_ErrStateReadPinValue+0xb6>
    1132:	8e 81       	ldd	r24, Y+6	; 0x06
    1134:	9f 81       	ldd	r25, Y+7	; 0x07
    1136:	83 30       	cpi	r24, 0x03	; 3
    1138:	91 05       	cpc	r25, r1
    113a:	09 f4       	brne	.+2      	; 0x113e <DIO_ErrStateReadPinValue+0x64>
    113c:	3d c0       	rjmp	.+122    	; 0x11b8 <DIO_ErrStateReadPinValue+0xde>
    113e:	50 c0       	rjmp	.+160    	; 0x11e0 <DIO_ErrStateReadPinValue+0x106>
		{
		case DIO_GroupA: *Result=GET_BIT(PINA_ITI,Copy_PinNumber); break ;
    1140:	e9 e3       	ldi	r30, 0x39	; 57
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	88 2f       	mov	r24, r24
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a9 01       	movw	r20, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <DIO_ErrStateReadPinValue+0x7e>
    1154:	55 95       	asr	r21
    1156:	47 95       	ror	r20
    1158:	8a 95       	dec	r24
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <DIO_ErrStateReadPinValue+0x7a>
    115c:	ca 01       	movw	r24, r20
    115e:	81 70       	andi	r24, 0x01	; 1
    1160:	eb 81       	ldd	r30, Y+3	; 0x03
    1162:	fc 81       	ldd	r31, Y+4	; 0x04
    1164:	80 83       	st	Z, r24
    1166:	3f c0       	rjmp	.+126    	; 0x11e6 <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupB: *Result=GET_BIT(PINB_ITI,Copy_PinNumber); break ;
    1168:	e6 e3       	ldi	r30, 0x36	; 54
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	a9 01       	movw	r20, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_ErrStateReadPinValue+0xa6>
    117c:	55 95       	asr	r21
    117e:	47 95       	ror	r20
    1180:	8a 95       	dec	r24
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_ErrStateReadPinValue+0xa2>
    1184:	ca 01       	movw	r24, r20
    1186:	81 70       	andi	r24, 0x01	; 1
    1188:	eb 81       	ldd	r30, Y+3	; 0x03
    118a:	fc 81       	ldd	r31, Y+4	; 0x04
    118c:	80 83       	st	Z, r24
    118e:	2b c0       	rjmp	.+86     	; 0x11e6 <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupC: *Result=GET_BIT(PINC_ITI,Copy_PinNumber); break ;
    1190:	e3 e3       	ldi	r30, 0x33	; 51
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	a9 01       	movw	r20, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <DIO_ErrStateReadPinValue+0xce>
    11a4:	55 95       	asr	r21
    11a6:	47 95       	ror	r20
    11a8:	8a 95       	dec	r24
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <DIO_ErrStateReadPinValue+0xca>
    11ac:	ca 01       	movw	r24, r20
    11ae:	81 70       	andi	r24, 0x01	; 1
    11b0:	eb 81       	ldd	r30, Y+3	; 0x03
    11b2:	fc 81       	ldd	r31, Y+4	; 0x04
    11b4:	80 83       	st	Z, r24
    11b6:	17 c0       	rjmp	.+46     	; 0x11e6 <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupD: *Result=GET_BIT(PIND_ITI,Copy_PinNumber); break ;
    11b8:	e0 e3       	ldi	r30, 0x30	; 48
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	a9 01       	movw	r20, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_ErrStateReadPinValue+0xf6>
    11cc:	55 95       	asr	r21
    11ce:	47 95       	ror	r20
    11d0:	8a 95       	dec	r24
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_ErrStateReadPinValue+0xf2>
    11d4:	ca 01       	movw	r24, r20
    11d6:	81 70       	andi	r24, 0x01	; 1
    11d8:	eb 81       	ldd	r30, Y+3	; 0x03
    11da:	fc 81       	ldd	r31, Y+4	; 0x04
    11dc:	80 83       	st	Z, r24
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <DIO_ErrStateReadPinValue+0x10c>
		default:
			return GroupError ;
    11e0:	51 e0       	ldi	r21, 0x01	; 1
    11e2:	5d 83       	std	Y+5, r21	; 0x05
    11e4:	04 c0       	rjmp	.+8      	; 0x11ee <DIO_ErrStateReadPinValue+0x114>
		}
		return NoError ;
    11e6:	1d 82       	std	Y+5, r1	; 0x05
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <DIO_ErrStateReadPinValue+0x114>
	}
	else
	{
		return PinNumberError ;
    11ea:	82 e0       	ldi	r24, 0x02	; 2
    11ec:	8d 83       	std	Y+5, r24	; 0x05
    11ee:	8d 81       	ldd	r24, Y+5	; 0x05
	}

}
    11f0:	27 96       	adiw	r28, 0x07	; 7
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <DIO_ErrStateSetGroupDirection>:



//
ErrState  DIO_ErrStateSetGroupDirection(DIO_GroupNumber Copy_GroupNumber ,u8 Copy_DirectionState)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	00 d0       	rcall	.+0      	; 0x1208 <DIO_ErrStateSetGroupDirection+0x6>
    1208:	00 d0       	rcall	.+0      	; 0x120a <DIO_ErrStateSetGroupDirection+0x8>
    120a:	0f 92       	push	r0
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_DirectionState <= 0xff && Copy_DirectionState>=0x00)
	{
		switch(Copy_GroupNumber)
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	3d 83       	std	Y+5, r19	; 0x05
    121c:	2c 83       	std	Y+4, r18	; 0x04
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	9d 81       	ldd	r25, Y+5	; 0x05
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	91 05       	cpc	r25, r1
    1226:	d1 f0       	breq	.+52     	; 0x125c <DIO_ErrStateSetGroupDirection+0x5a>
    1228:	2c 81       	ldd	r18, Y+4	; 0x04
    122a:	3d 81       	ldd	r19, Y+5	; 0x05
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	31 05       	cpc	r19, r1
    1230:	2c f4       	brge	.+10     	; 0x123c <DIO_ErrStateSetGroupDirection+0x3a>
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	9d 81       	ldd	r25, Y+5	; 0x05
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	61 f0       	breq	.+24     	; 0x1252 <DIO_ErrStateSetGroupDirection+0x50>
    123a:	1f c0       	rjmp	.+62     	; 0x127a <DIO_ErrStateSetGroupDirection+0x78>
    123c:	2c 81       	ldd	r18, Y+4	; 0x04
    123e:	3d 81       	ldd	r19, Y+5	; 0x05
    1240:	22 30       	cpi	r18, 0x02	; 2
    1242:	31 05       	cpc	r19, r1
    1244:	81 f0       	breq	.+32     	; 0x1266 <DIO_ErrStateSetGroupDirection+0x64>
    1246:	8c 81       	ldd	r24, Y+4	; 0x04
    1248:	9d 81       	ldd	r25, Y+5	; 0x05
    124a:	83 30       	cpi	r24, 0x03	; 3
    124c:	91 05       	cpc	r25, r1
    124e:	81 f0       	breq	.+32     	; 0x1270 <DIO_ErrStateSetGroupDirection+0x6e>
    1250:	14 c0       	rjmp	.+40     	; 0x127a <DIO_ErrStateSetGroupDirection+0x78>
		{
		case DIO_GroupA: DDRA_ITI =  Copy_DirectionState ;break ;
    1252:	ea e3       	ldi	r30, 0x3A	; 58
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	80 83       	st	Z, r24
    125a:	12 c0       	rjmp	.+36     	; 0x1280 <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupB: DDRB_ITI =  Copy_DirectionState ;break ;
    125c:	e7 e3       	ldi	r30, 0x37	; 55
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	80 83       	st	Z, r24
    1264:	0d c0       	rjmp	.+26     	; 0x1280 <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupC: DDRC_ITI =  Copy_DirectionState ;break ;
    1266:	e4 e3       	ldi	r30, 0x34	; 52
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	80 83       	st	Z, r24
    126e:	08 c0       	rjmp	.+16     	; 0x1280 <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupD: DDRD_ITI =  Copy_DirectionState ;break ;
    1270:	e1 e3       	ldi	r30, 0x31	; 49
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	80 83       	st	Z, r24
    1278:	03 c0       	rjmp	.+6      	; 0x1280 <DIO_ErrStateSetGroupDirection+0x7e>
		default :
			return GroupError ;
    127a:	91 e0       	ldi	r25, 0x01	; 1
    127c:	9b 83       	std	Y+3, r25	; 0x03
    127e:	01 c0       	rjmp	.+2      	; 0x1282 <DIO_ErrStateSetGroupDirection+0x80>
		}
		return NoError ;
    1280:	1b 82       	std	Y+3, r1	; 0x03
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	else
	{
		return DirectionRangError;
	}
}
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <DIO_ErrStateSetGroupValue>:
ErrState  DIO_ErrStateSetGroupValue(DIO_GroupNumber Copy_GroupNumber ,u8 Copy_ValueState)
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <DIO_ErrStateSetGroupValue+0x6>
    129a:	00 d0       	rcall	.+0      	; 0x129c <DIO_ErrStateSetGroupValue+0x8>
    129c:	0f 92       	push	r0
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_ValueState <= 0xff && Copy_ValueState>=0x00)
	{
		switch(Copy_GroupNumber)
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	3d 83       	std	Y+5, r19	; 0x05
    12ae:	2c 83       	std	Y+4, r18	; 0x04
    12b0:	8c 81       	ldd	r24, Y+4	; 0x04
    12b2:	9d 81       	ldd	r25, Y+5	; 0x05
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	91 05       	cpc	r25, r1
    12b8:	d1 f0       	breq	.+52     	; 0x12ee <DIO_ErrStateSetGroupValue+0x5a>
    12ba:	2c 81       	ldd	r18, Y+4	; 0x04
    12bc:	3d 81       	ldd	r19, Y+5	; 0x05
    12be:	22 30       	cpi	r18, 0x02	; 2
    12c0:	31 05       	cpc	r19, r1
    12c2:	2c f4       	brge	.+10     	; 0x12ce <DIO_ErrStateSetGroupValue+0x3a>
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	9d 81       	ldd	r25, Y+5	; 0x05
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	61 f0       	breq	.+24     	; 0x12e4 <DIO_ErrStateSetGroupValue+0x50>
    12cc:	1f c0       	rjmp	.+62     	; 0x130c <DIO_ErrStateSetGroupValue+0x78>
    12ce:	2c 81       	ldd	r18, Y+4	; 0x04
    12d0:	3d 81       	ldd	r19, Y+5	; 0x05
    12d2:	22 30       	cpi	r18, 0x02	; 2
    12d4:	31 05       	cpc	r19, r1
    12d6:	81 f0       	breq	.+32     	; 0x12f8 <DIO_ErrStateSetGroupValue+0x64>
    12d8:	8c 81       	ldd	r24, Y+4	; 0x04
    12da:	9d 81       	ldd	r25, Y+5	; 0x05
    12dc:	83 30       	cpi	r24, 0x03	; 3
    12de:	91 05       	cpc	r25, r1
    12e0:	81 f0       	breq	.+32     	; 0x1302 <DIO_ErrStateSetGroupValue+0x6e>
    12e2:	14 c0       	rjmp	.+40     	; 0x130c <DIO_ErrStateSetGroupValue+0x78>
		{
		case DIO_GroupA: PORTA_ITI =  Copy_ValueState ;break ;
    12e4:	eb e3       	ldi	r30, 0x3B	; 59
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	80 83       	st	Z, r24
    12ec:	12 c0       	rjmp	.+36     	; 0x1312 <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupB: PORTB_ITI =  Copy_ValueState ;break ;
    12ee:	e8 e3       	ldi	r30, 0x38	; 56
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	80 83       	st	Z, r24
    12f6:	0d c0       	rjmp	.+26     	; 0x1312 <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupC: PORTC_ITI =  Copy_ValueState ;break ;
    12f8:	e5 e3       	ldi	r30, 0x35	; 53
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	80 83       	st	Z, r24
    1300:	08 c0       	rjmp	.+16     	; 0x1312 <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupD: PORTD_ITI =  Copy_ValueState ;break ;
    1302:	e2 e3       	ldi	r30, 0x32	; 50
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	80 83       	st	Z, r24
    130a:	03 c0       	rjmp	.+6      	; 0x1312 <DIO_ErrStateSetGroupValue+0x7e>
		default :
			return GroupError ;
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	9b 83       	std	Y+3, r25	; 0x03
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <DIO_ErrStateSetGroupValue+0x80>
		}
		return NoError ;
    1312:	1b 82       	std	Y+3, r1	; 0x03
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
	else
	{
		return ValueRangError;
	}

}
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <DIO_ErrStateReadGroupValue>:
ErrState  DIO_ErrStateReadGroupValue(DIO_GroupNumber Copy_GroupNumber ,u8 *Result)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <DIO_ErrStateReadGroupValue+0x6>
    132c:	00 d0       	rcall	.+0      	; 0x132e <DIO_ErrStateReadGroupValue+0x8>
    132e:	00 d0       	rcall	.+0      	; 0x1330 <DIO_ErrStateReadGroupValue+0xa>
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	7b 83       	std	Y+3, r23	; 0x03
    1338:	6a 83       	std	Y+2, r22	; 0x02
	if(Result!=Null)
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	9b 81       	ldd	r25, Y+3	; 0x03
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	09 f4       	brne	.+2      	; 0x1344 <DIO_ErrStateReadGroupValue+0x1e>
    1342:	40 c0       	rjmp	.+128    	; 0x13c4 <DIO_ErrStateReadGroupValue+0x9e>
	{
		switch(Copy_GroupNumber)
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	3e 83       	std	Y+6, r19	; 0x06
    134c:	2d 83       	std	Y+5, r18	; 0x05
    134e:	8d 81       	ldd	r24, Y+5	; 0x05
    1350:	9e 81       	ldd	r25, Y+6	; 0x06
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	91 05       	cpc	r25, r1
    1356:	e1 f0       	breq	.+56     	; 0x1390 <DIO_ErrStateReadGroupValue+0x6a>
    1358:	2d 81       	ldd	r18, Y+5	; 0x05
    135a:	3e 81       	ldd	r19, Y+6	; 0x06
    135c:	22 30       	cpi	r18, 0x02	; 2
    135e:	31 05       	cpc	r19, r1
    1360:	2c f4       	brge	.+10     	; 0x136c <DIO_ErrStateReadGroupValue+0x46>
    1362:	8d 81       	ldd	r24, Y+5	; 0x05
    1364:	9e 81       	ldd	r25, Y+6	; 0x06
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	61 f0       	breq	.+24     	; 0x1382 <DIO_ErrStateReadGroupValue+0x5c>
    136a:	27 c0       	rjmp	.+78     	; 0x13ba <DIO_ErrStateReadGroupValue+0x94>
    136c:	2d 81       	ldd	r18, Y+5	; 0x05
    136e:	3e 81       	ldd	r19, Y+6	; 0x06
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	a1 f0       	breq	.+40     	; 0x139e <DIO_ErrStateReadGroupValue+0x78>
    1376:	8d 81       	ldd	r24, Y+5	; 0x05
    1378:	9e 81       	ldd	r25, Y+6	; 0x06
    137a:	83 30       	cpi	r24, 0x03	; 3
    137c:	91 05       	cpc	r25, r1
    137e:	b1 f0       	breq	.+44     	; 0x13ac <DIO_ErrStateReadGroupValue+0x86>
    1380:	1c c0       	rjmp	.+56     	; 0x13ba <DIO_ErrStateReadGroupValue+0x94>
		{
		case DIO_GroupA: *Result = PINA_ITI ; break ;
    1382:	e9 e3       	ldi	r30, 0x39	; 57
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	ea 81       	ldd	r30, Y+2	; 0x02
    138a:	fb 81       	ldd	r31, Y+3	; 0x03
    138c:	80 83       	st	Z, r24
    138e:	18 c0       	rjmp	.+48     	; 0x13c0 <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupB: *Result = PINB_ITI ; break ;
    1390:	e6 e3       	ldi	r30, 0x36	; 54
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	ea 81       	ldd	r30, Y+2	; 0x02
    1398:	fb 81       	ldd	r31, Y+3	; 0x03
    139a:	80 83       	st	Z, r24
    139c:	11 c0       	rjmp	.+34     	; 0x13c0 <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupC: *Result = PINC_ITI ; break ;
    139e:	e3 e3       	ldi	r30, 0x33	; 51
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	ea 81       	ldd	r30, Y+2	; 0x02
    13a6:	fb 81       	ldd	r31, Y+3	; 0x03
    13a8:	80 83       	st	Z, r24
    13aa:	0a c0       	rjmp	.+20     	; 0x13c0 <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupD: *Result = PIND_ITI ; break ;
    13ac:	e0 e3       	ldi	r30, 0x30	; 48
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	ea 81       	ldd	r30, Y+2	; 0x02
    13b4:	fb 81       	ldd	r31, Y+3	; 0x03
    13b6:	80 83       	st	Z, r24
    13b8:	03 c0       	rjmp	.+6      	; 0x13c0 <DIO_ErrStateReadGroupValue+0x9a>
		default :
			return GroupError ;
    13ba:	91 e0       	ldi	r25, 0x01	; 1
    13bc:	9c 83       	std	Y+4, r25	; 0x04
    13be:	04 c0       	rjmp	.+8      	; 0x13c8 <DIO_ErrStateReadGroupValue+0xa2>
		}
		return NoError ;
    13c0:	1c 82       	std	Y+4, r1	; 0x04
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_ErrStateReadGroupValue+0xa2>
	}
	else
	{
		return AddressError;
    13c4:	25 e0       	ldi	r18, 0x05	; 5
    13c6:	2c 83       	std	Y+4, r18	; 0x04
    13c8:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    13ca:	26 96       	adiw	r28, 0x06	; 6
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <SW_SwitchErrStateInit>:

#include "Switch_Interface.h"


SwitchErrState  SW_SwitchErrStateInit(Switch_Info * Switch)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <SW_SwitchErrStateInit+0x6>
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <SW_SwitchErrStateInit+0x8>
    13e4:	0f 92       	push	r0
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	9a 83       	std	Y+2, r25	; 0x02
    13ec:	89 83       	std	Y+1, r24	; 0x01

	DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_Input);
    13ee:	e9 81       	ldd	r30, Y+1	; 0x01
    13f0:	fa 81       	ldd	r31, Y+2	; 0x02
    13f2:	80 81       	ld	r24, Z
    13f4:	e9 81       	ldd	r30, Y+1	; 0x01
    13f6:	fa 81       	ldd	r31, Y+2	; 0x02
    13f8:	91 81       	ldd	r25, Z+1	; 0x01
    13fa:	69 2f       	mov	r22, r25
    13fc:	40 e0       	ldi	r20, 0x00	; 0
    13fe:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_ErrStateSetPinDirection>
	if(Switch->ConnectionType == InternalPullUp)
    1402:	e9 81       	ldd	r30, Y+1	; 0x01
    1404:	fa 81       	ldd	r31, Y+2	; 0x02
    1406:	82 81       	ldd	r24, Z+2	; 0x02
    1408:	88 23       	and	r24, r24
    140a:	09 f0       	breq	.+2      	; 0x140e <SW_SwitchErrStateInit+0x32>
    140c:	7d c0       	rjmp	.+250    	; 0x1508 <SW_SwitchErrStateInit+0x12c>
	{
		switch(Switch->SW_Group)
    140e:	e9 81       	ldd	r30, Y+1	; 0x01
    1410:	fa 81       	ldd	r31, Y+2	; 0x02
    1412:	80 81       	ld	r24, Z
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	3d 83       	std	Y+5, r19	; 0x05
    141a:	2c 83       	std	Y+4, r18	; 0x04
    141c:	8c 81       	ldd	r24, Y+4	; 0x04
    141e:	9d 81       	ldd	r25, Y+5	; 0x05
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	91 05       	cpc	r25, r1
    1424:	61 f1       	breq	.+88     	; 0x147e <SW_SwitchErrStateInit+0xa2>
    1426:	2c 81       	ldd	r18, Y+4	; 0x04
    1428:	3d 81       	ldd	r19, Y+5	; 0x05
    142a:	22 30       	cpi	r18, 0x02	; 2
    142c:	31 05       	cpc	r19, r1
    142e:	2c f4       	brge	.+10     	; 0x143a <SW_SwitchErrStateInit+0x5e>
    1430:	8c 81       	ldd	r24, Y+4	; 0x04
    1432:	9d 81       	ldd	r25, Y+5	; 0x05
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	69 f0       	breq	.+26     	; 0x1452 <SW_SwitchErrStateInit+0x76>
    1438:	64 c0       	rjmp	.+200    	; 0x1502 <SW_SwitchErrStateInit+0x126>
    143a:	2c 81       	ldd	r18, Y+4	; 0x04
    143c:	3d 81       	ldd	r19, Y+5	; 0x05
    143e:	22 30       	cpi	r18, 0x02	; 2
    1440:	31 05       	cpc	r19, r1
    1442:	99 f1       	breq	.+102    	; 0x14aa <SW_SwitchErrStateInit+0xce>
    1444:	8c 81       	ldd	r24, Y+4	; 0x04
    1446:	9d 81       	ldd	r25, Y+5	; 0x05
    1448:	83 30       	cpi	r24, 0x03	; 3
    144a:	91 05       	cpc	r25, r1
    144c:	09 f4       	brne	.+2      	; 0x1450 <SW_SwitchErrStateInit+0x74>
    144e:	43 c0       	rjmp	.+134    	; 0x14d6 <SW_SwitchErrStateInit+0xfa>
    1450:	58 c0       	rjmp	.+176    	; 0x1502 <SW_SwitchErrStateInit+0x126>
		{
			/*Group A*/
			case DIO_GroupA : SET_BIT(PORTA_ITI , Switch->SW_Pin ) ;
    1452:	ab e3       	ldi	r26, 0x3B	; 59
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	eb e3       	ldi	r30, 0x3B	; 59
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	e9 81       	ldd	r30, Y+1	; 0x01
    1460:	fa 81       	ldd	r31, Y+2	; 0x02
    1462:	81 81       	ldd	r24, Z+1	; 0x01
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <SW_SwitchErrStateInit+0x98>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <SW_SwitchErrStateInit+0x94>
    1478:	84 2b       	or	r24, r20
    147a:	8c 93       	st	X, r24
    147c:	45 c0       	rjmp	.+138    	; 0x1508 <SW_SwitchErrStateInit+0x12c>
			break ;
			/*Group B*/
			case DIO_GroupB : SET_BIT(PORTB_ITI , Switch->SW_Pin ) ;
    147e:	a8 e3       	ldi	r26, 0x38	; 56
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e8 e3       	ldi	r30, 0x38	; 56
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	e9 81       	ldd	r30, Y+1	; 0x01
    148c:	fa 81       	ldd	r31, Y+2	; 0x02
    148e:	81 81       	ldd	r24, Z+1	; 0x01
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <SW_SwitchErrStateInit+0xc4>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <SW_SwitchErrStateInit+0xc0>
    14a4:	84 2b       	or	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	2f c0       	rjmp	.+94     	; 0x1508 <SW_SwitchErrStateInit+0x12c>
			break ;
			/*Group C*/
			case DIO_GroupC : SET_BIT(PORTC_ITI , Switch->SW_Pin ) ;
    14aa:	a5 e3       	ldi	r26, 0x35	; 53
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e5 e3       	ldi	r30, 0x35	; 53
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	e9 81       	ldd	r30, Y+1	; 0x01
    14b8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ba:	81 81       	ldd	r24, Z+1	; 0x01
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <SW_SwitchErrStateInit+0xf0>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <SW_SwitchErrStateInit+0xec>
    14d0:	84 2b       	or	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	19 c0       	rjmp	.+50     	; 0x1508 <SW_SwitchErrStateInit+0x12c>
			break ;
			/*Group D*/
			case DIO_GroupD : SET_BIT(PORTD_ITI , Switch->SW_Pin ) ;
    14d6:	a2 e3       	ldi	r26, 0x32	; 50
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e2 e3       	ldi	r30, 0x32	; 50
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	e9 81       	ldd	r30, Y+1	; 0x01
    14e4:	fa 81       	ldd	r31, Y+2	; 0x02
    14e6:	81 81       	ldd	r24, Z+1	; 0x01
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <SW_SwitchErrStateInit+0x11c>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <SW_SwitchErrStateInit+0x118>
    14fc:	84 2b       	or	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	03 c0       	rjmp	.+6      	; 0x1508 <SW_SwitchErrStateInit+0x12c>
			break ;
			/*Wrong*/
			default:
				return SwitchGroupNumError ;
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	9b 83       	std	Y+3, r25	; 0x03
    1506:	01 c0       	rjmp	.+2      	; 0x150a <SW_SwitchErrStateInit+0x12e>
		}
	}
	return SwitchNoError;
    1508:	1b 82       	std	Y+3, r1	; 0x03
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <SW_SwitchErrStateGetState>:
SwitchErrState  SW_SwitchErrStateGetState(Switch_Info * Switch ,SwitchState * Result)
{
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	00 d0       	rcall	.+0      	; 0x1522 <SW_SwitchErrStateGetState+0x6>
    1522:	00 d0       	rcall	.+0      	; 0x1524 <SW_SwitchErrStateGetState+0x8>
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	9a 83       	std	Y+2, r25	; 0x02
    152a:	89 83       	std	Y+1, r24	; 0x01
    152c:	7c 83       	std	Y+4, r23	; 0x04
    152e:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,Result);
    1530:	e9 81       	ldd	r30, Y+1	; 0x01
    1532:	fa 81       	ldd	r31, Y+2	; 0x02
    1534:	80 81       	ld	r24, Z
    1536:	e9 81       	ldd	r30, Y+1	; 0x01
    1538:	fa 81       	ldd	r31, Y+2	; 0x02
    153a:	91 81       	ldd	r25, Z+1	; 0x01
    153c:	2b 81       	ldd	r18, Y+3	; 0x03
    153e:	3c 81       	ldd	r19, Y+4	; 0x04
    1540:	69 2f       	mov	r22, r25
    1542:	a9 01       	movw	r20, r18
    1544:	0e 94 6d 08 	call	0x10da	; 0x10da <DIO_ErrStateReadPinValue>
	return SwitchNoError;
    1548:	80 e0       	ldi	r24, 0x00	; 0
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <SevSeg_SevErrInit>:
		SevSegCA_8 ,
		SevSegCA_9
};

SevErrState	   SevSeg_SevErrInit(SevSeg_info* SevenSegment1)
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	00 d0       	rcall	.+0      	; 0x155e <SevSeg_SevErrInit+0x6>
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	9a 83       	std	Y+2, r25	; 0x02
    1564:	89 83       	std	Y+1, r24	; 0x01
	DIO_ErrStateSetGroupDirection ((SevenSegment1->SevSeg_Group),0xff);
    1566:	e9 81       	ldd	r30, Y+1	; 0x01
    1568:	fa 81       	ldd	r31, Y+2	; 0x02
    156a:	81 81       	ldd	r24, Z+1	; 0x01
    156c:	6f ef       	ldi	r22, 0xFF	; 255
    156e:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_ErrStateSetGroupDirection>
	return SevSegNoError;
    1572:	80 e0       	ldi	r24, 0x00	; 0
}
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <SevSeg_SevErrStateSetNumber>:

SevErrState    SevSeg_SevErrStateSetNumber(u8 Copy_Number , SevSeg_info* SevenSegment1)
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	61 97       	sbiw	r28, 0x11	; 17
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	8f 87       	std	Y+15, r24	; 0x0f
    1594:	79 8b       	std	Y+17, r23	; 0x11
    1596:	68 8b       	std	Y+16, r22	; 0x10
	DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[Copy_Number]);
    1598:	e8 89       	ldd	r30, Y+16	; 0x10
    159a:	f9 89       	ldd	r31, Y+17	; 0x11
    159c:	21 81       	ldd	r18, Z+1	; 0x01
    159e:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a0:	88 2f       	mov	r24, r24
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	fc 01       	movw	r30, r24
    15a6:	e8 59       	subi	r30, 0x98	; 152
    15a8:	ff 4f       	sbci	r31, 0xFF	; 255
    15aa:	90 81       	ld	r25, Z
    15ac:	82 2f       	mov	r24, r18
    15ae:	69 2f       	mov	r22, r25
    15b0:	0e 94 4a 09 	call	0x1294	; 0x1294 <DIO_ErrStateSetGroupValue>
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	aa e7       	ldi	r26, 0x7A	; 122
    15ba:	b4 e4       	ldi	r27, 0x44	; 68
    15bc:	8b 87       	std	Y+11, r24	; 0x0b
    15be:	9c 87       	std	Y+12, r25	; 0x0c
    15c0:	ad 87       	std	Y+13, r26	; 0x0d
    15c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	4a ef       	ldi	r20, 0xFA	; 250
    15d2:	54 e4       	ldi	r21, 0x44	; 68
    15d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	8f 83       	std	Y+7, r24	; 0x07
    15de:	98 87       	std	Y+8, r25	; 0x08
    15e0:	a9 87       	std	Y+9, r26	; 0x09
    15e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15e4:	6f 81       	ldd	r22, Y+7	; 0x07
    15e6:	78 85       	ldd	r23, Y+8	; 0x08
    15e8:	89 85       	ldd	r24, Y+9	; 0x09
    15ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e8       	ldi	r20, 0x80	; 128
    15f2:	5f e3       	ldi	r21, 0x3F	; 63
    15f4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15f8:	88 23       	and	r24, r24
    15fa:	2c f4       	brge	.+10     	; 0x1606 <SevSeg_SevErrStateSetNumber+0x88>
		__ticks = 1;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	9e 83       	std	Y+6, r25	; 0x06
    1602:	8d 83       	std	Y+5, r24	; 0x05
    1604:	3f c0       	rjmp	.+126    	; 0x1684 <SevSeg_SevErrStateSetNumber+0x106>
	else if (__tmp > 65535)
    1606:	6f 81       	ldd	r22, Y+7	; 0x07
    1608:	78 85       	ldd	r23, Y+8	; 0x08
    160a:	89 85       	ldd	r24, Y+9	; 0x09
    160c:	9a 85       	ldd	r25, Y+10	; 0x0a
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	3f ef       	ldi	r19, 0xFF	; 255
    1612:	4f e7       	ldi	r20, 0x7F	; 127
    1614:	57 e4       	ldi	r21, 0x47	; 71
    1616:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    161a:	18 16       	cp	r1, r24
    161c:	4c f5       	brge	.+82     	; 0x1670 <SevSeg_SevErrStateSetNumber+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1620:	7c 85       	ldd	r23, Y+12	; 0x0c
    1622:	8d 85       	ldd	r24, Y+13	; 0x0d
    1624:	9e 85       	ldd	r25, Y+14	; 0x0e
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e2       	ldi	r20, 0x20	; 32
    162c:	51 e4       	ldi	r21, 0x41	; 65
    162e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	bc 01       	movw	r22, r24
    1638:	cd 01       	movw	r24, r26
    163a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	9e 83       	std	Y+6, r25	; 0x06
    1644:	8d 83       	std	Y+5, r24	; 0x05
    1646:	0f c0       	rjmp	.+30     	; 0x1666 <SevSeg_SevErrStateSetNumber+0xe8>
    1648:	88 ec       	ldi	r24, 0xC8	; 200
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9c 83       	std	Y+4, r25	; 0x04
    164e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <SevSeg_SevErrStateSetNumber+0xd6>
    1658:	9c 83       	std	Y+4, r25	; 0x04
    165a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165c:	8d 81       	ldd	r24, Y+5	; 0x05
    165e:	9e 81       	ldd	r25, Y+6	; 0x06
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	9e 83       	std	Y+6, r25	; 0x06
    1664:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1666:	8d 81       	ldd	r24, Y+5	; 0x05
    1668:	9e 81       	ldd	r25, Y+6	; 0x06
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	69 f7       	brne	.-38     	; 0x1648 <SevSeg_SevErrStateSetNumber+0xca>
    166e:	14 c0       	rjmp	.+40     	; 0x1698 <SevSeg_SevErrStateSetNumber+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1670:	6f 81       	ldd	r22, Y+7	; 0x07
    1672:	78 85       	ldd	r23, Y+8	; 0x08
    1674:	89 85       	ldd	r24, Y+9	; 0x09
    1676:	9a 85       	ldd	r25, Y+10	; 0x0a
    1678:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	9e 83       	std	Y+6, r25	; 0x06
    1682:	8d 83       	std	Y+5, r24	; 0x05
    1684:	8d 81       	ldd	r24, Y+5	; 0x05
    1686:	9e 81       	ldd	r25, Y+6	; 0x06
    1688:	9a 83       	std	Y+2, r25	; 0x02
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	9a 81       	ldd	r25, Y+2	; 0x02
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	f1 f7       	brne	.-4      	; 0x1690 <SevSeg_SevErrStateSetNumber+0x112>
    1694:	9a 83       	std	Y+2, r25	; 0x02
    1696:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	return SevSegNoError;
    1698:	80 e0       	ldi	r24, 0x00	; 0
}
    169a:	61 96       	adiw	r28, 0x11	; 17
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <SevSeg_SevErrStateDisplayRange>:

SevErrState    SevSeg_SevErrStateDisplayRange(SevSeg_info* SevenSegment1 , u8 Copy_start , u8 Copy_End )
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	a3 97       	sbiw	r28, 0x23	; 35
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	98 a3       	std	Y+32, r25	; 0x20
    16c2:	8f 8f       	std	Y+31, r24	; 0x1f
    16c4:	69 a3       	std	Y+33, r22	; 0x21
    16c6:	4a a3       	std	Y+34, r20	; 0x22
	if (Copy_start<Copy_End)
    16c8:	99 a1       	ldd	r25, Y+33	; 0x21
    16ca:	8a a1       	ldd	r24, Y+34	; 0x22
    16cc:	98 17       	cp	r25, r24
    16ce:	08 f0       	brcs	.+2      	; 0x16d2 <SevSeg_SevErrStateDisplayRange+0x26>
    16d0:	94 c0       	rjmp	.+296    	; 0x17fa <SevSeg_SevErrStateDisplayRange+0x14e>
	{
		for(s8 i = Copy_start; i<=Copy_End;i++)
    16d2:	89 a1       	ldd	r24, Y+33	; 0x21
    16d4:	8e 8f       	std	Y+30, r24	; 0x1e
    16d6:	84 c0       	rjmp	.+264    	; 0x17e0 <SevSeg_SevErrStateDisplayRange+0x134>
		{
			DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[i]);
    16d8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    16da:	f8 a1       	ldd	r31, Y+32	; 0x20
    16dc:	21 81       	ldd	r18, Z+1	; 0x01
    16de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16e0:	99 27       	eor	r25, r25
    16e2:	87 fd       	sbrc	r24, 7
    16e4:	90 95       	com	r25
    16e6:	fc 01       	movw	r30, r24
    16e8:	e8 59       	subi	r30, 0x98	; 152
    16ea:	ff 4f       	sbci	r31, 0xFF	; 255
    16ec:	90 81       	ld	r25, Z
    16ee:	82 2f       	mov	r24, r18
    16f0:	69 2f       	mov	r22, r25
    16f2:	0e 94 4a 09 	call	0x1294	; 0x1294 <DIO_ErrStateSetGroupValue>
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	aa e7       	ldi	r26, 0x7A	; 122
    16fc:	b4 e4       	ldi	r27, 0x44	; 68
    16fe:	89 8f       	std	Y+25, r24	; 0x19
    1700:	9a 8f       	std	Y+26, r25	; 0x1a
    1702:	ab 8f       	std	Y+27, r26	; 0x1b
    1704:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1706:	69 8d       	ldd	r22, Y+25	; 0x19
    1708:	7a 8d       	ldd	r23, Y+26	; 0x1a
    170a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    170c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	4a ef       	ldi	r20, 0xFA	; 250
    1714:	54 e4       	ldi	r21, 0x44	; 68
    1716:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	8d 8b       	std	Y+21, r24	; 0x15
    1720:	9e 8b       	std	Y+22, r25	; 0x16
    1722:	af 8b       	std	Y+23, r26	; 0x17
    1724:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1726:	6d 89       	ldd	r22, Y+21	; 0x15
    1728:	7e 89       	ldd	r23, Y+22	; 0x16
    172a:	8f 89       	ldd	r24, Y+23	; 0x17
    172c:	98 8d       	ldd	r25, Y+24	; 0x18
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e8       	ldi	r20, 0x80	; 128
    1734:	5f e3       	ldi	r21, 0x3F	; 63
    1736:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    173a:	88 23       	and	r24, r24
    173c:	2c f4       	brge	.+10     	; 0x1748 <SevSeg_SevErrStateDisplayRange+0x9c>
		__ticks = 1;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	9c 8b       	std	Y+20, r25	; 0x14
    1744:	8b 8b       	std	Y+19, r24	; 0x13
    1746:	3f c0       	rjmp	.+126    	; 0x17c6 <SevSeg_SevErrStateDisplayRange+0x11a>
	else if (__tmp > 65535)
    1748:	6d 89       	ldd	r22, Y+21	; 0x15
    174a:	7e 89       	ldd	r23, Y+22	; 0x16
    174c:	8f 89       	ldd	r24, Y+23	; 0x17
    174e:	98 8d       	ldd	r25, Y+24	; 0x18
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	3f ef       	ldi	r19, 0xFF	; 255
    1754:	4f e7       	ldi	r20, 0x7F	; 127
    1756:	57 e4       	ldi	r21, 0x47	; 71
    1758:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    175c:	18 16       	cp	r1, r24
    175e:	4c f5       	brge	.+82     	; 0x17b2 <SevSeg_SevErrStateDisplayRange+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1760:	69 8d       	ldd	r22, Y+25	; 0x19
    1762:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1764:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1766:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	40 e2       	ldi	r20, 0x20	; 32
    176e:	51 e4       	ldi	r21, 0x41	; 65
    1770:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	bc 01       	movw	r22, r24
    177a:	cd 01       	movw	r24, r26
    177c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	9c 8b       	std	Y+20, r25	; 0x14
    1786:	8b 8b       	std	Y+19, r24	; 0x13
    1788:	0f c0       	rjmp	.+30     	; 0x17a8 <SevSeg_SevErrStateDisplayRange+0xfc>
    178a:	88 ec       	ldi	r24, 0xC8	; 200
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	9a 8b       	std	Y+18, r25	; 0x12
    1790:	89 8b       	std	Y+17, r24	; 0x11
    1792:	89 89       	ldd	r24, Y+17	; 0x11
    1794:	9a 89       	ldd	r25, Y+18	; 0x12
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <SevSeg_SevErrStateDisplayRange+0xea>
    179a:	9a 8b       	std	Y+18, r25	; 0x12
    179c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    179e:	8b 89       	ldd	r24, Y+19	; 0x13
    17a0:	9c 89       	ldd	r25, Y+20	; 0x14
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	9c 8b       	std	Y+20, r25	; 0x14
    17a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a8:	8b 89       	ldd	r24, Y+19	; 0x13
    17aa:	9c 89       	ldd	r25, Y+20	; 0x14
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	69 f7       	brne	.-38     	; 0x178a <SevSeg_SevErrStateDisplayRange+0xde>
    17b0:	14 c0       	rjmp	.+40     	; 0x17da <SevSeg_SevErrStateDisplayRange+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b2:	6d 89       	ldd	r22, Y+21	; 0x15
    17b4:	7e 89       	ldd	r23, Y+22	; 0x16
    17b6:	8f 89       	ldd	r24, Y+23	; 0x17
    17b8:	98 8d       	ldd	r25, Y+24	; 0x18
    17ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	9c 8b       	std	Y+20, r25	; 0x14
    17c4:	8b 8b       	std	Y+19, r24	; 0x13
    17c6:	8b 89       	ldd	r24, Y+19	; 0x13
    17c8:	9c 89       	ldd	r25, Y+20	; 0x14
    17ca:	98 8b       	std	Y+16, r25	; 0x10
    17cc:	8f 87       	std	Y+15, r24	; 0x0f
    17ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d0:	98 89       	ldd	r25, Y+16	; 0x10
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	f1 f7       	brne	.-4      	; 0x17d2 <SevSeg_SevErrStateDisplayRange+0x126>
    17d6:	98 8b       	std	Y+16, r25	; 0x10
    17d8:	8f 87       	std	Y+15, r24	; 0x0f

SevErrState    SevSeg_SevErrStateDisplayRange(SevSeg_info* SevenSegment1 , u8 Copy_start , u8 Copy_End )
{
	if (Copy_start<Copy_End)
	{
		for(s8 i = Copy_start; i<=Copy_End;i++)
    17da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17dc:	8f 5f       	subi	r24, 0xFF	; 255
    17de:	8e 8f       	std	Y+30, r24	; 0x1e
    17e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17e2:	28 2f       	mov	r18, r24
    17e4:	33 27       	eor	r19, r19
    17e6:	27 fd       	sbrc	r18, 7
    17e8:	30 95       	com	r19
    17ea:	8a a1       	ldd	r24, Y+34	; 0x22
    17ec:	88 2f       	mov	r24, r24
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	82 17       	cp	r24, r18
    17f2:	93 07       	cpc	r25, r19
    17f4:	0c f0       	brlt	.+2      	; 0x17f8 <SevSeg_SevErrStateDisplayRange+0x14c>
    17f6:	70 cf       	rjmp	.-288    	; 0x16d8 <SevSeg_SevErrStateDisplayRange+0x2c>
    17f8:	9c c0       	rjmp	.+312    	; 0x1932 <SevSeg_SevErrStateDisplayRange+0x286>
		{
			DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[i]);
			_delay_ms(1000);
		}
	}
	else if(Copy_start>Copy_End)
    17fa:	99 a1       	ldd	r25, Y+33	; 0x21
    17fc:	8a a1       	ldd	r24, Y+34	; 0x22
    17fe:	89 17       	cp	r24, r25
    1800:	08 f0       	brcs	.+2      	; 0x1804 <SevSeg_SevErrStateDisplayRange+0x158>
    1802:	94 c0       	rjmp	.+296    	; 0x192c <SevSeg_SevErrStateDisplayRange+0x280>
	{
		for(s8 i = Copy_start; i>=Copy_End;i--)
    1804:	89 a1       	ldd	r24, Y+33	; 0x21
    1806:	8d 8f       	std	Y+29, r24	; 0x1d
    1808:	84 c0       	rjmp	.+264    	; 0x1912 <SevSeg_SevErrStateDisplayRange+0x266>
		{
			DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[i]);
    180a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    180c:	f8 a1       	ldd	r31, Y+32	; 0x20
    180e:	21 81       	ldd	r18, Z+1	; 0x01
    1810:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1812:	99 27       	eor	r25, r25
    1814:	87 fd       	sbrc	r24, 7
    1816:	90 95       	com	r25
    1818:	fc 01       	movw	r30, r24
    181a:	e8 59       	subi	r30, 0x98	; 152
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	90 81       	ld	r25, Z
    1820:	82 2f       	mov	r24, r18
    1822:	69 2f       	mov	r22, r25
    1824:	0e 94 4a 09 	call	0x1294	; 0x1294 <DIO_ErrStateSetGroupValue>
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	aa e7       	ldi	r26, 0x7A	; 122
    182e:	b4 e4       	ldi	r27, 0x44	; 68
    1830:	8b 87       	std	Y+11, r24	; 0x0b
    1832:	9c 87       	std	Y+12, r25	; 0x0c
    1834:	ad 87       	std	Y+13, r26	; 0x0d
    1836:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1838:	6b 85       	ldd	r22, Y+11	; 0x0b
    183a:	7c 85       	ldd	r23, Y+12	; 0x0c
    183c:	8d 85       	ldd	r24, Y+13	; 0x0d
    183e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	4a ef       	ldi	r20, 0xFA	; 250
    1846:	54 e4       	ldi	r21, 0x44	; 68
    1848:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	8f 83       	std	Y+7, r24	; 0x07
    1852:	98 87       	std	Y+8, r25	; 0x08
    1854:	a9 87       	std	Y+9, r26	; 0x09
    1856:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1858:	6f 81       	ldd	r22, Y+7	; 0x07
    185a:	78 85       	ldd	r23, Y+8	; 0x08
    185c:	89 85       	ldd	r24, Y+9	; 0x09
    185e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e8       	ldi	r20, 0x80	; 128
    1866:	5f e3       	ldi	r21, 0x3F	; 63
    1868:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    186c:	88 23       	and	r24, r24
    186e:	2c f4       	brge	.+10     	; 0x187a <SevSeg_SevErrStateDisplayRange+0x1ce>
		__ticks = 1;
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	9e 83       	std	Y+6, r25	; 0x06
    1876:	8d 83       	std	Y+5, r24	; 0x05
    1878:	3f c0       	rjmp	.+126    	; 0x18f8 <SevSeg_SevErrStateDisplayRange+0x24c>
	else if (__tmp > 65535)
    187a:	6f 81       	ldd	r22, Y+7	; 0x07
    187c:	78 85       	ldd	r23, Y+8	; 0x08
    187e:	89 85       	ldd	r24, Y+9	; 0x09
    1880:	9a 85       	ldd	r25, Y+10	; 0x0a
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	3f ef       	ldi	r19, 0xFF	; 255
    1886:	4f e7       	ldi	r20, 0x7F	; 127
    1888:	57 e4       	ldi	r21, 0x47	; 71
    188a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    188e:	18 16       	cp	r1, r24
    1890:	4c f5       	brge	.+82     	; 0x18e4 <SevSeg_SevErrStateDisplayRange+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1892:	6b 85       	ldd	r22, Y+11	; 0x0b
    1894:	7c 85       	ldd	r23, Y+12	; 0x0c
    1896:	8d 85       	ldd	r24, Y+13	; 0x0d
    1898:	9e 85       	ldd	r25, Y+14	; 0x0e
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	40 e2       	ldi	r20, 0x20	; 32
    18a0:	51 e4       	ldi	r21, 0x41	; 65
    18a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	bc 01       	movw	r22, r24
    18ac:	cd 01       	movw	r24, r26
    18ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	9e 83       	std	Y+6, r25	; 0x06
    18b8:	8d 83       	std	Y+5, r24	; 0x05
    18ba:	0f c0       	rjmp	.+30     	; 0x18da <SevSeg_SevErrStateDisplayRange+0x22e>
    18bc:	88 ec       	ldi	r24, 0xC8	; 200
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	9c 83       	std	Y+4, r25	; 0x04
    18c2:	8b 83       	std	Y+3, r24	; 0x03
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	9c 81       	ldd	r25, Y+4	; 0x04
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	f1 f7       	brne	.-4      	; 0x18c8 <SevSeg_SevErrStateDisplayRange+0x21c>
    18cc:	9c 83       	std	Y+4, r25	; 0x04
    18ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	9e 81       	ldd	r25, Y+6	; 0x06
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	9e 83       	std	Y+6, r25	; 0x06
    18d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	9e 81       	ldd	r25, Y+6	; 0x06
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	69 f7       	brne	.-38     	; 0x18bc <SevSeg_SevErrStateDisplayRange+0x210>
    18e2:	14 c0       	rjmp	.+40     	; 0x190c <SevSeg_SevErrStateDisplayRange+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e4:	6f 81       	ldd	r22, Y+7	; 0x07
    18e6:	78 85       	ldd	r23, Y+8	; 0x08
    18e8:	89 85       	ldd	r24, Y+9	; 0x09
    18ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	9e 83       	std	Y+6, r25	; 0x06
    18f6:	8d 83       	std	Y+5, r24	; 0x05
    18f8:	8d 81       	ldd	r24, Y+5	; 0x05
    18fa:	9e 81       	ldd	r25, Y+6	; 0x06
    18fc:	9a 83       	std	Y+2, r25	; 0x02
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	9a 81       	ldd	r25, Y+2	; 0x02
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	f1 f7       	brne	.-4      	; 0x1904 <SevSeg_SevErrStateDisplayRange+0x258>
    1908:	9a 83       	std	Y+2, r25	; 0x02
    190a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
		}
	}
	else if(Copy_start>Copy_End)
	{
		for(s8 i = Copy_start; i>=Copy_End;i--)
    190c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    190e:	81 50       	subi	r24, 0x01	; 1
    1910:	8d 8f       	std	Y+29, r24	; 0x1d
    1912:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1914:	28 2f       	mov	r18, r24
    1916:	33 27       	eor	r19, r19
    1918:	27 fd       	sbrc	r18, 7
    191a:	30 95       	com	r19
    191c:	8a a1       	ldd	r24, Y+34	; 0x22
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	28 17       	cp	r18, r24
    1924:	39 07       	cpc	r19, r25
    1926:	0c f0       	brlt	.+2      	; 0x192a <SevSeg_SevErrStateDisplayRange+0x27e>
    1928:	70 cf       	rjmp	.-288    	; 0x180a <SevSeg_SevErrStateDisplayRange+0x15e>
    192a:	03 c0       	rjmp	.+6      	; 0x1932 <SevSeg_SevErrStateDisplayRange+0x286>
			_delay_ms(1000);
		}
	}
	else
	{
		return DispRangeError;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	8b a3       	std	Y+35, r24	; 0x23
    1930:	01 c0       	rjmp	.+2      	; 0x1934 <SevSeg_SevErrStateDisplayRange+0x288>
	}
	return SevSegNoError;
    1932:	1b a2       	std	Y+35, r1	; 0x23
    1934:	8b a1       	ldd	r24, Y+35	; 0x23
	
}
    1936:	a3 96       	adiw	r28, 0x23	; 35
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <SevSeg_SevErrStateDisplayMax>:

SevErrState    SevSeg_SevErrStateDisplayMax(SevSeg_info * SevenSegment1)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	62 97       	sbiw	r28, 0x12	; 18
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	99 8b       	std	Y+17, r25	; 0x11
    195e:	88 8b       	std	Y+16, r24	; 0x10
	for(s8 i = FirstNum; i<=LastNum;i++)
    1960:	1f 86       	std	Y+15, r1	; 0x0f
    1962:	84 c0       	rjmp	.+264    	; 0x1a6c <SevSeg_SevErrStateDisplayMax+0x124>
	{
		DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[i]);
    1964:	e8 89       	ldd	r30, Y+16	; 0x10
    1966:	f9 89       	ldd	r31, Y+17	; 0x11
    1968:	21 81       	ldd	r18, Z+1	; 0x01
    196a:	8f 85       	ldd	r24, Y+15	; 0x0f
    196c:	99 27       	eor	r25, r25
    196e:	87 fd       	sbrc	r24, 7
    1970:	90 95       	com	r25
    1972:	fc 01       	movw	r30, r24
    1974:	e8 59       	subi	r30, 0x98	; 152
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	90 81       	ld	r25, Z
    197a:	82 2f       	mov	r24, r18
    197c:	69 2f       	mov	r22, r25
    197e:	0e 94 4a 09 	call	0x1294	; 0x1294 <DIO_ErrStateSetGroupValue>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	aa e7       	ldi	r26, 0x7A	; 122
    1988:	b4 e4       	ldi	r27, 0x44	; 68
    198a:	8b 87       	std	Y+11, r24	; 0x0b
    198c:	9c 87       	std	Y+12, r25	; 0x0c
    198e:	ad 87       	std	Y+13, r26	; 0x0d
    1990:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1992:	6b 85       	ldd	r22, Y+11	; 0x0b
    1994:	7c 85       	ldd	r23, Y+12	; 0x0c
    1996:	8d 85       	ldd	r24, Y+13	; 0x0d
    1998:	9e 85       	ldd	r25, Y+14	; 0x0e
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	4a ef       	ldi	r20, 0xFA	; 250
    19a0:	54 e4       	ldi	r21, 0x44	; 68
    19a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	8f 83       	std	Y+7, r24	; 0x07
    19ac:	98 87       	std	Y+8, r25	; 0x08
    19ae:	a9 87       	std	Y+9, r26	; 0x09
    19b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b2:	6f 81       	ldd	r22, Y+7	; 0x07
    19b4:	78 85       	ldd	r23, Y+8	; 0x08
    19b6:	89 85       	ldd	r24, Y+9	; 0x09
    19b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e8       	ldi	r20, 0x80	; 128
    19c0:	5f e3       	ldi	r21, 0x3F	; 63
    19c2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19c6:	88 23       	and	r24, r24
    19c8:	2c f4       	brge	.+10     	; 0x19d4 <SevSeg_SevErrStateDisplayMax+0x8c>
		__ticks = 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	9e 83       	std	Y+6, r25	; 0x06
    19d0:	8d 83       	std	Y+5, r24	; 0x05
    19d2:	3f c0       	rjmp	.+126    	; 0x1a52 <SevSeg_SevErrStateDisplayMax+0x10a>
	else if (__tmp > 65535)
    19d4:	6f 81       	ldd	r22, Y+7	; 0x07
    19d6:	78 85       	ldd	r23, Y+8	; 0x08
    19d8:	89 85       	ldd	r24, Y+9	; 0x09
    19da:	9a 85       	ldd	r25, Y+10	; 0x0a
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	3f ef       	ldi	r19, 0xFF	; 255
    19e0:	4f e7       	ldi	r20, 0x7F	; 127
    19e2:	57 e4       	ldi	r21, 0x47	; 71
    19e4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19e8:	18 16       	cp	r1, r24
    19ea:	4c f5       	brge	.+82     	; 0x1a3e <SevSeg_SevErrStateDisplayMax+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e2       	ldi	r20, 0x20	; 32
    19fa:	51 e4       	ldi	r21, 0x41	; 65
    19fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	9e 83       	std	Y+6, r25	; 0x06
    1a12:	8d 83       	std	Y+5, r24	; 0x05
    1a14:	0f c0       	rjmp	.+30     	; 0x1a34 <SevSeg_SevErrStateDisplayMax+0xec>
    1a16:	88 ec       	ldi	r24, 0xC8	; 200
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9c 83       	std	Y+4, r25	; 0x04
    1a1c:	8b 83       	std	Y+3, r24	; 0x03
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	9c 81       	ldd	r25, Y+4	; 0x04
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <SevSeg_SevErrStateDisplayMax+0xda>
    1a26:	9c 83       	std	Y+4, r25	; 0x04
    1a28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	9e 81       	ldd	r25, Y+6	; 0x06
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	69 f7       	brne	.-38     	; 0x1a16 <SevSeg_SevErrStateDisplayMax+0xce>
    1a3c:	14 c0       	rjmp	.+40     	; 0x1a66 <SevSeg_SevErrStateDisplayMax+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a40:	78 85       	ldd	r23, Y+8	; 0x08
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	9e 83       	std	Y+6, r25	; 0x06
    1a50:	8d 83       	std	Y+5, r24	; 0x05
    1a52:	8d 81       	ldd	r24, Y+5	; 0x05
    1a54:	9e 81       	ldd	r25, Y+6	; 0x06
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <SevSeg_SevErrStateDisplayMax+0x116>
    1a62:	9a 83       	std	Y+2, r25	; 0x02
    1a64:	89 83       	std	Y+1, r24	; 0x01
	
}

SevErrState    SevSeg_SevErrStateDisplayMax(SevSeg_info * SevenSegment1)
{
	for(s8 i = FirstNum; i<=LastNum;i++)
    1a66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a68:	8f 5f       	subi	r24, 0xFF	; 255
    1a6a:	8f 87       	std	Y+15, r24	; 0x0f
    1a6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a6e:	8a 30       	cpi	r24, 0x0A	; 10
    1a70:	0c f4       	brge	.+2      	; 0x1a74 <SevSeg_SevErrStateDisplayMax+0x12c>
    1a72:	78 cf       	rjmp	.-272    	; 0x1964 <SevSeg_SevErrStateDisplayMax+0x1c>
	{
		DIO_ErrStateSetGroupValue ((SevenSegment1->SevSeg_Group),SevSeg_Arr[i]);
		_delay_ms(1000);
	}
}
    1a74:	62 96       	adiw	r28, 0x12	; 18
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <Led_LedErrStateInit>:
#include "Led_Interface.h"



LedErrState	Led_LedErrStateInit(Led_info *Led)
{
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <Led_LedErrStateInit+0x6>
    1a8c:	0f 92       	push	r0
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	9a 83       	std	Y+2, r25	; 0x02
    1a94:	89 83       	std	Y+1, r24	; 0x01
	if(DIO_ErrStateSetPinDirection(Led->Led_Group, Led->Led_Pin,DIO_Output))
    1a96:	e9 81       	ldd	r30, Y+1	; 0x01
    1a98:	fa 81       	ldd	r31, Y+2	; 0x02
    1a9a:	80 81       	ld	r24, Z
    1a9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa0:	91 81       	ldd	r25, Z+1	; 0x01
    1aa2:	69 2f       	mov	r22, r25
    1aa4:	41 e0       	ldi	r20, 0x01	; 1
    1aa6:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_ErrStateSetPinDirection>
    1aaa:	88 23       	and	r24, r24
    1aac:	19 f0       	breq	.+6      	; 0x1ab4 <Led_LedErrStateInit+0x2e>
	{
		return LedInitError;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	8b 83       	std	Y+3, r24	; 0x03
    1ab2:	01 c0       	rjmp	.+2      	; 0x1ab6 <Led_LedErrStateInit+0x30>
	}
	return LedNoError;
    1ab4:	1b 82       	std	Y+3, r1	; 0x03
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <Led_LedErrStateTurnOn>:

LedErrState	Led_LedErrStateTurnOn(Led_info *Led) 
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <Led_LedErrStateTurnOn+0x6>
    1aca:	0f 92       	push	r0
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	9a 83       	std	Y+2, r25	; 0x02
    1ad2:	89 83       	std	Y+1, r24	; 0x01
	
	if (Led->ConnectionType == Source_Connection)
    1ad4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	88 23       	and	r24, r24
    1adc:	59 f4       	brne	.+22     	; 0x1af4 <Led_LedErrStateTurnOn+0x30>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_High);
    1ade:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae2:	80 81       	ld	r24, Z
    1ae4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae8:	91 81       	ldd	r25, Z+1	; 0x01
    1aea:	69 2f       	mov	r22, r25
    1aec:	41 e0       	ldi	r20, 0x01	; 1
    1aee:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_ErrStateSetPinValue>
    1af2:	13 c0       	rjmp	.+38     	; 0x1b1a <Led_LedErrStateTurnOn+0x56>
	}
	else if (Led->ConnectionType == Sink_Connection)
    1af4:	e9 81       	ldd	r30, Y+1	; 0x01
    1af6:	fa 81       	ldd	r31, Y+2	; 0x02
    1af8:	82 81       	ldd	r24, Z+2	; 0x02
    1afa:	81 30       	cpi	r24, 0x01	; 1
    1afc:	59 f4       	brne	.+22     	; 0x1b14 <Led_LedErrStateTurnOn+0x50>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_Low);
    1afe:	e9 81       	ldd	r30, Y+1	; 0x01
    1b00:	fa 81       	ldd	r31, Y+2	; 0x02
    1b02:	80 81       	ld	r24, Z
    1b04:	e9 81       	ldd	r30, Y+1	; 0x01
    1b06:	fa 81       	ldd	r31, Y+2	; 0x02
    1b08:	91 81       	ldd	r25, Z+1	; 0x01
    1b0a:	69 2f       	mov	r22, r25
    1b0c:	40 e0       	ldi	r20, 0x00	; 0
    1b0e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_ErrStateSetPinValue>
    1b12:	03 c0       	rjmp	.+6      	; 0x1b1a <Led_LedErrStateTurnOn+0x56>
	}
	else 
	{
		return ConnectionTypeError;
    1b14:	82 e0       	ldi	r24, 0x02	; 2
    1b16:	8b 83       	std	Y+3, r24	; 0x03
    1b18:	01 c0       	rjmp	.+2      	; 0x1b1c <Led_LedErrStateTurnOn+0x58>
	}
	return LedNoError;
    1b1a:	1b 82       	std	Y+3, r1	; 0x03
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
	
	
} 
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	08 95       	ret

00001b2a <Led_LedErrStateTurnOff>:
  


LedErrState	Led_LedErrStateTurnOff(Led_info *Led) 
{
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	00 d0       	rcall	.+0      	; 0x1b30 <Led_LedErrStateTurnOff+0x6>
    1b30:	0f 92       	push	r0
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	9a 83       	std	Y+2, r25	; 0x02
    1b38:	89 83       	std	Y+1, r24	; 0x01
	if (Led->ConnectionType == Source_Connection)
    1b3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	88 23       	and	r24, r24
    1b42:	59 f4       	brne	.+22     	; 0x1b5a <Led_LedErrStateTurnOff+0x30>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_Low);
    1b44:	e9 81       	ldd	r30, Y+1	; 0x01
    1b46:	fa 81       	ldd	r31, Y+2	; 0x02
    1b48:	80 81       	ld	r24, Z
    1b4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b4e:	91 81       	ldd	r25, Z+1	; 0x01
    1b50:	69 2f       	mov	r22, r25
    1b52:	40 e0       	ldi	r20, 0x00	; 0
    1b54:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_ErrStateSetPinValue>
    1b58:	13 c0       	rjmp	.+38     	; 0x1b80 <Led_LedErrStateTurnOff+0x56>
	}
	else if (Led->ConnectionType == Sink_Connection)
    1b5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	81 30       	cpi	r24, 0x01	; 1
    1b62:	59 f4       	brne	.+22     	; 0x1b7a <Led_LedErrStateTurnOff+0x50>
	{
		DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_High);
    1b64:	e9 81       	ldd	r30, Y+1	; 0x01
    1b66:	fa 81       	ldd	r31, Y+2	; 0x02
    1b68:	80 81       	ld	r24, Z
    1b6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	69 2f       	mov	r22, r25
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_ErrStateSetPinValue>
    1b78:	03 c0       	rjmp	.+6      	; 0x1b80 <Led_LedErrStateTurnOff+0x56>
	}
	else 
	{
		return ConnectionTypeError;
    1b7a:	82 e0       	ldi	r24, 0x02	; 2
    1b7c:	8b 83       	std	Y+3, r24	; 0x03
    1b7e:	01 c0       	rjmp	.+2      	; 0x1b82 <Led_LedErrStateTurnOff+0x58>
	}
	return NoError;
    1b80:	1b 82       	std	Y+3, r1	; 0x03
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
	
}
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <App1>:

#include "App1.h"


void App1()
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	ec 97       	sbiw	r28, 0x3c	; 60
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61

	/*Switch Setup*/
	Switch_Info sw0 = {DIO_GroupD,Pin0,InternalPullUp};
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	82 96       	adiw	r24, 0x22	; 34
    1ba8:	9f a7       	std	Y+47, r25	; 0x2f
    1baa:	8e a7       	std	Y+46, r24	; 0x2e
    1bac:	e8 e7       	ldi	r30, 0x78	; 120
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	f9 ab       	std	Y+49, r31	; 0x31
    1bb2:	e8 ab       	std	Y+48, r30	; 0x30
    1bb4:	f3 e0       	ldi	r31, 0x03	; 3
    1bb6:	fa ab       	std	Y+50, r31	; 0x32
    1bb8:	e8 a9       	ldd	r30, Y+48	; 0x30
    1bba:	f9 a9       	ldd	r31, Y+49	; 0x31
    1bbc:	00 80       	ld	r0, Z
    1bbe:	88 a9       	ldd	r24, Y+48	; 0x30
    1bc0:	99 a9       	ldd	r25, Y+49	; 0x31
    1bc2:	01 96       	adiw	r24, 0x01	; 1
    1bc4:	99 ab       	std	Y+49, r25	; 0x31
    1bc6:	88 ab       	std	Y+48, r24	; 0x30
    1bc8:	ee a5       	ldd	r30, Y+46	; 0x2e
    1bca:	ff a5       	ldd	r31, Y+47	; 0x2f
    1bcc:	00 82       	st	Z, r0
    1bce:	8e a5       	ldd	r24, Y+46	; 0x2e
    1bd0:	9f a5       	ldd	r25, Y+47	; 0x2f
    1bd2:	01 96       	adiw	r24, 0x01	; 1
    1bd4:	9f a7       	std	Y+47, r25	; 0x2f
    1bd6:	8e a7       	std	Y+46, r24	; 0x2e
    1bd8:	9a a9       	ldd	r25, Y+50	; 0x32
    1bda:	91 50       	subi	r25, 0x01	; 1
    1bdc:	9a ab       	std	Y+50, r25	; 0x32
    1bde:	ea a9       	ldd	r30, Y+50	; 0x32
    1be0:	ee 23       	and	r30, r30
    1be2:	51 f7       	brne	.-44     	; 0x1bb8 <App1+0x28>
	Switch_Info sw1 = {DIO_GroupD,Pin1,InternalPullUp};
    1be4:	ce 01       	movw	r24, r28
    1be6:	85 96       	adiw	r24, 0x25	; 37
    1be8:	9c ab       	std	Y+52, r25	; 0x34
    1bea:	8b ab       	std	Y+51, r24	; 0x33
    1bec:	e5 e7       	ldi	r30, 0x75	; 117
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	fe ab       	std	Y+54, r31	; 0x36
    1bf2:	ed ab       	std	Y+53, r30	; 0x35
    1bf4:	f3 e0       	ldi	r31, 0x03	; 3
    1bf6:	ff ab       	std	Y+55, r31	; 0x37
    1bf8:	ed a9       	ldd	r30, Y+53	; 0x35
    1bfa:	fe a9       	ldd	r31, Y+54	; 0x36
    1bfc:	00 80       	ld	r0, Z
    1bfe:	8d a9       	ldd	r24, Y+53	; 0x35
    1c00:	9e a9       	ldd	r25, Y+54	; 0x36
    1c02:	01 96       	adiw	r24, 0x01	; 1
    1c04:	9e ab       	std	Y+54, r25	; 0x36
    1c06:	8d ab       	std	Y+53, r24	; 0x35
    1c08:	eb a9       	ldd	r30, Y+51	; 0x33
    1c0a:	fc a9       	ldd	r31, Y+52	; 0x34
    1c0c:	00 82       	st	Z, r0
    1c0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c10:	9c a9       	ldd	r25, Y+52	; 0x34
    1c12:	01 96       	adiw	r24, 0x01	; 1
    1c14:	9c ab       	std	Y+52, r25	; 0x34
    1c16:	8b ab       	std	Y+51, r24	; 0x33
    1c18:	9f a9       	ldd	r25, Y+55	; 0x37
    1c1a:	91 50       	subi	r25, 0x01	; 1
    1c1c:	9f ab       	std	Y+55, r25	; 0x37
    1c1e:	ef a9       	ldd	r30, Y+55	; 0x37
    1c20:	ee 23       	and	r30, r30
    1c22:	51 f7       	brne	.-44     	; 0x1bf8 <App1+0x68>
	Switch_Info sw2 = {DIO_GroupD,Pin2,InternalPullUp};
    1c24:	ce 01       	movw	r24, r28
    1c26:	88 96       	adiw	r24, 0x28	; 40
    1c28:	99 af       	std	Y+57, r25	; 0x39
    1c2a:	88 af       	std	Y+56, r24	; 0x38
    1c2c:	e2 e7       	ldi	r30, 0x72	; 114
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	fb af       	std	Y+59, r31	; 0x3b
    1c32:	ea af       	std	Y+58, r30	; 0x3a
    1c34:	f3 e0       	ldi	r31, 0x03	; 3
    1c36:	fc af       	std	Y+60, r31	; 0x3c
    1c38:	ea ad       	ldd	r30, Y+58	; 0x3a
    1c3a:	fb ad       	ldd	r31, Y+59	; 0x3b
    1c3c:	00 80       	ld	r0, Z
    1c3e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c40:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	9b af       	std	Y+59, r25	; 0x3b
    1c46:	8a af       	std	Y+58, r24	; 0x3a
    1c48:	e8 ad       	ldd	r30, Y+56	; 0x38
    1c4a:	f9 ad       	ldd	r31, Y+57	; 0x39
    1c4c:	00 82       	st	Z, r0
    1c4e:	88 ad       	ldd	r24, Y+56	; 0x38
    1c50:	99 ad       	ldd	r25, Y+57	; 0x39
    1c52:	01 96       	adiw	r24, 0x01	; 1
    1c54:	99 af       	std	Y+57, r25	; 0x39
    1c56:	88 af       	std	Y+56, r24	; 0x38
    1c58:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c5a:	91 50       	subi	r25, 0x01	; 1
    1c5c:	9c af       	std	Y+60, r25	; 0x3c
    1c5e:	ec ad       	ldd	r30, Y+60	; 0x3c
    1c60:	ee 23       	and	r30, r30
    1c62:	51 f7       	brne	.-44     	; 0x1c38 <App1+0xa8>

	u8 sw0_val = 1;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	8b a7       	std	Y+43, r24	; 0x2b
	u8 sw1_val = 1;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	8c a7       	std	Y+44, r24	; 0x2c
	u8 sw2_val = 1;
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	8d a7       	std	Y+45, r24	; 0x2d

	SW_SwitchErrStateInit(&sw0);
    1c70:	ce 01       	movw	r24, r28
    1c72:	82 96       	adiw	r24, 0x22	; 34
    1c74:	0e 94 ee 09 	call	0x13dc	; 0x13dc <SW_SwitchErrStateInit>
	SW_SwitchErrStateInit(&sw1);
    1c78:	ce 01       	movw	r24, r28
    1c7a:	85 96       	adiw	r24, 0x25	; 37
    1c7c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <SW_SwitchErrStateInit>
	SW_SwitchErrStateInit(&sw2);
    1c80:	ce 01       	movw	r24, r28
    1c82:	88 96       	adiw	r24, 0x28	; 40
    1c84:	0e 94 ee 09 	call	0x13dc	; 0x13dc <SW_SwitchErrStateInit>

	/*Seven Segment Setup*/
	SevSeg_info* sseg1 ;
	sseg1->SevSeg_Group = DIO_GroupA;
    1c88:	e8 a1       	ldd	r30, Y+32	; 0x20
    1c8a:	f9 a1       	ldd	r31, Y+33	; 0x21
    1c8c:	11 82       	std	Z+1, r1	; 0x01
	SevSeg_SevErrInit(sseg1);
    1c8e:	88 a1       	ldd	r24, Y+32	; 0x20
    1c90:	99 a1       	ldd	r25, Y+33	; 0x21
    1c92:	0e 94 ac 0a 	call	0x1558	; 0x1558 <SevSeg_SevErrInit>

	u8 Reminder_var = 0;
    1c96:	1f 8e       	std	Y+31, r1	; 0x1f


	while(1)
	{
		/*Reading Push Buttons*/
		SW_SwitchErrStateGetState(&sw0,&sw0_val);
    1c98:	ce 01       	movw	r24, r28
    1c9a:	82 96       	adiw	r24, 0x22	; 34
    1c9c:	9e 01       	movw	r18, r28
    1c9e:	25 5d       	subi	r18, 0xD5	; 213
    1ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca2:	b9 01       	movw	r22, r18
    1ca4:	0e 94 8e 0a 	call	0x151c	; 0x151c <SW_SwitchErrStateGetState>
		SW_SwitchErrStateGetState(&sw1,&sw1_val);
    1ca8:	ce 01       	movw	r24, r28
    1caa:	85 96       	adiw	r24, 0x25	; 37
    1cac:	9e 01       	movw	r18, r28
    1cae:	24 5d       	subi	r18, 0xD4	; 212
    1cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb2:	b9 01       	movw	r22, r18
    1cb4:	0e 94 8e 0a 	call	0x151c	; 0x151c <SW_SwitchErrStateGetState>
		SW_SwitchErrStateGetState(&sw2,&sw2_val);
    1cb8:	ce 01       	movw	r24, r28
    1cba:	88 96       	adiw	r24, 0x28	; 40
    1cbc:	9e 01       	movw	r18, r28
    1cbe:	23 5d       	subi	r18, 0xD3	; 211
    1cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc2:	b9 01       	movw	r22, r18
    1cc4:	0e 94 8e 0a 	call	0x151c	; 0x151c <SW_SwitchErrStateGetState>

		/*First Switch to Count up from Zero to nine*/
		if(sw0_val == PressedPullUp)
    1cc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cca:	88 23       	and	r24, r24
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <App1+0x140>
    1cce:	9c c0       	rjmp	.+312    	; 0x1e08 <App1+0x278>
		{
			for(u8 i=0; i<10;i++)
    1cd0:	1e 8e       	std	Y+30, r1	; 0x1e
    1cd2:	95 c0       	rjmp	.+298    	; 0x1dfe <App1+0x26e>
			{
				SevSeg_SevErrStateSetNumber(i,sseg1);
    1cd4:	28 a1       	ldd	r18, Y+32	; 0x20
    1cd6:	39 a1       	ldd	r19, Y+33	; 0x21
    1cd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cda:	b9 01       	movw	r22, r18
    1cdc:	0e 94 bf 0a 	call	0x157e	; 0x157e <SevSeg_SevErrStateSetNumber>
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	aa e7       	ldi	r26, 0x7A	; 122
    1ce6:	b4 e4       	ldi	r27, 0x44	; 68
    1ce8:	89 8f       	std	Y+25, r24	; 0x19
    1cea:	9a 8f       	std	Y+26, r25	; 0x1a
    1cec:	ab 8f       	std	Y+27, r26	; 0x1b
    1cee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf0:	69 8d       	ldd	r22, Y+25	; 0x19
    1cf2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	4a ef       	ldi	r20, 0xFA	; 250
    1cfe:	54 e4       	ldi	r21, 0x44	; 68
    1d00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	8d 8b       	std	Y+21, r24	; 0x15
    1d0a:	9e 8b       	std	Y+22, r25	; 0x16
    1d0c:	af 8b       	std	Y+23, r26	; 0x17
    1d0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d10:	6d 89       	ldd	r22, Y+21	; 0x15
    1d12:	7e 89       	ldd	r23, Y+22	; 0x16
    1d14:	8f 89       	ldd	r24, Y+23	; 0x17
    1d16:	98 8d       	ldd	r25, Y+24	; 0x18
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e8       	ldi	r20, 0x80	; 128
    1d1e:	5f e3       	ldi	r21, 0x3F	; 63
    1d20:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d24:	88 23       	and	r24, r24
    1d26:	2c f4       	brge	.+10     	; 0x1d32 <App1+0x1a2>
		__ticks = 1;
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	9c 8b       	std	Y+20, r25	; 0x14
    1d2e:	8b 8b       	std	Y+19, r24	; 0x13
    1d30:	3f c0       	rjmp	.+126    	; 0x1db0 <App1+0x220>
	else if (__tmp > 65535)
    1d32:	6d 89       	ldd	r22, Y+21	; 0x15
    1d34:	7e 89       	ldd	r23, Y+22	; 0x16
    1d36:	8f 89       	ldd	r24, Y+23	; 0x17
    1d38:	98 8d       	ldd	r25, Y+24	; 0x18
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	3f ef       	ldi	r19, 0xFF	; 255
    1d3e:	4f e7       	ldi	r20, 0x7F	; 127
    1d40:	57 e4       	ldi	r21, 0x47	; 71
    1d42:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d46:	18 16       	cp	r1, r24
    1d48:	4c f5       	brge	.+82     	; 0x1d9c <App1+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	40 e2       	ldi	r20, 0x20	; 32
    1d58:	51 e4       	ldi	r21, 0x41	; 65
    1d5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	bc 01       	movw	r22, r24
    1d64:	cd 01       	movw	r24, r26
    1d66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	9c 8b       	std	Y+20, r25	; 0x14
    1d70:	8b 8b       	std	Y+19, r24	; 0x13
    1d72:	0f c0       	rjmp	.+30     	; 0x1d92 <App1+0x202>
    1d74:	88 ec       	ldi	r24, 0xC8	; 200
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	9a 8b       	std	Y+18, r25	; 0x12
    1d7a:	89 8b       	std	Y+17, r24	; 0x11
    1d7c:	89 89       	ldd	r24, Y+17	; 0x11
    1d7e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <App1+0x1f0>
    1d84:	9a 8b       	std	Y+18, r25	; 0x12
    1d86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d88:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	9c 8b       	std	Y+20, r25	; 0x14
    1d90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d92:	8b 89       	ldd	r24, Y+19	; 0x13
    1d94:	9c 89       	ldd	r25, Y+20	; 0x14
    1d96:	00 97       	sbiw	r24, 0x00	; 0
    1d98:	69 f7       	brne	.-38     	; 0x1d74 <App1+0x1e4>
    1d9a:	14 c0       	rjmp	.+40     	; 0x1dc4 <App1+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1da0:	8f 89       	ldd	r24, Y+23	; 0x17
    1da2:	98 8d       	ldd	r25, Y+24	; 0x18
    1da4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	9c 8b       	std	Y+20, r25	; 0x14
    1dae:	8b 8b       	std	Y+19, r24	; 0x13
    1db0:	8b 89       	ldd	r24, Y+19	; 0x13
    1db2:	9c 89       	ldd	r25, Y+20	; 0x14
    1db4:	98 8b       	std	Y+16, r25	; 0x10
    1db6:	8f 87       	std	Y+15, r24	; 0x0f
    1db8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dba:	98 89       	ldd	r25, Y+16	; 0x10
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <App1+0x22c>
    1dc0:	98 8b       	std	Y+16, r25	; 0x10
    1dc2:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
				Reminder_var = i;
    1dc4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dc6:	8f 8f       	std	Y+31, r24	; 0x1f

				SW_SwitchErrStateGetState(&sw1,&sw1_val);
    1dc8:	ce 01       	movw	r24, r28
    1dca:	85 96       	adiw	r24, 0x25	; 37
    1dcc:	9e 01       	movw	r18, r28
    1dce:	24 5d       	subi	r18, 0xD4	; 212
    1dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd2:	b9 01       	movw	r22, r18
    1dd4:	0e 94 8e 0a 	call	0x151c	; 0x151c <SW_SwitchErrStateGetState>
				SW_SwitchErrStateGetState(&sw2,&sw2_val);
    1dd8:	ce 01       	movw	r24, r28
    1dda:	88 96       	adiw	r24, 0x28	; 40
    1ddc:	9e 01       	movw	r18, r28
    1dde:	23 5d       	subi	r18, 0xD3	; 211
    1de0:	3f 4f       	sbci	r19, 0xFF	; 255
    1de2:	b9 01       	movw	r22, r18
    1de4:	0e 94 8e 0a 	call	0x151c	; 0x151c <SW_SwitchErrStateGetState>
				if((sw1_val == PressedPullUp)||(sw2_val == PressedPullUp))
    1de8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1dea:	88 23       	and	r24, r24
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <App1+0x260>
    1dee:	54 cf       	rjmp	.-344    	; 0x1c98 <App1+0x108>
    1df0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1df2:	88 23       	and	r24, r24
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <App1+0x268>
    1df6:	50 cf       	rjmp	.-352    	; 0x1c98 <App1+0x108>
		SW_SwitchErrStateGetState(&sw2,&sw2_val);

		/*First Switch to Count up from Zero to nine*/
		if(sw0_val == PressedPullUp)
		{
			for(u8 i=0; i<10;i++)
    1df8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dfa:	8f 5f       	subi	r24, 0xFF	; 255
    1dfc:	8e 8f       	std	Y+30, r24	; 0x1e
    1dfe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e00:	8a 30       	cpi	r24, 0x0A	; 10
    1e02:	08 f4       	brcc	.+2      	; 0x1e06 <App1+0x276>
    1e04:	67 cf       	rjmp	.-306    	; 0x1cd4 <App1+0x144>
    1e06:	48 cf       	rjmp	.-368    	; 0x1c98 <App1+0x108>
				}
			}

		}
		/*Second Switch to count Down from nine to zero*/
		else if(sw1_val == PressedPullUp)
    1e08:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e0a:	88 23       	and	r24, r24
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <App1+0x280>
    1e0e:	9d c0       	rjmp	.+314    	; 0x1f4a <App1+0x3ba>
		{
			for(s8 i=9; i>=0;i--)
    1e10:	89 e0       	ldi	r24, 0x09	; 9
    1e12:	8d 8f       	std	Y+29, r24	; 0x1d
    1e14:	95 c0       	rjmp	.+298    	; 0x1f40 <App1+0x3b0>
			{
				SevSeg_SevErrStateSetNumber(i,sseg1);
    1e16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e18:	28 a1       	ldd	r18, Y+32	; 0x20
    1e1a:	39 a1       	ldd	r19, Y+33	; 0x21
    1e1c:	b9 01       	movw	r22, r18
    1e1e:	0e 94 bf 0a 	call	0x157e	; 0x157e <SevSeg_SevErrStateSetNumber>
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	aa e7       	ldi	r26, 0x7A	; 122
    1e28:	b4 e4       	ldi	r27, 0x44	; 68
    1e2a:	8b 87       	std	Y+11, r24	; 0x0b
    1e2c:	9c 87       	std	Y+12, r25	; 0x0c
    1e2e:	ad 87       	std	Y+13, r26	; 0x0d
    1e30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	4a ef       	ldi	r20, 0xFA	; 250
    1e40:	54 e4       	ldi	r21, 0x44	; 68
    1e42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	8f 83       	std	Y+7, r24	; 0x07
    1e4c:	98 87       	std	Y+8, r25	; 0x08
    1e4e:	a9 87       	std	Y+9, r26	; 0x09
    1e50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e52:	6f 81       	ldd	r22, Y+7	; 0x07
    1e54:	78 85       	ldd	r23, Y+8	; 0x08
    1e56:	89 85       	ldd	r24, Y+9	; 0x09
    1e58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e8       	ldi	r20, 0x80	; 128
    1e60:	5f e3       	ldi	r21, 0x3F	; 63
    1e62:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e66:	88 23       	and	r24, r24
    1e68:	2c f4       	brge	.+10     	; 0x1e74 <App1+0x2e4>
		__ticks = 1;
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	9e 83       	std	Y+6, r25	; 0x06
    1e70:	8d 83       	std	Y+5, r24	; 0x05
    1e72:	3f c0       	rjmp	.+126    	; 0x1ef2 <App1+0x362>
	else if (__tmp > 65535)
    1e74:	6f 81       	ldd	r22, Y+7	; 0x07
    1e76:	78 85       	ldd	r23, Y+8	; 0x08
    1e78:	89 85       	ldd	r24, Y+9	; 0x09
    1e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	3f ef       	ldi	r19, 0xFF	; 255
    1e80:	4f e7       	ldi	r20, 0x7F	; 127
    1e82:	57 e4       	ldi	r21, 0x47	; 71
    1e84:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e88:	18 16       	cp	r1, r24
    1e8a:	4c f5       	brge	.+82     	; 0x1ede <App1+0x34e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e2       	ldi	r20, 0x20	; 32
    1e9a:	51 e4       	ldi	r21, 0x41	; 65
    1e9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	bc 01       	movw	r22, r24
    1ea6:	cd 01       	movw	r24, r26
    1ea8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	9e 83       	std	Y+6, r25	; 0x06
    1eb2:	8d 83       	std	Y+5, r24	; 0x05
    1eb4:	0f c0       	rjmp	.+30     	; 0x1ed4 <App1+0x344>
    1eb6:	88 ec       	ldi	r24, 0xC8	; 200
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9c 83       	std	Y+4, r25	; 0x04
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <App1+0x332>
    1ec6:	9c 83       	std	Y+4, r25	; 0x04
    1ec8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	9e 83       	std	Y+6, r25	; 0x06
    1ed2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	69 f7       	brne	.-38     	; 0x1eb6 <App1+0x326>
    1edc:	14 c0       	rjmp	.+40     	; 0x1f06 <App1+0x376>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ede:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee0:	78 85       	ldd	r23, Y+8	; 0x08
    1ee2:	89 85       	ldd	r24, Y+9	; 0x09
    1ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	9e 83       	std	Y+6, r25	; 0x06
    1ef0:	8d 83       	std	Y+5, r24	; 0x05
    1ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef6:	9a 83       	std	Y+2, r25	; 0x02
    1ef8:	89 83       	std	Y+1, r24	; 0x01
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	9a 81       	ldd	r25, Y+2	; 0x02
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <App1+0x36e>
    1f02:	9a 83       	std	Y+2, r25	; 0x02
    1f04:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				Reminder_var = i;
    1f06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f08:	8f 8f       	std	Y+31, r24	; 0x1f

				SW_SwitchErrStateGetState(&sw0,&sw0_val);
    1f0a:	ce 01       	movw	r24, r28
    1f0c:	82 96       	adiw	r24, 0x22	; 34
    1f0e:	9e 01       	movw	r18, r28
    1f10:	25 5d       	subi	r18, 0xD5	; 213
    1f12:	3f 4f       	sbci	r19, 0xFF	; 255
    1f14:	b9 01       	movw	r22, r18
    1f16:	0e 94 8e 0a 	call	0x151c	; 0x151c <SW_SwitchErrStateGetState>
				SW_SwitchErrStateGetState(&sw2,&sw2_val);
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	88 96       	adiw	r24, 0x28	; 40
    1f1e:	9e 01       	movw	r18, r28
    1f20:	23 5d       	subi	r18, 0xD3	; 211
    1f22:	3f 4f       	sbci	r19, 0xFF	; 255
    1f24:	b9 01       	movw	r22, r18
    1f26:	0e 94 8e 0a 	call	0x151c	; 0x151c <SW_SwitchErrStateGetState>
				if((sw0_val == PressedPullUp)||(sw2_val == PressedPullUp))
    1f2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f2c:	88 23       	and	r24, r24
    1f2e:	09 f4       	brne	.+2      	; 0x1f32 <App1+0x3a2>
    1f30:	b3 ce       	rjmp	.-666    	; 0x1c98 <App1+0x108>
    1f32:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f34:	88 23       	and	r24, r24
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <App1+0x3aa>
    1f38:	af ce       	rjmp	.-674    	; 0x1c98 <App1+0x108>

		}
		/*Second Switch to count Down from nine to zero*/
		else if(sw1_val == PressedPullUp)
		{
			for(s8 i=9; i>=0;i--)
    1f3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f3c:	81 50       	subi	r24, 0x01	; 1
    1f3e:	8d 8f       	std	Y+29, r24	; 0x1d
    1f40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f42:	88 23       	and	r24, r24
    1f44:	0c f0       	brlt	.+2      	; 0x1f48 <App1+0x3b8>
    1f46:	67 cf       	rjmp	.-306    	; 0x1e16 <App1+0x286>
    1f48:	a7 ce       	rjmp	.-690    	; 0x1c98 <App1+0x108>
			}


		}
		/*Third Switch to Stop on last number Displayed*/
		else if(sw2_val == PressedPullUp)
    1f4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f4c:	88 23       	and	r24, r24
    1f4e:	09 f0       	breq	.+2      	; 0x1f52 <App1+0x3c2>
    1f50:	a3 ce       	rjmp	.-698    	; 0x1c98 <App1+0x108>
		{
			SevSeg_SevErrStateSetNumber(Reminder_var,sseg1);
    1f52:	28 a1       	ldd	r18, Y+32	; 0x20
    1f54:	39 a1       	ldd	r19, Y+33	; 0x21
    1f56:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f58:	b9 01       	movw	r22, r18
    1f5a:	0e 94 bf 0a 	call	0x157e	; 0x157e <SevSeg_SevErrStateSetNumber>
    1f5e:	9c ce       	rjmp	.-712    	; 0x1c98 <App1+0x108>

00001f60 <App2>:

void Slc_seg1(void);
void Slc_seg2(void);

void App2()
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	e4 97       	sbiw	r28, 0x34	; 52
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61


	/*Seven Segment Setup*/
	SevSeg_info* sseg1 ;
	sseg1->SevSeg_Group = DIO_GroupA;
    1f74:	eb a9       	ldd	r30, Y+51	; 0x33
    1f76:	fc a9       	ldd	r31, Y+52	; 0x34
    1f78:	11 82       	std	Z+1, r1	; 0x01
	SevSeg_SevErrInit(sseg1);
    1f7a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f7c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f7e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <SevSeg_SevErrInit>
	/*SevSeg_info* sseg2 ;
	sseg2->SevSeg_Group = DIO_GroupB;
	SevSeg_SevErrInit(sseg2);*/

	/*Sev_Seg Selectors*/
	DIO_ErrStateSetPinDirection(DIO_GroupC,seg1_Gnd,DIO_Output);
    1f82:	82 e0       	ldi	r24, 0x02	; 2
    1f84:	60 e0       	ldi	r22, 0x00	; 0
    1f86:	41 e0       	ldi	r20, 0x01	; 1
    1f88:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(DIO_GroupC,seg2_Gnd,DIO_Output);
    1f8c:	82 e0       	ldi	r24, 0x02	; 2
    1f8e:	61 e0       	ldi	r22, 0x01	; 1
    1f90:	41 e0       	ldi	r20, 0x01	; 1
    1f92:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_ErrStateSetPinDirection>


	while(1)
	{

		for(u8 i=0; i<10;i++)
    1f96:	1a aa       	std	Y+50, r1	; 0x32
    1f98:	98 c1       	rjmp	.+816    	; 0x22ca <App2+0x36a>
		{
			for(u8 j=0; j<10;j++)
    1f9a:	19 aa       	std	Y+49, r1	; 0x31
    1f9c:	8f c1       	rjmp	.+798    	; 0x22bc <App2+0x35c>
			{
				Slc_seg2();
    1f9e:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <Slc_seg2>
				SevSeg_SevErrStateSetNumber(i,sseg1);
    1fa2:	2b a9       	ldd	r18, Y+51	; 0x33
    1fa4:	3c a9       	ldd	r19, Y+52	; 0x34
    1fa6:	8a a9       	ldd	r24, Y+50	; 0x32
    1fa8:	b9 01       	movw	r22, r18
    1faa:	0e 94 bf 0a 	call	0x157e	; 0x157e <SevSeg_SevErrStateSetNumber>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	aa ef       	ldi	r26, 0xFA	; 250
    1fb4:	b3 e4       	ldi	r27, 0x43	; 67
    1fb6:	8d a7       	std	Y+45, r24	; 0x2d
    1fb8:	9e a7       	std	Y+46, r25	; 0x2e
    1fba:	af a7       	std	Y+47, r26	; 0x2f
    1fbc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fbe:	6d a5       	ldd	r22, Y+45	; 0x2d
    1fc0:	7e a5       	ldd	r23, Y+46	; 0x2e
    1fc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fc4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fc6:	2b ea       	ldi	r18, 0xAB	; 171
    1fc8:	3a ea       	ldi	r19, 0xAA	; 170
    1fca:	4a e2       	ldi	r20, 0x2A	; 42
    1fcc:	50 e4       	ldi	r21, 0x40	; 64
    1fce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	89 a7       	std	Y+41, r24	; 0x29
    1fd8:	9a a7       	std	Y+42, r25	; 0x2a
    1fda:	ab a7       	std	Y+43, r26	; 0x2b
    1fdc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1fde:	69 a5       	ldd	r22, Y+41	; 0x29
    1fe0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fe2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fe4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e8       	ldi	r20, 0x80	; 128
    1fec:	5f e3       	ldi	r21, 0x3F	; 63
    1fee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ff2:	88 23       	and	r24, r24
    1ff4:	1c f4       	brge	.+6      	; 0x1ffc <App2+0x9c>
		__ticks = 1;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	88 a7       	std	Y+40, r24	; 0x28
    1ffa:	91 c0       	rjmp	.+290    	; 0x211e <App2+0x1be>
	else if (__tmp > 255)
    1ffc:	69 a5       	ldd	r22, Y+41	; 0x29
    1ffe:	7a a5       	ldd	r23, Y+42	; 0x2a
    2000:	8b a5       	ldd	r24, Y+43	; 0x2b
    2002:	9c a5       	ldd	r25, Y+44	; 0x2c
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	4f e7       	ldi	r20, 0x7F	; 127
    200a:	53 e4       	ldi	r21, 0x43	; 67
    200c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2010:	18 16       	cp	r1, r24
    2012:	0c f0       	brlt	.+2      	; 0x2016 <App2+0xb6>
    2014:	7b c0       	rjmp	.+246    	; 0x210c <App2+0x1ac>
	{
		_delay_ms(__us / 1000.0);
    2016:	6d a5       	ldd	r22, Y+45	; 0x2d
    2018:	7e a5       	ldd	r23, Y+46	; 0x2e
    201a:	8f a5       	ldd	r24, Y+47	; 0x2f
    201c:	98 a9       	ldd	r25, Y+48	; 0x30
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	4a e7       	ldi	r20, 0x7A	; 122
    2024:	54 e4       	ldi	r21, 0x44	; 68
    2026:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	8c a3       	std	Y+36, r24	; 0x24
    2030:	9d a3       	std	Y+37, r25	; 0x25
    2032:	ae a3       	std	Y+38, r26	; 0x26
    2034:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2036:	6c a1       	ldd	r22, Y+36	; 0x24
    2038:	7d a1       	ldd	r23, Y+37	; 0x25
    203a:	8e a1       	ldd	r24, Y+38	; 0x26
    203c:	9f a1       	ldd	r25, Y+39	; 0x27
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	4a ef       	ldi	r20, 0xFA	; 250
    2044:	54 e4       	ldi	r21, 0x44	; 68
    2046:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	88 a3       	std	Y+32, r24	; 0x20
    2050:	99 a3       	std	Y+33, r25	; 0x21
    2052:	aa a3       	std	Y+34, r26	; 0x22
    2054:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2056:	68 a1       	ldd	r22, Y+32	; 0x20
    2058:	79 a1       	ldd	r23, Y+33	; 0x21
    205a:	8a a1       	ldd	r24, Y+34	; 0x22
    205c:	9b a1       	ldd	r25, Y+35	; 0x23
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e8       	ldi	r20, 0x80	; 128
    2064:	5f e3       	ldi	r21, 0x3F	; 63
    2066:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    206a:	88 23       	and	r24, r24
    206c:	2c f4       	brge	.+10     	; 0x2078 <App2+0x118>
		__ticks = 1;
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9f 8f       	std	Y+31, r25	; 0x1f
    2074:	8e 8f       	std	Y+30, r24	; 0x1e
    2076:	3f c0       	rjmp	.+126    	; 0x20f6 <App2+0x196>
	else if (__tmp > 65535)
    2078:	68 a1       	ldd	r22, Y+32	; 0x20
    207a:	79 a1       	ldd	r23, Y+33	; 0x21
    207c:	8a a1       	ldd	r24, Y+34	; 0x22
    207e:	9b a1       	ldd	r25, Y+35	; 0x23
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	3f ef       	ldi	r19, 0xFF	; 255
    2084:	4f e7       	ldi	r20, 0x7F	; 127
    2086:	57 e4       	ldi	r21, 0x47	; 71
    2088:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    208c:	18 16       	cp	r1, r24
    208e:	4c f5       	brge	.+82     	; 0x20e2 <App2+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2090:	6c a1       	ldd	r22, Y+36	; 0x24
    2092:	7d a1       	ldd	r23, Y+37	; 0x25
    2094:	8e a1       	ldd	r24, Y+38	; 0x26
    2096:	9f a1       	ldd	r25, Y+39	; 0x27
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e2       	ldi	r20, 0x20	; 32
    209e:	51 e4       	ldi	r21, 0x41	; 65
    20a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	bc 01       	movw	r22, r24
    20aa:	cd 01       	movw	r24, r26
    20ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	9f 8f       	std	Y+31, r25	; 0x1f
    20b6:	8e 8f       	std	Y+30, r24	; 0x1e
    20b8:	0f c0       	rjmp	.+30     	; 0x20d8 <App2+0x178>
    20ba:	88 ec       	ldi	r24, 0xC8	; 200
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	9d 8f       	std	Y+29, r25	; 0x1d
    20c0:	8c 8f       	std	Y+28, r24	; 0x1c
    20c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20c4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <App2+0x166>
    20ca:	9d 8f       	std	Y+29, r25	; 0x1d
    20cc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	9f 8f       	std	Y+31, r25	; 0x1f
    20d6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20da:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	69 f7       	brne	.-38     	; 0x20ba <App2+0x15a>
    20e0:	24 c0       	rjmp	.+72     	; 0x212a <App2+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e2:	68 a1       	ldd	r22, Y+32	; 0x20
    20e4:	79 a1       	ldd	r23, Y+33	; 0x21
    20e6:	8a a1       	ldd	r24, Y+34	; 0x22
    20e8:	9b a1       	ldd	r25, Y+35	; 0x23
    20ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	9f 8f       	std	Y+31, r25	; 0x1f
    20f4:	8e 8f       	std	Y+30, r24	; 0x1e
    20f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20f8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20fa:	9b 8f       	std	Y+27, r25	; 0x1b
    20fc:	8a 8f       	std	Y+26, r24	; 0x1a
    20fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2100:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <App2+0x1a2>
    2106:	9b 8f       	std	Y+27, r25	; 0x1b
    2108:	8a 8f       	std	Y+26, r24	; 0x1a
    210a:	0f c0       	rjmp	.+30     	; 0x212a <App2+0x1ca>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    210c:	69 a5       	ldd	r22, Y+41	; 0x29
    210e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2110:	8b a5       	ldd	r24, Y+43	; 0x2b
    2112:	9c a5       	ldd	r25, Y+44	; 0x2c
    2114:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	88 a7       	std	Y+40, r24	; 0x28
    211e:	88 a5       	ldd	r24, Y+40	; 0x28
    2120:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2122:	89 8d       	ldd	r24, Y+25	; 0x19
    2124:	8a 95       	dec	r24
    2126:	f1 f7       	brne	.-4      	; 0x2124 <App2+0x1c4>
    2128:	89 8f       	std	Y+25, r24	; 0x19
				_delay_us(500);
				Slc_seg1();
    212a:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <Slc_seg1>
				SevSeg_SevErrStateSetNumber(j,sseg1);
    212e:	2b a9       	ldd	r18, Y+51	; 0x33
    2130:	3c a9       	ldd	r19, Y+52	; 0x34
    2132:	89 a9       	ldd	r24, Y+49	; 0x31
    2134:	b9 01       	movw	r22, r18
    2136:	0e 94 bf 0a 	call	0x157e	; 0x157e <SevSeg_SevErrStateSetNumber>
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	aa ef       	ldi	r26, 0xFA	; 250
    2140:	b3 e4       	ldi	r27, 0x43	; 67
    2142:	8d 8b       	std	Y+21, r24	; 0x15
    2144:	9e 8b       	std	Y+22, r25	; 0x16
    2146:	af 8b       	std	Y+23, r26	; 0x17
    2148:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    214a:	6d 89       	ldd	r22, Y+21	; 0x15
    214c:	7e 89       	ldd	r23, Y+22	; 0x16
    214e:	8f 89       	ldd	r24, Y+23	; 0x17
    2150:	98 8d       	ldd	r25, Y+24	; 0x18
    2152:	2b ea       	ldi	r18, 0xAB	; 171
    2154:	3a ea       	ldi	r19, 0xAA	; 170
    2156:	4a e2       	ldi	r20, 0x2A	; 42
    2158:	50 e4       	ldi	r21, 0x40	; 64
    215a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	89 8b       	std	Y+17, r24	; 0x11
    2164:	9a 8b       	std	Y+18, r25	; 0x12
    2166:	ab 8b       	std	Y+19, r26	; 0x13
    2168:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    216a:	69 89       	ldd	r22, Y+17	; 0x11
    216c:	7a 89       	ldd	r23, Y+18	; 0x12
    216e:	8b 89       	ldd	r24, Y+19	; 0x13
    2170:	9c 89       	ldd	r25, Y+20	; 0x14
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e8       	ldi	r20, 0x80	; 128
    2178:	5f e3       	ldi	r21, 0x3F	; 63
    217a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    217e:	88 23       	and	r24, r24
    2180:	1c f4       	brge	.+6      	; 0x2188 <App2+0x228>
		__ticks = 1;
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	88 8b       	std	Y+16, r24	; 0x10
    2186:	91 c0       	rjmp	.+290    	; 0x22aa <App2+0x34a>
	else if (__tmp > 255)
    2188:	69 89       	ldd	r22, Y+17	; 0x11
    218a:	7a 89       	ldd	r23, Y+18	; 0x12
    218c:	8b 89       	ldd	r24, Y+19	; 0x13
    218e:	9c 89       	ldd	r25, Y+20	; 0x14
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	4f e7       	ldi	r20, 0x7F	; 127
    2196:	53 e4       	ldi	r21, 0x43	; 67
    2198:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    219c:	18 16       	cp	r1, r24
    219e:	0c f0       	brlt	.+2      	; 0x21a2 <App2+0x242>
    21a0:	7b c0       	rjmp	.+246    	; 0x2298 <App2+0x338>
	{
		_delay_ms(__us / 1000.0);
    21a2:	6d 89       	ldd	r22, Y+21	; 0x15
    21a4:	7e 89       	ldd	r23, Y+22	; 0x16
    21a6:	8f 89       	ldd	r24, Y+23	; 0x17
    21a8:	98 8d       	ldd	r25, Y+24	; 0x18
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	4a e7       	ldi	r20, 0x7A	; 122
    21b0:	54 e4       	ldi	r21, 0x44	; 68
    21b2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	8c 87       	std	Y+12, r24	; 0x0c
    21bc:	9d 87       	std	Y+13, r25	; 0x0d
    21be:	ae 87       	std	Y+14, r26	; 0x0e
    21c0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c2:	6c 85       	ldd	r22, Y+12	; 0x0c
    21c4:	7d 85       	ldd	r23, Y+13	; 0x0d
    21c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    21c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	4a ef       	ldi	r20, 0xFA	; 250
    21d0:	54 e4       	ldi	r21, 0x44	; 68
    21d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	88 87       	std	Y+8, r24	; 0x08
    21dc:	99 87       	std	Y+9, r25	; 0x09
    21de:	aa 87       	std	Y+10, r26	; 0x0a
    21e0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    21e2:	68 85       	ldd	r22, Y+8	; 0x08
    21e4:	79 85       	ldd	r23, Y+9	; 0x09
    21e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    21e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	40 e8       	ldi	r20, 0x80	; 128
    21f0:	5f e3       	ldi	r21, 0x3F	; 63
    21f2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21f6:	88 23       	and	r24, r24
    21f8:	2c f4       	brge	.+10     	; 0x2204 <App2+0x2a4>
		__ticks = 1;
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	9f 83       	std	Y+7, r25	; 0x07
    2200:	8e 83       	std	Y+6, r24	; 0x06
    2202:	3f c0       	rjmp	.+126    	; 0x2282 <App2+0x322>
	else if (__tmp > 65535)
    2204:	68 85       	ldd	r22, Y+8	; 0x08
    2206:	79 85       	ldd	r23, Y+9	; 0x09
    2208:	8a 85       	ldd	r24, Y+10	; 0x0a
    220a:	9b 85       	ldd	r25, Y+11	; 0x0b
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	3f ef       	ldi	r19, 0xFF	; 255
    2210:	4f e7       	ldi	r20, 0x7F	; 127
    2212:	57 e4       	ldi	r21, 0x47	; 71
    2214:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2218:	18 16       	cp	r1, r24
    221a:	4c f5       	brge	.+82     	; 0x226e <App2+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221c:	6c 85       	ldd	r22, Y+12	; 0x0c
    221e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2220:	8e 85       	ldd	r24, Y+14	; 0x0e
    2222:	9f 85       	ldd	r25, Y+15	; 0x0f
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e2       	ldi	r20, 0x20	; 32
    222a:	51 e4       	ldi	r21, 0x41	; 65
    222c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	bc 01       	movw	r22, r24
    2236:	cd 01       	movw	r24, r26
    2238:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	9f 83       	std	Y+7, r25	; 0x07
    2242:	8e 83       	std	Y+6, r24	; 0x06
    2244:	0f c0       	rjmp	.+30     	; 0x2264 <App2+0x304>
    2246:	88 ec       	ldi	r24, 0xC8	; 200
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9d 83       	std	Y+5, r25	; 0x05
    224c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    224e:	8c 81       	ldd	r24, Y+4	; 0x04
    2250:	9d 81       	ldd	r25, Y+5	; 0x05
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	f1 f7       	brne	.-4      	; 0x2252 <App2+0x2f2>
    2256:	9d 83       	std	Y+5, r25	; 0x05
    2258:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225a:	8e 81       	ldd	r24, Y+6	; 0x06
    225c:	9f 81       	ldd	r25, Y+7	; 0x07
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	9f 83       	std	Y+7, r25	; 0x07
    2262:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2264:	8e 81       	ldd	r24, Y+6	; 0x06
    2266:	9f 81       	ldd	r25, Y+7	; 0x07
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	69 f7       	brne	.-38     	; 0x2246 <App2+0x2e6>
    226c:	24 c0       	rjmp	.+72     	; 0x22b6 <App2+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226e:	68 85       	ldd	r22, Y+8	; 0x08
    2270:	79 85       	ldd	r23, Y+9	; 0x09
    2272:	8a 85       	ldd	r24, Y+10	; 0x0a
    2274:	9b 85       	ldd	r25, Y+11	; 0x0b
    2276:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9f 83       	std	Y+7, r25	; 0x07
    2280:	8e 83       	std	Y+6, r24	; 0x06
    2282:	8e 81       	ldd	r24, Y+6	; 0x06
    2284:	9f 81       	ldd	r25, Y+7	; 0x07
    2286:	9b 83       	std	Y+3, r25	; 0x03
    2288:	8a 83       	std	Y+2, r24	; 0x02
    228a:	8a 81       	ldd	r24, Y+2	; 0x02
    228c:	9b 81       	ldd	r25, Y+3	; 0x03
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <App2+0x32e>
    2292:	9b 83       	std	Y+3, r25	; 0x03
    2294:	8a 83       	std	Y+2, r24	; 0x02
    2296:	0f c0       	rjmp	.+30     	; 0x22b6 <App2+0x356>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2298:	69 89       	ldd	r22, Y+17	; 0x11
    229a:	7a 89       	ldd	r23, Y+18	; 0x12
    229c:	8b 89       	ldd	r24, Y+19	; 0x13
    229e:	9c 89       	ldd	r25, Y+20	; 0x14
    22a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	88 8b       	std	Y+16, r24	; 0x10
    22aa:	88 89       	ldd	r24, Y+16	; 0x10
    22ac:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	8a 95       	dec	r24
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <App2+0x350>
    22b4:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{

		for(u8 i=0; i<10;i++)
		{
			for(u8 j=0; j<10;j++)
    22b6:	89 a9       	ldd	r24, Y+49	; 0x31
    22b8:	8f 5f       	subi	r24, 0xFF	; 255
    22ba:	89 ab       	std	Y+49, r24	; 0x31
    22bc:	89 a9       	ldd	r24, Y+49	; 0x31
    22be:	8a 30       	cpi	r24, 0x0A	; 10
    22c0:	08 f4       	brcc	.+2      	; 0x22c4 <App2+0x364>
    22c2:	6d ce       	rjmp	.-806    	; 0x1f9e <App2+0x3e>


	while(1)
	{

		for(u8 i=0; i<10;i++)
    22c4:	8a a9       	ldd	r24, Y+50	; 0x32
    22c6:	8f 5f       	subi	r24, 0xFF	; 255
    22c8:	8a ab       	std	Y+50, r24	; 0x32
    22ca:	8a a9       	ldd	r24, Y+50	; 0x32
    22cc:	8a 30       	cpi	r24, 0x0A	; 10
    22ce:	08 f4       	brcc	.+2      	; 0x22d2 <App2+0x372>
    22d0:	64 ce       	rjmp	.-824    	; 0x1f9a <App2+0x3a>
    22d2:	61 ce       	rjmp	.-830    	; 0x1f96 <App2+0x36>

000022d4 <Slc_seg1>:


	}
}
void Slc_seg1(void)
{
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
	DIO_ErrStateSetPinValue(DIO_GroupC,seg1_Gnd,DIO_Low);
    22dc:	82 e0       	ldi	r24, 0x02	; 2
    22de:	60 e0       	ldi	r22, 0x00	; 0
    22e0:	40 e0       	ldi	r20, 0x00	; 0
    22e2:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(DIO_GroupC,seg2_Gnd,DIO_High);
    22e6:	82 e0       	ldi	r24, 0x02	; 2
    22e8:	61 e0       	ldi	r22, 0x01	; 1
    22ea:	41 e0       	ldi	r20, 0x01	; 1
    22ec:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_ErrStateSetPinValue>
}
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <Slc_seg2>:
void Slc_seg2(void)
{
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
	DIO_ErrStateSetPinValue(DIO_GroupC,seg2_Gnd,DIO_Low);
    22fe:	82 e0       	ldi	r24, 0x02	; 2
    2300:	61 e0       	ldi	r22, 0x01	; 1
    2302:	40 e0       	ldi	r20, 0x00	; 0
    2304:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_ErrStateSetPinValue>
	DIO_ErrStateSetPinValue(DIO_GroupC,seg1_Gnd,DIO_High);
    2308:	82 e0       	ldi	r24, 0x02	; 2
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	41 e0       	ldi	r20, 0x01	; 1
    230e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_ErrStateSetPinValue>
}
    2312:	cf 91       	pop	r28
    2314:	df 91       	pop	r29
    2316:	08 95       	ret

00002318 <main>:
#include "Apps/App2.h"


void main()
{
    2318:	df 93       	push	r29
    231a:	cf 93       	push	r28
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62

	App2();
    2320:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <App2>

}
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <__prologue_saves__>:
    232a:	2f 92       	push	r2
    232c:	3f 92       	push	r3
    232e:	4f 92       	push	r4
    2330:	5f 92       	push	r5
    2332:	6f 92       	push	r6
    2334:	7f 92       	push	r7
    2336:	8f 92       	push	r8
    2338:	9f 92       	push	r9
    233a:	af 92       	push	r10
    233c:	bf 92       	push	r11
    233e:	cf 92       	push	r12
    2340:	df 92       	push	r13
    2342:	ef 92       	push	r14
    2344:	ff 92       	push	r15
    2346:	0f 93       	push	r16
    2348:	1f 93       	push	r17
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
    2352:	ca 1b       	sub	r28, r26
    2354:	db 0b       	sbc	r29, r27
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	0f be       	out	0x3f, r0	; 63
    235e:	cd bf       	out	0x3d, r28	; 61
    2360:	09 94       	ijmp

00002362 <__epilogue_restores__>:
    2362:	2a 88       	ldd	r2, Y+18	; 0x12
    2364:	39 88       	ldd	r3, Y+17	; 0x11
    2366:	48 88       	ldd	r4, Y+16	; 0x10
    2368:	5f 84       	ldd	r5, Y+15	; 0x0f
    236a:	6e 84       	ldd	r6, Y+14	; 0x0e
    236c:	7d 84       	ldd	r7, Y+13	; 0x0d
    236e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2370:	9b 84       	ldd	r9, Y+11	; 0x0b
    2372:	aa 84       	ldd	r10, Y+10	; 0x0a
    2374:	b9 84       	ldd	r11, Y+9	; 0x09
    2376:	c8 84       	ldd	r12, Y+8	; 0x08
    2378:	df 80       	ldd	r13, Y+7	; 0x07
    237a:	ee 80       	ldd	r14, Y+6	; 0x06
    237c:	fd 80       	ldd	r15, Y+5	; 0x05
    237e:	0c 81       	ldd	r16, Y+4	; 0x04
    2380:	1b 81       	ldd	r17, Y+3	; 0x03
    2382:	aa 81       	ldd	r26, Y+2	; 0x02
    2384:	b9 81       	ldd	r27, Y+1	; 0x01
    2386:	ce 0f       	add	r28, r30
    2388:	d1 1d       	adc	r29, r1
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	ed 01       	movw	r28, r26
    2396:	08 95       	ret

00002398 <_exit>:
    2398:	f8 94       	cli

0000239a <__stop_program>:
    239a:	ff cf       	rjmp	.-2      	; 0x239a <__stop_program>
